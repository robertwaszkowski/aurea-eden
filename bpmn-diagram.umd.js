(function(Ti,M1){typeof exports=="object"&&typeof module<"u"?M1(exports):typeof define=="function"&&define.amd?define(["exports"],M1):(Ti=typeof globalThis<"u"?globalThis:Ti||self,M1(Ti["Aurea EDEN"]={}))})(this,function(Ti){"use strict";/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const M1="172",Xn={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},i1={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},D0=0,ea=1,k0=2,_7=3,y7=0,ta=1,F0=2,Yn=3,s1=0,en=1,Cn=2,r1=0,G1=1,na=2,ia=3,sa=4,U0=5,S1=100,O0=101,B0=102,V0=103,H0=104,G0=200,W0=201,X0=202,Y0=203,Sr=204,br=205,$0=206,Z0=207,j0=208,J0=209,K0=210,Q0=211,e3=212,t3=213,n3=214,Er=0,Tr=1,Ar=2,W1=3,Cr=4,Rr=5,Ir=6,zr=7,fs=0,i3=1,s3=2,o1=0,r3=1,o3=2,a3=3,l3=4,c3=5,h3=6,u3=7,ra="attached",d3="detached",Nr=300,a1=301,b1=302,ps=303,gs=304,Ai=306,xs=1e3,Sn=1001,_s=1002,Bt=1003,oa=1004,v7=1004,Ci=1005,w7=1005,Nt=1006,ys=1007,M7=1007,$n=1008,S7=1008,Zn=1009,aa=1010,la=1011,Ri=1012,Lr=1013,l1=1014,hn=1015,Ii=1016,Pr=1017,Dr=1018,X1=1020,ca=35902,ha=1021,ua=1022,tn=1023,da=1024,qa=1025,Y1=1026,$1=1027,kr=1028,vs=1029,ma=1030,Fr=1031,b7=1032,Ur=1033,ws=33776,Ms=33777,Ss=33778,bs=33779,Or=35840,Br=35841,Vr=35842,Hr=35843,Gr=36196,Wr=37492,Xr=37496,Yr=37808,$r=37809,Zr=37810,jr=37811,Jr=37812,Kr=37813,Qr=37814,e2=37815,t2=37816,n2=37817,i2=37818,s2=37819,r2=37820,o2=37821,Es=36492,a2=36494,l2=36495,fa=36283,c2=36284,h2=36285,u2=36286,q3=2200,m3=2201,f3=2202,Ts=2300,d2=2301,q2=2302,Z1=2400,j1=2401,As=2402,m2=2500,pa=2501,E7=0,T7=1,A7=2,p3=3200,g3=3201,C7=3202,R7=3203,E1=0,x3=1,c1="",nn="srgb",J1="srgb-linear",Cs="linear",dt="srgb",I7=0,K1=7680,z7=7681,N7=7682,L7=7683,P7=34055,D7=34056,k7=5386,F7=512,U7=513,O7=514,B7=515,V7=516,H7=517,G7=518,ga=519,_3=512,y3=513,v3=514,xa=515,w3=516,M3=517,S3=518,b3=519,Rs=35044,W7=35048,X7=35040,Y7=35045,$7=35049,Z7=35041,j7=35046,J7=35050,K7=35042,Q7="100",_a="300 es",Rn=2e3,Is=2001;let jn=class{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,e);e.target=null}}};const Gt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let E3=1234567;const Q1=Math.PI/180,zi=180/Math.PI;function pn(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Gt[r&255]+Gt[r>>8&255]+Gt[r>>16&255]+Gt[r>>24&255]+"-"+Gt[e&255]+Gt[e>>8&255]+"-"+Gt[e>>16&15|64]+Gt[e>>24&255]+"-"+Gt[t&63|128]+Gt[t>>8&255]+"-"+Gt[t>>16&255]+Gt[t>>24&255]+Gt[n&255]+Gt[n>>8&255]+Gt[n>>16&255]+Gt[n>>24&255]).toLowerCase()}function Xe(r,e,t){return Math.max(e,Math.min(t,r))}function ya(r,e){return(r%e+e)%e}function e8(r,e,t,n,i){return n+(r-e)*(i-n)/(t-e)}function t8(r,e,t){return r!==e?(t-r)/(e-r):0}function zs(r,e,t){return(1-t)*r+t*e}function n8(r,e,t,n){return zs(r,e,1-Math.exp(-t*n))}function i8(r,e=1){return e-Math.abs(ya(r,e*2)-e)}function s8(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*(3-2*r))}function r8(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*r*(r*(r*6-15)+10))}function o8(r,e){return r+Math.floor(Math.random()*(e-r+1))}function a8(r,e){return r+Math.random()*(e-r)}function l8(r){return r*(.5-Math.random())}function c8(r){r!==void 0&&(E3=r);let e=E3+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function h8(r){return r*Q1}function u8(r){return r*zi}function d8(r){return(r&r-1)===0&&r!==0}function q8(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function m8(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function f8(r,e,t,n,i){const s=Math.cos,o=Math.sin,a=s(t/2),l=o(t/2),c=s((e+n)/2),h=o((e+n)/2),u=s((e-n)/2),d=o((e-n)/2),q=s((n-e)/2),m=o((n-e)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*m,l*q,a*c);break;case"YXY":r.set(l*q,a*h,l*m,a*c);break;case"ZYZ":r.set(l*m,l*q,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function sn(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function je(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const va={DEG2RAD:Q1,RAD2DEG:zi,generateUUID:pn,clamp:Xe,euclideanModulo:ya,mapLinear:e8,inverseLerp:t8,lerp:zs,damp:n8,pingpong:i8,smoothstep:s8,smootherstep:r8,randInt:o8,randFloat:a8,randFloatSpread:l8,seededRandom:c8,degToRad:h8,radToDeg:u8,isPowerOfTwo:d8,ceilPowerOfTwo:q8,floorPowerOfTwo:m8,setQuaternionFromProperEuler:f8,normalize:je,denormalize:sn};let $=class m7{constructor(e=0,t=0){m7.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Xe(this.x,e.x,t.x),this.y=Xe(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=Xe(this.x,e,t),this.y=Xe(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Xe(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Xe(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,o=this.y-e.y;return this.x=s*n-o*i+e.x,this.y=s*i+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}},Ve=class f7{constructor(e,t,n,i,s,o,a,l,c){f7.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,i,s,o,a,l,c)}set(e,t,n,i,s,o,a,l,c){const h=this.elements;return h[0]=e,h[1]=i,h[2]=a,h[3]=t,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],q=n[5],m=n[8],g=i[0],p=i[3],f=i[6],v=i[1],y=i[4],_=i[7],T=i[2],E=i[5],S=i[8];return s[0]=o*g+a*v+l*T,s[3]=o*p+a*y+l*E,s[6]=o*f+a*_+l*S,s[1]=c*g+h*v+u*T,s[4]=c*p+h*y+u*E,s[7]=c*f+h*_+u*S,s[2]=d*g+q*v+m*T,s[5]=d*p+q*y+m*E,s[8]=d*f+q*_+m*S,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8];return t*o*h-t*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=h*o-a*c,d=a*l-h*s,q=c*s-o*l,m=t*u+n*d+i*q;if(m===0)return this.set(0,0,0,0,0,0,0,0,0);const g=1/m;return e[0]=u*g,e[1]=(i*c-h*n)*g,e[2]=(a*n-i*o)*g,e[3]=d*g,e[4]=(h*t-i*l)*g,e[5]=(i*s-a*t)*g,e[6]=q*g,e[7]=(n*l-c*t)*g,e[8]=(o*t-n*s)*g,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+e,-i*c,i*l,-i*(-c*o+l*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(wa.makeScale(e,t)),this}rotate(e){return this.premultiply(wa.makeRotation(-e)),this}translate(e,t){return this.premultiply(wa.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}};const wa=new Ve;function T3(r){for(let e=r.length-1;e>=0;--e)if(r[e]>=65535)return!0;return!1}const p8={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Ni(r,e){return new p8[r](e)}function Ns(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}function A3(){const r=Ns("canvas");return r.style.display="block",r}const C3={};function Li(r){r in C3||(C3[r]=!0,console.warn(r))}function g8(r,e,t){return new Promise(function(n,i){function s(){switch(r.clientWaitSync(e,r.SYNC_FLUSH_COMMANDS_BIT,0)){case r.WAIT_FAILED:i();break;case r.TIMEOUT_EXPIRED:setTimeout(s,t);break;default:n()}}setTimeout(s,t)})}function x8(r){const e=r.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}function _8(r){const e=r.elements;e[11]===-1?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=-e[14]+1)}const R3=new Ve().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),I3=new Ve().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function y8(){const r={enabled:!0,workingColorSpace:J1,spaces:{},convert:function(i,s,o){return this.enabled===!1||s===o||!s||!o||(this.spaces[s].transfer===dt&&(i.r=h1(i.r),i.g=h1(i.g),i.b=h1(i.b)),this.spaces[s].primaries!==this.spaces[o].primaries&&(i.applyMatrix3(this.spaces[s].toXYZ),i.applyMatrix3(this.spaces[o].fromXYZ)),this.spaces[o].transfer===dt&&(i.r=Pi(i.r),i.g=Pi(i.g),i.b=Pi(i.b))),i},fromWorkingColorSpace:function(i,s){return this.convert(i,this.workingColorSpace,s)},toWorkingColorSpace:function(i,s){return this.convert(i,s,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===c1?Cs:this.spaces[i].transfer},getLuminanceCoefficients:function(i,s=this.workingColorSpace){return i.fromArray(this.spaces[s].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,s,o){return i.copy(this.spaces[s].toXYZ).multiply(this.spaces[o].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return r.define({[J1]:{primaries:e,whitePoint:n,transfer:Cs,toXYZ:R3,fromXYZ:I3,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:nn},outputColorSpaceConfig:{drawingBufferColorSpace:nn}},[nn]:{primaries:e,whitePoint:n,transfer:dt,toXYZ:R3,fromXYZ:I3,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:nn}}}),r}const nt=y8();function h1(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Pi(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let Di;class z3{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{Di===void 0&&(Di=Ns("canvas")),Di.width=e.width,Di.height=e.height;const n=Di.getContext("2d");e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0,e.width,e.height),t=Di}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=Ns("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");n.drawImage(e,0,0,e.width,e.height);const i=n.getImageData(0,0,e.width,e.height),s=i.data;for(let o=0;o<s.length;o++)s[o]=h1(s[o]/255)*255;return n.putImageData(i,0,0),t}else if(e.data){const t=e.data.slice(0);for(let n=0;n<t.length;n++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[n]=Math.floor(h1(t[n]/255)*255):t[n]=h1(t[n]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let v8=0;class ei{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:v8++}),this.uuid=pn(),this.data=e,this.dataReady=!0,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(i!==null){let s;if(Array.isArray(i)){s=[];for(let o=0,a=i.length;o<a;o++)i[o].isDataTexture?s.push(Ma(i[o].image)):s.push(Ma(i[o]))}else s=Ma(i);n.url=s}return t||(e.images[this.uuid]=n),n}}function Ma(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?z3.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let w8=0;class Mt extends jn{constructor(e=Mt.DEFAULT_IMAGE,t=Mt.DEFAULT_MAPPING,n=Sn,i=Sn,s=Nt,o=$n,a=tn,l=Zn,c=Mt.DEFAULT_ANISOTROPY,h=c1){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:w8++}),this.uuid=pn(),this.name="",this.source=new ei(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=n,this.wrapT=i,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new $(0,0),this.repeat=new $(1,1),this.center=new $(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ve,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.renderTarget=e.renderTarget,this.isRenderTargetTexture=e.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),t||(e.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==Nr)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case xs:e.x=e.x-Math.floor(e.x);break;case Sn:e.x=e.x<0?0:1;break;case _s:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case xs:e.y=e.y-Math.floor(e.y);break;case Sn:e.y=e.y<0?0:1;break;case _s:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(e){e===!0&&this.pmremVersion++}}Mt.DEFAULT_IMAGE=null,Mt.DEFAULT_MAPPING=Nr,Mt.DEFAULT_ANISOTROPY=1;let lt=class p7{constructor(e=0,t=0,n=0,i=1){p7.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*t+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*t+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*t+o[7]*n+o[11]*i+o[15]*s,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const l=e.elements,c=l[0],h=l[4],u=l[8],d=l[1],q=l[5],m=l[9],g=l[2],p=l[6],f=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-g)<.01&&Math.abs(m-p)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+g)<.1&&Math.abs(m+p)<.1&&Math.abs(c+q+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const y=(c+1)/2,_=(q+1)/2,T=(f+1)/2,E=(h+d)/4,S=(u+g)/4,I=(m+p)/4;return y>_&&y>T?y<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(y),i=E/n,s=S/n):_>T?_<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(_),n=E/i,s=I/i):T<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(T),n=S/s,i=I/s),this.set(n,i,s,t),this}let v=Math.sqrt((p-m)*(p-m)+(u-g)*(u-g)+(d-h)*(d-h));return Math.abs(v)<.001&&(v=1),this.x=(p-m)/v,this.y=(u-g)/v,this.z=(d-h)/v,this.w=Math.acos((c+q+f-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Xe(this.x,e.x,t.x),this.y=Xe(this.y,e.y,t.y),this.z=Xe(this.z,e.z,t.z),this.w=Xe(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=Xe(this.x,e,t),this.y=Xe(this.y,e,t),this.z=Xe(this.z,e,t),this.w=Xe(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Xe(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}};class f2 extends jn{constructor(e=1,t=1,n={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new lt(0,0,e,t),this.scissorTest=!1,this.viewport=new lt(0,0,e,t);const i={width:e,height:t,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Nt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const s=new Mt(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);s.flipY=!1,s.generateMipmaps=n.generateMipmaps,s.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let a=0;a<o;a++)this.textures[a]=s.clone(),this.textures[a].isRenderTargetTexture=!0,this.textures[a].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(e){this.textures[0]=e}set depthTexture(e){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),e!==null&&(e.renderTarget=this),this._depthTexture=e}get depthTexture(){return this._depthTexture}setSize(e,t,n=1){if(this.width!==e||this.height!==t||this.depth!==n){this.width=e,this.height=t,this.depth=n;for(let i=0,s=this.textures.length;i<s;i++)this.textures[i].image.width=e,this.textures[i].image.height=t,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.textures.length=0;for(let n=0,i=e.textures.length;n<i;n++)this.textures[n]=e.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0,this.textures[n].renderTarget=this;const t=Object.assign({},e.texture.image);return this.texture.source=new ei(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.resolveDepthBuffer=e.resolveDepthBuffer,this.resolveStencilBuffer=e.resolveStencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Jn extends f2{constructor(e=1,t=1,n={}){super(e,t,n),this.isWebGLRenderTarget=!0}}class Ls extends Mt{constructor(e=null,t=1,n=1,i=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Bt,this.minFilter=Bt,this.wrapR=Sn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class M8 extends Jn{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new Ls(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class p2 extends Mt{constructor(e=null,t=1,n=1,i=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:n,depth:i},this.magFilter=Bt,this.minFilter=Bt,this.wrapR=Sn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class S8 extends Jn{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isWebGL3DRenderTarget=!0,this.depth=n,this.texture=new p2(null,e,t,n),this.texture.isRenderTargetTexture=!0}}let Wt=class{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],q=s[o+1],m=s[o+2],g=s[o+3];if(a===0){e[t+0]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u;return}if(a===1){e[t+0]=d,e[t+1]=q,e[t+2]=m,e[t+3]=g;return}if(u!==g||l!==d||c!==q||h!==m){let p=1-a;const f=l*d+c*q+h*m+u*g,v=f>=0?1:-1,y=1-f*f;if(y>Number.EPSILON){const T=Math.sqrt(y),E=Math.atan2(T,f*v);p=Math.sin(p*E)/T,a=Math.sin(a*E)/T}const _=a*v;if(l=l*p+d*_,c=c*p+q*_,h=h*p+m*_,u=u*p+g*_,p===1-a){const T=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=T,c*=T,h*=T,u*=T}}e[t]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],q=s[o+2],m=s[o+3];return e[t]=a*m+h*u+l*q-c*d,e[t+1]=l*m+h*d+c*u-a*q,e[t+2]=c*m+h*q+a*d-l*u,e[t+3]=h*m-a*u-l*d-c*q,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,i=e._y,s=e._z,o=e._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),q=l(i/2),m=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*q*m,this._y=c*q*u-d*h*m,this._z=c*h*m+d*q*u,this._w=c*h*u-d*q*m;break;case"YXZ":this._x=d*h*u+c*q*m,this._y=c*q*u-d*h*m,this._z=c*h*m-d*q*u,this._w=c*h*u+d*q*m;break;case"ZXY":this._x=d*h*u-c*q*m,this._y=c*q*u+d*h*m,this._z=c*h*m+d*q*u,this._w=c*h*u-d*q*m;break;case"ZYX":this._x=d*h*u-c*q*m,this._y=c*q*u+d*h*m,this._z=c*h*m-d*q*u,this._w=c*h*u+d*q*m;break;case"YZX":this._x=d*h*u+c*q*m,this._y=c*q*u+d*h*m,this._z=c*h*m-d*q*u,this._w=c*h*u-d*q*m;break;case"XZY":this._x=d*h*u-c*q*m,this._y=c*q*u-d*h*m,this._z=c*h*m+d*q*u,this._w=c*h*u+d*q*m;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],o=t[1],a=t[5],l=t[9],c=t[2],h=t[6],u=t[10],d=n+a+u;if(d>0){const q=.5/Math.sqrt(d+1);this._w=.25/q,this._x=(h-l)*q,this._y=(s-c)*q,this._z=(o-i)*q}else if(n>a&&n>u){const q=2*Math.sqrt(1+n-a-u);this._w=(h-l)/q,this._x=.25*q,this._y=(i+o)/q,this._z=(s+c)/q}else if(a>u){const q=2*Math.sqrt(1+a-n-u);this._w=(s-c)/q,this._x=(i+o)/q,this._y=.25*q,this._z=(l+h)/q}else{const q=2*Math.sqrt(1+u-n-a);this._w=(o-i)/q,this._x=(s+c)/q,this._y=(l+h)/q,this._z=.25*q}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Xe(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,o=e._w,a=t._x,l=t._y,c=t._z,h=t._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*e._w+n*e._x+i*e._y+s*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const q=1-t;return this._w=q*o+t*this._w,this._x=q*n+t*this._x,this._y=q*i+t*this._y,this._z=q*s+t*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-t)*h)/c,d=Math.sin(t*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),s*Math.sin(t),s*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}},L=class g7{constructor(e=0,t=0,n=0){g7.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(N3.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(N3.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,o=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,o=e.y,a=e.z,l=e.w,c=2*(o*i-a*n),h=2*(a*t-s*i),u=2*(s*n-o*t);return this.x=t+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Xe(this.x,e.x,t.x),this.y=Xe(this.y,e.y,t.y),this.z=Xe(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=Xe(this.x,e,t),this.y=Xe(this.y,e,t),this.z=Xe(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Xe(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,o=t.x,a=t.y,l=t.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return Sa.copy(this).projectOnVector(e),this.sub(Sa)}reflect(e){return this.sub(Sa.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(Xe(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}};const Sa=new L,N3=new Wt;class Vt{constructor(e=new L(1/0,1/0,1/0),t=new L(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t+=3)this.expandByPoint(In.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,n=e.count;t<n;t++)this.expandByPoint(In.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=In.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const n=e.geometry;if(n!==void 0){const s=n.getAttribute("position");if(t===!0&&s!==void 0&&e.isInstancedMesh!==!0)for(let o=0,a=s.count;o<a;o++)e.isMesh===!0?e.getVertexPosition(o,In):In.fromBufferAttribute(s,o),In.applyMatrix4(e.matrixWorld),this.expandByPoint(In);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),g2.copy(e.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),g2.copy(n.boundingBox)),g2.applyMatrix4(e.matrixWorld),this.union(g2)}const i=e.children;for(let s=0,o=i.length;s<o;s++)this.expandByObject(i[s],t);return this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y&&e.z>=this.min.z&&e.z<=this.max.z}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y&&e.max.z>=this.min.z&&e.min.z<=this.max.z}intersectsSphere(e){return this.clampPoint(e.center,In),In.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,n;return e.normal.x>0?(t=e.normal.x*this.min.x,n=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,n=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,n+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,n+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,n+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,n+=e.normal.z*this.min.z),t<=-e.constant&&n>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Ps),x2.subVectors(this.max,Ps),ki.subVectors(e.a,Ps),Fi.subVectors(e.b,Ps),Ui.subVectors(e.c,Ps),T1.subVectors(Fi,ki),A1.subVectors(Ui,Fi),ti.subVectors(ki,Ui);let t=[0,-T1.z,T1.y,0,-A1.z,A1.y,0,-ti.z,ti.y,T1.z,0,-T1.x,A1.z,0,-A1.x,ti.z,0,-ti.x,-T1.y,T1.x,0,-A1.y,A1.x,0,-ti.y,ti.x,0];return!ba(t,ki,Fi,Ui,x2)||(t=[1,0,0,0,1,0,0,0,1],!ba(t,ki,Fi,Ui,x2))?!1:(_2.crossVectors(T1,A1),t=[_2.x,_2.y,_2.z],ba(t,ki,Fi,Ui,x2))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,In).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(In).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(u1[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),u1[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),u1[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),u1[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),u1[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),u1[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),u1[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),u1[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(u1),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const u1=[new L,new L,new L,new L,new L,new L,new L,new L],In=new L,g2=new Vt,ki=new L,Fi=new L,Ui=new L,T1=new L,A1=new L,ti=new L,Ps=new L,x2=new L,_2=new L,ni=new L;function ba(r,e,t,n,i){for(let s=0,o=r.length-3;s<=o;s+=3){ni.fromArray(r,s);const a=i.x*Math.abs(ni.x)+i.y*Math.abs(ni.y)+i.z*Math.abs(ni.z),l=e.dot(ni),c=t.dot(ni),h=n.dot(ni);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const b8=new Vt,Ds=new L,Ea=new L;class Xt{constructor(e=new L,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const n=this.center;t!==void 0?n.copy(t):b8.setFromPoints(e).getCenter(n);let i=0;for(let s=0,o=e.length;s<o;s++)i=Math.max(i,n.distanceToSquared(e[s]));return this.radius=Math.sqrt(i),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const n=this.center.distanceToSquared(e);return t.copy(e),n>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Ds.subVectors(e,this.center);const t=Ds.lengthSq();if(t>this.radius*this.radius){const n=Math.sqrt(t),i=(n-this.radius)*.5;this.center.addScaledVector(Ds,i/n),this.radius+=i}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(Ea.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Ds.copy(e.center).add(Ea)),this.expandByPoint(Ds.copy(e.center).sub(Ea))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const d1=new L,Ta=new L,y2=new L,C1=new L,Aa=new L,v2=new L,Ca=new L;class ii{constructor(e=new L,t=new L(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,d1)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const n=t.dot(this.direction);return n<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=d1.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(d1.copy(this.origin).addScaledVector(this.direction,t),d1.distanceToSquared(e))}distanceSqToSegment(e,t,n,i){Ta.copy(e).add(t).multiplyScalar(.5),y2.copy(t).sub(e).normalize(),C1.copy(this.origin).sub(Ta);const s=e.distanceTo(t)*.5,o=-this.direction.dot(y2),a=C1.dot(this.direction),l=-C1.dot(y2),c=C1.lengthSq(),h=Math.abs(1-o*o);let u,d,q,m;if(h>0)if(u=o*l-a,d=o*a-l,m=s*h,u>=0)if(d>=-m)if(d<=m){const g=1/h;u*=g,d*=g,q=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),q=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),q=-u*u+d*(d+2*l)+c;else d<=-m?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),q=-u*u+d*(d+2*l)+c):d<=m?(u=0,d=Math.min(Math.max(-s,-l),s),q=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),q=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),q=-u*u+d*(d+2*l)+c;return n&&n.copy(this.origin).addScaledVector(this.direction,u),i&&i.copy(Ta).addScaledVector(y2,d),q}intersectSphere(e,t){d1.subVectors(e.center,this.origin);const n=d1.dot(this.direction),i=d1.dot(d1)-n*n,s=e.radius*e.radius;if(i>s)return null;const o=Math.sqrt(s-i),a=n-o,l=n+o;return l<0?null:a<0?this.at(l,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(e.normal)+e.constant)/t;return n>=0?n:null}intersectPlane(e,t){const n=this.distanceToPlane(e);return n===null?null:this.at(n,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let n,i,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(n=(e.min.x-d.x)*c,i=(e.max.x-d.x)*c):(n=(e.max.x-d.x)*c,i=(e.min.x-d.x)*c),h>=0?(s=(e.min.y-d.y)*h,o=(e.max.y-d.y)*h):(s=(e.max.y-d.y)*h,o=(e.min.y-d.y)*h),n>o||s>i||((s>n||isNaN(n))&&(n=s),(o<i||isNaN(i))&&(i=o),u>=0?(a=(e.min.z-d.z)*u,l=(e.max.z-d.z)*u):(a=(e.max.z-d.z)*u,l=(e.min.z-d.z)*u),n>l||a>i)||((a>n||n!==n)&&(n=a),(l<i||i!==i)&&(i=l),i<0)?null:this.at(n>=0?n:i,t)}intersectsBox(e){return this.intersectBox(e,d1)!==null}intersectTriangle(e,t,n,i,s){Aa.subVectors(t,e),v2.subVectors(n,e),Ca.crossVectors(Aa,v2);let o=this.direction.dot(Ca),a;if(o>0){if(i)return null;a=1}else if(o<0)a=-1,o=-o;else return null;C1.subVectors(this.origin,e);const l=a*this.direction.dot(v2.crossVectors(C1,v2));if(l<0)return null;const c=a*this.direction.dot(Aa.cross(C1));if(c<0||l+c>o)return null;const h=-a*C1.dot(Ca);return h<0?null:this.at(h/o,s)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}let Ge=class P0{constructor(e,t,n,i,s,o,a,l,c,h,u,d,q,m,g,p){P0.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,i,s,o,a,l,c,h,u,d,q,m,g,p)}set(e,t,n,i,s,o,a,l,c,h,u,d,q,m,g,p){const f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=i,f[1]=s,f[5]=o,f[9]=a,f[13]=l,f[2]=c,f[6]=h,f[10]=u,f[14]=d,f[3]=q,f[7]=m,f[11]=g,f[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new P0().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/Oi.setFromMatrixColumn(e,0).length(),s=1/Oi.setFromMatrixColumn(e,1).length(),o=1/Oi.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,s=e.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(e.order==="XYZ"){const d=o*h,q=o*u,m=a*h,g=a*u;t[0]=l*h,t[4]=-l*u,t[8]=c,t[1]=q+m*c,t[5]=d-g*c,t[9]=-a*l,t[2]=g-d*c,t[6]=m+q*c,t[10]=o*l}else if(e.order==="YXZ"){const d=l*h,q=l*u,m=c*h,g=c*u;t[0]=d+g*a,t[4]=m*a-q,t[8]=o*c,t[1]=o*u,t[5]=o*h,t[9]=-a,t[2]=q*a-m,t[6]=g+d*a,t[10]=o*l}else if(e.order==="ZXY"){const d=l*h,q=l*u,m=c*h,g=c*u;t[0]=d-g*a,t[4]=-o*u,t[8]=m+q*a,t[1]=q+m*a,t[5]=o*h,t[9]=g-d*a,t[2]=-o*c,t[6]=a,t[10]=o*l}else if(e.order==="ZYX"){const d=o*h,q=o*u,m=a*h,g=a*u;t[0]=l*h,t[4]=m*c-q,t[8]=d*c+g,t[1]=l*u,t[5]=g*c+d,t[9]=q*c-m,t[2]=-c,t[6]=a*l,t[10]=o*l}else if(e.order==="YZX"){const d=o*l,q=o*c,m=a*l,g=a*c;t[0]=l*h,t[4]=g-d*u,t[8]=m*u+q,t[1]=u,t[5]=o*h,t[9]=-a*h,t[2]=-c*h,t[6]=q*u+m,t[10]=d-g*u}else if(e.order==="XZY"){const d=o*l,q=o*c,m=a*l,g=a*c;t[0]=l*h,t[4]=-u,t[8]=c*h,t[1]=d*u+g,t[5]=o*h,t[9]=q*u-m,t[2]=m*u-q,t[6]=a*h,t[10]=g*u+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(E8,e,T8)}lookAt(e,t,n){const i=this.elements;return gn.subVectors(e,t),gn.lengthSq()===0&&(gn.z=1),gn.normalize(),R1.crossVectors(n,gn),R1.lengthSq()===0&&(Math.abs(n.z)===1?gn.x+=1e-4:gn.z+=1e-4,gn.normalize(),R1.crossVectors(n,gn)),R1.normalize(),w2.crossVectors(gn,R1),i[0]=R1.x,i[4]=w2.x,i[8]=gn.x,i[1]=R1.y,i[5]=w2.y,i[9]=gn.y,i[2]=R1.z,i[6]=w2.z,i[10]=gn.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],q=n[13],m=n[2],g=n[6],p=n[10],f=n[14],v=n[3],y=n[7],_=n[11],T=n[15],E=i[0],S=i[4],I=i[8],w=i[12],x=i[1],C=i[5],O=i[9],U=i[13],B=i[2],P=i[6],K=i[10],ie=i[14],H=i[3],fe=i[7],ge=i[11],ve=i[15];return s[0]=o*E+a*x+l*B+c*H,s[4]=o*S+a*C+l*P+c*fe,s[8]=o*I+a*O+l*K+c*ge,s[12]=o*w+a*U+l*ie+c*ve,s[1]=h*E+u*x+d*B+q*H,s[5]=h*S+u*C+d*P+q*fe,s[9]=h*I+u*O+d*K+q*ge,s[13]=h*w+u*U+d*ie+q*ve,s[2]=m*E+g*x+p*B+f*H,s[6]=m*S+g*C+p*P+f*fe,s[10]=m*I+g*O+p*K+f*ge,s[14]=m*w+g*U+p*ie+f*ve,s[3]=v*E+y*x+_*B+T*H,s[7]=v*S+y*C+_*P+T*fe,s[11]=v*I+y*O+_*K+T*ge,s[15]=v*w+y*U+_*ie+T*ve,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],o=e[1],a=e[5],l=e[9],c=e[13],h=e[2],u=e[6],d=e[10],q=e[14],m=e[3],g=e[7],p=e[11],f=e[15];return m*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*q-n*l*q)+g*(+t*l*q-t*c*d+s*o*d-i*o*q+i*c*h-s*l*h)+p*(+t*c*u-t*a*q-s*o*u+n*o*q+s*a*h-n*c*h)+f*(-i*a*h-t*l*u+t*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=e[9],d=e[10],q=e[11],m=e[12],g=e[13],p=e[14],f=e[15],v=u*p*c-g*d*c+g*l*q-a*p*q-u*l*f+a*d*f,y=m*d*c-h*p*c-m*l*q+o*p*q+h*l*f-o*d*f,_=h*g*c-m*u*c+m*a*q-o*g*q-h*a*f+o*u*f,T=m*u*l-h*g*l-m*a*d+o*g*d+h*a*p-o*u*p,E=t*v+n*y+i*_+s*T;if(E===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/E;return e[0]=v*S,e[1]=(g*d*s-u*p*s-g*i*q+n*p*q+u*i*f-n*d*f)*S,e[2]=(a*p*s-g*l*s+g*i*c-n*p*c-a*i*f+n*l*f)*S,e[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*q-n*l*q)*S,e[4]=y*S,e[5]=(h*p*s-m*d*s+m*i*q-t*p*q-h*i*f+t*d*f)*S,e[6]=(m*l*s-o*p*s-m*i*c+t*p*c+o*i*f-t*l*f)*S,e[7]=(o*d*s-h*l*s+h*i*c-t*d*c-o*i*q+t*l*q)*S,e[8]=_*S,e[9]=(m*u*s-h*g*s-m*n*q+t*g*q+h*n*f-t*u*f)*S,e[10]=(o*g*s-m*a*s+m*n*c-t*g*c-o*n*f+t*a*f)*S,e[11]=(h*a*s-o*u*s-h*n*c+t*u*c+o*n*q-t*a*q)*S,e[12]=T*S,e[13]=(h*g*i-m*u*i+m*n*d-t*g*d-h*n*p+t*u*p)*S,e[14]=(m*a*i-o*g*i-m*n*l+t*g*l+o*n*p-t*a*p)*S,e[15]=(o*u*i-h*a*i+h*n*l-t*u*l-o*n*d+t*a*d)*S,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,o=e.x,a=e.y,l=e.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,o){return this.set(1,n,s,0,e,1,o,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,o=t._y,a=t._z,l=t._w,c=s+s,h=o+o,u=a+a,d=s*c,q=s*h,m=s*u,g=o*h,p=o*u,f=a*u,v=l*c,y=l*h,_=l*u,T=n.x,E=n.y,S=n.z;return i[0]=(1-(g+f))*T,i[1]=(q+_)*T,i[2]=(m-y)*T,i[3]=0,i[4]=(q-_)*E,i[5]=(1-(d+f))*E,i[6]=(p+v)*E,i[7]=0,i[8]=(m+y)*S,i[9]=(p-v)*S,i[10]=(1-(d+g))*S,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=Oi.set(i[0],i[1],i[2]).length();const o=Oi.set(i[4],i[5],i[6]).length(),a=Oi.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],zn.copy(this);const c=1/s,h=1/o,u=1/a;return zn.elements[0]*=c,zn.elements[1]*=c,zn.elements[2]*=c,zn.elements[4]*=h,zn.elements[5]*=h,zn.elements[6]*=h,zn.elements[8]*=u,zn.elements[9]*=u,zn.elements[10]*=u,t.setFromRotationMatrix(zn),n.x=s,n.y=o,n.z=a,this}makePerspective(e,t,n,i,s,o,a=Rn){const l=this.elements,c=2*s/(t-e),h=2*s/(n-i),u=(t+e)/(t-e),d=(n+i)/(n-i);let q,m;if(a===Rn)q=-(o+s)/(o-s),m=-2*o*s/(o-s);else if(a===Is)q=-o/(o-s),m=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=q,l[14]=m,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(e,t,n,i,s,o,a=Rn){const l=this.elements,c=1/(t-e),h=1/(n-i),u=1/(o-s),d=(t+e)*c,q=(n+i)*h;let m,g;if(a===Rn)m=(o+s)*u,g=-2*u;else if(a===Is)m=s*u,g=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-q,l[2]=0,l[6]=0,l[10]=g,l[14]=-m,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}};const Oi=new L,zn=new Ge,E8=new L(0,0,0),T8=new L(1,1,1),R1=new L,w2=new L,gn=new L,L3=new Ge,P3=new Wt;class xn{constructor(e=0,t=0,n=0,i=xn.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=n,this._order=i}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,n,i=this._order){return this._x=e,this._y=t,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,n=!0){const i=e.elements,s=i[0],o=i[4],a=i[8],l=i[1],c=i[5],h=i[9],u=i[2],d=i[6],q=i[10];switch(t){case"XYZ":this._y=Math.asin(Xe(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,q),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Xe(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,q),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(Xe(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,q),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Xe(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,q),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(Xe(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,q));break;case"XZY":this._z=Math.asin(-Xe(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,q),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,n===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,n){return L3.makeRotationFromQuaternion(e),this.setFromRotationMatrix(L3,t,n)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return P3.setFromEuler(this),this.setFromQuaternion(P3,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}xn.DEFAULT_ORDER="XYZ";class M2{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let A8=0;const D3=new L,Bi=new Wt,q1=new Ge,S2=new L,ks=new L,C8=new L,R8=new Wt,k3=new L(1,0,0),F3=new L(0,1,0),U3=new L(0,0,1),O3={type:"added"},I8={type:"removed"},Vi={type:"childadded",child:null},Ra={type:"childremoved",child:null};class it extends jn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:A8++}),this.uuid=pn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=it.DEFAULT_UP.clone();const e=new L,t=new xn,n=new Wt,i=new L(1,1,1);function s(){n.setFromEuler(t,!1)}function o(){t.setFromQuaternion(n,void 0,!1)}t._onChange(s),n._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Ge},normalMatrix:{value:new Ve}}),this.matrix=new Ge,this.matrixWorld=new Ge,this.matrixAutoUpdate=it.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=it.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new M2,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return Bi.setFromAxisAngle(e,t),this.quaternion.multiply(Bi),this}rotateOnWorldAxis(e,t){return Bi.setFromAxisAngle(e,t),this.quaternion.premultiply(Bi),this}rotateX(e){return this.rotateOnAxis(k3,e)}rotateY(e){return this.rotateOnAxis(F3,e)}rotateZ(e){return this.rotateOnAxis(U3,e)}translateOnAxis(e,t){return D3.copy(e).applyQuaternion(this.quaternion),this.position.add(D3.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(k3,e)}translateY(e){return this.translateOnAxis(F3,e)}translateZ(e){return this.translateOnAxis(U3,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(q1.copy(this.matrixWorld).invert())}lookAt(e,t,n){e.isVector3?S2.copy(e):S2.set(e,t,n);const i=this.parent;this.updateWorldMatrix(!0,!1),ks.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?q1.lookAt(ks,S2,this.up):q1.lookAt(S2,ks,this.up),this.quaternion.setFromRotationMatrix(q1),i&&(q1.extractRotation(i.matrixWorld),Bi.setFromRotationMatrix(q1),this.quaternion.premultiply(Bi.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.removeFromParent(),e.parent=this,this.children.push(e),e.dispatchEvent(O3),Vi.child=e,this.dispatchEvent(Vi),Vi.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(I8),Ra.child=e,this.dispatchEvent(Ra),Ra.child=null),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),q1.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),q1.multiply(e.parent.matrixWorld)),e.applyMatrix4(q1),e.removeFromParent(),e.parent=this,this.children.push(e),e.updateWorldMatrix(!1,!0),e.dispatchEvent(O3),Vi.child=e,this.dispatchEvent(Vi),Vi.child=null,this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let n=0,i=this.children.length;n<i;n++){const o=this.children[n].getObjectByProperty(e,t);if(o!==void 0)return o}}getObjectsByProperty(e,t,n=[]){this[e]===t&&n.push(this);const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].getObjectsByProperty(e,t,n);return n}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ks,e,C8),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ks,R8,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let n=0,i=t.length;n<i;n++)t[n].updateMatrixWorld(e)}updateWorldMatrix(e,t){const n=this.parent;if(e===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),t===!0){const i=this.children;for(let s=0,o=i.length;s<o;s++)i[s].updateWorldMatrix(!1,!0)}}toJSON(e){const t=e===void 0||typeof e=="string",n={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),i.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(i.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(i.type="BatchedMesh",i.perObjectFrustumCulled=this.perObjectFrustumCulled,i.sortObjects=this.sortObjects,i.drawRanges=this._drawRanges,i.reservedRanges=this._reservedRanges,i.visibility=this._visibility,i.active=this._active,i.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),i.maxInstanceCount=this._maxInstanceCount,i.maxVertexCount=this._maxVertexCount,i.maxIndexCount=this._maxIndexCount,i.geometryInitialized=this._geometryInitialized,i.geometryCount=this._geometryCount,i.matricesTexture=this._matricesTexture.toJSON(e),this._colorsTexture!==null&&(i.colorsTexture=this._colorsTexture.toJSON(e)),this.boundingSphere!==null&&(i.boundingSphere={center:i.boundingSphere.center.toArray(),radius:i.boundingSphere.radius}),this.boundingBox!==null&&(i.boundingBox={min:i.boundingBox.min.toArray(),max:i.boundingBox.max.toArray()}));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(i.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=s(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(e.shapes,u)}else s(e.shapes,l)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(e.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(e.materials,this.material[l]));i.material=a}else i.material=s(e.materials,this.material);if(this.children.length>0){i.children=[];for(let a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){i.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];i.animations.push(s(e.animations,l))}}if(t){const a=o(e.geometries),l=o(e.materials),c=o(e.textures),h=o(e.images),u=o(e.shapes),d=o(e.skeletons),q=o(e.animations),m=o(e.nodes);a.length>0&&(n.geometries=a),l.length>0&&(n.materials=l),c.length>0&&(n.textures=c),h.length>0&&(n.images=h),u.length>0&&(n.shapes=u),d.length>0&&(n.skeletons=d),q.length>0&&(n.animations=q),m.length>0&&(n.nodes=m)}return n.object=i,n;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let n=0;n<e.children.length;n++){const i=e.children[n];this.add(i.clone())}return this}}it.DEFAULT_UP=new L(0,1,0),it.DEFAULT_MATRIX_AUTO_UPDATE=!0,it.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Nn=new L,m1=new L,Ia=new L,f1=new L,Hi=new L,Gi=new L,B3=new L,za=new L,Na=new L,La=new L,Pa=new lt,Da=new lt,ka=new lt;class un{constructor(e=new L,t=new L,n=new L){this.a=e,this.b=t,this.c=n}static getNormal(e,t,n,i){i.subVectors(n,t),Nn.subVectors(e,t),i.cross(Nn);const s=i.lengthSq();return s>0?i.multiplyScalar(1/Math.sqrt(s)):i.set(0,0,0)}static getBarycoord(e,t,n,i,s){Nn.subVectors(i,t),m1.subVectors(n,t),Ia.subVectors(e,t);const o=Nn.dot(Nn),a=Nn.dot(m1),l=Nn.dot(Ia),c=m1.dot(m1),h=m1.dot(Ia),u=o*c-a*a;if(u===0)return s.set(0,0,0),null;const d=1/u,q=(c*l-a*h)*d,m=(o*h-a*l)*d;return s.set(1-q-m,m,q)}static containsPoint(e,t,n,i){return this.getBarycoord(e,t,n,i,f1)===null?!1:f1.x>=0&&f1.y>=0&&f1.x+f1.y<=1}static getInterpolation(e,t,n,i,s,o,a,l){return this.getBarycoord(e,t,n,i,f1)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(s,f1.x),l.addScaledVector(o,f1.y),l.addScaledVector(a,f1.z),l)}static getInterpolatedAttribute(e,t,n,i,s,o){return Pa.setScalar(0),Da.setScalar(0),ka.setScalar(0),Pa.fromBufferAttribute(e,t),Da.fromBufferAttribute(e,n),ka.fromBufferAttribute(e,i),o.setScalar(0),o.addScaledVector(Pa,s.x),o.addScaledVector(Da,s.y),o.addScaledVector(ka,s.z),o}static isFrontFacing(e,t,n,i){return Nn.subVectors(n,t),m1.subVectors(e,t),Nn.cross(m1).dot(i)<0}set(e,t,n){return this.a.copy(e),this.b.copy(t),this.c.copy(n),this}setFromPointsAndIndices(e,t,n,i){return this.a.copy(e[t]),this.b.copy(e[n]),this.c.copy(e[i]),this}setFromAttributeAndIndices(e,t,n,i){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,n),this.c.fromBufferAttribute(e,i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return Nn.subVectors(this.c,this.b),m1.subVectors(this.a,this.b),Nn.cross(m1).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return un.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return un.getBarycoord(e,this.a,this.b,this.c,t)}getInterpolation(e,t,n,i,s){return un.getInterpolation(e,this.a,this.b,this.c,t,n,i,s)}containsPoint(e){return un.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return un.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const n=this.a,i=this.b,s=this.c;let o,a;Hi.subVectors(i,n),Gi.subVectors(s,n),za.subVectors(e,n);const l=Hi.dot(za),c=Gi.dot(za);if(l<=0&&c<=0)return t.copy(n);Na.subVectors(e,i);const h=Hi.dot(Na),u=Gi.dot(Na);if(h>=0&&u<=h)return t.copy(i);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),t.copy(n).addScaledVector(Hi,o);La.subVectors(e,s);const q=Hi.dot(La),m=Gi.dot(La);if(m>=0&&q<=m)return t.copy(s);const g=q*c-l*m;if(g<=0&&c>=0&&m<=0)return a=c/(c-m),t.copy(n).addScaledVector(Gi,a);const p=h*m-q*u;if(p<=0&&u-h>=0&&q-m>=0)return B3.subVectors(s,i),a=(u-h)/(u-h+(q-m)),t.copy(i).addScaledVector(B3,a);const f=1/(p+g+d);return o=g*f,a=d*f,t.copy(n).addScaledVector(Hi,o).addScaledVector(Gi,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const V3={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},I1={h:0,s:0,l:0},b2={h:0,s:0,l:0};function Fa(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}let _e=class{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const i=e;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=nn){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,nt.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=nt.workingColorSpace){return this.r=e,this.g=t,this.b=n,nt.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=nt.workingColorSpace){if(e=ya(e,1),t=Xe(t,0,1),n=Xe(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,o=2*n-s;this.r=Fa(o,s,e+1/3),this.g=Fa(o,s,e),this.b=Fa(o,s,e-1/3)}return nt.toWorkingColorSpace(this,i),this}setStyle(e,t=nn){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(s,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=nn){const n=V3[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=h1(e.r),this.g=h1(e.g),this.b=h1(e.b),this}copyLinearToSRGB(e){return this.r=Pi(e.r),this.g=Pi(e.g),this.b=Pi(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=nn){return nt.fromWorkingColorSpace(Yt.copy(this),e),Math.round(Xe(Yt.r*255,0,255))*65536+Math.round(Xe(Yt.g*255,0,255))*256+Math.round(Xe(Yt.b*255,0,255))}getHexString(e=nn){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=nt.workingColorSpace){nt.fromWorkingColorSpace(Yt.copy(this),t);const n=Yt.r,i=Yt.g,s=Yt.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return e.h=l,e.s=c,e.l=h,e}getRGB(e,t=nt.workingColorSpace){return nt.fromWorkingColorSpace(Yt.copy(this),t),e.r=Yt.r,e.g=Yt.g,e.b=Yt.b,e}getStyle(e=nn){nt.fromWorkingColorSpace(Yt.copy(this),e);const t=Yt.r,n=Yt.g,i=Yt.b;return e!==nn?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(e,t,n){return this.getHSL(I1),this.setHSL(I1.h+e,I1.s+t,I1.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(I1),e.getHSL(b2);const n=zs(I1.h,b2.h,t),i=zs(I1.s,b2.s,t),s=zs(I1.l,b2.l,t);return this.setHSL(n,i,s),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,s=e.elements;return this.r=s[0]*t+s[3]*n+s[6]*i,this.g=s[1]*t+s[4]*n+s[7]*i,this.b=s[2]*t+s[5]*n+s[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}};const Yt=new _e;_e.NAMES=V3;let z8=0;class $t extends jn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:z8++}),this.uuid=pn(),this.name="",this.type="Material",this.blending=G1,this.side=s1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Sr,this.blendDst=br,this.blendEquation=S1,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new _e(0,0,0),this.blendAlpha=0,this.depthFunc=W1,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=ga,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=K1,this.stencilZFail=K1,this.stencilZPass=K1,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const n=e[t];if(n===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const i=this[t];if(i===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[t]=n}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(e).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(e).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==G1&&(n.blending=this.blending),this.side!==s1&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==Sr&&(n.blendSrc=this.blendSrc),this.blendDst!==br&&(n.blendDst=this.blendDst),this.blendEquation!==S1&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==W1&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==ga&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==K1&&(n.stencilFail=this.stencilFail),this.stencilZFail!==K1&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==K1&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function i(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(t){const s=i(e.textures),o=i(e.images);s.length>0&&(n.textures=s),o.length>0&&(n.images=o)}return n}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let n=null;if(t!==null){const i=t.length;n=new Array(i);for(let s=0;s!==i;++s)n[s]=t[s].clone()}return this.clippingPlanes=n,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class z1 extends $t{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new _e(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new xn,this.combine=fs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const p1=N8();function N8(){const r=new ArrayBuffer(4),e=new Float32Array(r),t=new Uint32Array(r),n=new Uint32Array(512),i=new Uint32Array(512);for(let l=0;l<256;++l){const c=l-127;c<-27?(n[l]=0,n[l|256]=32768,i[l]=24,i[l|256]=24):c<-14?(n[l]=1024>>-c-14,n[l|256]=1024>>-c-14|32768,i[l]=-c-1,i[l|256]=-c-1):c<=15?(n[l]=c+15<<10,n[l|256]=c+15<<10|32768,i[l]=13,i[l|256]=13):c<128?(n[l]=31744,n[l|256]=64512,i[l]=24,i[l|256]=24):(n[l]=31744,n[l|256]=64512,i[l]=13,i[l|256]=13)}const s=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let l=1;l<1024;++l){let c=l<<13,h=0;for(;(c&8388608)===0;)c<<=1,h-=8388608;c&=-8388609,h+=947912704,s[l]=c|h}for(let l=1024;l<2048;++l)s[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)o[l]=l<<23;o[31]=1199570944,o[32]=2147483648;for(let l=33;l<63;++l)o[l]=2147483648+(l-32<<23);o[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(a[l]=1024);return{floatView:e,uint32View:t,baseTable:n,shiftTable:i,mantissaTable:s,exponentTable:o,offsetTable:a}}function dn(r){Math.abs(r)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),r=Xe(r,-65504,65504),p1.floatView[0]=r;const e=p1.uint32View[0],t=e>>23&511;return p1.baseTable[t]+((e&8388607)>>p1.shiftTable[t])}function Fs(r){const e=r>>10;return p1.uint32View[0]=p1.mantissaTable[p1.offsetTable[e]+(r&1023)]+p1.exponentTable[e],p1.floatView[0]}const L8={toHalfFloat:dn,fromHalfFloat:Fs},Ct=new L,E2=new $;let qt=class{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=Rs,this.updateRanges=[],this.gpuType=hn,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)E2.fromBufferAttribute(this,t),E2.applyMatrix3(e),this.setXY(t,E2.x,E2.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)Ct.fromBufferAttribute(this,t),Ct.applyMatrix3(e),this.setXYZ(t,Ct.x,Ct.y,Ct.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)Ct.fromBufferAttribute(this,t),Ct.applyMatrix4(e),this.setXYZ(t,Ct.x,Ct.y,Ct.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)Ct.fromBufferAttribute(this,t),Ct.applyNormalMatrix(e),this.setXYZ(t,Ct.x,Ct.y,Ct.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)Ct.fromBufferAttribute(this,t),Ct.transformDirection(e),this.setXYZ(t,Ct.x,Ct.y,Ct.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=sn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=je(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=sn(t,this.array)),t}setX(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=sn(t,this.array)),t}setY(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=sn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=sn(t,this.array)),t}setW(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=je(t,this.array),n=je(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=je(t,this.array),n=je(n,this.array),i=je(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=je(t,this.array),n=je(n,this.array),i=je(i,this.array),s=je(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Rs&&(e.usage=this.usage),e}};class P8 extends qt{constructor(e,t,n){super(new Int8Array(e),t,n)}}class D8 extends qt{constructor(e,t,n){super(new Uint8Array(e),t,n)}}class k8 extends qt{constructor(e,t,n){super(new Uint8ClampedArray(e),t,n)}}class F8 extends qt{constructor(e,t,n){super(new Int16Array(e),t,n)}}class Ua extends qt{constructor(e,t,n){super(new Uint16Array(e),t,n)}}class U8 extends qt{constructor(e,t,n){super(new Int32Array(e),t,n)}}class Oa extends qt{constructor(e,t,n){super(new Uint32Array(e),t,n)}}class O8 extends qt{constructor(e,t,n){super(new Uint16Array(e),t,n),this.isFloat16BufferAttribute=!0}getX(e){let t=Fs(this.array[e*this.itemSize]);return this.normalized&&(t=sn(t,this.array)),t}setX(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize]=dn(t),this}getY(e){let t=Fs(this.array[e*this.itemSize+1]);return this.normalized&&(t=sn(t,this.array)),t}setY(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize+1]=dn(t),this}getZ(e){let t=Fs(this.array[e*this.itemSize+2]);return this.normalized&&(t=sn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize+2]=dn(t),this}getW(e){let t=Fs(this.array[e*this.itemSize+3]);return this.normalized&&(t=sn(t,this.array)),t}setW(e,t){return this.normalized&&(t=je(t,this.array)),this.array[e*this.itemSize+3]=dn(t),this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=je(t,this.array),n=je(n,this.array)),this.array[e+0]=dn(t),this.array[e+1]=dn(n),this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=je(t,this.array),n=je(n,this.array),i=je(i,this.array)),this.array[e+0]=dn(t),this.array[e+1]=dn(n),this.array[e+2]=dn(i),this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=je(t,this.array),n=je(n,this.array),i=je(i,this.array),s=je(s,this.array)),this.array[e+0]=dn(t),this.array[e+1]=dn(n),this.array[e+2]=dn(i),this.array[e+3]=dn(s),this}}class ze extends qt{constructor(e,t,n){super(new Float32Array(e),t,n)}}let B8=0;const bn=new Ge,Ba=new it,Wi=new L,_n=new Vt,Us=new Vt,Ut=new L;class Ze extends jn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:B8++}),this.uuid=pn(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(T3(e)?Oa:Ua)(e,1):this.index=e,this}setIndirect(e){return this.indirect=e,this}getIndirect(){return this.indirect}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,n=0){this.groups.push({start:e,count:t,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const s=new Ve().getNormalMatrix(e);n.applyNormalMatrix(s),n.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(e),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return bn.makeRotationFromQuaternion(e),this.applyMatrix4(bn),this}rotateX(e){return bn.makeRotationX(e),this.applyMatrix4(bn),this}rotateY(e){return bn.makeRotationY(e),this.applyMatrix4(bn),this}rotateZ(e){return bn.makeRotationZ(e),this.applyMatrix4(bn),this}translate(e,t,n){return bn.makeTranslation(e,t,n),this.applyMatrix4(bn),this}scale(e,t,n){return bn.makeScale(e,t,n),this.applyMatrix4(bn),this}lookAt(e){return Ba.lookAt(e),Ba.updateMatrix(),this.applyMatrix4(Ba.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Wi).negate(),this.translate(Wi.x,Wi.y,Wi.z),this}setFromPoints(e){const t=this.getAttribute("position");if(t===void 0){const n=[];for(let i=0,s=e.length;i<s;i++){const o=e[i];n.push(o.x,o.y,o.z||0)}this.setAttribute("position",new ze(n,3))}else{const n=Math.min(e.length,t.count);for(let i=0;i<n;i++){const s=e[i];t.setXYZ(i,s.x,s.y,s.z||0)}e.length>t.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),t.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Vt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new L(-1/0,-1/0,-1/0),new L(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let n=0,i=t.length;n<i;n++){const s=t[n];_n.setFromBufferAttribute(s),this.morphTargetsRelative?(Ut.addVectors(this.boundingBox.min,_n.min),this.boundingBox.expandByPoint(Ut),Ut.addVectors(this.boundingBox.max,_n.max),this.boundingBox.expandByPoint(Ut)):(this.boundingBox.expandByPoint(_n.min),this.boundingBox.expandByPoint(_n.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Xt);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new L,1/0);return}if(e){const n=this.boundingSphere.center;if(_n.setFromBufferAttribute(e),t)for(let s=0,o=t.length;s<o;s++){const a=t[s];Us.setFromBufferAttribute(a),this.morphTargetsRelative?(Ut.addVectors(_n.min,Us.min),_n.expandByPoint(Ut),Ut.addVectors(_n.max,Us.max),_n.expandByPoint(Ut)):(_n.expandByPoint(Us.min),_n.expandByPoint(Us.max))}_n.getCenter(n);let i=0;for(let s=0,o=e.count;s<o;s++)Ut.fromBufferAttribute(e,s),i=Math.max(i,n.distanceToSquared(Ut));if(t)for(let s=0,o=t.length;s<o;s++){const a=t[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)Ut.fromBufferAttribute(a,c),l&&(Wi.fromBufferAttribute(e,c),Ut.add(Wi)),i=Math.max(i,n.distanceToSquared(Ut))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.position,i=t.normal,s=t.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new qt(new Float32Array(4*n.count),4));const o=this.getAttribute("tangent"),a=[],l=[];for(let I=0;I<n.count;I++)a[I]=new L,l[I]=new L;const c=new L,h=new L,u=new L,d=new $,q=new $,m=new $,g=new L,p=new L;function f(I,w,x){c.fromBufferAttribute(n,I),h.fromBufferAttribute(n,w),u.fromBufferAttribute(n,x),d.fromBufferAttribute(s,I),q.fromBufferAttribute(s,w),m.fromBufferAttribute(s,x),h.sub(c),u.sub(c),q.sub(d),m.sub(d);const C=1/(q.x*m.y-m.x*q.y);isFinite(C)&&(g.copy(h).multiplyScalar(m.y).addScaledVector(u,-q.y).multiplyScalar(C),p.copy(u).multiplyScalar(q.x).addScaledVector(h,-m.x).multiplyScalar(C),a[I].add(g),a[w].add(g),a[x].add(g),l[I].add(p),l[w].add(p),l[x].add(p))}let v=this.groups;v.length===0&&(v=[{start:0,count:e.count}]);for(let I=0,w=v.length;I<w;++I){const x=v[I],C=x.start,O=x.count;for(let U=C,B=C+O;U<B;U+=3)f(e.getX(U+0),e.getX(U+1),e.getX(U+2))}const y=new L,_=new L,T=new L,E=new L;function S(I){T.fromBufferAttribute(i,I),E.copy(T);const w=a[I];y.copy(w),y.sub(T.multiplyScalar(T.dot(w))).normalize(),_.crossVectors(E,w);const C=_.dot(l[I])<0?-1:1;o.setXYZW(I,y.x,y.y,y.z,C)}for(let I=0,w=v.length;I<w;++I){const x=v[I],C=x.start,O=x.count;for(let U=C,B=C+O;U<B;U+=3)S(e.getX(U+0)),S(e.getX(U+1)),S(e.getX(U+2))}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new qt(new Float32Array(t.count*3),3),this.setAttribute("normal",n);else for(let d=0,q=n.count;d<q;d++)n.setXYZ(d,0,0,0);const i=new L,s=new L,o=new L,a=new L,l=new L,c=new L,h=new L,u=new L;if(e)for(let d=0,q=e.count;d<q;d+=3){const m=e.getX(d+0),g=e.getX(d+1),p=e.getX(d+2);i.fromBufferAttribute(t,m),s.fromBufferAttribute(t,g),o.fromBufferAttribute(t,p),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),a.fromBufferAttribute(n,m),l.fromBufferAttribute(n,g),c.fromBufferAttribute(n,p),a.add(h),l.add(h),c.add(h),n.setXYZ(m,a.x,a.y,a.z),n.setXYZ(g,l.x,l.y,l.z),n.setXYZ(p,c.x,c.y,c.z)}else for(let d=0,q=t.count;d<q;d+=3)i.fromBufferAttribute(t,d+0),s.fromBufferAttribute(t,d+1),o.fromBufferAttribute(t,d+2),h.subVectors(o,s),u.subVectors(i,s),h.cross(u),n.setXYZ(d+0,h.x,h.y,h.z),n.setXYZ(d+1,h.x,h.y,h.z),n.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,n=e.count;t<n;t++)Ut.fromBufferAttribute(e,t),Ut.normalize(),e.setXYZ(t,Ut.x,Ut.y,Ut.z)}toNonIndexed(){function e(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let q=0,m=0;for(let g=0,p=l.length;g<p;g++){a.isInterleavedBufferAttribute?q=l[g]*a.data.stride+a.offset:q=l[g]*h;for(let f=0;f<h;f++)d[m++]=c[q++]}return new qt(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Ze,n=this.index.array,i=this.attributes;for(const a in i){const l=i[a],c=e(l,n);t.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],q=e(d,n);l.push(q)}t.morphAttributes[a]=l}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(e[c]=l[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const n=this.attributes;for(const l in n){const c=n[l];e.data.attributes[l]=c.toJSON(e.data)}const i={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const q=c[u];h.push(q.toJSON(e.data))}h.length>0&&(i[l]=h,s=!0)}s&&(e.data.morphAttributes=i,e.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(e.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const n=e.index;n!==null&&this.setIndex(n.clone(t));const i=e.attributes;for(const c in i){const h=i[c];this.setAttribute(c,h.clone(t))}const s=e.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,q=u.length;d<q;d++)h.push(u[d].clone(t));this.morphAttributes[c]=h}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const H3=new Ge,si=new ii,T2=new Xt,G3=new L,A2=new L,C2=new L,R2=new L,Va=new L,I2=new L,W3=new L,z2=new L;class St extends it{constructor(e=new Ze,t=new z1){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}getVertexPosition(e,t){const n=this.geometry,i=n.attributes.position,s=n.morphAttributes.position,o=n.morphTargetsRelative;t.fromBufferAttribute(i,e);const a=this.morphTargetInfluences;if(s&&a){I2.set(0,0,0);for(let l=0,c=s.length;l<c;l++){const h=a[l],u=s[l];h!==0&&(Va.fromBufferAttribute(u,e),o?I2.addScaledVector(Va,h):I2.addScaledVector(Va.sub(t),h))}t.add(I2)}return t}raycast(e,t){const n=this.geometry,i=this.material,s=this.matrixWorld;i!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),T2.copy(n.boundingSphere),T2.applyMatrix4(s),si.copy(e.ray).recast(e.near),!(T2.containsPoint(si.origin)===!1&&(si.intersectSphere(T2,G3)===null||si.origin.distanceToSquared(G3)>(e.far-e.near)**2))&&(H3.copy(s).invert(),si.copy(e.ray).applyMatrix4(H3),!(n.boundingBox!==null&&si.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(e,t,si)))}_computeIntersections(e,t,n){let i;const s=this.geometry,o=this.material,a=s.index,l=s.attributes.position,c=s.attributes.uv,h=s.attributes.uv1,u=s.attributes.normal,d=s.groups,q=s.drawRange;if(a!==null)if(Array.isArray(o))for(let m=0,g=d.length;m<g;m++){const p=d[m],f=o[p.materialIndex],v=Math.max(p.start,q.start),y=Math.min(a.count,Math.min(p.start+p.count,q.start+q.count));for(let _=v,T=y;_<T;_+=3){const E=a.getX(_),S=a.getX(_+1),I=a.getX(_+2);i=N2(this,f,e,n,c,h,u,E,S,I),i&&(i.faceIndex=Math.floor(_/3),i.face.materialIndex=p.materialIndex,t.push(i))}}else{const m=Math.max(0,q.start),g=Math.min(a.count,q.start+q.count);for(let p=m,f=g;p<f;p+=3){const v=a.getX(p),y=a.getX(p+1),_=a.getX(p+2);i=N2(this,o,e,n,c,h,u,v,y,_),i&&(i.faceIndex=Math.floor(p/3),t.push(i))}}else if(l!==void 0)if(Array.isArray(o))for(let m=0,g=d.length;m<g;m++){const p=d[m],f=o[p.materialIndex],v=Math.max(p.start,q.start),y=Math.min(l.count,Math.min(p.start+p.count,q.start+q.count));for(let _=v,T=y;_<T;_+=3){const E=_,S=_+1,I=_+2;i=N2(this,f,e,n,c,h,u,E,S,I),i&&(i.faceIndex=Math.floor(_/3),i.face.materialIndex=p.materialIndex,t.push(i))}}else{const m=Math.max(0,q.start),g=Math.min(l.count,q.start+q.count);for(let p=m,f=g;p<f;p+=3){const v=p,y=p+1,_=p+2;i=N2(this,o,e,n,c,h,u,v,y,_),i&&(i.faceIndex=Math.floor(p/3),t.push(i))}}}}function V8(r,e,t,n,i,s,o,a){let l;if(e.side===en?l=n.intersectTriangle(o,s,i,!0,a):l=n.intersectTriangle(i,s,o,e.side===s1,a),l===null)return null;z2.copy(a),z2.applyMatrix4(r.matrixWorld);const c=t.ray.origin.distanceTo(z2);return c<t.near||c>t.far?null:{distance:c,point:z2.clone(),object:r}}function N2(r,e,t,n,i,s,o,a,l,c){r.getVertexPosition(a,A2),r.getVertexPosition(l,C2),r.getVertexPosition(c,R2);const h=V8(r,e,t,n,A2,C2,R2,W3);if(h){const u=new L;un.getBarycoord(W3,A2,C2,R2,u),i&&(h.uv=un.getInterpolatedAttribute(i,a,l,c,u,new $)),s&&(h.uv1=un.getInterpolatedAttribute(s,a,l,c,u,new $)),o&&(h.normal=un.getInterpolatedAttribute(o,a,l,c,u,new L),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const d={a,b:l,c,normal:new L,materialIndex:0};un.getNormal(A2,C2,R2,d.normal),h.face=d,h.barycoord=u}return h}class N1 extends Ze{constructor(e=1,t=1,n=1,i=1,s=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:n,widthSegments:i,heightSegments:s,depthSegments:o};const a=this;i=Math.floor(i),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,q=0;m("z","y","x",-1,-1,n,t,e,o,s,0),m("z","y","x",1,-1,n,t,-e,o,s,1),m("x","z","y",1,1,e,n,t,i,o,2),m("x","z","y",1,-1,e,n,-t,i,o,3),m("x","y","z",1,-1,e,t,n,i,s,4),m("x","y","z",-1,-1,e,t,-n,i,s,5),this.setIndex(l),this.setAttribute("position",new ze(c,3)),this.setAttribute("normal",new ze(h,3)),this.setAttribute("uv",new ze(u,2));function m(g,p,f,v,y,_,T,E,S,I,w){const x=_/S,C=T/I,O=_/2,U=T/2,B=E/2,P=S+1,K=I+1;let ie=0,H=0;const fe=new L;for(let ge=0;ge<K;ge++){const ve=ge*C-U;for(let De=0;De<P;De++){const ke=De*x-O;fe[g]=ke*v,fe[p]=ve*y,fe[f]=B,c.push(fe.x,fe.y,fe.z),fe[g]=0,fe[p]=0,fe[f]=E>0?1:-1,h.push(fe.x,fe.y,fe.z),u.push(De/S),u.push(1-ge/I),ie+=1}}for(let ge=0;ge<I;ge++)for(let ve=0;ve<S;ve++){const De=d+ve+P*ge,ke=d+ve+P*(ge+1),F=d+(ve+1)+P*(ge+1),D=d+(ve+1)+P*ge;l.push(De,ke,D),l.push(ke,F,D),H+=6}a.addGroup(q,H,w),q+=H,d+=ie}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new N1(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Xi(r){const e={};for(const t in r){e[t]={};for(const n in r[t]){const i=r[t][n];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture||i.isQuaternion)?i.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][n]=null):e[t][n]=i.clone():Array.isArray(i)?e[t][n]=i.slice():e[t][n]=i}}return e}function rn(r){const e={};for(let t=0;t<r.length;t++){const n=Xi(r[t]);for(const i in n)e[i]=n[i]}return e}function H8(r){const e=[];for(let t=0;t<r.length;t++)e.push(r[t].clone());return e}function X3(r){const e=r.getRenderTarget();return e===null?r.outputColorSpace:e.isXRRenderTarget===!0?e.texture.colorSpace:nt.workingColorSpace}const Y3={clone:Xi,merge:rn};var G8=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,W8=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class Ln extends $t{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=G8,this.fragmentShader=W8,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Xi(e.uniforms),this.uniformsGroups=H8(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const o=this.uniforms[i].value;o&&o.isTexture?t.uniforms[i]={type:"t",value:o.toJSON(e).uuid}:o&&o.isColor?t.uniforms[i]={type:"c",value:o.getHex()}:o&&o.isVector2?t.uniforms[i]={type:"v2",value:o.toArray()}:o&&o.isVector3?t.uniforms[i]={type:"v3",value:o.toArray()}:o&&o.isVector4?t.uniforms[i]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?t.uniforms[i]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?t.uniforms[i]={type:"m4",value:o.toArray()}:t.uniforms[i]={value:o}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const n={};for(const i in this.extensions)this.extensions[i]===!0&&(n[i]=!0);return Object.keys(n).length>0&&(t.extensions=n),t}}class L2 extends it{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Ge,this.projectionMatrix=new Ge,this.projectionMatrixInverse=new Ge,this.coordinateSystem=Rn}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const L1=new L,$3=new $,Z3=new $;class Ot extends L2{constructor(e=50,t=1,n=.1,i=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=zi*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Q1*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return zi*2*Math.atan(Math.tan(Q1*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(e,t,n){L1.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),t.set(L1.x,L1.y).multiplyScalar(-e/L1.z),L1.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(L1.x,L1.y).multiplyScalar(-e/L1.z)}getViewSize(e,t){return this.getViewBounds(e,$3,Z3),t.subVectors(Z3,$3)}setViewOffset(e,t,n,i,s,o){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(Q1*.5*this.fov)/this.zoom,n=2*t,i=this.aspect*n,s=-.5*i;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*i/l,t-=o.offsetY*n/c,i*=o.width/l,n*=o.height/c}const a=this.filmOffset;a!==0&&(s+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+i,t,t-n,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const Yi=-90,$i=1;class j3 extends it{constructor(e,t,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const i=new Ot(Yi,$i,e,t);i.layers=this.layers,this.add(i);const s=new Ot(Yi,$i,e,t);s.layers=this.layers,this.add(s);const o=new Ot(Yi,$i,e,t);o.layers=this.layers,this.add(o);const a=new Ot(Yi,$i,e,t);a.layers=this.layers,this.add(a);const l=new Ot(Yi,$i,e,t);l.layers=this.layers,this.add(l);const c=new Ot(Yi,$i,e,t);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[n,i,s,o,a,l]=t;for(const c of t)this.remove(c);if(e===Rn)n.up.set(0,1,0),n.lookAt(1,0,0),i.up.set(0,1,0),i.lookAt(-1,0,0),s.up.set(0,0,-1),s.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(e===Is)n.up.set(0,-1,0),n.lookAt(-1,0,0),i.up.set(0,-1,0),i.lookAt(1,0,0),s.up.set(0,0,1),s.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const c of t)this.add(c),c.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[s,o,a,l,c,h]=this.children,u=e.getRenderTarget(),d=e.getActiveCubeFace(),q=e.getActiveMipmapLevel(),m=e.xr.enabled;e.xr.enabled=!1;const g=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,e.setRenderTarget(n,0,i),e.render(t,s),e.setRenderTarget(n,1,i),e.render(t,o),e.setRenderTarget(n,2,i),e.render(t,a),e.setRenderTarget(n,3,i),e.render(t,l),e.setRenderTarget(n,4,i),e.render(t,c),n.texture.generateMipmaps=g,e.setRenderTarget(n,5,i),e.render(t,h),e.setRenderTarget(u,d,q),e.xr.enabled=m,n.texture.needsPMREMUpdate=!0}}class Os extends Mt{constructor(e,t,n,i,s,o,a,l,c,h){e=e!==void 0?e:[],t=t!==void 0?t:a1,super(e,t,n,i,s,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class J3 extends Jn{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const n={width:e,height:e,depth:1},i=[n,n,n,n,n,n];this.texture=new Os(i,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Nt}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},i=new N1(5,5,5),s=new Ln({name:"CubemapFromEquirect",uniforms:Xi(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:en,blending:r1});s.uniforms.tEquirect.value=t;const o=new St(i,s),a=t.minFilter;return t.minFilter===$n&&(t.minFilter=Nt),new j3(1,10,this).update(e,o),t.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(e,t,n,i){const s=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,n,i);e.setRenderTarget(s)}}class P2{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new _e(e),this.density=t}clone(){return new P2(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class D2{constructor(e,t=1,n=1e3){this.isFog=!0,this.name="",this.color=new _e(e),this.near=t,this.far=n}clone(){return new D2(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Ha extends it{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new xn,this.environmentIntensity=1,this.environmentRotation=new xn,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,this.backgroundRotation.copy(e.backgroundRotation),this.environmentIntensity=e.environmentIntensity,this.environmentRotation.copy(e.environmentRotation),e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(t.object.environmentIntensity=this.environmentIntensity),t.object.environmentRotation=this.environmentRotation.toArray(),t}}let k2=class{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Rs,this.updateRanges=[],this.version=0,this.uuid=pn()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=pn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=pn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}};const on=new L;let Bs=class x7{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)on.fromBufferAttribute(this,t),on.applyMatrix4(e),this.setXYZ(t,on.x,on.y,on.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)on.fromBufferAttribute(this,t),on.applyNormalMatrix(e),this.setXYZ(t,on.x,on.y,on.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)on.fromBufferAttribute(this,t),on.transformDirection(e),this.setXYZ(t,on.x,on.y,on.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=sn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=je(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=je(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=je(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=je(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=je(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=sn(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=sn(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=sn(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=sn(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=je(t,this.array),n=je(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=je(t,this.array),n=je(n,this.array),i=je(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=je(t,this.array),n=je(n,this.array),i=je(i,this.array),s=je(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new qt(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new x7(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}};class Ga extends $t{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new _e(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let Zi;const Vs=new L,ji=new L,Ji=new L,Ki=new $,Hs=new $,K3=new Ge,F2=new L,Gs=new L,U2=new L,Q3=new $,Wa=new $,el=new $;class tl extends it{constructor(e=new Ga){if(super(),this.isSprite=!0,this.type="Sprite",Zi===void 0){Zi=new Ze;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),n=new k2(t,5);Zi.setIndex([0,1,2,0,2,3]),Zi.setAttribute("position",new Bs(n,3,0,!1)),Zi.setAttribute("uv",new Bs(n,2,3,!1))}this.geometry=Zi,this.material=e,this.center=new $(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ji.setFromMatrixScale(this.matrixWorld),K3.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),Ji.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&ji.multiplyScalar(-Ji.z);const n=this.material.rotation;let i,s;n!==0&&(s=Math.cos(n),i=Math.sin(n));const o=this.center;O2(F2.set(-.5,-.5,0),Ji,o,ji,i,s),O2(Gs.set(.5,-.5,0),Ji,o,ji,i,s),O2(U2.set(.5,.5,0),Ji,o,ji,i,s),Q3.set(0,0),Wa.set(1,0),el.set(1,1);let a=e.ray.intersectTriangle(F2,Gs,U2,!1,Vs);if(a===null&&(O2(Gs.set(-.5,.5,0),Ji,o,ji,i,s),Wa.set(0,1),a=e.ray.intersectTriangle(F2,U2,Gs,!1,Vs),a===null))return;const l=e.ray.origin.distanceTo(Vs);l<e.near||l>e.far||t.push({distance:l,point:Vs.clone(),uv:un.getInterpolation(Vs,F2,Gs,U2,Q3,Wa,el,new $),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function O2(r,e,t,n,i,s){Ki.subVectors(r,t).addScalar(.5).multiply(n),i!==void 0?(Hs.x=s*Ki.x-i*Ki.y,Hs.y=i*Ki.x+s*Ki.y):Hs.copy(Ki),r.copy(e),r.x+=Hs.x,r.y+=Hs.y,r.applyMatrix4(K3)}const B2=new L,nl=new L;class il extends it{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let n=0,i=t.length;n<i;n++){const s=t[n];this.addLevel(s.object.clone(),s.distance,s.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0,n=0){t=Math.abs(t);const i=this.levels;let s;for(s=0;s<i.length&&!(t<i[s].distance);s++);return i.splice(s,0,{distance:t,hysteresis:n,object:e}),this.add(e),this}removeLevel(e){const t=this.levels;for(let n=0;n<t.length;n++)if(t[n].distance===e){const i=t.splice(n,1);return this.remove(i[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let n,i;for(n=1,i=t.length;n<i;n++){let s=t[n].distance;if(t[n].object.visible&&(s-=s*t[n].hysteresis),e<s)break}return t[n-1].object}return null}raycast(e,t){if(this.levels.length>0){B2.setFromMatrixPosition(this.matrixWorld);const i=e.ray.origin.distanceTo(B2);this.getObjectForDistance(i).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){B2.setFromMatrixPosition(e.matrixWorld),nl.setFromMatrixPosition(this.matrixWorld);const n=B2.distanceTo(nl)/e.zoom;t[0].object.visible=!0;let i,s;for(i=1,s=t.length;i<s;i++){let o=t[i].distance;if(t[i].object.visible&&(o-=o*t[i].hysteresis),n>=o)t[i-1].object.visible=!1,t[i].object.visible=!0;else break}for(this._currentLevel=i-1;i<s;i++)t[i].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const n=this.levels;for(let i=0,s=n.length;i<s;i++){const o=n[i];t.object.levels.push({object:o.object.uuid,distance:o.distance,hysteresis:o.hysteresis})}return t}}const sl=new L,rl=new lt,ol=new lt,X8=new L,al=new Ge,V2=new L,Xa=new Xt,ll=new Ge,Ya=new ii;class cl extends St{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=ra,this.bindMatrix=new Ge,this.bindMatrixInverse=new Ge,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new Vt),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,V2),this.boundingBox.expandByPoint(V2)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new Xt),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let n=0;n<t.count;n++)this.getVertexPosition(n,V2),this.boundingSphere.expandByPoint(V2)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const n=this.material,i=this.matrixWorld;n!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Xa.copy(this.boundingSphere),Xa.applyMatrix4(i),e.ray.intersectsSphere(Xa)!==!1&&(ll.copy(i).invert(),Ya.copy(e.ray).applyMatrix4(ll),!(this.boundingBox!==null&&Ya.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,Ya)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new lt,t=this.geometry.attributes.skinWeight;for(let n=0,i=t.count;n<i;n++){e.fromBufferAttribute(t,n);const s=1/e.manhattanLength();s!==1/0?e.multiplyScalar(s):e.set(1,0,0,0),t.setXYZW(n,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===ra?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===d3?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const n=this.skeleton,i=this.geometry;rl.fromBufferAttribute(i.attributes.skinIndex,e),ol.fromBufferAttribute(i.attributes.skinWeight,e),sl.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let s=0;s<4;s++){const o=ol.getComponent(s);if(o!==0){const a=rl.getComponent(s);al.multiplyMatrices(n.bones[a].matrixWorld,n.boneInverses[a]),t.addScaledVector(X8.copy(sl).applyMatrix4(al),o)}}return t.applyMatrix4(this.bindMatrixInverse)}}class $a extends it{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Kn extends Mt{constructor(e=null,t=1,n=1,i,s,o,a,l,c=Bt,h=Bt,u,d){super(null,o,a,l,c,h,i,s,u,d),this.isDataTexture=!0,this.image={data:e,width:t,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const hl=new Ge,Y8=new Ge;class H2{constructor(e=[],t=[]){this.uuid=pn(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let n=0,i=this.bones.length;n<i;n++)this.boneInverses.push(new Ge)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const n=new Ge;this.bones[e]&&n.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(n)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&n.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const n=this.bones[e];n&&(n.parent&&n.parent.isBone?(n.matrix.copy(n.parent.matrixWorld).invert(),n.matrix.multiply(n.matrixWorld)):n.matrix.copy(n.matrixWorld),n.matrix.decompose(n.position,n.quaternion,n.scale))}}update(){const e=this.bones,t=this.boneInverses,n=this.boneMatrices,i=this.boneTexture;for(let s=0,o=e.length;s<o;s++){const a=e[s]?e[s].matrixWorld:Y8;hl.multiplyMatrices(a,t[s]),hl.toArray(n,s*16)}i!==null&&(i.needsUpdate=!0)}clone(){return new H2(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const n=new Kn(t,e,e,tn,hn);return n.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=n,this}getBoneByName(e){for(let t=0,n=this.bones.length;t<n;t++){const i=this.bones[t];if(i.name===e)return i}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let n=0,i=e.bones.length;n<i;n++){const s=e.bones[n];let o=t[s];o===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",s),o=new $a),this.bones.push(o),this.boneInverses.push(new Ge().fromArray(e.boneInverses[n]))}return this.init(),this}toJSON(){const e={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,n=this.boneInverses;for(let i=0,s=t.length;i<s;i++){const o=t[i];e.bones.push(o.uuid);const a=n[i];e.boneInverses.push(a.toArray())}return e}}class Qi extends qt{constructor(e,t,n,i=1){super(e,t,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const es=new Ge,ul=new Ge,G2=[],dl=new Vt,$8=new Ge,Ws=new St,Xs=new Xt;class ql extends St{constructor(e,t,n){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new Qi(new Float32Array(n*16),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let i=0;i<n;i++)this.setMatrixAt(i,$8)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new Vt),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,es),dl.copy(e.boundingBox).applyMatrix4(es),this.boundingBox.union(dl)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new Xt),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let n=0;n<t;n++)this.getMatrixAt(n,es),Xs.copy(e.boundingSphere).applyMatrix4(es),this.boundingSphere.union(Xs)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.morphTexture!==null&&(this.morphTexture=e.morphTexture.clone()),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}getMorphAt(e,t){const n=t.morphTargetInfluences,i=this.morphTexture.source.data.data,s=n.length+1,o=e*s+1;for(let a=0;a<n.length;a++)n[a]=i[o+a]}raycast(e,t){const n=this.matrixWorld,i=this.count;if(Ws.geometry=this.geometry,Ws.material=this.material,Ws.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Xs.copy(this.boundingSphere),Xs.applyMatrix4(n),e.ray.intersectsSphere(Xs)!==!1))for(let s=0;s<i;s++){this.getMatrixAt(s,es),ul.multiplyMatrices(n,es),Ws.matrixWorld=ul,Ws.raycast(e,G2);for(let o=0,a=G2.length;o<a;o++){const l=G2[o];l.instanceId=s,l.object=this,t.push(l)}G2.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new Qi(new Float32Array(this.instanceMatrix.count*3).fill(1),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}setMorphAt(e,t){const n=t.morphTargetInfluences,i=n.length+1;this.morphTexture===null&&(this.morphTexture=new Kn(new Float32Array(i*this.count),i,this.count,kr,hn));const s=this.morphTexture.source.data.data;let o=0;for(let c=0;c<n.length;c++)o+=n[c];const a=this.geometry.morphTargetsRelative?1:1-o,l=i*e;s[l]=a,s.set(n,l+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),this.morphTexture!==null&&(this.morphTexture.dispose(),this.morphTexture=null),this}}const Za=new L,Z8=new L,j8=new Ve;class g1{constructor(e=new L(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,n,i){return this.normal.set(e,t,n),this.constant=i,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,n){const i=Za.subVectors(n,t).cross(Z8.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(i,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const n=e.delta(Za),i=this.normal.dot(n);if(i===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const s=-(e.start.dot(this.normal)+this.constant)/i;return s<0||s>1?null:t.copy(e.start).addScaledVector(n,s)}intersectsLine(e){const t=this.distanceToPoint(e.start),n=this.distanceToPoint(e.end);return t<0&&n>0||n<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const n=t||j8.getNormalMatrix(e),i=this.coplanarPoint(Za).applyMatrix4(e),s=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(s),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const ri=new Xt,W2=new L;class Ys{constructor(e=new g1,t=new g1,n=new g1,i=new g1,s=new g1,o=new g1){this.planes=[e,t,n,i,s,o]}set(e,t,n,i,s,o){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(n),a[3].copy(i),a[4].copy(s),a[5].copy(o),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=Rn){const n=this.planes,i=e.elements,s=i[0],o=i[1],a=i[2],l=i[3],c=i[4],h=i[5],u=i[6],d=i[7],q=i[8],m=i[9],g=i[10],p=i[11],f=i[12],v=i[13],y=i[14],_=i[15];if(n[0].setComponents(l-s,d-c,p-q,_-f).normalize(),n[1].setComponents(l+s,d+c,p+q,_+f).normalize(),n[2].setComponents(l+o,d+h,p+m,_+v).normalize(),n[3].setComponents(l-o,d-h,p-m,_-v).normalize(),n[4].setComponents(l-a,d-u,p-g,_-y).normalize(),t===Rn)n[5].setComponents(l+a,d+u,p+g,_+y).normalize();else if(t===Is)n[5].setComponents(a,u,g,y).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),ri.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),ri.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(ri)}intersectsSprite(e){return ri.center.set(0,0,0),ri.radius=.7071067811865476,ri.applyMatrix4(e.matrixWorld),this.intersectsSphere(ri)}intersectsSphere(e){const t=this.planes,n=e.center,i=-e.radius;for(let s=0;s<6;s++)if(t[s].distanceToPoint(n)<i)return!1;return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const i=t[n];if(W2.x=i.normal.x>0?e.max.x:e.min.x,W2.y=i.normal.y>0?e.max.y:e.min.y,W2.z=i.normal.z>0?e.max.z:e.min.z,i.distanceToPoint(W2)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function ja(r,e){return r-e}function J8(r,e){return r.z-e.z}function K8(r,e){return e.z-r.z}class Q8{constructor(){this.index=0,this.pool=[],this.list=[]}push(e,t,n,i){const s=this.pool,o=this.list;this.index>=s.length&&s.push({start:-1,count:-1,z:-1,index:-1});const a=s[this.index];o.push(a),this.index++,a.start=e,a.count=t,a.z=n,a.index=i}reset(){this.list.length=0,this.index=0}}const qn=new Ge,e9=new _e(1,1,1),Ja=new Ys,X2=new Vt,oi=new Xt,$s=new L,ml=new L,t9=new L,Ka=new Q8,Zt=new St,Y2=[];function n9(r,e,t=0){const n=e.itemSize;if(r.isInterleavedBufferAttribute||r.array.constructor!==e.array.constructor){const i=r.count;for(let s=0;s<i;s++)for(let o=0;o<n;o++)e.setComponent(s+t,o,r.getComponent(s,o))}else e.array.set(r.array,t*n);e.needsUpdate=!0}function ai(r,e){if(r.constructor!==e.constructor){const t=Math.min(r.length,e.length);for(let n=0;n<t;n++)e[n]=r[n]}else{const t=Math.min(r.length,e.length);e.set(new r.constructor(r.buffer,0,t))}}class fl extends St{get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}constructor(e,t,n=t*2,i){super(new Ze,i),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=e,this._maxVertexCount=t,this._maxIndexCount=n,this._multiDrawCounts=new Int32Array(e),this._multiDrawStarts=new Int32Array(e),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}_initMatricesTexture(){let e=Math.sqrt(this._maxInstanceCount*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4),n=new Kn(t,e,e,tn,hn);this._matricesTexture=n}_initIndirectTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Uint32Array(e*e),n=new Kn(t,e,e,vs,l1);this._indirectTexture=n}_initColorsTexture(){let e=Math.sqrt(this._maxInstanceCount);e=Math.ceil(e);const t=new Float32Array(e*e*4).fill(1),n=new Kn(t,e,e,tn,hn);n.colorSpace=nt.workingColorSpace,this._colorsTexture=n}_initializeGeometry(e){const t=this.geometry,n=this._maxVertexCount,i=this._maxIndexCount;if(this._geometryInitialized===!1){for(const s in e.attributes){const o=e.getAttribute(s),{array:a,itemSize:l,normalized:c}=o,h=new a.constructor(n*l),u=new qt(h,l,c);t.setAttribute(s,u)}if(e.getIndex()!==null){const s=n>65535?new Uint32Array(i):new Uint16Array(i);t.setIndex(new qt(s,1))}this._geometryInitialized=!0}}_validateGeometry(e){const t=this.geometry;if(!!e.getIndex()!=!!t.getIndex())throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');for(const n in t.attributes){if(!e.hasAttribute(n))throw new Error(`THREE.BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);const i=e.getAttribute(n),s=t.getAttribute(n);if(i.itemSize!==s.itemSize||i.normalized!==s.normalized)throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}validateInstanceId(e){const t=this._instanceInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`)}validateGeometryId(e){const t=this._geometryInfo;if(e<0||e>=t.length||t[e].active===!1)throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`)}setCustomSort(e){return this.customSort=e,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Vt);const e=this.boundingBox,t=this._instanceInfo;e.makeEmpty();for(let n=0,i=t.length;n<i;n++){if(t[n].active===!1)continue;const s=t[n].geometryIndex;this.getMatrixAt(n,qn),this.getBoundingBoxAt(s,X2).applyMatrix4(qn),e.union(X2)}}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Xt);const e=this.boundingSphere,t=this._instanceInfo;e.makeEmpty();for(let n=0,i=t.length;n<i;n++){if(t[n].active===!1)continue;const s=t[n].geometryIndex;this.getMatrixAt(n,qn),this.getBoundingSphereAt(s,oi).applyMatrix4(qn),e.union(oi)}}addInstance(e){if(this._instanceInfo.length>=this.maxInstanceCount&&this._availableInstanceIds.length===0)throw new Error("THREE.BatchedMesh: Maximum item count reached.");const n={visible:!0,active:!0,geometryIndex:e};let i=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(ja),i=this._availableInstanceIds.shift(),this._instanceInfo[i]=n):(i=this._instanceInfo.length,this._instanceInfo.push(n));const s=this._matricesTexture;qn.identity().toArray(s.image.data,i*16),s.needsUpdate=!0;const o=this._colorsTexture;return o&&(e9.toArray(o.image.data,i*4),o.needsUpdate=!0),this._visibilityChanged=!0,i}addGeometry(e,t=-1,n=-1){this._initializeGeometry(e),this._validateGeometry(e);const i={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},s=this._geometryInfo;i.vertexStart=this._nextVertexStart,i.reservedVertexCount=t===-1?e.getAttribute("position").count:t;const o=e.getIndex();if(o!==null&&(i.indexStart=this._nextIndexStart,i.reservedIndexCount=n===-1?o.count:n),i.indexStart!==-1&&i.indexStart+i.reservedIndexCount>this._maxIndexCount||i.vertexStart+i.reservedVertexCount>this._maxVertexCount)throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");let l;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(ja),l=this._availableGeometryIds.shift(),s[l]=i):(l=this._geometryCount,this._geometryCount++,s.push(i)),this.setGeometryAt(l,e),this._nextIndexStart=i.indexStart+i.reservedIndexCount,this._nextVertexStart=i.vertexStart+i.reservedVertexCount,l}setGeometryAt(e,t){if(e>=this._geometryCount)throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");this._validateGeometry(t);const n=this.geometry,i=n.getIndex()!==null,s=n.getIndex(),o=t.getIndex(),a=this._geometryInfo[e];if(i&&o.count>a.reservedIndexCount||t.attributes.position.count>a.reservedVertexCount)throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");const l=a.vertexStart,c=a.reservedVertexCount;a.vertexCount=t.getAttribute("position").count;for(const h in n.attributes){const u=t.getAttribute(h),d=n.getAttribute(h);n9(u,d,l);const q=u.itemSize;for(let m=u.count,g=c;m<g;m++){const p=l+m;for(let f=0;f<q;f++)d.setComponent(p,f,0)}d.needsUpdate=!0,d.addUpdateRange(l*q,c*q)}if(i){const h=a.indexStart,u=a.reservedIndexCount;a.indexCount=t.getIndex().count;for(let d=0;d<o.count;d++)s.setX(h+d,l+o.getX(d));for(let d=o.count,q=u;d<q;d++)s.setX(h+d,l);s.needsUpdate=!0,s.addUpdateRange(h,a.reservedIndexCount)}return a.start=i?a.indexStart:a.vertexStart,a.count=i?a.indexCount:a.vertexCount,a.boundingBox=null,t.boundingBox!==null&&(a.boundingBox=t.boundingBox.clone()),a.boundingSphere=null,t.boundingSphere!==null&&(a.boundingSphere=t.boundingSphere.clone()),this._visibilityChanged=!0,e}deleteGeometry(e){const t=this._geometryInfo;if(e>=t.length||t[e].active===!1)return this;const n=this._instanceInfo;for(let i=0,s=n.length;i<s;i++)n[i].geometryIndex===e&&this.deleteInstance(i);return t[e].active=!1,this._availableGeometryIds.push(e),this._visibilityChanged=!0,this}deleteInstance(e){return this.validateInstanceId(e),this._instanceInfo[e].active=!1,this._availableInstanceIds.push(e),this._visibilityChanged=!0,this}optimize(){let e=0,t=0;const n=this._geometryInfo,i=n.map((o,a)=>a).sort((o,a)=>n[o].vertexStart-n[a].vertexStart),s=this.geometry;for(let o=0,a=n.length;o<a;o++){const l=i[o],c=n[l];if(c.active!==!1){if(s.index!==null){if(c.indexStart!==t){const{indexStart:h,vertexStart:u,reservedIndexCount:d}=c,q=s.index,m=q.array,g=e-u;for(let p=h;p<h+d;p++)m[p]=m[p]+g;q.array.copyWithin(t,h,h+d),q.addUpdateRange(t,d),c.indexStart=t}t+=c.reservedIndexCount}if(c.vertexStart!==e){const{vertexStart:h,reservedVertexCount:u}=c,d=s.attributes;for(const q in d){const m=d[q],{array:g,itemSize:p}=m;g.copyWithin(e*p,h*p,(h+u)*p),m.addUpdateRange(e*p,u*p)}c.vertexStart=e}e+=c.reservedVertexCount,c.start=s.index?c.indexStart:c.vertexStart,this._nextIndexStart=s.index?c.indexStart+c.reservedIndexCount:0,this._nextVertexStart=c.vertexStart+c.reservedVertexCount}}return this}getBoundingBoxAt(e,t){if(e>=this._geometryCount)return null;const n=this.geometry,i=this._geometryInfo[e];if(i.boundingBox===null){const s=new Vt,o=n.index,a=n.attributes.position;for(let l=i.start,c=i.start+i.count;l<c;l++){let h=l;o&&(h=o.getX(h)),s.expandByPoint($s.fromBufferAttribute(a,h))}i.boundingBox=s}return t.copy(i.boundingBox),t}getBoundingSphereAt(e,t){if(e>=this._geometryCount)return null;const n=this.geometry,i=this._geometryInfo[e];if(i.boundingSphere===null){const s=new Xt;this.getBoundingBoxAt(e,X2),X2.getCenter(s.center);const o=n.index,a=n.attributes.position;let l=0;for(let c=i.start,h=i.start+i.count;c<h;c++){let u=c;o&&(u=o.getX(u)),$s.fromBufferAttribute(a,u),l=Math.max(l,s.center.distanceToSquared($s))}s.radius=Math.sqrt(l),i.boundingSphere=s}return t.copy(i.boundingSphere),t}setMatrixAt(e,t){this.validateInstanceId(e);const n=this._matricesTexture,i=this._matricesTexture.image.data;return t.toArray(i,e*16),n.needsUpdate=!0,this}getMatrixAt(e,t){return this.validateInstanceId(e),t.fromArray(this._matricesTexture.image.data,e*16)}setColorAt(e,t){return this.validateInstanceId(e),this._colorsTexture===null&&this._initColorsTexture(),t.toArray(this._colorsTexture.image.data,e*4),this._colorsTexture.needsUpdate=!0,this}getColorAt(e,t){return this.validateInstanceId(e),t.fromArray(this._colorsTexture.image.data,e*4)}setVisibleAt(e,t){return this.validateInstanceId(e),this._instanceInfo[e].visible===t?this:(this._instanceInfo[e].visible=t,this._visibilityChanged=!0,this)}getVisibleAt(e){return this.validateInstanceId(e),this._instanceInfo[e].visible}setGeometryIdAt(e,t){return this.validateInstanceId(e),this.validateGeometryId(t),this._instanceInfo[e].geometryIndex=t,this}getGeometryIdAt(e){return this.validateInstanceId(e),this._instanceInfo[e].geometryIndex}getGeometryRangeAt(e,t={}){this.validateGeometryId(e);const n=this._geometryInfo[e];return t.vertexStart=n.vertexStart,t.vertexCount=n.vertexCount,t.reservedVertexCount=n.reservedVertexCount,t.indexStart=n.indexStart,t.indexCount=n.indexCount,t.reservedIndexCount=n.reservedIndexCount,t.start=n.start,t.count=n.count,t}setInstanceCount(e){const t=this._availableInstanceIds,n=this._instanceInfo;for(t.sort(ja);t[t.length-1]===n.length;)n.pop(),t.pop();if(e<n.length)throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);const i=new Int32Array(e),s=new Int32Array(e);ai(this._multiDrawCounts,i),ai(this._multiDrawStarts,s),this._multiDrawCounts=i,this._multiDrawStarts=s,this._maxInstanceCount=e;const o=this._indirectTexture,a=this._matricesTexture,l=this._colorsTexture;o.dispose(),this._initIndirectTexture(),ai(o.image.data,this._indirectTexture.image.data),a.dispose(),this._initMatricesTexture(),ai(a.image.data,this._matricesTexture.image.data),l&&(l.dispose(),this._initColorsTexture(),ai(l.image.data,this._colorsTexture.image.data))}setGeometrySize(e,t){const n=[...this._geometryInfo].filter(a=>a.active);if(Math.max(...n.map(a=>a.vertexStart+a.reservedVertexCount))>e)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`);if(this.geometry.index&&Math.max(...n.map(l=>l.indexStart+l.reservedIndexCount))>t)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`);const s=this.geometry;s.dispose(),this._maxVertexCount=e,this._maxIndexCount=t,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new Ze,this._initializeGeometry(s));const o=this.geometry;s.index&&ai(s.index.array,o.index.array);for(const a in s.attributes)ai(s.attributes[a].array,o.attributes[a].array)}raycast(e,t){const n=this._instanceInfo,i=this._geometryInfo,s=this.matrixWorld,o=this.geometry;Zt.material=this.material,Zt.geometry.index=o.index,Zt.geometry.attributes=o.attributes,Zt.geometry.boundingBox===null&&(Zt.geometry.boundingBox=new Vt),Zt.geometry.boundingSphere===null&&(Zt.geometry.boundingSphere=new Xt);for(let a=0,l=n.length;a<l;a++){if(!n[a].visible||!n[a].active)continue;const c=n[a].geometryIndex,h=i[c];Zt.geometry.setDrawRange(h.start,h.count),this.getMatrixAt(a,Zt.matrixWorld).premultiply(s),this.getBoundingBoxAt(c,Zt.geometry.boundingBox),this.getBoundingSphereAt(c,Zt.geometry.boundingSphere),Zt.raycast(e,Y2);for(let u=0,d=Y2.length;u<d;u++){const q=Y2[u];q.object=this,q.batchId=a,t.push(q)}Y2.length=0}Zt.material=null,Zt.geometry.index=null,Zt.geometry.attributes={},Zt.geometry.setDrawRange(0,1/0)}copy(e){return super.copy(e),this.geometry=e.geometry.clone(),this.perObjectFrustumCulled=e.perObjectFrustumCulled,this.sortObjects=e.sortObjects,this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null,this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null,this._geometryInfo=e._geometryInfo.map(t=>({...t,boundingBox:t.boundingBox!==null?t.boundingBox.clone():null,boundingSphere:t.boundingSphere!==null?t.boundingSphere.clone():null})),this._instanceInfo=e._instanceInfo.map(t=>({...t})),this._maxInstanceCount=e._maxInstanceCount,this._maxVertexCount=e._maxVertexCount,this._maxIndexCount=e._maxIndexCount,this._geometryInitialized=e._geometryInitialized,this._geometryCount=e._geometryCount,this._multiDrawCounts=e._multiDrawCounts.slice(),this._multiDrawStarts=e._multiDrawStarts.slice(),this._matricesTexture=e._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),this._colorsTexture!==null&&(this._colorsTexture=e._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,this._colorsTexture!==null&&(this._colorsTexture.dispose(),this._colorsTexture=null),this}onBeforeRender(e,t,n,i,s){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const o=i.getIndex(),a=o===null?1:o.array.BYTES_PER_ELEMENT,l=this._instanceInfo,c=this._multiDrawStarts,h=this._multiDrawCounts,u=this._geometryInfo,d=this.perObjectFrustumCulled,q=this._indirectTexture,m=q.image.data;d&&(qn.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse).multiply(this.matrixWorld),Ja.setFromProjectionMatrix(qn,e.coordinateSystem));let g=0;if(this.sortObjects){qn.copy(this.matrixWorld).invert(),$s.setFromMatrixPosition(n.matrixWorld).applyMatrix4(qn),ml.set(0,0,-1).transformDirection(n.matrixWorld).transformDirection(qn);for(let v=0,y=l.length;v<y;v++)if(l[v].visible&&l[v].active){const _=l[v].geometryIndex;this.getMatrixAt(v,qn),this.getBoundingSphereAt(_,oi).applyMatrix4(qn);let T=!1;if(d&&(T=!Ja.intersectsSphere(oi)),!T){const E=u[_],S=t9.subVectors(oi.center,$s).dot(ml);Ka.push(E.start,E.count,S,v)}}const p=Ka.list,f=this.customSort;f===null?p.sort(s.transparent?K8:J8):f.call(this,p,n);for(let v=0,y=p.length;v<y;v++){const _=p[v];c[g]=_.start*a,h[g]=_.count,m[g]=_.index,g++}Ka.reset()}else for(let p=0,f=l.length;p<f;p++)if(l[p].visible&&l[p].active){const v=l[p].geometryIndex;let y=!1;if(d&&(this.getMatrixAt(p,qn),this.getBoundingSphereAt(v,oi).applyMatrix4(qn),y=!Ja.intersectsSphere(oi)),!y){const _=u[v];c[g]=_.start*a,h[g]=_.count,m[g]=p,g++}}q.needsUpdate=!0,this._multiDrawCount=g,this._visibilityChanged=!1}onBeforeShadow(e,t,n,i,s,o){this.onBeforeRender(e,null,i,s,o)}}class an extends $t{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new _e(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const $2=new L,Z2=new L,pl=new Ge,Zs=new ii,j2=new Xt,Qa=new L,gl=new L;class P1 extends it{constructor(e=new Ze,t=new an){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[0];for(let i=1,s=t.count;i<s;i++)$2.fromBufferAttribute(t,i-1),Z2.fromBufferAttribute(t,i),n[i]=n[i-1],n[i]+=$2.distanceTo(Z2);e.setAttribute("lineDistance",new ze(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Line.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),j2.copy(n.boundingSphere),j2.applyMatrix4(i),j2.radius+=s,e.ray.intersectsSphere(j2)===!1)return;pl.copy(i).invert(),Zs.copy(e.ray).applyMatrix4(pl);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=this.isLineSegments?2:1,h=n.index,d=n.attributes.position;if(h!==null){const q=Math.max(0,o.start),m=Math.min(h.count,o.start+o.count);for(let g=q,p=m-1;g<p;g+=c){const f=h.getX(g),v=h.getX(g+1),y=J2(this,e,Zs,l,f,v);y&&t.push(y)}if(this.isLineLoop){const g=h.getX(m-1),p=h.getX(q),f=J2(this,e,Zs,l,g,p);f&&t.push(f)}}else{const q=Math.max(0,o.start),m=Math.min(d.count,o.start+o.count);for(let g=q,p=m-1;g<p;g+=c){const f=J2(this,e,Zs,l,g,g+1);f&&t.push(f)}if(this.isLineLoop){const g=J2(this,e,Zs,l,m-1,q);g&&t.push(g)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}}function J2(r,e,t,n,i,s){const o=r.geometry.attributes.position;if($2.fromBufferAttribute(o,i),Z2.fromBufferAttribute(o,s),t.distanceSqToSegment($2,Z2,Qa,gl)>n)return;Qa.applyMatrix4(r.matrixWorld);const l=e.ray.origin.distanceTo(Qa);if(!(l<e.near||l>e.far))return{distance:l,point:gl.clone().applyMatrix4(r.matrixWorld),index:i,face:null,faceIndex:null,barycoord:null,object:r}}const xl=new L,_l=new L;class Qn extends P1{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,n=[];for(let i=0,s=t.count;i<s;i+=2)xl.fromBufferAttribute(t,i),_l.fromBufferAttribute(t,i+1),n[i]=i===0?0:n[i-1],n[i+1]=n[i]+xl.distanceTo(_l);e.setAttribute("lineDistance",new ze(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class yl extends P1{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class e4 extends $t{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new _e(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const vl=new Ge,t4=new ii,K2=new Xt,Q2=new L;class wl extends it{constructor(e=new Ze,t=new e4){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const n=this.geometry,i=this.matrixWorld,s=e.params.Points.threshold,o=n.drawRange;if(n.boundingSphere===null&&n.computeBoundingSphere(),K2.copy(n.boundingSphere),K2.applyMatrix4(i),K2.radius+=s,e.ray.intersectsSphere(K2)===!1)return;vl.copy(i).invert(),t4.copy(e.ray).applyMatrix4(vl);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=n.index,u=n.attributes.position;if(c!==null){const d=Math.max(0,o.start),q=Math.min(c.count,o.start+o.count);for(let m=d,g=q;m<g;m++){const p=c.getX(m);Q2.fromBufferAttribute(u,p),Ml(Q2,p,l,i,e,t,this)}}else{const d=Math.max(0,o.start),q=Math.min(u.count,o.start+o.count);for(let m=d,g=q;m<g;m++)Q2.fromBufferAttribute(u,m),Ml(Q2,m,l,i,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,n=Object.keys(t);if(n.length>0){const i=t[n[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=i.length;s<o;s++){const a=i[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}}function Ml(r,e,t,n,i,s,o){const a=t4.distanceSqToPoint(r);if(a<t){const l=new L;t4.closestPointToPoint(r,l),l.applyMatrix4(n);const c=i.ray.origin.distanceTo(l);if(c<i.near||c>i.far)return;s.push({distance:c,distanceToRay:Math.sqrt(a),point:l,index:e,face:null,faceIndex:null,barycoord:null,object:o})}}let ts=class extends it{constructor(){super(),this.isGroup=!0,this.type="Group"}};class i9 extends Mt{constructor(e,t,n,i,s,o,a,l,c){super(e,t,n,i,s,o,a,l,c),this.isVideoTexture=!0,this.minFilter=o!==void 0?o:Nt,this.magFilter=s!==void 0?s:Nt,this.generateMipmaps=!1;const h=this;function u(){h.needsUpdate=!0,e.requestVideoFrameCallback(u)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(u)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class s9 extends Mt{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=Bt,this.minFilter=Bt,this.generateMipmaps=!1,this.needsUpdate=!0}}class eo extends Mt{constructor(e,t,n,i,s,o,a,l,c,h,u,d){super(null,o,a,l,c,h,i,s,u,d),this.isCompressedTexture=!0,this.image={width:t,height:n},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class r9 extends eo{constructor(e,t,n,i,s,o){super(e,t,n,s,o),this.isCompressedArrayTexture=!0,this.image.depth=i,this.wrapR=Sn,this.layerUpdates=new Set}addLayerUpdate(e){this.layerUpdates.add(e)}clearLayerUpdates(){this.layerUpdates.clear()}}class o9 extends eo{constructor(e,t,n){super(void 0,e[0].width,e[0].height,t,n,a1),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=e}}class a9 extends Mt{constructor(e,t,n,i,s,o,a,l,c){super(e,t,n,i,s,o,a,l,c),this.isCanvasTexture=!0,this.needsUpdate=!0}}class n4 extends Mt{constructor(e,t,n,i,s,o,a,l,c,h=Y1){if(h!==Y1&&h!==$1)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===Y1&&(n=l1),n===void 0&&h===$1&&(n=X1),super(null,i,s,o,a,l,h,n,c),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=a!==void 0?a:Bt,this.minFilter=l!==void 0?l:Bt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}class Pn{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const n=this.getUtoTmapping(e);return this.getPoint(n,t)}getPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return t}getSpacedPoints(e=5){const t=[];for(let n=0;n<=e;n++)t.push(this.getPointAt(n/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let n,i=this.getPoint(0),s=0;t.push(0);for(let o=1;o<=e;o++)n=this.getPoint(o/e),s+=n.distanceTo(i),t.push(s),i=n;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const n=this.getLengths();let i=0;const s=n.length;let o;t?o=t:o=e*n[s-1];let a=0,l=s-1,c;for(;a<=l;)if(i=Math.floor(a+(l-a)/2),c=n[i]-o,c<0)a=i+1;else if(c>0)l=i-1;else{l=i;break}if(i=l,n[i]===o)return i/(s-1);const h=n[i],d=n[i+1]-h,q=(o-h)/d;return(i+q)/(s-1)}getTangent(e,t){let i=e-1e-4,s=e+1e-4;i<0&&(i=0),s>1&&(s=1);const o=this.getPoint(i),a=this.getPoint(s),l=t||(o.isVector2?new $:new L);return l.copy(a).sub(o).normalize(),l}getTangentAt(e,t){const n=this.getUtoTmapping(e);return this.getTangent(n,t)}computeFrenetFrames(e,t){const n=new L,i=[],s=[],o=[],a=new L,l=new Ge;for(let q=0;q<=e;q++){const m=q/e;i[q]=this.getTangentAt(m,new L)}s[0]=new L,o[0]=new L;let c=Number.MAX_VALUE;const h=Math.abs(i[0].x),u=Math.abs(i[0].y),d=Math.abs(i[0].z);h<=c&&(c=h,n.set(1,0,0)),u<=c&&(c=u,n.set(0,1,0)),d<=c&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),s[0].crossVectors(i[0],a),o[0].crossVectors(i[0],s[0]);for(let q=1;q<=e;q++){if(s[q]=s[q-1].clone(),o[q]=o[q-1].clone(),a.crossVectors(i[q-1],i[q]),a.length()>Number.EPSILON){a.normalize();const m=Math.acos(Xe(i[q-1].dot(i[q]),-1,1));s[q].applyMatrix4(l.makeRotationAxis(a,m))}o[q].crossVectors(i[q],s[q])}if(t===!0){let q=Math.acos(Xe(s[0].dot(s[e]),-1,1));q/=e,i[0].dot(a.crossVectors(s[0],s[e]))>0&&(q=-q);for(let m=1;m<=e;m++)s[m].applyMatrix4(l.makeRotationAxis(i[m],q*m)),o[m].crossVectors(i[m],s[m])}return{tangents:i,normals:s,binormals:o}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class to extends Pn{constructor(e=0,t=0,n=1,i=1,s=0,o=Math.PI*2,a=!1,l=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=n,this.yRadius=i,this.aStartAngle=s,this.aEndAngle=o,this.aClockwise=a,this.aRotation=l}getPoint(e,t=new $){const n=t,i=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const o=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=i;for(;s>i;)s-=i;s<Number.EPSILON&&(o?s=0:s=i),this.aClockwise===!0&&!o&&(s===i?s=-i:s=s-i);const a=this.aStartAngle+e*s;let l=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),d=l-this.aX,q=c-this.aY;l=d*h-q*u+this.aX,c=d*u+q*h+this.aY}return n.set(l,c)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class Sl extends to{constructor(e,t,n,i,s,o){super(e,t,n,n,i,s,o),this.isArcCurve=!0,this.type="ArcCurve"}}function i4(){let r=0,e=0,t=0,n=0;function i(s,o,a,l){r=s,e=a,t=-3*s+3*o-2*a-l,n=2*s-2*o+a+l}return{initCatmullRom:function(s,o,a,l,c){i(o,a,c*(a-s),c*(l-o))},initNonuniformCatmullRom:function(s,o,a,l,c,h,u){let d=(o-s)/c-(a-s)/(c+h)+(a-o)/h,q=(a-o)/h-(l-o)/(h+u)+(l-a)/u;d*=h,q*=h,i(o,a,d,q)},calc:function(s){const o=s*s,a=o*s;return r+e*s+t*o+n*a}}}const no=new L,s4=new i4,r4=new i4,o4=new i4;class bl extends Pn{constructor(e=[],t=!1,n="centripetal",i=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=n,this.tension=i}getPoint(e,t=new L){const n=t,i=this.points,s=i.length,o=(s-(this.closed?0:1))*e;let a=Math.floor(o),l=o-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/s)+1)*s:l===0&&a===s-1&&(a=s-2,l=1);let c,h;this.closed||a>0?c=i[(a-1)%s]:(no.subVectors(i[0],i[1]).add(i[0]),c=no);const u=i[a%s],d=i[(a+1)%s];if(this.closed||a+2<s?h=i[(a+2)%s]:(no.subVectors(i[s-1],i[s-2]).add(i[s-1]),h=no),this.curveType==="centripetal"||this.curveType==="chordal"){const q=this.curveType==="chordal"?.5:.25;let m=Math.pow(c.distanceToSquared(u),q),g=Math.pow(u.distanceToSquared(d),q),p=Math.pow(d.distanceToSquared(h),q);g<1e-4&&(g=1),m<1e-4&&(m=g),p<1e-4&&(p=g),s4.initNonuniformCatmullRom(c.x,u.x,d.x,h.x,m,g,p),r4.initNonuniformCatmullRom(c.y,u.y,d.y,h.y,m,g,p),o4.initNonuniformCatmullRom(c.z,u.z,d.z,h.z,m,g,p)}else this.curveType==="catmullrom"&&(s4.initCatmullRom(c.x,u.x,d.x,h.x,this.tension),r4.initCatmullRom(c.y,u.y,d.y,h.y,this.tension),o4.initCatmullRom(c.z,u.z,d.z,h.z,this.tension));return n.set(s4.calc(l),r4.calc(l),o4.calc(l)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new L().fromArray(i))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function El(r,e,t,n,i){const s=(n-e)*.5,o=(i-t)*.5,a=r*r,l=r*a;return(2*t-2*n+s+o)*l+(-3*t+3*n-2*s-o)*a+s*r+t}function l9(r,e){const t=1-r;return t*t*e}function c9(r,e){return 2*(1-r)*r*e}function h9(r,e){return r*r*e}function js(r,e,t,n){return l9(r,e)+c9(r,t)+h9(r,n)}function u9(r,e){const t=1-r;return t*t*t*e}function d9(r,e){const t=1-r;return 3*t*t*r*e}function q9(r,e){return 3*(1-r)*r*r*e}function m9(r,e){return r*r*r*e}function Js(r,e,t,n,i){return u9(r,e)+d9(r,t)+q9(r,n)+m9(r,i)}class a4 extends Pn{constructor(e=new $,t=new $,n=new $,i=new $){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new $){const n=t,i=this.v0,s=this.v1,o=this.v2,a=this.v3;return n.set(Js(e,i.x,s.x,o.x,a.x),Js(e,i.y,s.y,o.y,a.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class Tl extends Pn{constructor(e=new L,t=new L,n=new L,i=new L){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=n,this.v3=i}getPoint(e,t=new L){const n=t,i=this.v0,s=this.v1,o=this.v2,a=this.v3;return n.set(Js(e,i.x,s.x,o.x,a.x),Js(e,i.y,s.y,o.y,a.y),Js(e,i.z,s.z,o.z,a.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class l4 extends Pn{constructor(e=new $,t=new $){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new $){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new $){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Al extends Pn{constructor(e=new L,t=new L){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new L){const n=t;return e===1?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(e).add(this.v1)),n}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new L){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class c4 extends Pn{constructor(e=new $,t=new $,n=new $){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new $){const n=t,i=this.v0,s=this.v1,o=this.v2;return n.set(js(e,i.x,s.x,o.x),js(e,i.y,s.y,o.y)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class h4 extends Pn{constructor(e=new L,t=new L,n=new L){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=n}getPoint(e,t=new L){const n=t,i=this.v0,s=this.v1,o=this.v2;return n.set(js(e,i.x,s.x,o.x),js(e,i.y,s.y,o.y),js(e,i.z,s.z,o.z)),n}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class u4 extends Pn{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new $){const n=t,i=this.points,s=(i.length-1)*e,o=Math.floor(s),a=s-o,l=i[o===0?o:o-1],c=i[o],h=i[o>i.length-2?i.length-1:o+1],u=i[o>i.length-3?i.length-1:o+2];return n.set(El(a,l.x,c.x,h.x,u.x),El(a,l.y,c.y,h.y,u.y)),n}copy(e){super.copy(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,n=this.points.length;t<n;t++){const i=this.points[t];e.points.push(i.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,n=e.points.length;t<n;t++){const i=e.points[t];this.points.push(new $().fromArray(i))}return this}}var io=Object.freeze({__proto__:null,ArcCurve:Sl,CatmullRomCurve3:bl,CubicBezierCurve:a4,CubicBezierCurve3:Tl,EllipseCurve:to,LineCurve:l4,LineCurve3:Al,QuadraticBezierCurve:c4,QuadraticBezierCurve3:h4,SplineCurve:u4});class Cl extends Pn{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const n=e.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new io[n](t,e))}return this}getPoint(e,t){const n=e*this.getLength(),i=this.getCurveLengths();let s=0;for(;s<i.length;){if(i[s]>=n){const o=i[s]-n,a=this.curves[s],l=a.getLength(),c=l===0?0:1-o/l;return a.getPointAt(c,t)}s++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let n=0,i=this.curves.length;n<i;n++)t+=this.curves[n].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let n=0;n<=e;n++)t.push(this.getPoint(n/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let n;for(let i=0,s=this.curves;i<s.length;i++){const o=s[i],a=o.isEllipseCurve?e*2:o.isLineCurve||o.isLineCurve3?1:o.isSplineCurve?e*o.points.length:e,l=o.getPoints(a);for(let c=0;c<l.length;c++){const h=l[c];n&&n.equals(h)||(t.push(h),n=h)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(i.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,n=this.curves.length;t<n;t++){const i=this.curves[t];e.curves.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,n=e.curves.length;t<n;t++){const i=e.curves[t];this.curves.push(new io[i.type]().fromJSON(i))}return this}}class Dn extends Cl{constructor(e){super(),this.type="Path",this.currentPoint=new $,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,n=e.length;t<n;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const n=new l4(this.currentPoint.clone(),new $(e,t));return this.curves.push(n),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,n,i){const s=new c4(this.currentPoint.clone(),new $(e,t),new $(n,i));return this.curves.push(s),this.currentPoint.set(n,i),this}bezierCurveTo(e,t,n,i,s,o){const a=new a4(this.currentPoint.clone(),new $(e,t),new $(n,i),new $(s,o));return this.curves.push(a),this.currentPoint.set(s,o),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),n=new u4(t);return this.curves.push(n),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,n,i,s,o){const a=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(e+a,t+l,n,i,s,o),this}absarc(e,t,n,i,s,o){return this.absellipse(e,t,n,n,i,s,o),this}ellipse(e,t,n,i,s,o,a,l){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(e+c,t+h,n,i,s,o,a,l),this}absellipse(e,t,n,i,s,o,a,l){const c=new to(e,t,n,i,s,o,a,l);if(this.curves.length>0){const u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);const h=c.getPoint(1);return this.currentPoint.copy(h),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class Ks extends Ze{constructor(e=[new $(0,-.5),new $(.5,0),new $(0,.5)],t=12,n=0,i=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:n,phiLength:i},t=Math.floor(t),i=Xe(i,0,Math.PI*2);const s=[],o=[],a=[],l=[],c=[],h=1/t,u=new L,d=new $,q=new L,m=new L,g=new L;let p=0,f=0;for(let v=0;v<=e.length-1;v++)switch(v){case 0:p=e[v+1].x-e[v].x,f=e[v+1].y-e[v].y,q.x=f*1,q.y=-p,q.z=f*0,g.copy(q),q.normalize(),l.push(q.x,q.y,q.z);break;case e.length-1:l.push(g.x,g.y,g.z);break;default:p=e[v+1].x-e[v].x,f=e[v+1].y-e[v].y,q.x=f*1,q.y=-p,q.z=f*0,m.copy(q),q.x+=g.x,q.y+=g.y,q.z+=g.z,q.normalize(),l.push(q.x,q.y,q.z),g.copy(m)}for(let v=0;v<=t;v++){const y=n+v*h*i,_=Math.sin(y),T=Math.cos(y);for(let E=0;E<=e.length-1;E++){u.x=e[E].x*_,u.y=e[E].y,u.z=e[E].x*T,o.push(u.x,u.y,u.z),d.x=v/t,d.y=E/(e.length-1),a.push(d.x,d.y);const S=l[3*E+0]*_,I=l[3*E+1],w=l[3*E+0]*T;c.push(S,I,w)}}for(let v=0;v<t;v++)for(let y=0;y<e.length-1;y++){const _=y+v*e.length,T=_,E=_+e.length,S=_+e.length+1,I=_+1;s.push(T,E,I),s.push(S,I,E)}this.setIndex(s),this.setAttribute("position",new ze(o,3)),this.setAttribute("uv",new ze(a,2)),this.setAttribute("normal",new ze(c,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ks(e.points,e.segments,e.phiStart,e.phiLength)}}class so extends Ks{constructor(e=1,t=1,n=4,i=8){const s=new Dn;s.absarc(0,-t/2,e,Math.PI*1.5,0),s.absarc(0,t/2,e,0,Math.PI*.5),super(s.getPoints(n),i),this.type="CapsuleGeometry",this.parameters={radius:e,length:t,capSegments:n,radialSegments:i}}static fromJSON(e){return new so(e.radius,e.length,e.capSegments,e.radialSegments)}}class ro extends Ze{constructor(e=1,t=32,n=0,i=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:n,thetaLength:i},t=Math.max(3,t);const s=[],o=[],a=[],l=[],c=new L,h=new $;o.push(0,0,0),a.push(0,0,1),l.push(.5,.5);for(let u=0,d=3;u<=t;u++,d+=3){const q=n+u/t*i;c.x=e*Math.cos(q),c.y=e*Math.sin(q),o.push(c.x,c.y,c.z),a.push(0,0,1),h.x=(o[d]/e+1)/2,h.y=(o[d+1]/e+1)/2,l.push(h.x,h.y)}for(let u=1;u<=t;u++)s.push(u,u+1,0);this.setIndex(s),this.setAttribute("position",new ze(o,3)),this.setAttribute("normal",new ze(a,3)),this.setAttribute("uv",new ze(l,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ro(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class ns extends Ze{constructor(e=1,t=1,n=1,i=32,s=1,o=!1,a=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:n,radialSegments:i,heightSegments:s,openEnded:o,thetaStart:a,thetaLength:l};const c=this;i=Math.floor(i),s=Math.floor(s);const h=[],u=[],d=[],q=[];let m=0;const g=[],p=n/2;let f=0;v(),o===!1&&(e>0&&y(!0),t>0&&y(!1)),this.setIndex(h),this.setAttribute("position",new ze(u,3)),this.setAttribute("normal",new ze(d,3)),this.setAttribute("uv",new ze(q,2));function v(){const _=new L,T=new L;let E=0;const S=(t-e)/n;for(let I=0;I<=s;I++){const w=[],x=I/s,C=x*(t-e)+e;for(let O=0;O<=i;O++){const U=O/i,B=U*l+a,P=Math.sin(B),K=Math.cos(B);T.x=C*P,T.y=-x*n+p,T.z=C*K,u.push(T.x,T.y,T.z),_.set(P,S,K).normalize(),d.push(_.x,_.y,_.z),q.push(U,1-x),w.push(m++)}g.push(w)}for(let I=0;I<i;I++)for(let w=0;w<s;w++){const x=g[w][I],C=g[w+1][I],O=g[w+1][I+1],U=g[w][I+1];(e>0||w!==0)&&(h.push(x,C,U),E+=3),(t>0||w!==s-1)&&(h.push(C,O,U),E+=3)}c.addGroup(f,E,0),f+=E}function y(_){const T=m,E=new $,S=new L;let I=0;const w=_===!0?e:t,x=_===!0?1:-1;for(let O=1;O<=i;O++)u.push(0,p*x,0),d.push(0,x,0),q.push(.5,.5),m++;const C=m;for(let O=0;O<=i;O++){const B=O/i*l+a,P=Math.cos(B),K=Math.sin(B);S.x=w*K,S.y=p*x,S.z=w*P,u.push(S.x,S.y,S.z),d.push(0,x,0),E.x=P*.5+.5,E.y=K*.5*x+.5,q.push(E.x,E.y),m++}for(let O=0;O<i;O++){const U=T+O,B=C+O;_===!0?h.push(B,B+1,U):h.push(B+1,B,U),I+=3}c.addGroup(f,I,_===!0?1:2),f+=I}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ns(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class oo extends ns{constructor(e=1,t=1,n=32,i=1,s=!1,o=0,a=Math.PI*2){super(0,e,t,n,i,s,o,a),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:n,heightSegments:i,openEnded:s,thetaStart:o,thetaLength:a}}static fromJSON(e){return new oo(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class D1 extends Ze{constructor(e=[],t=[],n=1,i=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:n,detail:i};const s=[],o=[];a(i),c(n),h(),this.setAttribute("position",new ze(s,3)),this.setAttribute("normal",new ze(s.slice(),3)),this.setAttribute("uv",new ze(o,2)),i===0?this.computeVertexNormals():this.normalizeNormals();function a(v){const y=new L,_=new L,T=new L;for(let E=0;E<t.length;E+=3)q(t[E+0],y),q(t[E+1],_),q(t[E+2],T),l(y,_,T,v)}function l(v,y,_,T){const E=T+1,S=[];for(let I=0;I<=E;I++){S[I]=[];const w=v.clone().lerp(_,I/E),x=y.clone().lerp(_,I/E),C=E-I;for(let O=0;O<=C;O++)O===0&&I===E?S[I][O]=w:S[I][O]=w.clone().lerp(x,O/C)}for(let I=0;I<E;I++)for(let w=0;w<2*(E-I)-1;w++){const x=Math.floor(w/2);w%2===0?(d(S[I][x+1]),d(S[I+1][x]),d(S[I][x])):(d(S[I][x+1]),d(S[I+1][x+1]),d(S[I+1][x]))}}function c(v){const y=new L;for(let _=0;_<s.length;_+=3)y.x=s[_+0],y.y=s[_+1],y.z=s[_+2],y.normalize().multiplyScalar(v),s[_+0]=y.x,s[_+1]=y.y,s[_+2]=y.z}function h(){const v=new L;for(let y=0;y<s.length;y+=3){v.x=s[y+0],v.y=s[y+1],v.z=s[y+2];const _=p(v)/2/Math.PI+.5,T=f(v)/Math.PI+.5;o.push(_,1-T)}m(),u()}function u(){for(let v=0;v<o.length;v+=6){const y=o[v+0],_=o[v+2],T=o[v+4],E=Math.max(y,_,T),S=Math.min(y,_,T);E>.9&&S<.1&&(y<.2&&(o[v+0]+=1),_<.2&&(o[v+2]+=1),T<.2&&(o[v+4]+=1))}}function d(v){s.push(v.x,v.y,v.z)}function q(v,y){const _=v*3;y.x=e[_+0],y.y=e[_+1],y.z=e[_+2]}function m(){const v=new L,y=new L,_=new L,T=new L,E=new $,S=new $,I=new $;for(let w=0,x=0;w<s.length;w+=9,x+=6){v.set(s[w+0],s[w+1],s[w+2]),y.set(s[w+3],s[w+4],s[w+5]),_.set(s[w+6],s[w+7],s[w+8]),E.set(o[x+0],o[x+1]),S.set(o[x+2],o[x+3]),I.set(o[x+4],o[x+5]),T.copy(v).add(y).add(_).divideScalar(3);const C=p(T);g(E,x+0,v,C),g(S,x+2,y,C),g(I,x+4,_,C)}}function g(v,y,_,T){T<0&&v.x===1&&(o[y]=v.x-1),_.x===0&&_.z===0&&(o[y]=T/2/Math.PI+.5)}function p(v){return Math.atan2(v.z,-v.x)}function f(v){return Math.atan2(-v.y,Math.sqrt(v.x*v.x+v.z*v.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new D1(e.vertices,e.indices,e.radius,e.details)}}class ao extends D1{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=1/n,s=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i],o=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(s,o,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new ao(e.radius,e.detail)}}const lo=new L,co=new L,d4=new L,ho=new un;class Rl extends Ze{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const i=Math.pow(10,4),s=Math.cos(Q1*t),o=e.getIndex(),a=e.getAttribute("position"),l=o?o.count:a.count,c=[0,0,0],h=["a","b","c"],u=new Array(3),d={},q=[];for(let m=0;m<l;m+=3){o?(c[0]=o.getX(m),c[1]=o.getX(m+1),c[2]=o.getX(m+2)):(c[0]=m,c[1]=m+1,c[2]=m+2);const{a:g,b:p,c:f}=ho;if(g.fromBufferAttribute(a,c[0]),p.fromBufferAttribute(a,c[1]),f.fromBufferAttribute(a,c[2]),ho.getNormal(d4),u[0]=`${Math.round(g.x*i)},${Math.round(g.y*i)},${Math.round(g.z*i)}`,u[1]=`${Math.round(p.x*i)},${Math.round(p.y*i)},${Math.round(p.z*i)}`,u[2]=`${Math.round(f.x*i)},${Math.round(f.y*i)},${Math.round(f.z*i)}`,!(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]))for(let v=0;v<3;v++){const y=(v+1)%3,_=u[v],T=u[y],E=ho[h[v]],S=ho[h[y]],I=`${_}_${T}`,w=`${T}_${_}`;w in d&&d[w]?(d4.dot(d[w].normal)<=s&&(q.push(E.x,E.y,E.z),q.push(S.x,S.y,S.z)),d[w]=null):I in d||(d[I]={index0:c[v],index1:c[y],normal:d4.clone()})}}for(const m in d)if(d[m]){const{index0:g,index1:p}=d[m];lo.fromBufferAttribute(a,g),co.fromBufferAttribute(a,p),q.push(lo.x,lo.y,lo.z),q.push(co.x,co.y,co.z)}this.setAttribute("position",new ze(q,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}let yn=class extends Dn{constructor(e){super(e),this.uuid=pn(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let n=0,i=this.holes.length;n<i;n++)t[n]=this.holes[n].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(i.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,n=this.holes.length;t<n;t++){const i=this.holes[t];e.holes.push(i.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,n=e.holes.length;t<n;t++){const i=e.holes[t];this.holes.push(new Dn().fromJSON(i))}return this}};const f9={triangulate:function(r,e,t=2){const n=e&&e.length,i=n?e[0]*t:r.length;let s=Il(r,0,i,t,!0);const o=[];if(!s||s.next===s.prev)return o;let a,l,c,h,u,d,q;if(n&&(s=y9(r,e,s,t)),r.length>80*t){a=c=r[0],l=h=r[1];for(let m=t;m<i;m+=t)u=r[m],d=r[m+1],u<a&&(a=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);q=Math.max(c-a,h-l),q=q!==0?32767/q:0}return Qs(s,o,t,a,l,q,0),o}};function Il(r,e,t,n,i){let s,o;if(i===I9(r,e,t,n)>0)for(s=e;s<t;s+=n)o=Ll(s,r[s],r[s+1],o);else for(s=t-n;s>=e;s-=n)o=Ll(s,r[s],r[s+1],o);return o&&uo(o,o.next)&&(tr(o),o=o.next),o}function li(r,e){if(!r)return r;e||(e=r);let t=r,n;do if(n=!1,!t.steiner&&(uo(t,t.next)||vt(t.prev,t,t.next)===0)){if(tr(t),t=e=t.prev,t===t.next)break;n=!0}else t=t.next;while(n||t!==e);return e}function Qs(r,e,t,n,i,s,o){if(!r)return;!o&&s&&b9(r,n,i,s);let a=r,l,c;for(;r.prev!==r.next;){if(l=r.prev,c=r.next,s?g9(r,n,i,s):p9(r)){e.push(l.i/t|0),e.push(r.i/t|0),e.push(c.i/t|0),tr(r),r=c.next,a=c.next;continue}if(r=c,r===a){o?o===1?(r=x9(li(r),e,t),Qs(r,e,t,n,i,s,2)):o===2&&_9(r,e,t,n,i,s):Qs(li(r),e,t,n,i,s,1);break}}}function p9(r){const e=r.prev,t=r,n=r.next;if(vt(e,t,n)>=0)return!1;const i=e.x,s=t.x,o=n.x,a=e.y,l=t.y,c=n.y,h=i<s?i<o?i:o:s<o?s:o,u=a<l?a<c?a:c:l<c?l:c,d=i>s?i>o?i:o:s>o?s:o,q=a>l?a>c?a:c:l>c?l:c;let m=n.next;for(;m!==e;){if(m.x>=h&&m.x<=d&&m.y>=u&&m.y<=q&&is(i,a,s,l,o,c,m.x,m.y)&&vt(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function g9(r,e,t,n){const i=r.prev,s=r,o=r.next;if(vt(i,s,o)>=0)return!1;const a=i.x,l=s.x,c=o.x,h=i.y,u=s.y,d=o.y,q=a<l?a<c?a:c:l<c?l:c,m=h<u?h<d?h:d:u<d?u:d,g=a>l?a>c?a:c:l>c?l:c,p=h>u?h>d?h:d:u>d?u:d,f=q4(q,m,e,t,n),v=q4(g,p,e,t,n);let y=r.prevZ,_=r.nextZ;for(;y&&y.z>=f&&_&&_.z<=v;){if(y.x>=q&&y.x<=g&&y.y>=m&&y.y<=p&&y!==i&&y!==o&&is(a,h,l,u,c,d,y.x,y.y)&&vt(y.prev,y,y.next)>=0||(y=y.prevZ,_.x>=q&&_.x<=g&&_.y>=m&&_.y<=p&&_!==i&&_!==o&&is(a,h,l,u,c,d,_.x,_.y)&&vt(_.prev,_,_.next)>=0))return!1;_=_.nextZ}for(;y&&y.z>=f;){if(y.x>=q&&y.x<=g&&y.y>=m&&y.y<=p&&y!==i&&y!==o&&is(a,h,l,u,c,d,y.x,y.y)&&vt(y.prev,y,y.next)>=0)return!1;y=y.prevZ}for(;_&&_.z<=v;){if(_.x>=q&&_.x<=g&&_.y>=m&&_.y<=p&&_!==i&&_!==o&&is(a,h,l,u,c,d,_.x,_.y)&&vt(_.prev,_,_.next)>=0)return!1;_=_.nextZ}return!0}function x9(r,e,t){let n=r;do{const i=n.prev,s=n.next.next;!uo(i,s)&&zl(i,n,n.next,s)&&er(i,s)&&er(s,i)&&(e.push(i.i/t|0),e.push(n.i/t|0),e.push(s.i/t|0),tr(n),tr(n.next),n=r=s),n=n.next}while(n!==r);return li(n)}function _9(r,e,t,n,i,s){let o=r;do{let a=o.next.next;for(;a!==o.prev;){if(o.i!==a.i&&A9(o,a)){let l=Nl(o,a);o=li(o,o.next),l=li(l,l.next),Qs(o,e,t,n,i,s,0),Qs(l,e,t,n,i,s,0);return}a=a.next}o=o.next}while(o!==r)}function y9(r,e,t,n){const i=[];let s,o,a,l,c;for(s=0,o=e.length;s<o;s++)a=e[s]*n,l=s<o-1?e[s+1]*n:r.length,c=Il(r,a,l,n,!1),c===c.next&&(c.steiner=!0),i.push(T9(c));for(i.sort(v9),s=0;s<i.length;s++)t=w9(i[s],t);return t}function v9(r,e){return r.x-e.x}function w9(r,e){const t=M9(r,e);if(!t)return e;const n=Nl(t,r);return li(n,n.next),li(t,t.next)}function M9(r,e){let t=e,n=-1/0,i;const s=r.x,o=r.y;do{if(o<=t.y&&o>=t.next.y&&t.next.y!==t.y){const d=t.x+(o-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(d<=s&&d>n&&(n=d,i=t.x<t.next.x?t:t.next,d===s))return i}t=t.next}while(t!==e);if(!i)return null;const a=i,l=i.x,c=i.y;let h=1/0,u;t=i;do s>=t.x&&t.x>=l&&s!==t.x&&is(o<c?s:n,o,l,c,o<c?n:s,o,t.x,t.y)&&(u=Math.abs(o-t.y)/(s-t.x),er(t,r)&&(u<h||u===h&&(t.x>i.x||t.x===i.x&&S9(i,t)))&&(i=t,h=u)),t=t.next;while(t!==a);return i}function S9(r,e){return vt(r.prev,r,e.prev)<0&&vt(e.next,r,r.next)<0}function b9(r,e,t,n){let i=r;do i.z===0&&(i.z=q4(i.x,i.y,e,t,n)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next;while(i!==r);i.prevZ.nextZ=null,i.prevZ=null,E9(i)}function E9(r){let e,t,n,i,s,o,a,l,c=1;do{for(t=r,r=null,s=null,o=0;t;){for(o++,n=t,a=0,e=0;e<c&&(a++,n=n.nextZ,!!n);e++);for(l=c;a>0||l>0&&n;)a!==0&&(l===0||!n||t.z<=n.z)?(i=t,t=t.nextZ,a--):(i=n,n=n.nextZ,l--),s?s.nextZ=i:r=i,i.prevZ=s,s=i;t=n}s.nextZ=null,c*=2}while(o>1);return r}function q4(r,e,t,n,i){return r=(r-t)*i|0,e=(e-n)*i|0,r=(r|r<<8)&16711935,r=(r|r<<4)&252645135,r=(r|r<<2)&858993459,r=(r|r<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,r|e<<1}function T9(r){let e=r,t=r;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==r);return t}function is(r,e,t,n,i,s,o,a){return(i-o)*(e-a)>=(r-o)*(s-a)&&(r-o)*(n-a)>=(t-o)*(e-a)&&(t-o)*(s-a)>=(i-o)*(n-a)}function A9(r,e){return r.next.i!==e.i&&r.prev.i!==e.i&&!C9(r,e)&&(er(r,e)&&er(e,r)&&R9(r,e)&&(vt(r.prev,r,e.prev)||vt(r,e.prev,e))||uo(r,e)&&vt(r.prev,r,r.next)>0&&vt(e.prev,e,e.next)>0)}function vt(r,e,t){return(e.y-r.y)*(t.x-e.x)-(e.x-r.x)*(t.y-e.y)}function uo(r,e){return r.x===e.x&&r.y===e.y}function zl(r,e,t,n){const i=mo(vt(r,e,t)),s=mo(vt(r,e,n)),o=mo(vt(t,n,r)),a=mo(vt(t,n,e));return!!(i!==s&&o!==a||i===0&&qo(r,t,e)||s===0&&qo(r,n,e)||o===0&&qo(t,r,n)||a===0&&qo(t,e,n))}function qo(r,e,t){return e.x<=Math.max(r.x,t.x)&&e.x>=Math.min(r.x,t.x)&&e.y<=Math.max(r.y,t.y)&&e.y>=Math.min(r.y,t.y)}function mo(r){return r>0?1:r<0?-1:0}function C9(r,e){let t=r;do{if(t.i!==r.i&&t.next.i!==r.i&&t.i!==e.i&&t.next.i!==e.i&&zl(t,t.next,r,e))return!0;t=t.next}while(t!==r);return!1}function er(r,e){return vt(r.prev,r,r.next)<0?vt(r,e,r.next)>=0&&vt(r,r.prev,e)>=0:vt(r,e,r.prev)<0||vt(r,r.next,e)<0}function R9(r,e){let t=r,n=!1;const i=(r.x+e.x)/2,s=(r.y+e.y)/2;do t.y>s!=t.next.y>s&&t.next.y!==t.y&&i<(t.next.x-t.x)*(s-t.y)/(t.next.y-t.y)+t.x&&(n=!n),t=t.next;while(t!==r);return n}function Nl(r,e){const t=new m4(r.i,r.x,r.y),n=new m4(e.i,e.x,e.y),i=r.next,s=e.prev;return r.next=e,e.prev=r,t.next=i,i.prev=t,n.next=t,t.prev=n,s.next=n,n.prev=s,n}function Ll(r,e,t,n){const i=new m4(r,e,t);return n?(i.next=n.next,i.prev=n,n.next.prev=i,n.next=i):(i.prev=i,i.next=i),i}function tr(r){r.next.prev=r.prev,r.prev.next=r.next,r.prevZ&&(r.prevZ.nextZ=r.nextZ),r.nextZ&&(r.nextZ.prevZ=r.prevZ)}function m4(r,e,t){this.i=r,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function I9(r,e,t,n){let i=0;for(let s=e,o=t-n;s<t;s+=n)i+=(r[o]-r[s])*(r[s+1]+r[o+1]),o=s;return i}class kn{static area(e){const t=e.length;let n=0;for(let i=t-1,s=0;s<t;i=s++)n+=e[i].x*e[s].y-e[s].x*e[i].y;return n*.5}static isClockWise(e){return kn.area(e)<0}static triangulateShape(e,t){const n=[],i=[],s=[];Pl(e),Dl(n,e);let o=e.length;t.forEach(Pl);for(let l=0;l<t.length;l++)i.push(o),o+=t[l].length,Dl(n,t[l]);const a=f9.triangulate(n,i);for(let l=0;l<a.length;l+=3)s.push(a.slice(l,l+3));return s}}function Pl(r){const e=r.length;e>2&&r[e-1].equals(r[0])&&r.pop()}function Dl(r,e){for(let t=0;t<e.length;t++)r.push(e[t].x),r.push(e[t].y)}class e1 extends Ze{constructor(e=new yn([new $(.5,.5),new $(-.5,.5),new $(-.5,-.5),new $(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const n=this,i=[],s=[];for(let a=0,l=e.length;a<l;a++){const c=e[a];o(c)}this.setAttribute("position",new ze(i,3)),this.setAttribute("uv",new ze(s,2)),this.computeVertexNormals();function o(a){const l=[],c=t.curveSegments!==void 0?t.curveSegments:12,h=t.steps!==void 0?t.steps:1,u=t.depth!==void 0?t.depth:1;let d=t.bevelEnabled!==void 0?t.bevelEnabled:!0,q=t.bevelThickness!==void 0?t.bevelThickness:.2,m=t.bevelSize!==void 0?t.bevelSize:q-.1,g=t.bevelOffset!==void 0?t.bevelOffset:0,p=t.bevelSegments!==void 0?t.bevelSegments:3;const f=t.extrudePath,v=t.UVGenerator!==void 0?t.UVGenerator:z9;let y,_=!1,T,E,S,I;f&&(y=f.getSpacedPoints(h),_=!0,d=!1,T=f.computeFrenetFrames(h,!1),E=new L,S=new L,I=new L),d||(p=0,q=0,m=0,g=0);const w=a.extractPoints(c);let x=w.shape;const C=w.holes;if(!kn.isClockWise(x)){x=x.reverse();for(let Z=0,te=C.length;Z<te;Z++){const M=C[Z];kn.isClockWise(M)&&(C[Z]=M.reverse())}}const U=kn.triangulateShape(x,C),B=x;for(let Z=0,te=C.length;Z<te;Z++){const M=C[Z];x=x.concat(M)}function P(Z,te,M){return te||console.error("THREE.ExtrudeGeometry: vec does not exist"),Z.clone().addScaledVector(te,M)}const K=x.length,ie=U.length;function H(Z,te,M){let re,ee,ue;const V=Z.x-te.x,k=Z.y-te.y,ae=M.x-Z.x,z=M.y-Z.y,b=V*V+k*k,J=V*z-k*ae;if(Math.abs(J)>Number.EPSILON){const oe=Math.sqrt(b),qe=Math.sqrt(ae*ae+z*z),de=te.x-k/oe,Pe=te.y+V/oe,Me=M.x-z/qe,Te=M.y+ae/qe,Qe=((Me-de)*z-(Te-Pe)*ae)/(V*z-k*ae);re=de+V*Qe-Z.x,ee=Pe+k*Qe-Z.y;const xe=re*re+ee*ee;if(xe<=2)return new $(re,ee);ue=Math.sqrt(xe/2)}else{let oe=!1;V>Number.EPSILON?ae>Number.EPSILON&&(oe=!0):V<-Number.EPSILON?ae<-Number.EPSILON&&(oe=!0):Math.sign(k)===Math.sign(z)&&(oe=!0),oe?(re=-k,ee=V,ue=Math.sqrt(b)):(re=V,ee=k,ue=Math.sqrt(b/2))}return new $(re/ue,ee/ue)}const fe=[];for(let Z=0,te=B.length,M=te-1,re=Z+1;Z<te;Z++,M++,re++)M===te&&(M=0),re===te&&(re=0),fe[Z]=H(B[Z],B[M],B[re]);const ge=[];let ve,De=fe.concat();for(let Z=0,te=C.length;Z<te;Z++){const M=C[Z];ve=[];for(let re=0,ee=M.length,ue=ee-1,V=re+1;re<ee;re++,ue++,V++)ue===ee&&(ue=0),V===ee&&(V=0),ve[re]=H(M[re],M[ue],M[V]);ge.push(ve),De=De.concat(ve)}for(let Z=0;Z<p;Z++){const te=Z/p,M=q*Math.cos(te*Math.PI/2),re=m*Math.sin(te*Math.PI/2)+g;for(let ee=0,ue=B.length;ee<ue;ee++){const V=P(B[ee],fe[ee],re);A(V.x,V.y,-M)}for(let ee=0,ue=C.length;ee<ue;ee++){const V=C[ee];ve=ge[ee];for(let k=0,ae=V.length;k<ae;k++){const z=P(V[k],ve[k],re);A(z.x,z.y,-M)}}}const ke=m+g;for(let Z=0;Z<K;Z++){const te=d?P(x[Z],De[Z],ke):x[Z];_?(S.copy(T.normals[0]).multiplyScalar(te.x),E.copy(T.binormals[0]).multiplyScalar(te.y),I.copy(y[0]).add(S).add(E),A(I.x,I.y,I.z)):A(te.x,te.y,0)}for(let Z=1;Z<=h;Z++)for(let te=0;te<K;te++){const M=d?P(x[te],De[te],ke):x[te];_?(S.copy(T.normals[Z]).multiplyScalar(M.x),E.copy(T.binormals[Z]).multiplyScalar(M.y),I.copy(y[Z]).add(S).add(E),A(I.x,I.y,I.z)):A(M.x,M.y,u/h*Z)}for(let Z=p-1;Z>=0;Z--){const te=Z/p,M=q*Math.cos(te*Math.PI/2),re=m*Math.sin(te*Math.PI/2)+g;for(let ee=0,ue=B.length;ee<ue;ee++){const V=P(B[ee],fe[ee],re);A(V.x,V.y,u+M)}for(let ee=0,ue=C.length;ee<ue;ee++){const V=C[ee];ve=ge[ee];for(let k=0,ae=V.length;k<ae;k++){const z=P(V[k],ve[k],re);_?A(z.x,z.y+y[h-1].y,y[h-1].x+M):A(z.x,z.y,u+M)}}}F(),D();function F(){const Z=i.length/3;if(d){let te=0,M=K*te;for(let re=0;re<ie;re++){const ee=U[re];Q(ee[2]+M,ee[1]+M,ee[0]+M)}te=h+p*2,M=K*te;for(let re=0;re<ie;re++){const ee=U[re];Q(ee[0]+M,ee[1]+M,ee[2]+M)}}else{for(let te=0;te<ie;te++){const M=U[te];Q(M[2],M[1],M[0])}for(let te=0;te<ie;te++){const M=U[te];Q(M[0]+K*h,M[1]+K*h,M[2]+K*h)}}n.addGroup(Z,i.length/3-Z,0)}function D(){const Z=i.length/3;let te=0;N(B,te),te+=B.length;for(let M=0,re=C.length;M<re;M++){const ee=C[M];N(ee,te),te+=ee.length}n.addGroup(Z,i.length/3-Z,1)}function N(Z,te){let M=Z.length;for(;--M>=0;){const re=M;let ee=M-1;ee<0&&(ee=Z.length-1);for(let ue=0,V=h+p*2;ue<V;ue++){const k=K*ue,ae=K*(ue+1),z=te+re+k,b=te+ee+k,J=te+ee+ae,oe=te+re+ae;he(z,b,J,oe)}}}function A(Z,te,M){l.push(Z),l.push(te),l.push(M)}function Q(Z,te,M){j(Z),j(te),j(M);const re=i.length/3,ee=v.generateTopUV(n,i,re-3,re-2,re-1);pe(ee[0]),pe(ee[1]),pe(ee[2])}function he(Z,te,M,re){j(Z),j(te),j(re),j(te),j(M),j(re);const ee=i.length/3,ue=v.generateSideWallUV(n,i,ee-6,ee-3,ee-2,ee-1);pe(ue[0]),pe(ue[1]),pe(ue[3]),pe(ue[1]),pe(ue[2]),pe(ue[3])}function j(Z){i.push(l[Z*3+0]),i.push(l[Z*3+1]),i.push(l[Z*3+2])}function pe(Z){s.push(Z.x),s.push(Z.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,n=this.parameters.options;return N9(t,n,e)}static fromJSON(e,t){const n=[];for(let s=0,o=e.shapes.length;s<o;s++){const a=t[e.shapes[s]];n.push(a)}const i=e.options.extrudePath;return i!==void 0&&(e.options.extrudePath=new io[i.type]().fromJSON(i)),new e1(n,e.options)}}const z9={generateTopUV:function(r,e,t,n,i){const s=e[t*3],o=e[t*3+1],a=e[n*3],l=e[n*3+1],c=e[i*3],h=e[i*3+1];return[new $(s,o),new $(a,l),new $(c,h)]},generateSideWallUV:function(r,e,t,n,i,s){const o=e[t*3],a=e[t*3+1],l=e[t*3+2],c=e[n*3],h=e[n*3+1],u=e[n*3+2],d=e[i*3],q=e[i*3+1],m=e[i*3+2],g=e[s*3],p=e[s*3+1],f=e[s*3+2];return Math.abs(a-h)<Math.abs(o-c)?[new $(o,1-l),new $(c,1-u),new $(d,1-m),new $(g,1-f)]:[new $(a,1-l),new $(h,1-u),new $(q,1-m),new $(p,1-f)]}};function N9(r,e,t){if(t.shapes=[],Array.isArray(r))for(let n=0,i=r.length;n<i;n++){const s=r[n];t.shapes.push(s.uuid)}else t.shapes.push(r.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class fo extends D1{constructor(e=1,t=0){const n=(1+Math.sqrt(5))/2,i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],s=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,s,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new fo(e.radius,e.detail)}}class nr extends D1{constructor(e=1,t=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new nr(e.radius,e.detail)}}class ss extends Ze{constructor(e=1,t=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:n,heightSegments:i};const s=e/2,o=t/2,a=Math.floor(n),l=Math.floor(i),c=a+1,h=l+1,u=e/a,d=t/l,q=[],m=[],g=[],p=[];for(let f=0;f<h;f++){const v=f*d-o;for(let y=0;y<c;y++){const _=y*u-s;m.push(_,-v,0),g.push(0,0,1),p.push(y/a),p.push(1-f/l)}}for(let f=0;f<l;f++)for(let v=0;v<a;v++){const y=v+c*f,_=v+c*(f+1),T=v+1+c*(f+1),E=v+1+c*f;q.push(y,_,E),q.push(_,T,E)}this.setIndex(q),this.setAttribute("position",new ze(m,3)),this.setAttribute("normal",new ze(g,3)),this.setAttribute("uv",new ze(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ss(e.width,e.height,e.widthSegments,e.heightSegments)}}class po extends Ze{constructor(e=.5,t=1,n=32,i=1,s=0,o=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:n,phiSegments:i,thetaStart:s,thetaLength:o},n=Math.max(3,n),i=Math.max(1,i);const a=[],l=[],c=[],h=[];let u=e;const d=(t-e)/i,q=new L,m=new $;for(let g=0;g<=i;g++){for(let p=0;p<=n;p++){const f=s+p/n*o;q.x=u*Math.cos(f),q.y=u*Math.sin(f),l.push(q.x,q.y,q.z),c.push(0,0,1),m.x=(q.x/t+1)/2,m.y=(q.y/t+1)/2,h.push(m.x,m.y)}u+=d}for(let g=0;g<i;g++){const p=g*(n+1);for(let f=0;f<n;f++){const v=f+p,y=v,_=v+n+1,T=v+n+2,E=v+1;a.push(y,_,E),a.push(_,T,E)}}this.setIndex(a),this.setAttribute("position",new ze(l,3)),this.setAttribute("normal",new ze(c,3)),this.setAttribute("uv",new ze(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new po(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class ir extends Ze{constructor(e=new yn([new $(0,.5),new $(-.5,-.5),new $(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const n=[],i=[],s=[],o=[];let a=0,l=0;if(Array.isArray(e)===!1)c(e);else for(let h=0;h<e.length;h++)c(e[h]),this.addGroup(a,l,h),a+=l,l=0;this.setIndex(n),this.setAttribute("position",new ze(i,3)),this.setAttribute("normal",new ze(s,3)),this.setAttribute("uv",new ze(o,2));function c(h){const u=i.length/3,d=h.extractPoints(t);let q=d.shape;const m=d.holes;kn.isClockWise(q)===!1&&(q=q.reverse());for(let p=0,f=m.length;p<f;p++){const v=m[p];kn.isClockWise(v)===!0&&(m[p]=v.reverse())}const g=kn.triangulateShape(q,m);for(let p=0,f=m.length;p<f;p++){const v=m[p];q=q.concat(v)}for(let p=0,f=q.length;p<f;p++){const v=q[p];i.push(v.x,v.y,0),s.push(0,0,1),o.push(v.x,v.y)}for(let p=0,f=g.length;p<f;p++){const v=g[p],y=v[0]+u,_=v[1]+u,T=v[2]+u;n.push(y,_,T),l+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return L9(t,e)}static fromJSON(e,t){const n=[];for(let i=0,s=e.shapes.length;i<s;i++){const o=t[e.shapes[i]];n.push(o)}return new ir(n,e.curveSegments)}}function L9(r,e){if(e.shapes=[],Array.isArray(r))for(let t=0,n=r.length;t<n;t++){const i=r[t];e.shapes.push(i.uuid)}else e.shapes.push(r.uuid);return e}class sr extends Ze{constructor(e=1,t=32,n=16,i=0,s=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:n,phiStart:i,phiLength:s,thetaStart:o,thetaLength:a},t=Math.max(3,Math.floor(t)),n=Math.max(2,Math.floor(n));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new L,d=new L,q=[],m=[],g=[],p=[];for(let f=0;f<=n;f++){const v=[],y=f/n;let _=0;f===0&&o===0?_=.5/t:f===n&&l===Math.PI&&(_=-.5/t);for(let T=0;T<=t;T++){const E=T/t;u.x=-e*Math.cos(i+E*s)*Math.sin(o+y*a),u.y=e*Math.cos(o+y*a),u.z=e*Math.sin(i+E*s)*Math.sin(o+y*a),m.push(u.x,u.y,u.z),d.copy(u).normalize(),g.push(d.x,d.y,d.z),p.push(E+_,1-y),v.push(c++)}h.push(v)}for(let f=0;f<n;f++)for(let v=0;v<t;v++){const y=h[f][v+1],_=h[f][v],T=h[f+1][v],E=h[f+1][v+1];(f!==0||o>0)&&q.push(y,_,E),(f!==n-1||l<Math.PI)&&q.push(_,T,E)}this.setIndex(q),this.setAttribute("position",new ze(m,3)),this.setAttribute("normal",new ze(g,3)),this.setAttribute("uv",new ze(p,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new sr(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class go extends D1{constructor(e=1,t=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new go(e.radius,e.detail)}}class xo extends Ze{constructor(e=1,t=.4,n=12,i=48,s=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:n,tubularSegments:i,arc:s},n=Math.floor(n),i=Math.floor(i);const o=[],a=[],l=[],c=[],h=new L,u=new L,d=new L;for(let q=0;q<=n;q++)for(let m=0;m<=i;m++){const g=m/i*s,p=q/n*Math.PI*2;u.x=(e+t*Math.cos(p))*Math.cos(g),u.y=(e+t*Math.cos(p))*Math.sin(g),u.z=t*Math.sin(p),a.push(u.x,u.y,u.z),h.x=e*Math.cos(g),h.y=e*Math.sin(g),d.subVectors(u,h).normalize(),l.push(d.x,d.y,d.z),c.push(m/i),c.push(q/n)}for(let q=1;q<=n;q++)for(let m=1;m<=i;m++){const g=(i+1)*q+m-1,p=(i+1)*(q-1)+m-1,f=(i+1)*(q-1)+m,v=(i+1)*q+m;o.push(g,p,v),o.push(p,f,v)}this.setIndex(o),this.setAttribute("position",new ze(a,3)),this.setAttribute("normal",new ze(l,3)),this.setAttribute("uv",new ze(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new xo(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class _o extends Ze{constructor(e=1,t=.4,n=64,i=8,s=2,o=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:n,radialSegments:i,p:s,q:o},n=Math.floor(n),i=Math.floor(i);const a=[],l=[],c=[],h=[],u=new L,d=new L,q=new L,m=new L,g=new L,p=new L,f=new L;for(let y=0;y<=n;++y){const _=y/n*s*Math.PI*2;v(_,s,o,e,q),v(_+.01,s,o,e,m),p.subVectors(m,q),f.addVectors(m,q),g.crossVectors(p,f),f.crossVectors(g,p),g.normalize(),f.normalize();for(let T=0;T<=i;++T){const E=T/i*Math.PI*2,S=-t*Math.cos(E),I=t*Math.sin(E);u.x=q.x+(S*f.x+I*g.x),u.y=q.y+(S*f.y+I*g.y),u.z=q.z+(S*f.z+I*g.z),l.push(u.x,u.y,u.z),d.subVectors(u,q).normalize(),c.push(d.x,d.y,d.z),h.push(y/n),h.push(T/i)}}for(let y=1;y<=n;y++)for(let _=1;_<=i;_++){const T=(i+1)*(y-1)+(_-1),E=(i+1)*y+(_-1),S=(i+1)*y+_,I=(i+1)*(y-1)+_;a.push(T,E,I),a.push(E,S,I)}this.setIndex(a),this.setAttribute("position",new ze(l,3)),this.setAttribute("normal",new ze(c,3)),this.setAttribute("uv",new ze(h,2));function v(y,_,T,E,S){const I=Math.cos(y),w=Math.sin(y),x=T/_*y,C=Math.cos(x);S.x=E*(2+C)*.5*I,S.y=E*(2+C)*w*.5,S.z=E*Math.sin(x)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new _o(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class yo extends Ze{constructor(e=new h4(new L(-1,-1,0),new L(-1,1,0),new L(1,1,0)),t=64,n=1,i=8,s=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:n,radialSegments:i,closed:s};const o=e.computeFrenetFrames(t,s);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;const a=new L,l=new L,c=new $;let h=new L;const u=[],d=[],q=[],m=[];g(),this.setIndex(m),this.setAttribute("position",new ze(u,3)),this.setAttribute("normal",new ze(d,3)),this.setAttribute("uv",new ze(q,2));function g(){for(let y=0;y<t;y++)p(y);p(s===!1?t:0),v(),f()}function p(y){h=e.getPointAt(y/t,h);const _=o.normals[y],T=o.binormals[y];for(let E=0;E<=i;E++){const S=E/i*Math.PI*2,I=Math.sin(S),w=-Math.cos(S);l.x=w*_.x+I*T.x,l.y=w*_.y+I*T.y,l.z=w*_.z+I*T.z,l.normalize(),d.push(l.x,l.y,l.z),a.x=h.x+n*l.x,a.y=h.y+n*l.y,a.z=h.z+n*l.z,u.push(a.x,a.y,a.z)}}function f(){for(let y=1;y<=t;y++)for(let _=1;_<=i;_++){const T=(i+1)*(y-1)+(_-1),E=(i+1)*y+(_-1),S=(i+1)*y+_,I=(i+1)*(y-1)+_;m.push(T,E,I),m.push(E,S,I)}}function v(){for(let y=0;y<=t;y++)for(let _=0;_<=i;_++)c.x=y/t,c.y=_/i,q.push(c.x,c.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new yo(new io[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class kl extends Ze{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],n=new Set,i=new L,s=new L;if(e.index!==null){const o=e.attributes.position,a=e.index;let l=e.groups;l.length===0&&(l=[{start:0,count:a.count,materialIndex:0}]);for(let c=0,h=l.length;c<h;++c){const u=l[c],d=u.start,q=u.count;for(let m=d,g=d+q;m<g;m+=3)for(let p=0;p<3;p++){const f=a.getX(m+p),v=a.getX(m+(p+1)%3);i.fromBufferAttribute(o,f),s.fromBufferAttribute(o,v),Fl(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}}else{const o=e.attributes.position;for(let a=0,l=o.count/3;a<l;a++)for(let c=0;c<3;c++){const h=3*a+c,u=3*a+(c+1)%3;i.fromBufferAttribute(o,h),s.fromBufferAttribute(o,u),Fl(i,s,n)===!0&&(t.push(i.x,i.y,i.z),t.push(s.x,s.y,s.z))}}this.setAttribute("position",new ze(t,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function Fl(r,e,t){const n=`${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`,i=`${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;return t.has(n)===!0||t.has(i)===!0?!1:(t.add(n),t.add(i),!0)}var Ul=Object.freeze({__proto__:null,BoxGeometry:N1,CapsuleGeometry:so,CircleGeometry:ro,ConeGeometry:oo,CylinderGeometry:ns,DodecahedronGeometry:ao,EdgesGeometry:Rl,ExtrudeGeometry:e1,IcosahedronGeometry:fo,LatheGeometry:Ks,OctahedronGeometry:nr,PlaneGeometry:ss,PolyhedronGeometry:D1,RingGeometry:po,ShapeGeometry:ir,SphereGeometry:sr,TetrahedronGeometry:go,TorusGeometry:xo,TorusKnotGeometry:_o,TubeGeometry:yo,WireframeGeometry:kl});class Ol extends $t{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new _e(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class Bl extends Ln{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class f4 extends $t{constructor(e){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new _e(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new _e(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=E1,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new xn,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Vl extends f4{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new $(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Xe(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new _e(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new _e(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new _e(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get dispersion(){return this._dispersion}set dispersion(e){this._dispersion>0!=e>0&&this.version++,this._dispersion=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.dispersion=e.dispersion,this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class p4 extends $t{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new _e(16777215),this.specular=new _e(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new _e(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=E1,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new xn,this.combine=fs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Hl extends $t{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new _e(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new _e(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=E1,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class Gl extends $t{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=E1,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class g4 extends $t{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new _e(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new _e(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=E1,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new xn,this.combine=fs,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapRotation.copy(e.envMapRotation),this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class x4 extends $t{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=p3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class _4 extends $t{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}class Wl extends $t{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new _e(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=E1,this.normalScale=new $(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class Xl extends an{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function ci(r,e,t){return!r||!t&&r.constructor===e?r:typeof e.BYTES_PER_ELEMENT=="number"?new e(r):Array.prototype.slice.call(r)}function Yl(r){return ArrayBuffer.isView(r)&&!(r instanceof DataView)}function $l(r){function e(i,s){return r[i]-r[s]}const t=r.length,n=new Array(t);for(let i=0;i!==t;++i)n[i]=i;return n.sort(e),n}function y4(r,e,t){const n=r.length,i=new r.constructor(n);for(let s=0,o=0;o!==n;++s){const a=t[s]*e;for(let l=0;l!==e;++l)i[o++]=r[a+l]}return i}function v4(r,e,t,n){let i=1,s=r[0];for(;s!==void 0&&s[n]===void 0;)s=r[i++];if(s===void 0)return;let o=s[n];if(o!==void 0)if(Array.isArray(o))do o=s[n],o!==void 0&&(e.push(s.time),t.push.apply(t,o)),s=r[i++];while(s!==void 0);else if(o.toArray!==void 0)do o=s[n],o!==void 0&&(e.push(s.time),o.toArray(t,t.length)),s=r[i++];while(s!==void 0);else do o=s[n],o!==void 0&&(e.push(s.time),t.push(o)),s=r[i++];while(s!==void 0)}function P9(r,e,t,n,i=30){const s=r.clone();s.name=e;const o=[];for(let l=0;l<s.tracks.length;++l){const c=s.tracks[l],h=c.getValueSize(),u=[],d=[];for(let q=0;q<c.times.length;++q){const m=c.times[q]*i;if(!(m<t||m>=n)){u.push(c.times[q]);for(let g=0;g<h;++g)d.push(c.values[q*h+g])}}u.length!==0&&(c.times=ci(u,c.times.constructor),c.values=ci(d,c.values.constructor),o.push(c))}s.tracks=o;let a=1/0;for(let l=0;l<s.tracks.length;++l)a>s.tracks[l].times[0]&&(a=s.tracks[l].times[0]);for(let l=0;l<s.tracks.length;++l)s.tracks[l].shift(-1*a);return s.resetDuration(),s}function D9(r,e=0,t=r,n=30){n<=0&&(n=30);const i=t.tracks.length,s=e/n;for(let o=0;o<i;++o){const a=t.tracks[o],l=a.ValueTypeName;if(l==="bool"||l==="string")continue;const c=r.tracks.find(function(f){return f.name===a.name&&f.ValueTypeName===l});if(c===void 0)continue;let h=0;const u=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(h=u/3);let d=0;const q=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=q/3);const m=a.times.length-1;let g;if(s<=a.times[0]){const f=h,v=u-h;g=a.values.slice(f,v)}else if(s>=a.times[m]){const f=m*u+h,v=f+u-h;g=a.values.slice(f,v)}else{const f=a.createInterpolant(),v=h,y=u-h;f.evaluate(s),g=f.resultBuffer.slice(v,y)}l==="quaternion"&&new Wt().fromArray(g).normalize().conjugate().toArray(g);const p=c.times.length;for(let f=0;f<p;++f){const v=f*q+d;if(l==="quaternion")Wt.multiplyQuaternionsFlat(c.values,v,g,0,c.values,v);else{const y=q-d*2;for(let _=0;_<y;++_)c.values[v+_]-=g[_]}}}return r.blendMode=pa,r}const k9={convertArray:ci,isTypedArray:Yl,getKeyframeOrder:$l,sortedArray:y4,flattenJSON:v4,subclip:P9,makeClipAdditive:D9};class rr{constructor(e,t,n,i){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(n),this.sampleValues=t,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let n=this._cachedIndex,i=t[n],s=t[n-1];e:{t:{let o;n:{i:if(!(e<i)){for(let a=n+2;;){if(i===void 0){if(e<s)break i;return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===a)break;if(s=i,i=t[++n],e<i)break t}o=t.length;break n}if(!(e>=s)){const a=t[1];e<a&&(n=2,s=a);for(let l=n-2;;){if(s===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(i=s,s=t[--n-1],e>=s)break t}o=n,n=0;break n}break e}for(;n<o;){const a=n+o>>>1;e<t[a]?o=a:n=a+1}if(i=t[n],s=t[n-1],s===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===void 0)return n=t.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,s,i)}return this.interpolate_(n,s,e,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,n=this.sampleValues,i=this.valueSize,s=e*i;for(let o=0;o!==i;++o)t[o]=n[s+o];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Zl extends rr{constructor(e,t,n,i){super(e,t,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Z1,endingEnd:Z1}}intervalChanged_(e,t,n){const i=this.parameterPositions;let s=e-2,o=e+1,a=i[s],l=i[o];if(a===void 0)switch(this.getSettings_().endingStart){case j1:s=e,a=2*t-n;break;case As:s=i.length-2,a=t+i[s]-i[s+1];break;default:s=e,a=n}if(l===void 0)switch(this.getSettings_().endingEnd){case j1:o=e,l=2*n-t;break;case As:o=1,l=n+i[1]-i[0];break;default:o=e-1,l=t}const c=(n-t)*.5,h=this.valueSize;this._weightPrev=c/(t-a),this._weightNext=c/(l-n),this._offsetPrev=s*h,this._offsetNext=o*h}interpolate_(e,t,n,i){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=e*a,c=l-a,h=this._offsetPrev,u=this._offsetNext,d=this._weightPrev,q=this._weightNext,m=(n-t)/(i-t),g=m*m,p=g*m,f=-d*p+2*d*g-d*m,v=(1+d)*p+(-1.5-2*d)*g+(-.5+d)*m+1,y=(-1-q)*p+(1.5+q)*g+.5*m,_=q*p-q*g;for(let T=0;T!==a;++T)s[T]=f*o[h+T]+v*o[c+T]+y*o[l+T]+_*o[u+T];return s}}class w4 extends rr{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=e*a,c=l-a,h=(n-t)/(i-t),u=1-h;for(let d=0;d!==a;++d)s[d]=o[c+d]*u+o[l+d]*h;return s}}class jl extends rr{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e){return this.copySampleValue_(e-1)}}class Fn{constructor(e,t,n,i){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=ci(t,this.TimeBufferType),this.values=ci(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let n;if(t.toJSON!==this.toJSON)n=t.toJSON(e);else{n={name:e.name,times:ci(e.times,Array),values:ci(e.values,Array)};const i=e.getInterpolation();i!==e.DefaultInterpolation&&(n.interpolation=i)}return n.type=e.ValueTypeName,n}InterpolantFactoryMethodDiscrete(e){return new jl(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new w4(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Zl(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case Ts:t=this.InterpolantFactoryMethodDiscrete;break;case d2:t=this.InterpolantFactoryMethodLinear;break;case q2:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(n);return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Ts;case this.InterpolantFactoryMethodLinear:return d2;case this.InterpolantFactoryMethodSmooth:return q2}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let n=0,i=t.length;n!==i;++n)t[n]*=e}return this}trim(e,t){const n=this.times,i=n.length;let s=0,o=i-1;for(;s!==i&&n[s]<e;)++s;for(;o!==-1&&n[o]>t;)--o;if(++o,s!==0||o!==i){s>=o&&(o=Math.max(o,1),s=o-1);const a=this.getValueSize();this.times=n.slice(s,o),this.values=this.values.slice(s*a,o*a)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const n=this.times,i=this.values,s=n.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let o=null;for(let a=0;a!==s;a++){const l=n[a];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,l),e=!1;break}if(o!==null&&o>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,l,o),e=!1;break}o=l}if(i!==void 0&&Yl(i))for(let a=0,l=i.length;a!==l;++a){const c=i[a];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,c),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===q2,s=e.length-1;let o=1;for(let a=1;a<s;++a){let l=!1;const c=e[a],h=e[a+1];if(c!==h&&(a!==1||c!==e[0]))if(i)l=!0;else{const u=a*n,d=u-n,q=u+n;for(let m=0;m!==n;++m){const g=t[u+m];if(g!==t[d+m]||g!==t[q+m]){l=!0;break}}}if(l){if(a!==o){e[o]=e[a];const u=a*n,d=o*n;for(let q=0;q!==n;++q)t[d+q]=t[u+q]}++o}}if(s>0){e[o]=e[s];for(let a=s*n,l=o*n,c=0;c!==n;++c)t[l+c]=t[a+c];++o}return o!==e.length?(this.times=e.slice(0,o),this.values=t.slice(0,o*n)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),n=this.constructor,i=new n(this.name,e,t);return i.createInterpolant=this.createInterpolant,i}}Fn.prototype.TimeBufferType=Float32Array,Fn.prototype.ValueBufferType=Float32Array,Fn.prototype.DefaultInterpolation=d2;class hi extends Fn{constructor(e,t,n){super(e,t,n)}}hi.prototype.ValueTypeName="bool",hi.prototype.ValueBufferType=Array,hi.prototype.DefaultInterpolation=Ts,hi.prototype.InterpolantFactoryMethodLinear=void 0,hi.prototype.InterpolantFactoryMethodSmooth=void 0;class M4 extends Fn{}M4.prototype.ValueTypeName="color";class or extends Fn{}or.prototype.ValueTypeName="number";class Jl extends rr{constructor(e,t,n,i){super(e,t,n,i)}interpolate_(e,t,n,i){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=(n-t)/(i-t);let c=e*a;for(let h=c+a;c!==h;c+=4)Wt.slerpFlat(s,0,o,c-a,o,c,l);return s}}class ar extends Fn{InterpolantFactoryMethodLinear(e){return new Jl(this.times,this.values,this.getValueSize(),e)}}ar.prototype.ValueTypeName="quaternion",ar.prototype.InterpolantFactoryMethodSmooth=void 0;class ui extends Fn{constructor(e,t,n){super(e,t,n)}}ui.prototype.ValueTypeName="string",ui.prototype.ValueBufferType=Array,ui.prototype.DefaultInterpolation=Ts,ui.prototype.InterpolantFactoryMethodLinear=void 0,ui.prototype.InterpolantFactoryMethodSmooth=void 0;class lr extends Fn{}lr.prototype.ValueTypeName="vector";class cr{constructor(e="",t=-1,n=[],i=m2){this.name=e,this.tracks=n,this.duration=t,this.blendMode=i,this.uuid=pn(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],n=e.tracks,i=1/(e.fps||1);for(let o=0,a=n.length;o!==a;++o)t.push(U9(n[o]).scale(i));const s=new this(e.name,e.duration,t,e.blendMode);return s.uuid=e.uuid,s}static toJSON(e){const t=[],n=e.tracks,i={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let s=0,o=n.length;s!==o;++s)t.push(Fn.toJSON(n[s]));return i}static CreateFromMorphTargetSequence(e,t,n,i){const s=t.length,o=[];for(let a=0;a<s;a++){let l=[],c=[];l.push((a+s-1)%s,a,(a+1)%s),c.push(0,1,0);const h=$l(l);l=y4(l,1,h),c=y4(c,1,h),!i&&l[0]===0&&(l.push(s),c.push(c[0])),o.push(new or(".morphTargetInfluences["+t[a].name+"]",l,c).scale(1/n))}return new this(e,-1,o)}static findByName(e,t){let n=e;if(!Array.isArray(e)){const i=e;n=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<n.length;i++)if(n[i].name===t)return n[i];return null}static CreateClipsFromMorphTargetSequences(e,t,n){const i={},s=/^([\w-]*?)([\d]+)$/;for(let a=0,l=e.length;a<l;a++){const c=e[a],h=c.name.match(s);if(h&&h.length>1){const u=h[1];let d=i[u];d||(i[u]=d=[]),d.push(c)}}const o=[];for(const a in i)o.push(this.CreateFromMorphTargetSequence(a,i[a],t,n));return o}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(u,d,q,m,g){if(q.length!==0){const p=[],f=[];v4(q,p,f,m),p.length!==0&&g.push(new u(d,p,f))}},i=[],s=e.name||"default",o=e.fps||30,a=e.blendMode;let l=e.length||-1;const c=e.hierarchy||[];for(let u=0;u<c.length;u++){const d=c[u].keys;if(!(!d||d.length===0))if(d[0].morphTargets){const q={};let m;for(m=0;m<d.length;m++)if(d[m].morphTargets)for(let g=0;g<d[m].morphTargets.length;g++)q[d[m].morphTargets[g]]=-1;for(const g in q){const p=[],f=[];for(let v=0;v!==d[m].morphTargets.length;++v){const y=d[m];p.push(y.time),f.push(y.morphTarget===g?1:0)}i.push(new or(".morphTargetInfluence["+g+"]",p,f))}l=q.length*o}else{const q=".bones["+t[u].name+"]";n(lr,q+".position",d,"pos",i),n(ar,q+".quaternion",d,"rot",i),n(lr,q+".scale",d,"scl",i)}}return i.length===0?null:new this(s,l,i,a)}resetDuration(){const e=this.tracks;let t=0;for(let n=0,i=e.length;n!==i;++n){const s=this.tracks[n];t=Math.max(t,s.times[s.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function F9(r){switch(r.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return or;case"vector":case"vector2":case"vector3":case"vector4":return lr;case"color":return M4;case"quaternion":return ar;case"bool":case"boolean":return hi;case"string":return ui}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+r)}function U9(r){if(r.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=F9(r.type);if(r.times===void 0){const t=[],n=[];v4(r.keys,t,n,"value"),r.times=t,r.values=n}return e.parse!==void 0?e.parse(r):new e(r.name,r.times,r.values,r.interpolation)}const x1={enabled:!1,files:{},add:function(r,e){this.enabled!==!1&&(this.files[r]=e)},get:function(r){if(this.enabled!==!1)return this.files[r]},remove:function(r){delete this.files[r]},clear:function(){this.files={}}};class S4{constructor(e,t,n){const i=this;let s=!1,o=0,a=0,l;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=n,this.itemStart=function(h){a++,s===!1&&i.onStart!==void 0&&i.onStart(h,o,a),s=!0},this.itemEnd=function(h){o++,i.onProgress!==void 0&&i.onProgress(h,o,a),o===a&&(s=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(h){i.onError!==void 0&&i.onError(h)},this.resolveURL=function(h){return l?l(h):h},this.setURLModifier=function(h){return l=h,this},this.addHandler=function(h,u){return c.push(h,u),this},this.removeHandler=function(h){const u=c.indexOf(h);return u!==-1&&c.splice(u,2),this},this.getHandler=function(h){for(let u=0,d=c.length;u<d;u+=2){const q=c[u],m=c[u+1];if(q.global&&(q.lastIndex=0),q.test(h))return m}return null}}}const Kl=new S4;class jt{constructor(e){this.manager=e!==void 0?e:Kl,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const n=this;return new Promise(function(i,s){n.load(e,i,t,s)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}jt.DEFAULT_MATERIAL_NAME="__DEFAULT";const _1={};class O9 extends Error{constructor(e,t){super(e),this.response=t}}class Un extends jt{constructor(e){super(e)}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=x1.get(e);if(s!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(s),this.manager.itemEnd(e)},0),s;if(_1[e]!==void 0){_1[e].push({onLoad:t,onProgress:n,onError:i});return}_1[e]=[],_1[e].push({onLoad:t,onProgress:n,onError:i});const o=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,l=this.responseType;fetch(o).then(c=>{if(c.status===200||c.status===0){if(c.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||c.body===void 0||c.body.getReader===void 0)return c;const h=_1[e],u=c.body.getReader(),d=c.headers.get("X-File-Size")||c.headers.get("Content-Length"),q=d?parseInt(d):0,m=q!==0;let g=0;const p=new ReadableStream({start(f){v();function v(){u.read().then(({done:y,value:_})=>{if(y)f.close();else{g+=_.byteLength;const T=new ProgressEvent("progress",{lengthComputable:m,loaded:g,total:q});for(let E=0,S=h.length;E<S;E++){const I=h[E];I.onProgress&&I.onProgress(T)}f.enqueue(_),v()}},y=>{f.error(y)})}}});return new Response(p)}else throw new O9(`fetch for "${c.url}" responded with ${c.status}: ${c.statusText}`,c)}).then(c=>{switch(l){case"arraybuffer":return c.arrayBuffer();case"blob":return c.blob();case"document":return c.text().then(h=>new DOMParser().parseFromString(h,a));case"json":return c.json();default:if(a===void 0)return c.text();{const u=/charset="?([^;"\s]*)"?/i.exec(a),d=u&&u[1]?u[1].toLowerCase():void 0,q=new TextDecoder(d);return c.arrayBuffer().then(m=>q.decode(m))}}}).then(c=>{x1.add(e,c);const h=_1[e];delete _1[e];for(let u=0,d=h.length;u<d;u++){const q=h[u];q.onLoad&&q.onLoad(c)}}).catch(c=>{const h=_1[e];if(h===void 0)throw this.manager.itemError(e),c;delete _1[e];for(let u=0,d=h.length;u<d;u++){const q=h[u];q.onError&&q.onError(c)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class B9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new Un(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(a){try{t(s.parse(JSON.parse(a)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t=[];for(let n=0;n<e.length;n++){const i=cr.parse(e[n]);t.push(i)}return t}}class V9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=[],a=new eo,l=new Un(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(s.withCredentials);let c=0;function h(u){l.load(e[u],function(d){const q=s.parse(d,!0);o[u]={width:q.width,height:q.height,format:q.format,mipmaps:q.mipmaps},c+=1,c===6&&(q.mipmapCount===1&&(a.minFilter=Nt),a.image=o,a.format=q.format,a.needsUpdate=!0,t&&t(a))},n,i)}if(Array.isArray(e))for(let u=0,d=e.length;u<d;++u)h(u);else l.load(e,function(u){const d=s.parse(u,!0);if(d.isCubemap){const q=d.mipmaps.length/d.mipmapCount;for(let m=0;m<q;m++){o[m]={mipmaps:[]};for(let g=0;g<d.mipmapCount;g++)o[m].mipmaps.push(d.mipmaps[m*d.mipmapCount+g]),o[m].format=d.format,o[m].width=d.width,o[m].height=d.height}a.image=o}else a.image.width=d.width,a.image.height=d.height,a.mipmaps=d.mipmaps;d.mipmapCount===1&&(a.minFilter=Nt),a.format=d.format,a.needsUpdate=!0,t&&t(a)},n,i);return a}}class hr extends jt{constructor(e){super(e)}load(e,t,n,i){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,o=x1.get(e);if(o!==void 0)return s.manager.itemStart(e),setTimeout(function(){t&&t(o),s.manager.itemEnd(e)},0),o;const a=Ns("img");function l(){h(),x1.add(e,this),t&&t(this),s.manager.itemEnd(e)}function c(u){h(),i&&i(u),s.manager.itemError(e),s.manager.itemEnd(e)}function h(){a.removeEventListener("load",l,!1),a.removeEventListener("error",c,!1)}return a.addEventListener("load",l,!1),a.addEventListener("error",c,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(e),a.src=e,a}}class H9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=new Os;s.colorSpace=nn;const o=new hr(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);let a=0;function l(c){o.load(e[c],function(h){s.images[c]=h,a++,a===6&&(s.needsUpdate=!0,t&&t(s))},void 0,i)}for(let c=0;c<e.length;++c)l(c);return s}}class G9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new Kn,a=new Un(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(s.withCredentials),a.load(e,function(l){let c;try{c=s.parse(l)}catch(h){if(i!==void 0)i(h);else{console.error(h);return}}c.image!==void 0?o.image=c.image:c.data!==void 0&&(o.image.width=c.width,o.image.height=c.height,o.image.data=c.data),o.wrapS=c.wrapS!==void 0?c.wrapS:Sn,o.wrapT=c.wrapT!==void 0?c.wrapT:Sn,o.magFilter=c.magFilter!==void 0?c.magFilter:Nt,o.minFilter=c.minFilter!==void 0?c.minFilter:Nt,o.anisotropy=c.anisotropy!==void 0?c.anisotropy:1,c.colorSpace!==void 0&&(o.colorSpace=c.colorSpace),c.flipY!==void 0&&(o.flipY=c.flipY),c.format!==void 0&&(o.format=c.format),c.type!==void 0&&(o.type=c.type),c.mipmaps!==void 0&&(o.mipmaps=c.mipmaps,o.minFilter=$n),c.mipmapCount===1&&(o.minFilter=Nt),c.generateMipmaps!==void 0&&(o.generateMipmaps=c.generateMipmaps),o.needsUpdate=!0,t&&t(o,c)},n,i),o}}class W9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=new Mt,o=new hr(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(e,function(a){s.image=a,s.needsUpdate=!0,t!==void 0&&t(s)},n,i),s}}class k1 extends it{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new _e(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(t.object.target=this.target.uuid),t}}class Ql extends k1{constructor(e,t,n){super(e,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(it.DEFAULT_UP),this.updateMatrix(),this.groundColor=new _e(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const b4=new Ge,e5=new L,t5=new L;class E4{constructor(e){this.camera=e,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new $(512,512),this.map=null,this.mapPass=null,this.matrix=new Ge,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ys,this._frameExtents=new $(1,1),this._viewportCount=1,this._viewports=[new lt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,n=this.matrix;e5.setFromMatrixPosition(e.matrixWorld),t.position.copy(e5),t5.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(t5),t.updateMatrixWorld(),b4.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(b4),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(b4)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.intensity=e.intensity,this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.intensity!==1&&(e.intensity=this.intensity),this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class X9 extends E4{constructor(){super(new Ot(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,n=zi*2*e.angle*this.focus,i=this.mapSize.width/this.mapSize.height,s=e.distance||t.far;(n!==t.fov||i!==t.aspect||s!==t.far)&&(t.fov=n,t.aspect=i,t.far=s,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class n5 extends k1{constructor(e,t,n=0,i=Math.PI/3,s=0,o=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(it.DEFAULT_UP),this.updateMatrix(),this.target=new it,this.distance=n,this.angle=i,this.penumbra=s,this.decay=o,this.map=null,this.shadow=new X9}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const i5=new Ge,ur=new L,T4=new L;class Y9 extends E4{constructor(){super(new Ot(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new $(4,2),this._viewportCount=6,this._viewports=[new lt(2,1,1,1),new lt(0,1,1,1),new lt(3,1,1,1),new lt(1,1,1,1),new lt(3,0,1,1),new lt(1,0,1,1)],this._cubeDirections=[new L(1,0,0),new L(-1,0,0),new L(0,0,1),new L(0,0,-1),new L(0,1,0),new L(0,-1,0)],this._cubeUps=[new L(0,1,0),new L(0,1,0),new L(0,1,0),new L(0,1,0),new L(0,0,1),new L(0,0,-1)]}updateMatrices(e,t=0){const n=this.camera,i=this.matrix,s=e.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),ur.setFromMatrixPosition(e.matrixWorld),n.position.copy(ur),T4.copy(n.position),T4.add(this._cubeDirections[t]),n.up.copy(this._cubeUps[t]),n.lookAt(T4),n.updateMatrixWorld(),i.makeTranslation(-ur.x,-ur.y,-ur.z),i5.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(i5)}}class vo extends k1{constructor(e,t,n=0,i=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Y9}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class wo extends L2{constructor(e=-1,t=1,n=1,i=-1,s=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=n,this.bottom=i,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,n,i,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=n,this.view.offsetY=i,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let s=n-e,o=n+e,a=i+t,l=i-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}class $9 extends E4{constructor(){super(new wo(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class s5 extends k1{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(it.DEFAULT_UP),this.updateMatrix(),this.target=new it,this.shadow=new $9}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class A4 extends k1{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class r5 extends k1{constructor(e,t,n=10,i=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class o5{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new L)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const n=e.x,i=e.y,s=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.282095),t.addScaledVector(o[1],.488603*i),t.addScaledVector(o[2],.488603*s),t.addScaledVector(o[3],.488603*n),t.addScaledVector(o[4],1.092548*(n*i)),t.addScaledVector(o[5],1.092548*(i*s)),t.addScaledVector(o[6],.315392*(3*s*s-1)),t.addScaledVector(o[7],1.092548*(n*s)),t.addScaledVector(o[8],.546274*(n*n-i*i)),t}getIrradianceAt(e,t){const n=e.x,i=e.y,s=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.886227),t.addScaledVector(o[1],2*.511664*i),t.addScaledVector(o[2],2*.511664*s),t.addScaledVector(o[3],2*.511664*n),t.addScaledVector(o[4],2*.429043*n*i),t.addScaledVector(o[5],2*.429043*i*s),t.addScaledVector(o[6],.743125*s*s-.247708),t.addScaledVector(o[7],2*.429043*n*s),t.addScaledVector(o[8],.429043*(n*n-i*i)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(e.coefficients[n],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let n=0;n<9;n++)this.coefficients[n].lerp(e.coefficients[n],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(e,t+i*3);return this}toArray(e=[],t=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(e,t+i*3);return e}static getBasisAt(e,t){const n=e.x,i=e.y,s=e.z;t[0]=.282095,t[1]=.488603*i,t[2]=.488603*s,t[3]=.488603*n,t[4]=1.092548*n*i,t[5]=1.092548*i*s,t[6]=.315392*(3*s*s-1),t[7]=1.092548*n*s,t[8]=.546274*(n*n-i*i)}}class a5 extends k1{constructor(e=new o5,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class Mo extends jt{constructor(e){super(e),this.textures={}}load(e,t,n,i){const s=this,o=new Un(s.manager);o.setPath(s.path),o.setRequestHeader(s.requestHeader),o.setWithCredentials(s.withCredentials),o.load(e,function(a){try{t(s.parse(JSON.parse(a)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t=this.textures;function n(s){return t[s]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",s),t[s]}const i=this.createMaterialFromType(e.type);if(e.uuid!==void 0&&(i.uuid=e.uuid),e.name!==void 0&&(i.name=e.name),e.color!==void 0&&i.color!==void 0&&i.color.setHex(e.color),e.roughness!==void 0&&(i.roughness=e.roughness),e.metalness!==void 0&&(i.metalness=e.metalness),e.sheen!==void 0&&(i.sheen=e.sheen),e.sheenColor!==void 0&&(i.sheenColor=new _e().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(i.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&i.emissive!==void 0&&i.emissive.setHex(e.emissive),e.specular!==void 0&&i.specular!==void 0&&i.specular.setHex(e.specular),e.specularIntensity!==void 0&&(i.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&i.specularColor!==void 0&&i.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(i.shininess=e.shininess),e.clearcoat!==void 0&&(i.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=e.clearcoatRoughness),e.dispersion!==void 0&&(i.dispersion=e.dispersion),e.iridescence!==void 0&&(i.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(i.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(i.transmission=e.transmission),e.thickness!==void 0&&(i.thickness=e.thickness),e.attenuationDistance!==void 0&&(i.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&i.attenuationColor!==void 0&&i.attenuationColor.setHex(e.attenuationColor),e.anisotropy!==void 0&&(i.anisotropy=e.anisotropy),e.anisotropyRotation!==void 0&&(i.anisotropyRotation=e.anisotropyRotation),e.fog!==void 0&&(i.fog=e.fog),e.flatShading!==void 0&&(i.flatShading=e.flatShading),e.blending!==void 0&&(i.blending=e.blending),e.combine!==void 0&&(i.combine=e.combine),e.side!==void 0&&(i.side=e.side),e.shadowSide!==void 0&&(i.shadowSide=e.shadowSide),e.opacity!==void 0&&(i.opacity=e.opacity),e.transparent!==void 0&&(i.transparent=e.transparent),e.alphaTest!==void 0&&(i.alphaTest=e.alphaTest),e.alphaHash!==void 0&&(i.alphaHash=e.alphaHash),e.depthFunc!==void 0&&(i.depthFunc=e.depthFunc),e.depthTest!==void 0&&(i.depthTest=e.depthTest),e.depthWrite!==void 0&&(i.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(i.colorWrite=e.colorWrite),e.blendSrc!==void 0&&(i.blendSrc=e.blendSrc),e.blendDst!==void 0&&(i.blendDst=e.blendDst),e.blendEquation!==void 0&&(i.blendEquation=e.blendEquation),e.blendSrcAlpha!==void 0&&(i.blendSrcAlpha=e.blendSrcAlpha),e.blendDstAlpha!==void 0&&(i.blendDstAlpha=e.blendDstAlpha),e.blendEquationAlpha!==void 0&&(i.blendEquationAlpha=e.blendEquationAlpha),e.blendColor!==void 0&&i.blendColor!==void 0&&i.blendColor.setHex(e.blendColor),e.blendAlpha!==void 0&&(i.blendAlpha=e.blendAlpha),e.stencilWriteMask!==void 0&&(i.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(i.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(i.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(i.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(i.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(i.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(i.stencilZPass=e.stencilZPass),e.stencilWrite!==void 0&&(i.stencilWrite=e.stencilWrite),e.wireframe!==void 0&&(i.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(i.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(i.rotation=e.rotation),e.linewidth!==void 0&&(i.linewidth=e.linewidth),e.dashSize!==void 0&&(i.dashSize=e.dashSize),e.gapSize!==void 0&&(i.gapSize=e.gapSize),e.scale!==void 0&&(i.scale=e.scale),e.polygonOffset!==void 0&&(i.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(i.dithering=e.dithering),e.alphaToCoverage!==void 0&&(i.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(i.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(i.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(i.visible=e.visible),e.toneMapped!==void 0&&(i.toneMapped=e.toneMapped),e.userData!==void 0&&(i.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?i.vertexColors=e.vertexColors>0:i.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const s in e.uniforms){const o=e.uniforms[s];switch(i.uniforms[s]={},o.type){case"t":i.uniforms[s].value=n(o.value);break;case"c":i.uniforms[s].value=new _e().setHex(o.value);break;case"v2":i.uniforms[s].value=new $().fromArray(o.value);break;case"v3":i.uniforms[s].value=new L().fromArray(o.value);break;case"v4":i.uniforms[s].value=new lt().fromArray(o.value);break;case"m3":i.uniforms[s].value=new Ve().fromArray(o.value);break;case"m4":i.uniforms[s].value=new Ge().fromArray(o.value);break;default:i.uniforms[s].value=o.value}}if(e.defines!==void 0&&(i.defines=e.defines),e.vertexShader!==void 0&&(i.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(i.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(i.glslVersion=e.glslVersion),e.extensions!==void 0)for(const s in e.extensions)i.extensions[s]=e.extensions[s];if(e.lights!==void 0&&(i.lights=e.lights),e.clipping!==void 0&&(i.clipping=e.clipping),e.size!==void 0&&(i.size=e.size),e.sizeAttenuation!==void 0&&(i.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(i.map=n(e.map)),e.matcap!==void 0&&(i.matcap=n(e.matcap)),e.alphaMap!==void 0&&(i.alphaMap=n(e.alphaMap)),e.bumpMap!==void 0&&(i.bumpMap=n(e.bumpMap)),e.bumpScale!==void 0&&(i.bumpScale=e.bumpScale),e.normalMap!==void 0&&(i.normalMap=n(e.normalMap)),e.normalMapType!==void 0&&(i.normalMapType=e.normalMapType),e.normalScale!==void 0){let s=e.normalScale;Array.isArray(s)===!1&&(s=[s,s]),i.normalScale=new $().fromArray(s)}return e.displacementMap!==void 0&&(i.displacementMap=n(e.displacementMap)),e.displacementScale!==void 0&&(i.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(i.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(i.roughnessMap=n(e.roughnessMap)),e.metalnessMap!==void 0&&(i.metalnessMap=n(e.metalnessMap)),e.emissiveMap!==void 0&&(i.emissiveMap=n(e.emissiveMap)),e.emissiveIntensity!==void 0&&(i.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(i.specularMap=n(e.specularMap)),e.specularIntensityMap!==void 0&&(i.specularIntensityMap=n(e.specularIntensityMap)),e.specularColorMap!==void 0&&(i.specularColorMap=n(e.specularColorMap)),e.envMap!==void 0&&(i.envMap=n(e.envMap)),e.envMapRotation!==void 0&&i.envMapRotation.fromArray(e.envMapRotation),e.envMapIntensity!==void 0&&(i.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(i.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(i.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(i.lightMap=n(e.lightMap)),e.lightMapIntensity!==void 0&&(i.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(i.aoMap=n(e.aoMap)),e.aoMapIntensity!==void 0&&(i.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(i.gradientMap=n(e.gradientMap)),e.clearcoatMap!==void 0&&(i.clearcoatMap=n(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=n(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=n(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new $().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(i.iridescenceMap=n(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(i.iridescenceThicknessMap=n(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(i.transmissionMap=n(e.transmissionMap)),e.thicknessMap!==void 0&&(i.thicknessMap=n(e.thicknessMap)),e.anisotropyMap!==void 0&&(i.anisotropyMap=n(e.anisotropyMap)),e.sheenColorMap!==void 0&&(i.sheenColorMap=n(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(i.sheenRoughnessMap=n(e.sheenRoughnessMap)),i}setTextures(e){return this.textures=e,this}createMaterialFromType(e){return Mo.createMaterialFromType(e)}static createMaterialFromType(e){const t={ShadowMaterial:Ol,SpriteMaterial:Ga,RawShaderMaterial:Bl,ShaderMaterial:Ln,PointsMaterial:e4,MeshPhysicalMaterial:Vl,MeshStandardMaterial:f4,MeshPhongMaterial:p4,MeshToonMaterial:Hl,MeshNormalMaterial:Gl,MeshLambertMaterial:g4,MeshDepthMaterial:x4,MeshDistanceMaterial:_4,MeshBasicMaterial:z1,MeshMatcapMaterial:Wl,LineDashedMaterial:Xl,LineBasicMaterial:an,Material:$t};return new t[e]}}class C4{static decodeText(e){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let n=0,i=e.length;n<i;n++)t+=String.fromCharCode(e[n]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class l5 extends Ze{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class c5 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new Un(s.manager);o.setPath(s.path),o.setRequestHeader(s.requestHeader),o.setWithCredentials(s.withCredentials),o.load(e,function(a){try{t(s.parse(JSON.parse(a)))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t={},n={};function i(q,m){if(t[m]!==void 0)return t[m];const p=q.interleavedBuffers[m],f=s(q,p.buffer),v=Ni(p.type,f),y=new k2(v,p.stride);return y.uuid=p.uuid,t[m]=y,y}function s(q,m){if(n[m]!==void 0)return n[m];const p=q.arrayBuffers[m],f=new Uint32Array(p).buffer;return n[m]=f,f}const o=e.isInstancedBufferGeometry?new l5:new Ze,a=e.data.index;if(a!==void 0){const q=Ni(a.type,a.array);o.setIndex(new qt(q,1))}const l=e.data.attributes;for(const q in l){const m=l[q];let g;if(m.isInterleavedBufferAttribute){const p=i(e.data,m.data);g=new Bs(p,m.itemSize,m.offset,m.normalized)}else{const p=Ni(m.type,m.array),f=m.isInstancedBufferAttribute?Qi:qt;g=new f(p,m.itemSize,m.normalized)}m.name!==void 0&&(g.name=m.name),m.usage!==void 0&&g.setUsage(m.usage),o.setAttribute(q,g)}const c=e.data.morphAttributes;if(c)for(const q in c){const m=c[q],g=[];for(let p=0,f=m.length;p<f;p++){const v=m[p];let y;if(v.isInterleavedBufferAttribute){const _=i(e.data,v.data);y=new Bs(_,v.itemSize,v.offset,v.normalized)}else{const _=Ni(v.type,v.array);y=new qt(_,v.itemSize,v.normalized)}v.name!==void 0&&(y.name=v.name),g.push(y)}o.morphAttributes[q]=g}e.data.morphTargetsRelative&&(o.morphTargetsRelative=!0);const u=e.data.groups||e.data.drawcalls||e.data.offsets;if(u!==void 0)for(let q=0,m=u.length;q!==m;++q){const g=u[q];o.addGroup(g.start,g.count,g.materialIndex)}const d=e.data.boundingSphere;if(d!==void 0){const q=new L;d.center!==void 0&&q.fromArray(d.center),o.boundingSphere=new Xt(q,d.radius)}return e.name&&(o.name=e.name),e.userData&&(o.userData=e.userData),o}}class Z9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=this.path===""?C4.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||o;const a=new Un(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(l){let c=null;try{c=JSON.parse(l)}catch(u){i!==void 0&&i(u),console.error("THREE:ObjectLoader: Can't parse "+e+".",u.message);return}const h=c.metadata;if(h===void 0||h.type===void 0||h.type.toLowerCase()==="geometry"){i!==void 0&&i(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}s.parse(c,t)},n,i)}async loadAsync(e,t){const n=this,i=this.path===""?C4.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||i;const s=new Un(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials);const o=await s.loadAsync(e,t),a=JSON.parse(o),l=a.metadata;if(l===void 0||l.type===void 0||l.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await n.parseAsync(a)}parse(e,t){const n=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),s=this.parseGeometries(e.geometries,i),o=this.parseImages(e.images,function(){t!==void 0&&t(c)}),a=this.parseTextures(e.textures,o),l=this.parseMaterials(e.materials,a),c=this.parseObject(e.object,s,l,a,n),h=this.parseSkeletons(e.skeletons,c);if(this.bindSkeletons(c,h),this.bindLightTargets(c),t!==void 0){let u=!1;for(const d in o)if(o[d].data instanceof HTMLImageElement){u=!0;break}u===!1&&t(c)}return c}async parseAsync(e){const t=this.parseAnimations(e.animations),n=this.parseShapes(e.shapes),i=this.parseGeometries(e.geometries,n),s=await this.parseImagesAsync(e.images),o=this.parseTextures(e.textures,s),a=this.parseMaterials(e.materials,o),l=this.parseObject(e.object,i,a,o,t),c=this.parseSkeletons(e.skeletons,l);return this.bindSkeletons(l,c),this.bindLightTargets(l),l}parseShapes(e){const t={};if(e!==void 0)for(let n=0,i=e.length;n<i;n++){const s=new yn().fromJSON(e[n]);t[s.uuid]=s}return t}parseSkeletons(e,t){const n={},i={};if(t.traverse(function(s){s.isBone&&(i[s.uuid]=s)}),e!==void 0)for(let s=0,o=e.length;s<o;s++){const a=new H2().fromJSON(e[s],i);n[a.uuid]=a}return n}parseGeometries(e,t){const n={};if(e!==void 0){const i=new c5;for(let s=0,o=e.length;s<o;s++){let a;const l=e[s];switch(l.type){case"BufferGeometry":case"InstancedBufferGeometry":a=i.parse(l);break;default:l.type in Ul?a=Ul[l.type].fromJSON(l,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${l.type}"`)}a.uuid=l.uuid,l.name!==void 0&&(a.name=l.name),l.userData!==void 0&&(a.userData=l.userData),n[l.uuid]=a}}return n}parseMaterials(e,t){const n={},i={};if(e!==void 0){const s=new Mo;s.setTextures(t);for(let o=0,a=e.length;o<a;o++){const l=e[o];n[l.uuid]===void 0&&(n[l.uuid]=s.parse(l)),i[l.uuid]=n[l.uuid]}}return i}parseAnimations(e){const t={};if(e!==void 0)for(let n=0;n<e.length;n++){const i=e[n],s=cr.parse(i);t[s.uuid]=s}return t}parseImages(e,t){const n=this,i={};let s;function o(l){return n.manager.itemStart(l),s.load(l,function(){n.manager.itemEnd(l)},void 0,function(){n.manager.itemError(l),n.manager.itemEnd(l)})}function a(l){if(typeof l=="string"){const c=l,h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c)?c:n.resourcePath+c;return o(h)}else return l.data?{data:Ni(l.type,l.data),width:l.width,height:l.height}:null}if(e!==void 0&&e.length>0){const l=new S4(t);s=new hr(l),s.setCrossOrigin(this.crossOrigin);for(let c=0,h=e.length;c<h;c++){const u=e[c],d=u.url;if(Array.isArray(d)){const q=[];for(let m=0,g=d.length;m<g;m++){const p=d[m],f=a(p);f!==null&&(f instanceof HTMLImageElement?q.push(f):q.push(new Kn(f.data,f.width,f.height)))}i[u.uuid]=new ei(q)}else{const q=a(u.url);i[u.uuid]=new ei(q)}}}return i}async parseImagesAsync(e){const t=this,n={};let i;async function s(o){if(typeof o=="string"){const a=o,l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(a)?a:t.resourcePath+a;return await i.loadAsync(l)}else return o.data?{data:Ni(o.type,o.data),width:o.width,height:o.height}:null}if(e!==void 0&&e.length>0){i=new hr(this.manager),i.setCrossOrigin(this.crossOrigin);for(let o=0,a=e.length;o<a;o++){const l=e[o],c=l.url;if(Array.isArray(c)){const h=[];for(let u=0,d=c.length;u<d;u++){const q=c[u],m=await s(q);m!==null&&(m instanceof HTMLImageElement?h.push(m):h.push(new Kn(m.data,m.width,m.height)))}n[l.uuid]=new ei(h)}else{const h=await s(l.url);n[l.uuid]=new ei(h)}}}return n}parseTextures(e,t){function n(s,o){return typeof s=="number"?s:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",s),o[s])}const i={};if(e!==void 0)for(let s=0,o=e.length;s<o;s++){const a=e[s];a.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid),t[a.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",a.image);const l=t[a.image],c=l.data;let h;Array.isArray(c)?(h=new Os,c.length===6&&(h.needsUpdate=!0)):(c&&c.data?h=new Kn:h=new Mt,c&&(h.needsUpdate=!0)),h.source=l,h.uuid=a.uuid,a.name!==void 0&&(h.name=a.name),a.mapping!==void 0&&(h.mapping=n(a.mapping,j9)),a.channel!==void 0&&(h.channel=a.channel),a.offset!==void 0&&h.offset.fromArray(a.offset),a.repeat!==void 0&&h.repeat.fromArray(a.repeat),a.center!==void 0&&h.center.fromArray(a.center),a.rotation!==void 0&&(h.rotation=a.rotation),a.wrap!==void 0&&(h.wrapS=n(a.wrap[0],h5),h.wrapT=n(a.wrap[1],h5)),a.format!==void 0&&(h.format=a.format),a.internalFormat!==void 0&&(h.internalFormat=a.internalFormat),a.type!==void 0&&(h.type=a.type),a.colorSpace!==void 0&&(h.colorSpace=a.colorSpace),a.minFilter!==void 0&&(h.minFilter=n(a.minFilter,u5)),a.magFilter!==void 0&&(h.magFilter=n(a.magFilter,u5)),a.anisotropy!==void 0&&(h.anisotropy=a.anisotropy),a.flipY!==void 0&&(h.flipY=a.flipY),a.generateMipmaps!==void 0&&(h.generateMipmaps=a.generateMipmaps),a.premultiplyAlpha!==void 0&&(h.premultiplyAlpha=a.premultiplyAlpha),a.unpackAlignment!==void 0&&(h.unpackAlignment=a.unpackAlignment),a.compareFunction!==void 0&&(h.compareFunction=a.compareFunction),a.userData!==void 0&&(h.userData=a.userData),i[a.uuid]=h}return i}parseObject(e,t,n,i,s){let o;function a(d){return t[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",d),t[d]}function l(d){if(d!==void 0){if(Array.isArray(d)){const q=[];for(let m=0,g=d.length;m<g;m++){const p=d[m];n[p]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",p),q.push(n[p])}return q}return n[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",d),n[d]}}function c(d){return i[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",d),i[d]}let h,u;switch(e.type){case"Scene":o=new Ha,e.background!==void 0&&(Number.isInteger(e.background)?o.background=new _e(e.background):o.background=c(e.background)),e.environment!==void 0&&(o.environment=c(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?o.fog=new D2(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(o.fog=new P2(e.fog.color,e.fog.density)),e.fog.name!==""&&(o.fog.name=e.fog.name)),e.backgroundBlurriness!==void 0&&(o.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(o.backgroundIntensity=e.backgroundIntensity),e.backgroundRotation!==void 0&&o.backgroundRotation.fromArray(e.backgroundRotation),e.environmentIntensity!==void 0&&(o.environmentIntensity=e.environmentIntensity),e.environmentRotation!==void 0&&o.environmentRotation.fromArray(e.environmentRotation);break;case"PerspectiveCamera":o=new Ot(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(o.focus=e.focus),e.zoom!==void 0&&(o.zoom=e.zoom),e.filmGauge!==void 0&&(o.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(o.filmOffset=e.filmOffset),e.view!==void 0&&(o.view=Object.assign({},e.view));break;case"OrthographicCamera":o=new wo(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(o.zoom=e.zoom),e.view!==void 0&&(o.view=Object.assign({},e.view));break;case"AmbientLight":o=new A4(e.color,e.intensity);break;case"DirectionalLight":o=new s5(e.color,e.intensity),o.target=e.target||"";break;case"PointLight":o=new vo(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":o=new r5(e.color,e.intensity,e.width,e.height);break;case"SpotLight":o=new n5(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay),o.target=e.target||"";break;case"HemisphereLight":o=new Ql(e.color,e.groundColor,e.intensity);break;case"LightProbe":o=new a5().fromJSON(e);break;case"SkinnedMesh":h=a(e.geometry),u=l(e.material),o=new cl(h,u),e.bindMode!==void 0&&(o.bindMode=e.bindMode),e.bindMatrix!==void 0&&o.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(o.skeleton=e.skeleton);break;case"Mesh":h=a(e.geometry),u=l(e.material),o=new St(h,u);break;case"InstancedMesh":h=a(e.geometry),u=l(e.material);const d=e.count,q=e.instanceMatrix,m=e.instanceColor;o=new ql(h,u,d),o.instanceMatrix=new Qi(new Float32Array(q.array),16),m!==void 0&&(o.instanceColor=new Qi(new Float32Array(m.array),m.itemSize));break;case"BatchedMesh":h=a(e.geometry),u=l(e.material),o=new fl(e.maxInstanceCount,e.maxVertexCount,e.maxIndexCount,u),o.geometry=h,o.perObjectFrustumCulled=e.perObjectFrustumCulled,o.sortObjects=e.sortObjects,o._drawRanges=e.drawRanges,o._reservedRanges=e.reservedRanges,o._visibility=e.visibility,o._active=e.active,o._bounds=e.bounds.map(g=>{const p=new Vt;p.min.fromArray(g.boxMin),p.max.fromArray(g.boxMax);const f=new Xt;return f.radius=g.sphereRadius,f.center.fromArray(g.sphereCenter),{boxInitialized:g.boxInitialized,box:p,sphereInitialized:g.sphereInitialized,sphere:f}}),o._maxInstanceCount=e.maxInstanceCount,o._maxVertexCount=e.maxVertexCount,o._maxIndexCount=e.maxIndexCount,o._geometryInitialized=e.geometryInitialized,o._geometryCount=e.geometryCount,o._matricesTexture=c(e.matricesTexture.uuid),e.colorsTexture!==void 0&&(o._colorsTexture=c(e.colorsTexture.uuid));break;case"LOD":o=new il;break;case"Line":o=new P1(a(e.geometry),l(e.material));break;case"LineLoop":o=new yl(a(e.geometry),l(e.material));break;case"LineSegments":o=new Qn(a(e.geometry),l(e.material));break;case"PointCloud":case"Points":o=new wl(a(e.geometry),l(e.material));break;case"Sprite":o=new tl(l(e.material));break;case"Group":o=new ts;break;case"Bone":o=new $a;break;default:o=new it}if(o.uuid=e.uuid,e.name!==void 0&&(o.name=e.name),e.matrix!==void 0?(o.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(o.matrixAutoUpdate=e.matrixAutoUpdate),o.matrixAutoUpdate&&o.matrix.decompose(o.position,o.quaternion,o.scale)):(e.position!==void 0&&o.position.fromArray(e.position),e.rotation!==void 0&&o.rotation.fromArray(e.rotation),e.quaternion!==void 0&&o.quaternion.fromArray(e.quaternion),e.scale!==void 0&&o.scale.fromArray(e.scale)),e.up!==void 0&&o.up.fromArray(e.up),e.castShadow!==void 0&&(o.castShadow=e.castShadow),e.receiveShadow!==void 0&&(o.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.intensity!==void 0&&(o.shadow.intensity=e.shadow.intensity),e.shadow.bias!==void 0&&(o.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(o.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(o.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&o.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(o.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(o.visible=e.visible),e.frustumCulled!==void 0&&(o.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(o.renderOrder=e.renderOrder),e.userData!==void 0&&(o.userData=e.userData),e.layers!==void 0&&(o.layers.mask=e.layers),e.children!==void 0){const d=e.children;for(let q=0;q<d.length;q++)o.add(this.parseObject(d[q],t,n,i,s))}if(e.animations!==void 0){const d=e.animations;for(let q=0;q<d.length;q++){const m=d[q];o.animations.push(s[m])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(o.autoUpdate=e.autoUpdate);const d=e.levels;for(let q=0;q<d.length;q++){const m=d[q],g=o.getObjectByProperty("uuid",m.object);g!==void 0&&o.addLevel(g,m.distance,m.hysteresis)}}return o}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(n){if(n.isSkinnedMesh===!0&&n.skeleton!==void 0){const i=t[n.skeleton];i===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",n.skeleton):n.bind(i,n.bindMatrix)}})}bindLightTargets(e){e.traverse(function(t){if(t.isDirectionalLight||t.isSpotLight){const n=t.target,i=e.getObjectByProperty("uuid",n);i!==void 0?t.target=i:t.target=new it}})}}const j9={UVMapping:Nr,CubeReflectionMapping:a1,CubeRefractionMapping:b1,EquirectangularReflectionMapping:ps,EquirectangularRefractionMapping:gs,CubeUVReflectionMapping:Ai},h5={RepeatWrapping:xs,ClampToEdgeWrapping:Sn,MirroredRepeatWrapping:_s},u5={NearestFilter:Bt,NearestMipmapNearestFilter:oa,NearestMipmapLinearFilter:Ci,LinearFilter:Nt,LinearMipmapNearestFilter:ys,LinearMipmapLinearFilter:$n};class J9 extends jt{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,n,i){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const s=this,o=x1.get(e);if(o!==void 0){if(s.manager.itemStart(e),o.then){o.then(c=>{t&&t(c),s.manager.itemEnd(e)}).catch(c=>{i&&i(c)});return}return setTimeout(function(){t&&t(o),s.manager.itemEnd(e)},0),o}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader;const l=fetch(e,a).then(function(c){return c.blob()}).then(function(c){return createImageBitmap(c,Object.assign(s.options,{colorSpaceConversion:"none"}))}).then(function(c){return x1.add(e,c),t&&t(c),s.manager.itemEnd(e),c}).catch(function(c){i&&i(c),x1.remove(e),s.manager.itemError(e),s.manager.itemEnd(e)});x1.add(e,l),s.manager.itemStart(e)}}let So;class R4{static getContext(){return So===void 0&&(So=new(window.AudioContext||window.webkitAudioContext)),So}static setContext(e){So=e}}class K9 extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new Un(this.manager);o.setResponseType("arraybuffer"),o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(l){try{const c=l.slice(0);R4.getContext().decodeAudioData(c,function(u){t(u)}).catch(a)}catch(c){a(c)}},n,i);function a(l){i?i(l):console.error(l),s.manager.itemError(e)}}}const d5=new Ge,q5=new Ge,di=new Ge;class Q9{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Ot,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Ot,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,di.copy(e.projectionMatrix);const i=t.eyeSep/2,s=i*t.near/t.focus,o=t.near*Math.tan(Q1*t.fov*.5)/t.zoom;let a,l;q5.elements[12]=-i,d5.elements[12]=i,a=-o*t.aspect+s,l=o*t.aspect+s,di.elements[0]=2*t.near/(l-a),di.elements[8]=(l+a)/(l-a),this.cameraL.projectionMatrix.copy(di),a=-o*t.aspect-s,l=o*t.aspect-s,di.elements[0]=2*t.near/(l-a),di.elements[8]=(l+a)/(l-a),this.cameraR.projectionMatrix.copy(di)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(q5),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(d5)}}class m5 extends Ot{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class f5{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=p5(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=p5();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function p5(){return performance.now()}const qi=new L,g5=new Wt,ec=new L,mi=new L;class tc extends it{constructor(){super(),this.type="AudioListener",this.context=R4.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new f5}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(qi,g5,ec),mi.set(0,0,-1).applyQuaternion(g5),t.positionX){const i=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(qi.x,i),t.positionY.linearRampToValueAtTime(qi.y,i),t.positionZ.linearRampToValueAtTime(qi.z,i),t.forwardX.linearRampToValueAtTime(mi.x,i),t.forwardY.linearRampToValueAtTime(mi.y,i),t.forwardZ.linearRampToValueAtTime(mi.z,i),t.upX.linearRampToValueAtTime(n.x,i),t.upY.linearRampToValueAtTime(n.y,i),t.upZ.linearRampToValueAtTime(n.z,i)}else t.setPosition(qi.x,qi.y,qi.z),t.setOrientation(mi.x,mi.y,mi.z,n.x,n.y,n.z)}}class x5 extends it{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(e=0){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(this.context.currentTime+e),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){return this.detune=e,this.isPlaying===!0&&this.source.detune!==void 0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1,this._progress=0}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}copy(e,t){return super.copy(e,t),e.sourceType!=="buffer"?(console.warn("THREE.Audio: Audio source type cannot be copied."),this):(this.autoplay=e.autoplay,this.buffer=e.buffer,this.detune=e.detune,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.offset=e.offset,this.duration=e.duration,this.playbackRate=e.playbackRate,this.hasPlaybackControl=e.hasPlaybackControl,this.sourceType=e.sourceType,this.filters=e.filters.slice(),this)}clone(e){return new this.constructor(this.listener).copy(this,e)}}const fi=new L,_5=new Wt,nc=new L,pi=new L;class ic extends x5{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,n){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=n,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(fi,_5,nc),pi.set(0,0,1).applyQuaternion(_5);const t=this.panner;if(t.positionX){const n=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(fi.x,n),t.positionY.linearRampToValueAtTime(fi.y,n),t.positionZ.linearRampToValueAtTime(fi.z,n),t.orientationX.linearRampToValueAtTime(pi.x,n),t.orientationY.linearRampToValueAtTime(pi.y,n),t.orientationZ.linearRampToValueAtTime(pi.z,n)}else t.setPosition(fi.x,fi.y,fi.z),t.setOrientation(pi.x,pi.y,pi.z)}}class sc{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let n=0;n<t.length;n++)e+=t[n];return e/t.length}}class y5{constructor(e,t,n){this.binding=e,this.valueSize=n;let i,s,o;switch(t){case"quaternion":i=this._slerp,s=this._slerpAdditive,o=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(n*6),this._workIndex=5;break;case"string":case"bool":i=this._select,s=this._select,o=this._setAdditiveIdentityOther,this.buffer=new Array(n*5);break;default:i=this._lerp,s=this._lerpAdditive,o=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=s,this._setIdentity=o,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const n=this.buffer,i=this.valueSize,s=e*i+i;let o=this.cumulativeWeight;if(o===0){for(let a=0;a!==i;++a)n[s+a]=n[a];o=t}else{o+=t;const a=t/o;this._mixBufferRegion(n,s,0,a,i)}this.cumulativeWeight=o}accumulateAdditive(e){const t=this.buffer,n=this.valueSize,i=n*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,e,n),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,n=this.buffer,i=e*t+t,s=this.cumulativeWeight,o=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const l=t*this._origIndex;this._mixBufferRegion(n,i,l,1-s,t)}o>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*t,1,t);for(let l=t,c=t+t;l!==c;++l)if(n[l]!==n[l+t]){a.setValue(n,i);break}}saveOriginalState(){const e=this.binding,t=this.buffer,n=this.valueSize,i=n*this._origIndex;e.getValue(t,i);for(let s=n,o=i;s!==o;++s)t[s]=t[i+s%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let n=e;n<t;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[t+n]=this.buffer[e+n]}_select(e,t,n,i,s){if(i>=.5)for(let o=0;o!==s;++o)e[t+o]=e[n+o]}_slerp(e,t,n,i){Wt.slerpFlat(e,t,e,t,e,n,i)}_slerpAdditive(e,t,n,i,s){const o=this._workIndex*s;Wt.multiplyQuaternionsFlat(e,o,e,t,e,n),Wt.slerpFlat(e,t,e,t,e,o,i)}_lerp(e,t,n,i,s){const o=1-i;for(let a=0;a!==s;++a){const l=t+a;e[l]=e[l]*o+e[n+a]*i}}_lerpAdditive(e,t,n,i,s){for(let o=0;o!==s;++o){const a=t+o;e[a]=e[a]+e[n+o]*i}}}const I4="\\[\\]\\.:\\/",rc=new RegExp("["+I4+"]","g"),z4="[^"+I4+"]",oc="[^"+I4.replace("\\.","")+"]",ac=/((?:WC+[\/:])*)/.source.replace("WC",z4),lc=/(WCOD+)?/.source.replace("WCOD",oc),cc=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",z4),hc=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",z4),uc=new RegExp("^"+ac+lc+cc+hc+"$"),dc=["material","materials","bones","map"];class qc{constructor(e,t,n){const i=n||rt.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,i)}getValue(e,t){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];i!==void 0&&i.getValue(e,t)}setValue(e,t){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,s=n.length;i!==s;++i)n[i].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,n=e.length;t!==n;++t)e[t].unbind()}}class rt{constructor(e,t,n){this.path=t,this.parsedPath=n||rt.parseTrackName(t),this.node=rt.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,n){return e&&e.isAnimationObjectGroup?new rt.Composite(e,t,n):new rt(e,t,n)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(rc,"")}static parseTrackName(e){const t=uc.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const n={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const s=n.nodeName.substring(i+1);dc.indexOf(s)!==-1&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=s)}if(n.propertyName===null||n.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return n}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const n=e.skeleton.getBoneByName(t);if(n!==void 0)return n}if(e.children){const n=function(s){for(let o=0;o<s.length;o++){const a=s[o];if(a.name===t||a.uuid===t)return a;const l=n(a.children);if(l)return l}return null},i=n(e.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)e[t++]=n[i]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const n=this.resolvedProperty;for(let i=0,s=n.length;i!==s;++i)n[i]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,n=t.objectName,i=t.propertyName;let s=t.propertyIndex;if(e||(e=rt.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(n){let c=t.objectIndex;switch(n){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let h=0;h<e.length;h++)if(e[h].name===c){c=h;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[n]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[n]}if(c!==void 0){if(e[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[c]}}const o=e[i];if(o===void 0){const c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+i+" but it wasn't found.",e);return}let a=this.Versioning.None;this.targetObject=e,e.isMaterial===!0?a=this.Versioning.NeedsUpdate:e.isObject3D===!0&&(a=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(s!==void 0){if(i==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[s]!==void 0&&(s=e.morphTargetDictionary[s])}l=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=s}else o.fromArray!==void 0&&o.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(l=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=i;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}rt.Composite=qc,rt.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},rt.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},rt.prototype.GetterByBindingType=[rt.prototype._getValue_direct,rt.prototype._getValue_array,rt.prototype._getValue_arrayElement,rt.prototype._getValue_toArray],rt.prototype.SetterByBindingTypeAndVersioning=[[rt.prototype._setValue_direct,rt.prototype._setValue_direct_setNeedsUpdate,rt.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[rt.prototype._setValue_array,rt.prototype._setValue_array_setNeedsUpdate,rt.prototype._setValue_array_setMatrixWorldNeedsUpdate],[rt.prototype._setValue_arrayElement,rt.prototype._setValue_arrayElement_setNeedsUpdate,rt.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[rt.prototype._setValue_fromArray,rt.prototype._setValue_fromArray_setNeedsUpdate,rt.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class mc{constructor(){this.isAnimationObjectGroup=!0,this.uuid=pn(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let n=0,i=arguments.length;n!==i;++n)e[arguments[n].uuid]=n;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,n=this._paths,i=this._parsedPaths,s=this._bindings,o=s.length;let a,l=e.length,c=this.nCachedObjects_;for(let h=0,u=arguments.length;h!==u;++h){const d=arguments[h],q=d.uuid;let m=t[q];if(m===void 0){m=l++,t[q]=m,e.push(d);for(let g=0,p=o;g!==p;++g)s[g].push(new rt(d,n[g],i[g]))}else if(m<c){a=e[m];const g=--c,p=e[g];t[p.uuid]=m,e[m]=p,t[q]=g,e[g]=d;for(let f=0,v=o;f!==v;++f){const y=s[f],_=y[g];let T=y[m];y[m]=_,T===void 0&&(T=new rt(d,n[f],i[f])),y[g]=T}}else e[m]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=c}remove(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let s=this.nCachedObjects_;for(let o=0,a=arguments.length;o!==a;++o){const l=arguments[o],c=l.uuid,h=t[c];if(h!==void 0&&h>=s){const u=s++,d=e[u];t[d.uuid]=h,e[h]=d,t[c]=u,e[u]=l;for(let q=0,m=i;q!==m;++q){const g=n[q],p=g[u],f=g[h];g[h]=p,g[u]=f}}}this.nCachedObjects_=s}uncache(){const e=this._objects,t=this._indicesByUUID,n=this._bindings,i=n.length;let s=this.nCachedObjects_,o=e.length;for(let a=0,l=arguments.length;a!==l;++a){const c=arguments[a],h=c.uuid,u=t[h];if(u!==void 0)if(delete t[h],u<s){const d=--s,q=e[d],m=--o,g=e[m];t[q.uuid]=u,e[u]=q,t[g.uuid]=d,e[d]=g,e.pop();for(let p=0,f=i;p!==f;++p){const v=n[p],y=v[d],_=v[m];v[u]=y,v[d]=_,v.pop()}}else{const d=--o,q=e[d];d>0&&(t[q.uuid]=u),e[u]=q,e.pop();for(let m=0,g=i;m!==g;++m){const p=n[m];p[u]=p[d],p.pop()}}}this.nCachedObjects_=s}subscribe_(e,t){const n=this._bindingsIndicesByPath;let i=n[e];const s=this._bindings;if(i!==void 0)return s[i];const o=this._paths,a=this._parsedPaths,l=this._objects,c=l.length,h=this.nCachedObjects_,u=new Array(c);i=s.length,n[e]=i,o.push(e),a.push(t),s.push(u);for(let d=h,q=l.length;d!==q;++d){const m=l[d];u[d]=new rt(m,e,t)}return u}unsubscribe_(e){const t=this._bindingsIndicesByPath,n=t[e];if(n!==void 0){const i=this._paths,s=this._parsedPaths,o=this._bindings,a=o.length-1,l=o[a],c=e[a];t[c]=n,o[n]=l,o.pop(),s[n]=s[a],s.pop(),i[n]=i[a],i.pop()}}}class v5{constructor(e,t,n=null,i=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=n,this.blendMode=i;const s=t.tracks,o=s.length,a=new Array(o),l={endingStart:Z1,endingEnd:Z1};for(let c=0;c!==o;++c){const h=s[c].createInterpolant(null);a[c]=h,h.settings=l}this._interpolantSettings=l,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=m3,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,n){if(e.fadeOut(t),this.fadeIn(t),n){const i=this._clip.duration,s=e._clip.duration,o=s/i,a=i/s;e.warp(1,o,t),this.warp(a,1,t)}return this}crossFadeTo(e,t,n){return e.crossFadeFrom(this,t,n)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,n){const i=this._mixer,s=i.time,o=this.timeScale;let a=this._timeScaleInterpolant;a===null&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);const l=a.parameterPositions,c=a.sampleValues;return l[0]=s,l[1]=s+n,c[0]=e/o,c[1]=t/o,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,n,i){if(!this.enabled){this._updateWeight(e);return}const s=this._startTime;if(s!==null){const l=(e-s)*n;l<0||n===0?t=0:(this._startTime=null,t=n*l)}t*=this._updateTimeScale(e);const o=this._updateTime(t),a=this._updateWeight(e);if(a>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case pa:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulateAdditive(a);break;case m2:default:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulate(i,a)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopFading(),i===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(e)[0];t*=i,e>n.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,n=this.loop;let i=this.time+e,s=this._loopCount;const o=n===f3;if(e===0)return s===-1?i:o&&(s&1)===1?t-i:i;if(n===q3){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(i>=t)i=t;else if(i<0)i=0;else{this.time=i;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(s===-1&&(e>=0?(s=0,this._setEndings(!0,this.repetitions===0,o)):this._setEndings(this.repetitions===0,!0,o)),i>=t||i<0){const a=Math.floor(i/t);i-=t*a,s+=Math.abs(a);const l=this.repetitions-s;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=e>0?t:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(l===1){const c=e<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=s,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else this.time=i;if(o&&(s&1)===1)return t-i}return i}_setEndings(e,t,n){const i=this._interpolantSettings;n?(i.endingStart=j1,i.endingEnd=j1):(e?i.endingStart=this.zeroSlopeAtStart?j1:Z1:i.endingStart=As,t?i.endingEnd=this.zeroSlopeAtEnd?j1:Z1:i.endingEnd=As)}_scheduleFading(e,t,n){const i=this._mixer,s=i.time;let o=this._weightInterpolant;o===null&&(o=i._lendControlInterpolant(),this._weightInterpolant=o);const a=o.parameterPositions,l=o.sampleValues;return a[0]=s,l[0]=t,a[1]=s+e,l[1]=n,this}}const fc=new Float32Array(1);class pc extends jn{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const n=e._localRoot||this._root,i=e._clip.tracks,s=i.length,o=e._propertyBindings,a=e._interpolants,l=n.uuid,c=this._bindingsByRootAndName;let h=c[l];h===void 0&&(h={},c[l]=h);for(let u=0;u!==s;++u){const d=i[u],q=d.name;let m=h[q];if(m!==void 0)++m.referenceCount,o[u]=m;else{if(m=o[u],m!==void 0){m._cacheIndex===null&&(++m.referenceCount,this._addInactiveBinding(m,l,q));continue}const g=t&&t._propertyBindings[u].binding.parsedPath;m=new y5(rt.create(n,q,g),d.ValueTypeName,d.getValueSize()),++m.referenceCount,this._addInactiveBinding(m,l,q),o[u]=m}a[u].resultBuffer=m.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const n=(e._localRoot||this._root).uuid,i=e._clip.uuid,s=this._actionsByClip[i];this._bindAction(e,s&&s.knownActions[0]),this._addInactiveAction(e,i,n)}const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];s.useCount++===0&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.useCount===0&&(s.restoreOriginalState(),this._takeBackBinding(s))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,n){const i=this._actions,s=this._actionsByClip;let o=s[t];if(o===void 0)o={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,s[t]=o;else{const a=o.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=i.length,i.push(e),o.actionByRoot[n]=e}_removeInactiveAction(e){const t=this._actions,n=t[t.length-1],i=e._cacheIndex;n._cacheIndex=i,t[i]=n,t.pop(),e._cacheIndex=null;const s=e._clip.uuid,o=this._actionsByClip,a=o[s],l=a.knownActions,c=l[l.length-1],h=e._byClipCacheIndex;c._byClipCacheIndex=h,l[h]=c,l.pop(),e._byClipCacheIndex=null;const u=a.actionByRoot,d=(e._localRoot||this._root).uuid;delete u[d],l.length===0&&delete o[s],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let n=0,i=t.length;n!==i;++n){const s=t[n];--s.referenceCount===0&&this._removeInactiveBinding(s)}}_lendAction(e){const t=this._actions,n=e._cacheIndex,i=this._nActiveActions++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackAction(e){const t=this._actions,n=e._cacheIndex,i=--this._nActiveActions,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_addInactiveBinding(e,t,n){const i=this._bindingsByRootAndName,s=this._bindings;let o=i[t];o===void 0&&(o={},i[t]=o),o[n]=e,e._cacheIndex=s.length,s.push(e)}_removeInactiveBinding(e){const t=this._bindings,n=e.binding,i=n.rootNode.uuid,s=n.path,o=this._bindingsByRootAndName,a=o[i],l=t[t.length-1],c=e._cacheIndex;l._cacheIndex=c,t[c]=l,t.pop(),delete a[s],Object.keys(a).length===0&&delete o[i]}_lendBinding(e){const t=this._bindings,n=e._cacheIndex,i=this._nActiveBindings++,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_takeBackBinding(e){const t=this._bindings,n=e._cacheIndex,i=--this._nActiveBindings,s=t[i];e._cacheIndex=i,t[i]=e,s._cacheIndex=n,t[n]=s}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let n=e[t];return n===void 0&&(n=new w4(new Float32Array(2),new Float32Array(2),1,fc),n.__cacheIndex=t,e[t]=n),n}_takeBackControlInterpolant(e){const t=this._controlInterpolants,n=e.__cacheIndex,i=--this._nActiveControlInterpolants,s=t[i];e.__cacheIndex=i,t[i]=e,s.__cacheIndex=n,t[n]=s}clipAction(e,t,n){const i=t||this._root,s=i.uuid;let o=typeof e=="string"?cr.findByName(i,e):e;const a=o!==null?o.uuid:e,l=this._actionsByClip[a];let c=null;if(n===void 0&&(o!==null?n=o.blendMode:n=m2),l!==void 0){const u=l.actionByRoot[s];if(u!==void 0&&u.blendMode===n)return u;c=l.knownActions[0],o===null&&(o=c._clip)}if(o===null)return null;const h=new v5(this,o,t,n);return this._bindAction(h,c),this._addInactiveAction(h,a,s),h}existingAction(e,t){const n=t||this._root,i=n.uuid,s=typeof e=="string"?cr.findByName(n,e):e,o=s?s.uuid:e,a=this._actionsByClip[o];return a!==void 0&&a.actionByRoot[i]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let n=t-1;n>=0;--n)e[n].stop();return this}update(e){e*=this.timeScale;const t=this._actions,n=this._nActiveActions,i=this.time+=e,s=Math.sign(e),o=this._accuIndex^=1;for(let c=0;c!==n;++c)t[c]._update(i,e,s,o);const a=this._bindings,l=this._nActiveBindings;for(let c=0;c!==l;++c)a[c].apply(o);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,n=e.uuid,i=this._actionsByClip,s=i[n];if(s!==void 0){const o=s.knownActions;for(let a=0,l=o.length;a!==l;++a){const c=o[a];this._deactivateAction(c);const h=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=h,t[h]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete i[n]}}uncacheRoot(e){const t=e.uuid,n=this._actionsByClip;for(const o in n){const a=n[o].actionByRoot,l=a[t];l!==void 0&&(this._deactivateAction(l),this._removeInactiveAction(l))}const i=this._bindingsByRootAndName,s=i[t];if(s!==void 0)for(const o in s){const a=s[o];a.restoreOriginalState(),this._removeInactiveBinding(a)}}uncacheAction(e,t){const n=this.existingAction(e,t);n!==null&&(this._deactivateAction(n),this._removeInactiveAction(n))}}class gc extends f2{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isRenderTarget3D=!0,this.depth=n,this.texture=new p2(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class xc extends f2{constructor(e=1,t=1,n=1,i={}){super(e,t,i),this.isRenderTargetArray=!0,this.depth=n,this.texture=new Ls(null,e,t,n),this.texture.isRenderTargetTexture=!0}}class N4{constructor(e){this.value=e}clone(){return new N4(this.value.clone===void 0?this.value:this.value.clone())}}let _c=0;class yc extends jn{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:_c++}),this.name="",this.usage=Rs,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(e){this.name=e.name,this.usage=e.usage;const t=e.uniforms;this.uniforms.length=0;for(let n=0,i=t.length;n<i;n++){const s=Array.isArray(t[n])?t[n]:[t[n]];for(let o=0;o<s.length;o++)this.uniforms.push(s[o].clone())}return this}clone(){return new this.constructor().copy(this)}}class vc extends k2{constructor(e,t,n=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class wc{constructor(e,t,n,i,s){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=t,this.itemSize=n,this.elementSize=i,this.count=s,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}const w5=new Ge;class Mc{constructor(e,t,n=0,i=1/0){this.ray=new ii(e,t),this.near=n,this.far=i,this.camera=null,this.layers=new M2,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}setFromXRController(e){return w5.identity().extractRotation(e.matrixWorld),this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(w5),this}intersectObject(e,t=!0,n=[]){return L4(e,this,n,t),n.sort(M5),n}intersectObjects(e,t=!0,n=[]){for(let i=0,s=e.length;i<s;i++)L4(e[i],this,n,t);return n.sort(M5),n}}function M5(r,e){return r.distance-e.distance}function L4(r,e,t,n){let i=!0;if(r.layers.test(e.layers)&&r.raycast(e,t)===!1&&(i=!1),i===!0&&n===!0){const s=r.children;for(let o=0,a=s.length;o<a;o++)L4(s[o],e,t,!0)}}class P4{constructor(e=1,t=0,n=0){return this.radius=e,this.phi=t,this.theta=n,this}set(e,t,n){return this.radius=e,this.phi=t,this.theta=n,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Xe(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+t*t+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,n),this.phi=Math.acos(Xe(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class Sc{constructor(e=1,t=0,n=0){return this.radius=e,this.theta=t,this.y=n,this}set(e,t,n){return this.radius=e,this.theta=t,this.y=n,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,n){return this.radius=Math.sqrt(e*e+n*n),this.theta=Math.atan2(e,n),this.y=t,this}clone(){return new this.constructor().copy(this)}}class D4{constructor(e,t,n,i){D4.prototype.isMatrix2=!0,this.elements=[1,0,0,1],e!==void 0&&this.set(e,t,n,i)}identity(){return this.set(1,0,0,1),this}fromArray(e,t=0){for(let n=0;n<4;n++)this.elements[n]=e[n+t];return this}set(e,t,n,i){const s=this.elements;return s[0]=e,s[2]=t,s[1]=n,s[3]=i,this}}const S5=new $;class b5{constructor(e=new $(1/0,1/0),t=new $(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,n=e.length;t<n;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const n=S5.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(n),this.max.copy(e).add(n),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return e.x>=this.min.x&&e.x<=this.max.x&&e.y>=this.min.y&&e.y<=this.max.y}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return e.max.x>=this.min.x&&e.min.x<=this.max.x&&e.max.y>=this.min.y&&e.min.y<=this.max.y}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,S5).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const E5=new L,bo=new L;class bc{constructor(e=new L,t=new L){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){E5.subVectors(e,this.start),bo.subVectors(this.end,this.start);const n=bo.dot(bo);let s=bo.dot(E5)/n;return t&&(s=Xe(s,0,1)),s}closestPointToPoint(e,t,n){const i=this.closestPointToPointParameter(e,t);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const T5=new L;class Ec extends it{constructor(e,t){super(),this.light=e,this.matrixAutoUpdate=!1,this.color=t,this.type="SpotLightHelper";const n=new Ze,i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let o=0,a=1,l=32;o<l;o++,a++){const c=o/l*Math.PI*2,h=a/l*Math.PI*2;i.push(Math.cos(c),Math.sin(c),1,Math.cos(h),Math.sin(h),1)}n.setAttribute("position",new ze(i,3));const s=new an({fog:!1,toneMapped:!1});this.cone=new Qn(n,s),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),T5.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(T5),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const F1=new L,Eo=new Ge,k4=new Ge;class Tc extends Qn{constructor(e){const t=A5(e),n=new Ze,i=[],s=[],o=new _e(0,0,1),a=new _e(0,1,0);for(let c=0;c<t.length;c++){const h=t[c];h.parent&&h.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),s.push(o.r,o.g,o.b),s.push(a.r,a.g,a.b))}n.setAttribute("position",new ze(i,3)),n.setAttribute("color",new ze(s,3));const l=new an({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(n,l),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,n=this.geometry,i=n.getAttribute("position");k4.copy(this.root.matrixWorld).invert();for(let s=0,o=0;s<t.length;s++){const a=t[s];a.parent&&a.parent.isBone&&(Eo.multiplyMatrices(k4,a.matrixWorld),F1.setFromMatrixPosition(Eo),i.setXYZ(o,F1.x,F1.y,F1.z),Eo.multiplyMatrices(k4,a.parent.matrixWorld),F1.setFromMatrixPosition(Eo),i.setXYZ(o+1,F1.x,F1.y,F1.z),o+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose()}}function A5(r){const e=[];r.isBone===!0&&e.push(r);for(let t=0;t<r.children.length;t++)e.push.apply(e,A5(r.children[t]));return e}class Ac extends St{constructor(e,t,n){const i=new sr(t,4,2),s=new z1({wireframe:!0,fog:!1,toneMapped:!1});super(i,s),this.light=e,this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const Cc=new L,C5=new _e,R5=new _e;class Rc extends it{constructor(e,t,n){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="HemisphereLightHelper";const i=new nr(t);i.rotateY(Math.PI*.5),this.material=new z1({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const s=i.getAttribute("position"),o=new Float32Array(s.count*3);i.setAttribute("color",new qt(o,3)),this.add(new St(i,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");C5.copy(this.light.color),R5.copy(this.light.groundColor);for(let n=0,i=t.count;n<i;n++){const s=n<i/2?C5:R5;t.setXYZ(n,s.r,s.g,s.b)}t.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(Cc.setFromMatrixPosition(this.light.matrixWorld).negate())}}class I5 extends Qn{constructor(e=10,t=10,n=4473924,i=8947848){n=new _e(n),i=new _e(i);const s=t/2,o=e/t,a=e/2,l=[],c=[];for(let d=0,q=0,m=-a;d<=t;d++,m+=o){l.push(-a,0,m,a,0,m),l.push(m,0,-a,m,0,a);const g=d===s?n:i;g.toArray(c,q),q+=3,g.toArray(c,q),q+=3,g.toArray(c,q),q+=3,g.toArray(c,q),q+=3}const h=new Ze;h.setAttribute("position",new ze(l,3)),h.setAttribute("color",new ze(c,3));const u=new an({vertexColors:!0,toneMapped:!1});super(h,u),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class Ic extends Qn{constructor(e=10,t=16,n=8,i=64,s=4473924,o=8947848){s=new _e(s),o=new _e(o);const a=[],l=[];if(t>1)for(let u=0;u<t;u++){const d=u/t*(Math.PI*2),q=Math.sin(d)*e,m=Math.cos(d)*e;a.push(0,0,0),a.push(q,0,m);const g=u&1?s:o;l.push(g.r,g.g,g.b),l.push(g.r,g.g,g.b)}for(let u=0;u<n;u++){const d=u&1?s:o,q=e-e/n*u;for(let m=0;m<i;m++){let g=m/i*(Math.PI*2),p=Math.sin(g)*q,f=Math.cos(g)*q;a.push(p,0,f),l.push(d.r,d.g,d.b),g=(m+1)/i*(Math.PI*2),p=Math.sin(g)*q,f=Math.cos(g)*q,a.push(p,0,f),l.push(d.r,d.g,d.b)}}const c=new Ze;c.setAttribute("position",new ze(a,3)),c.setAttribute("color",new ze(l,3));const h=new an({vertexColors:!0,toneMapped:!1});super(c,h),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const z5=new L,To=new L,N5=new L;class zc extends it{constructor(e,t,n){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="DirectionalLightHelper",t===void 0&&(t=1);let i=new Ze;i.setAttribute("position",new ze([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const s=new an({fog:!1,toneMapped:!1});this.lightPlane=new P1(i,s),this.add(this.lightPlane),i=new Ze,i.setAttribute("position",new ze([0,0,0,0,0,1],3)),this.targetLine=new P1(i,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),z5.setFromMatrixPosition(this.light.matrixWorld),To.setFromMatrixPosition(this.light.target.matrixWorld),N5.subVectors(To,z5),this.lightPlane.lookAt(To),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(To),this.targetLine.scale.z=N5.length()}}const Ao=new L,bt=new L2;class L5 extends Qn{constructor(e){const t=new Ze,n=new an({color:16777215,vertexColors:!0,toneMapped:!1}),i=[],s=[],o={};a("n1","n2"),a("n2","n4"),a("n4","n3"),a("n3","n1"),a("f1","f2"),a("f2","f4"),a("f4","f3"),a("f3","f1"),a("n1","f1"),a("n2","f2"),a("n3","f3"),a("n4","f4"),a("p","n1"),a("p","n2"),a("p","n3"),a("p","n4"),a("u1","u2"),a("u2","u3"),a("u3","u1"),a("c","t"),a("p","c"),a("cn1","cn2"),a("cn3","cn4"),a("cf1","cf2"),a("cf3","cf4");function a(m,g){l(m),l(g)}function l(m){i.push(0,0,0),s.push(0,0,0),o[m]===void 0&&(o[m]=[]),o[m].push(i.length/3-1)}t.setAttribute("position",new ze(i,3)),t.setAttribute("color",new ze(s,3)),super(t,n),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=o,this.update();const c=new _e(16755200),h=new _e(16711680),u=new _e(43775),d=new _e(16777215),q=new _e(3355443);this.setColors(c,h,u,d,q)}setColors(e,t,n,i,s){const a=this.geometry.getAttribute("color");a.setXYZ(0,e.r,e.g,e.b),a.setXYZ(1,e.r,e.g,e.b),a.setXYZ(2,e.r,e.g,e.b),a.setXYZ(3,e.r,e.g,e.b),a.setXYZ(4,e.r,e.g,e.b),a.setXYZ(5,e.r,e.g,e.b),a.setXYZ(6,e.r,e.g,e.b),a.setXYZ(7,e.r,e.g,e.b),a.setXYZ(8,e.r,e.g,e.b),a.setXYZ(9,e.r,e.g,e.b),a.setXYZ(10,e.r,e.g,e.b),a.setXYZ(11,e.r,e.g,e.b),a.setXYZ(12,e.r,e.g,e.b),a.setXYZ(13,e.r,e.g,e.b),a.setXYZ(14,e.r,e.g,e.b),a.setXYZ(15,e.r,e.g,e.b),a.setXYZ(16,e.r,e.g,e.b),a.setXYZ(17,e.r,e.g,e.b),a.setXYZ(18,e.r,e.g,e.b),a.setXYZ(19,e.r,e.g,e.b),a.setXYZ(20,e.r,e.g,e.b),a.setXYZ(21,e.r,e.g,e.b),a.setXYZ(22,e.r,e.g,e.b),a.setXYZ(23,e.r,e.g,e.b),a.setXYZ(24,t.r,t.g,t.b),a.setXYZ(25,t.r,t.g,t.b),a.setXYZ(26,t.r,t.g,t.b),a.setXYZ(27,t.r,t.g,t.b),a.setXYZ(28,t.r,t.g,t.b),a.setXYZ(29,t.r,t.g,t.b),a.setXYZ(30,t.r,t.g,t.b),a.setXYZ(31,t.r,t.g,t.b),a.setXYZ(32,n.r,n.g,n.b),a.setXYZ(33,n.r,n.g,n.b),a.setXYZ(34,n.r,n.g,n.b),a.setXYZ(35,n.r,n.g,n.b),a.setXYZ(36,n.r,n.g,n.b),a.setXYZ(37,n.r,n.g,n.b),a.setXYZ(38,i.r,i.g,i.b),a.setXYZ(39,i.r,i.g,i.b),a.setXYZ(40,s.r,s.g,s.b),a.setXYZ(41,s.r,s.g,s.b),a.setXYZ(42,s.r,s.g,s.b),a.setXYZ(43,s.r,s.g,s.b),a.setXYZ(44,s.r,s.g,s.b),a.setXYZ(45,s.r,s.g,s.b),a.setXYZ(46,s.r,s.g,s.b),a.setXYZ(47,s.r,s.g,s.b),a.setXYZ(48,s.r,s.g,s.b),a.setXYZ(49,s.r,s.g,s.b),a.needsUpdate=!0}update(){const e=this.geometry,t=this.pointMap,n=1,i=1;bt.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);const s=this.camera.coordinateSystem===Rn?-1:0;At("c",t,e,bt,0,0,s),At("t",t,e,bt,0,0,1),At("n1",t,e,bt,-1,-1,s),At("n2",t,e,bt,n,-1,s),At("n3",t,e,bt,-1,i,s),At("n4",t,e,bt,n,i,s),At("f1",t,e,bt,-1,-1,1),At("f2",t,e,bt,n,-1,1),At("f3",t,e,bt,-1,i,1),At("f4",t,e,bt,n,i,1),At("u1",t,e,bt,n*.7,i*1.1,s),At("u2",t,e,bt,-1*.7,i*1.1,s),At("u3",t,e,bt,0,i*2,s),At("cf1",t,e,bt,-1,0,1),At("cf2",t,e,bt,n,0,1),At("cf3",t,e,bt,0,-1,1),At("cf4",t,e,bt,0,i,1),At("cn1",t,e,bt,-1,0,s),At("cn2",t,e,bt,n,0,s),At("cn3",t,e,bt,0,-1,s),At("cn4",t,e,bt,0,i,s),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function At(r,e,t,n,i,s,o){Ao.set(i,s,o).unproject(n);const a=e[r];if(a!==void 0){const l=t.getAttribute("position");for(let c=0,h=a.length;c<h;c++)l.setXYZ(a[c],Ao.x,Ao.y,Ao.z)}}const Co=new Vt;class Nc extends Qn{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=new Float32Array(8*3),s=new Ze;s.setIndex(new qt(n,1)),s.setAttribute("position",new qt(i,3)),super(s,new an({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&Co.setFromObject(this.object),Co.isEmpty())return;const t=Co.min,n=Co.max,i=this.geometry.attributes.position,s=i.array;s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=t.x,s[4]=n.y,s[5]=n.z,s[6]=t.x,s[7]=t.y,s[8]=n.z,s[9]=n.x,s[10]=t.y,s[11]=n.z,s[12]=n.x,s[13]=n.y,s[14]=t.z,s[15]=t.x,s[16]=n.y,s[17]=t.z,s[18]=t.x,s[19]=t.y,s[20]=t.z,s[21]=n.x,s[22]=t.y,s[23]=t.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,t){return super.copy(e,t),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Lc extends Qn{constructor(e,t=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],s=new Ze;s.setIndex(new qt(n,1)),s.setAttribute("position",new ze(i,3)),super(s,new an({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class Pc extends P1{constructor(e,t=1,n=16776960){const i=n,s=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],o=new Ze;o.setAttribute("position",new ze(s,3)),o.computeBoundingSphere(),super(o,new an({color:i,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const a=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],l=new Ze;l.setAttribute("position",new ze(a,3)),l.computeBoundingSphere(),this.add(new St(l,new z1({color:i,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const P5=new L;let Ro,F4;class Dc extends it{constructor(e=new L(0,0,1),t=new L(0,0,0),n=1,i=16776960,s=n*.2,o=s*.2){super(),this.type="ArrowHelper",Ro===void 0&&(Ro=new Ze,Ro.setAttribute("position",new ze([0,0,0,0,1,0],3)),F4=new ns(0,.5,1,5,1),F4.translate(0,-.5,0)),this.position.copy(t),this.line=new P1(Ro,new an({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new St(F4,new z1({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(n,s,o)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{P5.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(P5,t)}}setLength(e,t=e*.2,n=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(n,t,n),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class D5 extends Qn{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],i=new Ze;i.setAttribute("position",new ze(t,3)),i.setAttribute("color",new ze(n,3));const s=new an({vertexColors:!0,toneMapped:!1});super(i,s),this.type="AxesHelper"}setColors(e,t,n){const i=new _e,s=this.geometry.attributes.color.array;return i.set(e),i.toArray(s,0),i.toArray(s,3),i.set(t),i.toArray(s,6),i.toArray(s,9),i.set(n),i.toArray(s,12),i.toArray(s,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class y1{constructor(){this.type="ShapePath",this.color=new _e,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new Dn,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,n,i){return this.currentPath.quadraticCurveTo(e,t,n,i),this}bezierCurveTo(e,t,n,i,s,o){return this.currentPath.bezierCurveTo(e,t,n,i,s,o),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(f){const v=[];for(let y=0,_=f.length;y<_;y++){const T=f[y],E=new yn;E.curves=T.curves,v.push(E)}return v}function n(f,v){const y=v.length;let _=!1;for(let T=y-1,E=0;E<y;T=E++){let S=v[T],I=v[E],w=I.x-S.x,x=I.y-S.y;if(Math.abs(x)>Number.EPSILON){if(x<0&&(S=v[E],w=-w,I=v[T],x=-x),f.y<S.y||f.y>I.y)continue;if(f.y===S.y){if(f.x===S.x)return!0}else{const C=x*(f.x-S.x)-w*(f.y-S.y);if(C===0)return!0;if(C<0)continue;_=!_}}else{if(f.y!==S.y)continue;if(I.x<=f.x&&f.x<=S.x||S.x<=f.x&&f.x<=I.x)return!0}}return _}const i=kn.isClockWise,s=this.subPaths;if(s.length===0)return[];let o,a,l;const c=[];if(s.length===1)return a=s[0],l=new yn,l.curves=a.curves,c.push(l),c;let h=!i(s[0].getPoints());h=e?!h:h;const u=[],d=[];let q=[],m=0,g;d[m]=void 0,q[m]=[];for(let f=0,v=s.length;f<v;f++)a=s[f],g=a.getPoints(),o=i(g),o=e?!o:o,o?(!h&&d[m]&&m++,d[m]={s:new yn,p:g},d[m].s.curves=a.curves,h&&m++,q[m]=[]):q[m].push({h:a,p:g[0]});if(!d[0])return t(s);if(d.length>1){let f=!1,v=0;for(let y=0,_=d.length;y<_;y++)u[y]=[];for(let y=0,_=d.length;y<_;y++){const T=q[y];for(let E=0;E<T.length;E++){const S=T[E];let I=!0;for(let w=0;w<d.length;w++)n(S.p,d[w].p)&&(y!==w&&v++,I?(I=!1,u[w].push(S)):f=!0);I&&u[y].push(S)}}v>0&&f===!1&&(q=u)}let p;for(let f=0,v=d.length;f<v;f++){l=d[f].s,c.push(l),p=q[f];for(let y=0,_=p.length;y<_;y++)l.holes.push(p[y].h)}return c}}class k5 extends jn{constructor(e,t=null){super(),this.object=e,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function kc(r,e){const t=r.image&&r.image.width?r.image.width/r.image.height:1;return t>e?(r.repeat.x=1,r.repeat.y=t/e,r.offset.x=0,r.offset.y=(1-r.repeat.y)/2):(r.repeat.x=e/t,r.repeat.y=1,r.offset.x=(1-r.repeat.x)/2,r.offset.y=0),r}function Fc(r,e){const t=r.image&&r.image.width?r.image.width/r.image.height:1;return t>e?(r.repeat.x=e/t,r.repeat.y=1,r.offset.x=(1-r.repeat.x)/2,r.offset.y=0):(r.repeat.x=1,r.repeat.y=t/e,r.offset.x=0,r.offset.y=(1-r.repeat.y)/2),r}function Uc(r){return r.repeat.x=1,r.repeat.y=1,r.offset.x=0,r.offset.y=0,r}function U4(r,e,t,n){const i=Oc(n);switch(t){case ha:return r*e;case da:return r*e;case qa:return r*e*2;case kr:return r*e/i.components*i.byteLength;case vs:return r*e/i.components*i.byteLength;case ma:return r*e*2/i.components*i.byteLength;case Fr:return r*e*2/i.components*i.byteLength;case ua:return r*e*3/i.components*i.byteLength;case tn:return r*e*4/i.components*i.byteLength;case Ur:return r*e*4/i.components*i.byteLength;case ws:case Ms:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case Ss:case bs:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case Br:case Hr:return Math.max(r,16)*Math.max(e,8)/4;case Or:case Vr:return Math.max(r,8)*Math.max(e,8)/2;case Gr:case Wr:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*8;case Xr:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case Yr:return Math.floor((r+3)/4)*Math.floor((e+3)/4)*16;case $r:return Math.floor((r+4)/5)*Math.floor((e+3)/4)*16;case Zr:return Math.floor((r+4)/5)*Math.floor((e+4)/5)*16;case jr:return Math.floor((r+5)/6)*Math.floor((e+4)/5)*16;case Jr:return Math.floor((r+5)/6)*Math.floor((e+5)/6)*16;case Kr:return Math.floor((r+7)/8)*Math.floor((e+4)/5)*16;case Qr:return Math.floor((r+7)/8)*Math.floor((e+5)/6)*16;case e2:return Math.floor((r+7)/8)*Math.floor((e+7)/8)*16;case t2:return Math.floor((r+9)/10)*Math.floor((e+4)/5)*16;case n2:return Math.floor((r+9)/10)*Math.floor((e+5)/6)*16;case i2:return Math.floor((r+9)/10)*Math.floor((e+7)/8)*16;case s2:return Math.floor((r+9)/10)*Math.floor((e+9)/10)*16;case r2:return Math.floor((r+11)/12)*Math.floor((e+9)/10)*16;case o2:return Math.floor((r+11)/12)*Math.floor((e+11)/12)*16;case Es:case a2:case l2:return Math.ceil(r/4)*Math.ceil(e/4)*16;case fa:case c2:return Math.ceil(r/4)*Math.ceil(e/4)*8;case h2:case u2:return Math.ceil(r/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${t} format.`)}function Oc(r){switch(r){case Zn:case aa:return{byteLength:1,components:1};case Ri:case la:case Ii:return{byteLength:2,components:1};case Pr:case Dr:return{byteLength:2,components:4};case l1:case Lr:case hn:return{byteLength:4,components:1};case ca:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${r}.`)}const Bc={contain:kc,cover:Fc,fill:Uc,getByteLength:U4};typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:M1}})),typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=M1);/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function F5(){let r=null,e=!1,t=null,n=null;function i(s,o){t(s,o),n=r.requestAnimationFrame(i)}return{start:function(){e!==!0&&t!==null&&(n=r.requestAnimationFrame(i),e=!0)},stop:function(){r.cancelAnimationFrame(n),e=!1},setAnimationLoop:function(s){t=s},setContext:function(s){r=s}}}function Vc(r){const e=new WeakMap;function t(a,l){const c=a.array,h=a.usage,u=c.byteLength,d=r.createBuffer();r.bindBuffer(l,d),r.bufferData(l,c,h),a.onUploadCallback();let q;if(c instanceof Float32Array)q=r.FLOAT;else if(c instanceof Uint16Array)a.isFloat16BufferAttribute?q=r.HALF_FLOAT:q=r.UNSIGNED_SHORT;else if(c instanceof Int16Array)q=r.SHORT;else if(c instanceof Uint32Array)q=r.UNSIGNED_INT;else if(c instanceof Int32Array)q=r.INT;else if(c instanceof Int8Array)q=r.BYTE;else if(c instanceof Uint8Array)q=r.UNSIGNED_BYTE;else if(c instanceof Uint8ClampedArray)q=r.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+c);return{buffer:d,type:q,bytesPerElement:c.BYTES_PER_ELEMENT,version:a.version,size:u}}function n(a,l,c){const h=l.array,u=l.updateRanges;if(r.bindBuffer(c,a),u.length===0)r.bufferSubData(c,0,h);else{u.sort((q,m)=>q.start-m.start);let d=0;for(let q=1;q<u.length;q++){const m=u[d],g=u[q];g.start<=m.start+m.count+1?m.count=Math.max(m.count,g.start+g.count-m.start):(++d,u[d]=g)}u.length=d+1;for(let q=0,m=u.length;q<m;q++){const g=u[q];r.bufferSubData(c,g.start*h.BYTES_PER_ELEMENT,h,g.start,g.count)}l.clearUpdateRanges()}l.onUploadCallback()}function i(a){return a.isInterleavedBufferAttribute&&(a=a.data),e.get(a)}function s(a){a.isInterleavedBufferAttribute&&(a=a.data);const l=e.get(a);l&&(r.deleteBuffer(l.buffer),e.delete(a))}function o(a,l){if(a.isInterleavedBufferAttribute&&(a=a.data),a.isGLBufferAttribute){const h=e.get(a);(!h||h.version<a.version)&&e.set(a,{buffer:a.buffer,type:a.type,bytesPerElement:a.elementSize,version:a.version});return}const c=e.get(a);if(c===void 0)e.set(a,t(a,l));else if(c.version<a.version){if(c.size!==a.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(c.buffer,a,l),c.version=a.version}}return{get:i,remove:s,update:o}}var Hc=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,Gc=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,Wc=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,Xc=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Yc=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,$c=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,Zc=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,jc=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,Jc=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,Kc=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,Qc=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,eh=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,th=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,nh=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,ih=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,sh=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,rh=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,oh=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,ah=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,lh=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,ch=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,hh=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,uh=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,dh=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,qh=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,mh=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,fh=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,ph=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,gh=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,xh=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,_h="gl_FragColor = linearToOutputTexel( gl_FragColor );",yh=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,vh=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,wh=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Mh=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Sh=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,bh=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Eh=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,Th=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Ah=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Ch=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Rh=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,Ih=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,zh=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,Nh=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,Lh=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,Ph=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,Dh=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,kh=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,Fh=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Uh=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,Oh=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,Bh=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Vh=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,Hh=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,Gh=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,Wh=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,Xh=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,Yh=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,$h=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,Zh=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,jh=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,Jh=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,Kh=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,Qh=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,eu=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,tu=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,nu=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,iu=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,su=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,ru=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,ou=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,au=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,lu=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,cu=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,hu=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,uu=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,du=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,qu=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,mu=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,fu=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,pu=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,gu=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,xu=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,_u=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,yu=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,vu=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,wu=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Mu=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,Su=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,bu=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,Eu=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,Tu=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,Au=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,Cu=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,Ru=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,Iu=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,zu=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,Nu=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,Lu=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,Pu=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,Du=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,ku=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,Fu=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Uu=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,Ou=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,Bu=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const Ke={alphahash_fragment:Hc,alphahash_pars_fragment:Gc,alphamap_fragment:Wc,alphamap_pars_fragment:Xc,alphatest_fragment:Yc,alphatest_pars_fragment:$c,aomap_fragment:Zc,aomap_pars_fragment:jc,batching_pars_vertex:Jc,batching_vertex:Kc,begin_vertex:Qc,beginnormal_vertex:eh,bsdfs:th,iridescence_fragment:nh,bumpmap_pars_fragment:ih,clipping_planes_fragment:sh,clipping_planes_pars_fragment:rh,clipping_planes_pars_vertex:oh,clipping_planes_vertex:ah,color_fragment:lh,color_pars_fragment:ch,color_pars_vertex:hh,color_vertex:uh,common:dh,cube_uv_reflection_fragment:qh,defaultnormal_vertex:mh,displacementmap_pars_vertex:fh,displacementmap_vertex:ph,emissivemap_fragment:gh,emissivemap_pars_fragment:xh,colorspace_fragment:_h,colorspace_pars_fragment:yh,envmap_fragment:vh,envmap_common_pars_fragment:wh,envmap_pars_fragment:Mh,envmap_pars_vertex:Sh,envmap_physical_pars_fragment:Ph,envmap_vertex:bh,fog_vertex:Eh,fog_pars_vertex:Th,fog_fragment:Ah,fog_pars_fragment:Ch,gradientmap_pars_fragment:Rh,lightmap_pars_fragment:Ih,lights_lambert_fragment:zh,lights_lambert_pars_fragment:Nh,lights_pars_begin:Lh,lights_toon_fragment:Dh,lights_toon_pars_fragment:kh,lights_phong_fragment:Fh,lights_phong_pars_fragment:Uh,lights_physical_fragment:Oh,lights_physical_pars_fragment:Bh,lights_fragment_begin:Vh,lights_fragment_maps:Hh,lights_fragment_end:Gh,logdepthbuf_fragment:Wh,logdepthbuf_pars_fragment:Xh,logdepthbuf_pars_vertex:Yh,logdepthbuf_vertex:$h,map_fragment:Zh,map_pars_fragment:jh,map_particle_fragment:Jh,map_particle_pars_fragment:Kh,metalnessmap_fragment:Qh,metalnessmap_pars_fragment:eu,morphinstance_vertex:tu,morphcolor_vertex:nu,morphnormal_vertex:iu,morphtarget_pars_vertex:su,morphtarget_vertex:ru,normal_fragment_begin:ou,normal_fragment_maps:au,normal_pars_fragment:lu,normal_pars_vertex:cu,normal_vertex:hu,normalmap_pars_fragment:uu,clearcoat_normal_fragment_begin:du,clearcoat_normal_fragment_maps:qu,clearcoat_pars_fragment:mu,iridescence_pars_fragment:fu,opaque_fragment:pu,packing:gu,premultiplied_alpha_fragment:xu,project_vertex:_u,dithering_fragment:yu,dithering_pars_fragment:vu,roughnessmap_fragment:wu,roughnessmap_pars_fragment:Mu,shadowmap_pars_fragment:Su,shadowmap_pars_vertex:bu,shadowmap_vertex:Eu,shadowmask_pars_fragment:Tu,skinbase_vertex:Au,skinning_pars_vertex:Cu,skinning_vertex:Ru,skinnormal_vertex:Iu,specularmap_fragment:zu,specularmap_pars_fragment:Nu,tonemapping_fragment:Lu,tonemapping_pars_fragment:Pu,transmission_fragment:Du,transmission_pars_fragment:ku,uv_pars_fragment:Fu,uv_pars_vertex:Uu,uv_vertex:Ou,worldpos_vertex:Bu,background_vert:`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,background_frag:`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,backgroundCube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,backgroundCube_frag:`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,cube_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,cube_frag:`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,depth_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,depth_frag:`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,distanceRGBA_vert:`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,distanceRGBA_frag:`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,equirect_vert:`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,equirect_frag:`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,linedashed_vert:`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,linedashed_frag:`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,meshbasic_vert:`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,meshbasic_frag:`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshlambert_vert:`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshlambert_frag:`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshmatcap_vert:`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,meshmatcap_frag:`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshnormal_vert:`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,meshnormal_frag:`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,meshphong_vert:`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshphong_frag:`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshphysical_vert:`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,meshphysical_frag:`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,meshtoon_vert:`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,meshtoon_frag:`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,points_vert:`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,points_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,shadow_vert:`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,shadow_frag:`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,sprite_vert:`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,sprite_frag:`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`},Se={common:{diffuse:{value:new _e(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Ve},alphaMap:{value:null},alphaMapTransform:{value:new Ve},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Ve}},envmap:{envMap:{value:null},envMapRotation:{value:new Ve},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Ve}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Ve}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Ve},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Ve},normalScale:{value:new $(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Ve},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Ve}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Ve}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Ve}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new _e(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new _e(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Ve},alphaTest:{value:0},uvTransform:{value:new Ve}},sprite:{diffuse:{value:new _e(16777215)},opacity:{value:1},center:{value:new $(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Ve},alphaMap:{value:null},alphaMapTransform:{value:new Ve},alphaTest:{value:0}}},On={basic:{uniforms:rn([Se.common,Se.specularmap,Se.envmap,Se.aomap,Se.lightmap,Se.fog]),vertexShader:Ke.meshbasic_vert,fragmentShader:Ke.meshbasic_frag},lambert:{uniforms:rn([Se.common,Se.specularmap,Se.envmap,Se.aomap,Se.lightmap,Se.emissivemap,Se.bumpmap,Se.normalmap,Se.displacementmap,Se.fog,Se.lights,{emissive:{value:new _e(0)}}]),vertexShader:Ke.meshlambert_vert,fragmentShader:Ke.meshlambert_frag},phong:{uniforms:rn([Se.common,Se.specularmap,Se.envmap,Se.aomap,Se.lightmap,Se.emissivemap,Se.bumpmap,Se.normalmap,Se.displacementmap,Se.fog,Se.lights,{emissive:{value:new _e(0)},specular:{value:new _e(1118481)},shininess:{value:30}}]),vertexShader:Ke.meshphong_vert,fragmentShader:Ke.meshphong_frag},standard:{uniforms:rn([Se.common,Se.envmap,Se.aomap,Se.lightmap,Se.emissivemap,Se.bumpmap,Se.normalmap,Se.displacementmap,Se.roughnessmap,Se.metalnessmap,Se.fog,Se.lights,{emissive:{value:new _e(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ke.meshphysical_vert,fragmentShader:Ke.meshphysical_frag},toon:{uniforms:rn([Se.common,Se.aomap,Se.lightmap,Se.emissivemap,Se.bumpmap,Se.normalmap,Se.displacementmap,Se.gradientmap,Se.fog,Se.lights,{emissive:{value:new _e(0)}}]),vertexShader:Ke.meshtoon_vert,fragmentShader:Ke.meshtoon_frag},matcap:{uniforms:rn([Se.common,Se.bumpmap,Se.normalmap,Se.displacementmap,Se.fog,{matcap:{value:null}}]),vertexShader:Ke.meshmatcap_vert,fragmentShader:Ke.meshmatcap_frag},points:{uniforms:rn([Se.points,Se.fog]),vertexShader:Ke.points_vert,fragmentShader:Ke.points_frag},dashed:{uniforms:rn([Se.common,Se.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ke.linedashed_vert,fragmentShader:Ke.linedashed_frag},depth:{uniforms:rn([Se.common,Se.displacementmap]),vertexShader:Ke.depth_vert,fragmentShader:Ke.depth_frag},normal:{uniforms:rn([Se.common,Se.bumpmap,Se.normalmap,Se.displacementmap,{opacity:{value:1}}]),vertexShader:Ke.meshnormal_vert,fragmentShader:Ke.meshnormal_frag},sprite:{uniforms:rn([Se.sprite,Se.fog]),vertexShader:Ke.sprite_vert,fragmentShader:Ke.sprite_frag},background:{uniforms:{uvTransform:{value:new Ve},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ke.background_vert,fragmentShader:Ke.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Ve}},vertexShader:Ke.backgroundCube_vert,fragmentShader:Ke.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ke.cube_vert,fragmentShader:Ke.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ke.equirect_vert,fragmentShader:Ke.equirect_frag},distanceRGBA:{uniforms:rn([Se.common,Se.displacementmap,{referencePosition:{value:new L},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ke.distanceRGBA_vert,fragmentShader:Ke.distanceRGBA_frag},shadow:{uniforms:rn([Se.lights,Se.fog,{color:{value:new _e(0)},opacity:{value:1}}]),vertexShader:Ke.shadow_vert,fragmentShader:Ke.shadow_frag}};On.physical={uniforms:rn([On.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Ve},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Ve},clearcoatNormalScale:{value:new $(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Ve},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Ve},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Ve},sheen:{value:0},sheenColor:{value:new _e(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Ve},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Ve},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Ve},transmissionSamplerSize:{value:new $},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Ve},attenuationDistance:{value:0},attenuationColor:{value:new _e(0)},specularColor:{value:new _e(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Ve},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Ve},anisotropyVector:{value:new $},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Ve}}]),vertexShader:Ke.meshphysical_vert,fragmentShader:Ke.meshphysical_frag};const Io={r:0,b:0,g:0},gi=new xn,Vu=new Ge;function Hu(r,e,t,n,i,s,o){const a=new _e(0);let l=s===!0?0:1,c,h,u=null,d=0,q=null;function m(y){let _=y.isScene===!0?y.background:null;return _&&_.isTexture&&(_=(y.backgroundBlurriness>0?t:e).get(_)),_}function g(y){let _=!1;const T=m(y);T===null?f(a,l):T&&T.isColor&&(f(T,1),_=!0);const E=r.xr.getEnvironmentBlendMode();E==="additive"?n.buffers.color.setClear(0,0,0,1,o):E==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,o),(r.autoClear||_)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),r.clear(r.autoClearColor,r.autoClearDepth,r.autoClearStencil))}function p(y,_){const T=m(_);T&&(T.isCubeTexture||T.mapping===Ai)?(h===void 0&&(h=new St(new N1(1,1,1),new Ln({name:"BackgroundCubeMaterial",uniforms:Xi(On.backgroundCube.uniforms),vertexShader:On.backgroundCube.vertexShader,fragmentShader:On.backgroundCube.fragmentShader,side:en,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(E,S,I){this.matrixWorld.copyPosition(I.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(h)),gi.copy(_.backgroundRotation),gi.x*=-1,gi.y*=-1,gi.z*=-1,T.isCubeTexture&&T.isRenderTargetTexture===!1&&(gi.y*=-1,gi.z*=-1),h.material.uniforms.envMap.value=T,h.material.uniforms.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=_.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=_.backgroundIntensity,h.material.uniforms.backgroundRotation.value.setFromMatrix4(Vu.makeRotationFromEuler(gi)),h.material.toneMapped=nt.getTransfer(T.colorSpace)!==dt,(u!==T||d!==T.version||q!==r.toneMapping)&&(h.material.needsUpdate=!0,u=T,d=T.version,q=r.toneMapping),h.layers.enableAll(),y.unshift(h,h.geometry,h.material,0,0,null)):T&&T.isTexture&&(c===void 0&&(c=new St(new ss(2,2),new Ln({name:"BackgroundMaterial",uniforms:Xi(On.background.uniforms),vertexShader:On.background.vertexShader,fragmentShader:On.background.fragmentShader,side:s1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(c)),c.material.uniforms.t2D.value=T,c.material.uniforms.backgroundIntensity.value=_.backgroundIntensity,c.material.toneMapped=nt.getTransfer(T.colorSpace)!==dt,T.matrixAutoUpdate===!0&&T.updateMatrix(),c.material.uniforms.uvTransform.value.copy(T.matrix),(u!==T||d!==T.version||q!==r.toneMapping)&&(c.material.needsUpdate=!0,u=T,d=T.version,q=r.toneMapping),c.layers.enableAll(),y.unshift(c,c.geometry,c.material,0,0,null))}function f(y,_){y.getRGB(Io,X3(r)),n.buffers.color.setClear(Io.r,Io.g,Io.b,_,o)}function v(){h!==void 0&&(h.geometry.dispose(),h.material.dispose()),c!==void 0&&(c.geometry.dispose(),c.material.dispose())}return{getClearColor:function(){return a},setClearColor:function(y,_=1){a.set(y),l=_,f(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(y){l=y,f(a,l)},render:g,addToRenderList:p,dispose:v}}function Gu(r,e){const t=r.getParameter(r.MAX_VERTEX_ATTRIBS),n={},i=d(null);let s=i,o=!1;function a(x,C,O,U,B){let P=!1;const K=u(U,O,C);s!==K&&(s=K,c(s.object)),P=q(x,U,O,B),P&&m(x,U,O,B),B!==null&&e.update(B,r.ELEMENT_ARRAY_BUFFER),(P||o)&&(o=!1,_(x,C,O,U),B!==null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e.get(B).buffer))}function l(){return r.createVertexArray()}function c(x){return r.bindVertexArray(x)}function h(x){return r.deleteVertexArray(x)}function u(x,C,O){const U=O.wireframe===!0;let B=n[x.id];B===void 0&&(B={},n[x.id]=B);let P=B[C.id];P===void 0&&(P={},B[C.id]=P);let K=P[U];return K===void 0&&(K=d(l()),P[U]=K),K}function d(x){const C=[],O=[],U=[];for(let B=0;B<t;B++)C[B]=0,O[B]=0,U[B]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:C,enabledAttributes:O,attributeDivisors:U,object:x,attributes:{},index:null}}function q(x,C,O,U){const B=s.attributes,P=C.attributes;let K=0;const ie=O.getAttributes();for(const H in ie)if(ie[H].location>=0){const ge=B[H];let ve=P[H];if(ve===void 0&&(H==="instanceMatrix"&&x.instanceMatrix&&(ve=x.instanceMatrix),H==="instanceColor"&&x.instanceColor&&(ve=x.instanceColor)),ge===void 0||ge.attribute!==ve||ve&&ge.data!==ve.data)return!0;K++}return s.attributesNum!==K||s.index!==U}function m(x,C,O,U){const B={},P=C.attributes;let K=0;const ie=O.getAttributes();for(const H in ie)if(ie[H].location>=0){let ge=P[H];ge===void 0&&(H==="instanceMatrix"&&x.instanceMatrix&&(ge=x.instanceMatrix),H==="instanceColor"&&x.instanceColor&&(ge=x.instanceColor));const ve={};ve.attribute=ge,ge&&ge.data&&(ve.data=ge.data),B[H]=ve,K++}s.attributes=B,s.attributesNum=K,s.index=U}function g(){const x=s.newAttributes;for(let C=0,O=x.length;C<O;C++)x[C]=0}function p(x){f(x,0)}function f(x,C){const O=s.newAttributes,U=s.enabledAttributes,B=s.attributeDivisors;O[x]=1,U[x]===0&&(r.enableVertexAttribArray(x),U[x]=1),B[x]!==C&&(r.vertexAttribDivisor(x,C),B[x]=C)}function v(){const x=s.newAttributes,C=s.enabledAttributes;for(let O=0,U=C.length;O<U;O++)C[O]!==x[O]&&(r.disableVertexAttribArray(O),C[O]=0)}function y(x,C,O,U,B,P,K){K===!0?r.vertexAttribIPointer(x,C,O,B,P):r.vertexAttribPointer(x,C,O,U,B,P)}function _(x,C,O,U){g();const B=U.attributes,P=O.getAttributes(),K=C.defaultAttributeValues;for(const ie in P){const H=P[ie];if(H.location>=0){let fe=B[ie];if(fe===void 0&&(ie==="instanceMatrix"&&x.instanceMatrix&&(fe=x.instanceMatrix),ie==="instanceColor"&&x.instanceColor&&(fe=x.instanceColor)),fe!==void 0){const ge=fe.normalized,ve=fe.itemSize,De=e.get(fe);if(De===void 0)continue;const ke=De.buffer,F=De.type,D=De.bytesPerElement,N=F===r.INT||F===r.UNSIGNED_INT||fe.gpuType===Lr;if(fe.isInterleavedBufferAttribute){const A=fe.data,Q=A.stride,he=fe.offset;if(A.isInstancedInterleavedBuffer){for(let j=0;j<H.locationSize;j++)f(H.location+j,A.meshPerAttribute);x.isInstancedMesh!==!0&&U._maxInstanceCount===void 0&&(U._maxInstanceCount=A.meshPerAttribute*A.count)}else for(let j=0;j<H.locationSize;j++)p(H.location+j);r.bindBuffer(r.ARRAY_BUFFER,ke);for(let j=0;j<H.locationSize;j++)y(H.location+j,ve/H.locationSize,F,ge,Q*D,(he+ve/H.locationSize*j)*D,N)}else{if(fe.isInstancedBufferAttribute){for(let A=0;A<H.locationSize;A++)f(H.location+A,fe.meshPerAttribute);x.isInstancedMesh!==!0&&U._maxInstanceCount===void 0&&(U._maxInstanceCount=fe.meshPerAttribute*fe.count)}else for(let A=0;A<H.locationSize;A++)p(H.location+A);r.bindBuffer(r.ARRAY_BUFFER,ke);for(let A=0;A<H.locationSize;A++)y(H.location+A,ve/H.locationSize,F,ge,ve*D,ve/H.locationSize*A*D,N)}}else if(K!==void 0){const ge=K[ie];if(ge!==void 0)switch(ge.length){case 2:r.vertexAttrib2fv(H.location,ge);break;case 3:r.vertexAttrib3fv(H.location,ge);break;case 4:r.vertexAttrib4fv(H.location,ge);break;default:r.vertexAttrib1fv(H.location,ge)}}}}v()}function T(){I();for(const x in n){const C=n[x];for(const O in C){const U=C[O];for(const B in U)h(U[B].object),delete U[B];delete C[O]}delete n[x]}}function E(x){if(n[x.id]===void 0)return;const C=n[x.id];for(const O in C){const U=C[O];for(const B in U)h(U[B].object),delete U[B];delete C[O]}delete n[x.id]}function S(x){for(const C in n){const O=n[C];if(O[x.id]===void 0)continue;const U=O[x.id];for(const B in U)h(U[B].object),delete U[B];delete O[x.id]}}function I(){w(),o=!0,s!==i&&(s=i,c(s.object))}function w(){i.geometry=null,i.program=null,i.wireframe=!1}return{setup:a,reset:I,resetDefaultState:w,dispose:T,releaseStatesOfGeometry:E,releaseStatesOfProgram:S,initAttributes:g,enableAttribute:p,disableUnusedAttributes:v}}function Wu(r,e,t){let n;function i(c){n=c}function s(c,h){r.drawArrays(n,c,h),t.update(h,n,1)}function o(c,h,u){u!==0&&(r.drawArraysInstanced(n,c,h,u),t.update(h,n,u))}function a(c,h,u){if(u===0)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,c,0,h,0,u);let q=0;for(let m=0;m<u;m++)q+=h[m];t.update(q,n,1)}function l(c,h,u,d){if(u===0)return;const q=e.get("WEBGL_multi_draw");if(q===null)for(let m=0;m<c.length;m++)o(c[m],h[m],d[m]);else{q.multiDrawArraysInstancedWEBGL(n,c,0,h,0,d,0,u);let m=0;for(let g=0;g<u;g++)m+=h[g]*d[g];t.update(m,n,1)}}this.setMode=i,this.render=s,this.renderInstances=o,this.renderMultiDraw=a,this.renderMultiDrawInstances=l}function Xu(r,e,t,n){let i;function s(){if(i!==void 0)return i;if(e.has("EXT_texture_filter_anisotropic")===!0){const S=e.get("EXT_texture_filter_anisotropic");i=r.getParameter(S.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function o(S){return!(S!==tn&&n.convert(S)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT))}function a(S){const I=S===Ii&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(S!==Zn&&n.convert(S)!==r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE)&&S!==hn&&!I)}function l(S){if(S==="highp"){if(r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.HIGH_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.HIGH_FLOAT).precision>0)return"highp";S="mediump"}return S==="mediump"&&r.getShaderPrecisionFormat(r.VERTEX_SHADER,r.MEDIUM_FLOAT).precision>0&&r.getShaderPrecisionFormat(r.FRAGMENT_SHADER,r.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=t.precision!==void 0?t.precision:"highp";const h=l(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const u=t.logarithmicDepthBuffer===!0,d=t.reverseDepthBuffer===!0&&e.has("EXT_clip_control"),q=r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS),m=r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS),g=r.getParameter(r.MAX_TEXTURE_SIZE),p=r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE),f=r.getParameter(r.MAX_VERTEX_ATTRIBS),v=r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS),y=r.getParameter(r.MAX_VARYING_VECTORS),_=r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS),T=m>0,E=r.getParameter(r.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:o,textureTypeReadable:a,precision:c,logarithmicDepthBuffer:u,reverseDepthBuffer:d,maxTextures:q,maxVertexTextures:m,maxTextureSize:g,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:v,maxVaryings:y,maxFragmentUniforms:_,vertexTextures:T,maxSamples:E}}function Yu(r){const e=this;let t=null,n=0,i=!1,s=!1;const o=new g1,a=new Ve,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d){const q=u.length!==0||d||n!==0||i;return i=d,n=u.length,q},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1},this.setGlobalState=function(u,d){t=h(u,d,0)},this.setState=function(u,d,q){const m=u.clippingPlanes,g=u.clipIntersection,p=u.clipShadows,f=r.get(u);if(!i||m===null||m.length===0||s&&!p)s?h(null):c();else{const v=s?0:n,y=v*4;let _=f.clippingState||null;l.value=_,_=h(m,d,y,q);for(let T=0;T!==y;++T)_[T]=t[T];f.clippingState=_,this.numIntersection=g?this.numPlanes:0,this.numPlanes+=v}};function c(){l.value!==t&&(l.value=t,l.needsUpdate=n>0),e.numPlanes=n,e.numIntersection=0}function h(u,d,q,m){const g=u!==null?u.length:0;let p=null;if(g!==0){if(p=l.value,m!==!0||p===null){const f=q+g*4,v=d.matrixWorldInverse;a.getNormalMatrix(v),(p===null||p.length<f)&&(p=new Float32Array(f));for(let y=0,_=q;y!==g;++y,_+=4)o.copy(u[y]).applyMatrix4(v,a),o.normal.toArray(p,_),p[_+3]=o.constant}l.value=p,l.needsUpdate=!0}return e.numPlanes=g,e.numIntersection=0,p}}function $u(r){let e=new WeakMap;function t(o,a){return a===ps?o.mapping=a1:a===gs&&(o.mapping=b1),o}function n(o){if(o&&o.isTexture){const a=o.mapping;if(a===ps||a===gs)if(e.has(o)){const l=e.get(o).texture;return t(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new J3(l.height);return c.fromEquirectangularTexture(r,o),e.set(o,c),o.addEventListener("dispose",i),t(c.texture,o.mapping)}else return null}}return o}function i(o){const a=o.target;a.removeEventListener("dispose",i);const l=e.get(a);l!==void 0&&(e.delete(a),l.dispose())}function s(){e=new WeakMap}return{get:n,dispose:s}}const rs=4,U5=[.125,.215,.35,.446,.526,.582],xi=20,O4=new wo,O5=new _e;let B4=null,V4=0,H4=0,G4=!1;const _i=(1+Math.sqrt(5))/2,os=1/_i,B5=[new L(-_i,os,0),new L(_i,os,0),new L(-os,0,_i),new L(os,0,_i),new L(0,_i,-os),new L(0,_i,os),new L(-1,1,-1),new L(1,1,-1),new L(-1,1,1),new L(1,1,1)];class W4{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,n=.1,i=100){B4=this._renderer.getRenderTarget(),V4=this._renderer.getActiveCubeFace(),H4=this._renderer.getActiveMipmapLevel(),G4=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const s=this._allocateTargets();return s.depthBuffer=!0,this._sceneToCubeUV(e,n,i,s),t>0&&this._blur(s,0,0,t),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=G5(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=H5(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(B4,V4,H4),this._renderer.xr.enabled=G4,e.scissorTest=!1,zo(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===a1||e.mapping===b1?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),B4=this._renderer.getRenderTarget(),V4=this._renderer.getActiveCubeFace(),H4=this._renderer.getActiveMipmapLevel(),G4=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=t||this._allocateTargets();return this._textureToCubeUV(e,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,n={magFilter:Nt,minFilter:Nt,generateMipmaps:!1,type:Ii,format:tn,colorSpace:J1,depthBuffer:!1},i=V5(e,t,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=V5(e,t,n);const{_lodMax:s}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Zu(s)),this._blurMaterial=ju(s,e,t)}return i}_compileMaterial(e){const t=new St(this._lodPlanes[0],e);this._renderer.compile(t,O4)}_sceneToCubeUV(e,t,n,i){const a=new Ot(90,1,t,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.toneMapping;h.getClearColor(O5),h.toneMapping=o1,h.autoClear=!1;const q=new z1({name:"PMREM.Background",side:en,depthWrite:!1,depthTest:!1}),m=new St(new N1,q);let g=!1;const p=e.background;p?p.isColor&&(q.color.copy(p),e.background=null,g=!0):(q.color.copy(O5),g=!0);for(let f=0;f<6;f++){const v=f%3;v===0?(a.up.set(0,l[f],0),a.lookAt(c[f],0,0)):v===1?(a.up.set(0,0,l[f]),a.lookAt(0,c[f],0)):(a.up.set(0,l[f],0),a.lookAt(0,0,c[f]));const y=this._cubeSize;zo(i,v*y,f>2?y:0,y,y),h.setRenderTarget(i),g&&h.render(m,a),h.render(e,a)}m.geometry.dispose(),m.material.dispose(),h.toneMapping=d,h.autoClear=u,e.background=p}_textureToCubeUV(e,t){const n=this._renderer,i=e.mapping===a1||e.mapping===b1;i?(this._cubemapMaterial===null&&(this._cubemapMaterial=G5()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=H5());const s=i?this._cubemapMaterial:this._equirectMaterial,o=new St(this._lodPlanes[0],s),a=s.uniforms;a.envMap.value=e;const l=this._cubeSize;zo(t,0,0,3*l,2*l),n.setRenderTarget(t),n.render(o,O4)}_applyPMREM(e){const t=this._renderer,n=t.autoClear;t.autoClear=!1;const i=this._lodPlanes.length;for(let s=1;s<i;s++){const o=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),a=B5[(i-s-1)%B5.length];this._blur(e,s-1,s,o,a)}t.autoClear=n}_blur(e,t,n,i,s){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,n,i,"latitudinal",s),this._halfBlur(o,e,n,n,i,"longitudinal",s)}_halfBlur(e,t,n,i,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new St(this._lodPlanes[i],c),d=c.uniforms,q=this._sizeLods[n]-1,m=isFinite(s)?Math.PI/(2*q):2*Math.PI/(2*xi-1),g=s/m,p=isFinite(s)?1+Math.floor(h*g):xi;p>xi&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${p} samples when the maximum is set to ${xi}`);const f=[];let v=0;for(let S=0;S<xi;++S){const I=S/g,w=Math.exp(-I*I/2);f.push(w),S===0?v+=w:S<p&&(v+=2*w)}for(let S=0;S<f.length;S++)f[S]=f[S]/v;d.envMap.value=e.texture,d.samples.value=p,d.weights.value=f,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:y}=this;d.dTheta.value=m,d.mipInt.value=y-n;const _=this._sizeLods[i],T=3*_*(i>y-rs?i-y+rs:0),E=4*(this._cubeSize-_);zo(t,T,E,3*_,2*_),l.setRenderTarget(t),l.render(u,O4)}}function Zu(r){const e=[],t=[],n=[];let i=r;const s=r-rs+1+U5.length;for(let o=0;o<s;o++){const a=Math.pow(2,i);t.push(a);let l=1/a;o>r-rs?l=U5[o-r+rs-1]:o===0&&(l=0),n.push(l);const c=1/(a-2),h=-c,u=1+c,d=[h,h,u,h,u,u,h,h,u,u,h,u],q=6,m=6,g=3,p=2,f=1,v=new Float32Array(g*m*q),y=new Float32Array(p*m*q),_=new Float32Array(f*m*q);for(let E=0;E<q;E++){const S=E%3*2/3-1,I=E>2?0:-1,w=[S,I,0,S+2/3,I,0,S+2/3,I+1,0,S,I,0,S+2/3,I+1,0,S,I+1,0];v.set(w,g*m*E),y.set(d,p*m*E);const x=[E,E,E,E,E,E];_.set(x,f*m*E)}const T=new Ze;T.setAttribute("position",new qt(v,g)),T.setAttribute("uv",new qt(y,p)),T.setAttribute("faceIndex",new qt(_,f)),e.push(T),i>rs&&i--}return{lodPlanes:e,sizeLods:t,sigmas:n}}function V5(r,e,t){const n=new Jn(r,e,t);return n.texture.mapping=Ai,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function zo(r,e,t,n,i){r.viewport.set(e,t,n,i),r.scissor.set(e,t,n,i)}function ju(r,e,t){const n=new Float32Array(xi),i=new L(0,1,0);return new Ln({name:"SphericalGaussianBlur",defines:{n:xi,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${r}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:i}},vertexShader:X4(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:r1,depthTest:!1,depthWrite:!1})}function H5(){return new Ln({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:X4(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:r1,depthTest:!1,depthWrite:!1})}function G5(){return new Ln({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:X4(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:r1,depthTest:!1,depthWrite:!1})}function X4(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function Ju(r){let e=new WeakMap,t=null;function n(a){if(a&&a.isTexture){const l=a.mapping,c=l===ps||l===gs,h=l===a1||l===b1;if(c||h){let u=e.get(a);const d=u!==void 0?u.texture.pmremVersion:0;if(a.isRenderTargetTexture&&a.pmremVersion!==d)return t===null&&(t=new W4(r)),u=c?t.fromEquirectangular(a,u):t.fromCubemap(a,u),u.texture.pmremVersion=a.pmremVersion,e.set(a,u),u.texture;if(u!==void 0)return u.texture;{const q=a.image;return c&&q&&q.height>0||h&&q&&i(q)?(t===null&&(t=new W4(r)),u=c?t.fromEquirectangular(a):t.fromCubemap(a),u.texture.pmremVersion=a.pmremVersion,e.set(a,u),a.addEventListener("dispose",s),u.texture):null}}}return a}function i(a){let l=0;const c=6;for(let h=0;h<c;h++)a[h]!==void 0&&l++;return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=e.get(l);c!==void 0&&(e.delete(l),c.dispose())}function o(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:n,dispose:o}}function Ku(r){const e={};function t(n){if(e[n]!==void 0)return e[n];let i;switch(n){case"WEBGL_depth_texture":i=r.getExtension("WEBGL_depth_texture")||r.getExtension("MOZ_WEBGL_depth_texture")||r.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=r.getExtension("EXT_texture_filter_anisotropic")||r.getExtension("MOZ_EXT_texture_filter_anisotropic")||r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=r.getExtension("WEBGL_compressed_texture_s3tc")||r.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=r.getExtension("WEBGL_compressed_texture_pvrtc")||r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=r.getExtension(n)}return e[n]=i,i}return{has:function(n){return t(n)!==null},init:function(){t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance"),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture"),t("WEBGL_render_shared_exponent")},get:function(n){const i=t(n);return i===null&&Li("THREE.WebGLRenderer: "+n+" extension not supported."),i}}}function Qu(r,e,t,n){const i={},s=new WeakMap;function o(u){const d=u.target;d.index!==null&&e.remove(d.index);for(const m in d.attributes)e.remove(d.attributes[m]);d.removeEventListener("dispose",o),delete i[d.id];const q=s.get(d);q&&(e.remove(q),s.delete(d)),n.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function a(u,d){return i[d.id]===!0||(d.addEventListener("dispose",o),i[d.id]=!0,t.memory.geometries++),d}function l(u){const d=u.attributes;for(const q in d)e.update(d[q],r.ARRAY_BUFFER)}function c(u){const d=[],q=u.index,m=u.attributes.position;let g=0;if(q!==null){const v=q.array;g=q.version;for(let y=0,_=v.length;y<_;y+=3){const T=v[y+0],E=v[y+1],S=v[y+2];d.push(T,E,E,S,S,T)}}else if(m!==void 0){const v=m.array;g=m.version;for(let y=0,_=v.length/3-1;y<_;y+=3){const T=y+0,E=y+1,S=y+2;d.push(T,E,E,S,S,T)}}else return;const p=new(T3(d)?Oa:Ua)(d,1);p.version=g;const f=s.get(u);f&&e.remove(f),s.set(u,p)}function h(u){const d=s.get(u);if(d){const q=u.index;q!==null&&d.version<q.version&&c(u)}else c(u);return s.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function ed(r,e,t){let n;function i(d){n=d}let s,o;function a(d){s=d.type,o=d.bytesPerElement}function l(d,q){r.drawElements(n,q,s,d*o),t.update(q,n,1)}function c(d,q,m){m!==0&&(r.drawElementsInstanced(n,q,s,d*o,m),t.update(q,n,m))}function h(d,q,m){if(m===0)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,q,0,s,d,0,m);let p=0;for(let f=0;f<m;f++)p+=q[f];t.update(p,n,1)}function u(d,q,m,g){if(m===0)return;const p=e.get("WEBGL_multi_draw");if(p===null)for(let f=0;f<d.length;f++)c(d[f]/o,q[f],g[f]);else{p.multiDrawElementsInstancedWEBGL(n,q,0,s,d,0,g,0,m);let f=0;for(let v=0;v<m;v++)f+=q[v]*g[v];t.update(f,n,1)}}this.setMode=i,this.setIndex=a,this.render=l,this.renderInstances=c,this.renderMultiDraw=h,this.renderMultiDrawInstances=u}function td(r){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function n(s,o,a){switch(t.calls++,o){case r.TRIANGLES:t.triangles+=a*(s/3);break;case r.LINES:t.lines+=a*(s/2);break;case r.LINE_STRIP:t.lines+=a*(s-1);break;case r.LINE_LOOP:t.lines+=a*s;break;case r.POINTS:t.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function i(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:i,update:n}}function nd(r,e,t){const n=new WeakMap,i=new lt;function s(o,a,l){const c=o.morphTargetInfluences,h=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color,u=h!==void 0?h.length:0;let d=n.get(a);if(d===void 0||d.count!==u){let w=function(){S.dispose(),n.delete(a),a.removeEventListener("dispose",w)};d!==void 0&&d.texture.dispose();const q=a.morphAttributes.position!==void 0,m=a.morphAttributes.normal!==void 0,g=a.morphAttributes.color!==void 0,p=a.morphAttributes.position||[],f=a.morphAttributes.normal||[],v=a.morphAttributes.color||[];let y=0;q===!0&&(y=1),m===!0&&(y=2),g===!0&&(y=3);let _=a.attributes.position.count*y,T=1;_>e.maxTextureSize&&(T=Math.ceil(_/e.maxTextureSize),_=e.maxTextureSize);const E=new Float32Array(_*T*4*u),S=new Ls(E,_,T,u);S.type=hn,S.needsUpdate=!0;const I=y*4;for(let x=0;x<u;x++){const C=p[x],O=f[x],U=v[x],B=_*T*4*x;for(let P=0;P<C.count;P++){const K=P*I;q===!0&&(i.fromBufferAttribute(C,P),E[B+K+0]=i.x,E[B+K+1]=i.y,E[B+K+2]=i.z,E[B+K+3]=0),m===!0&&(i.fromBufferAttribute(O,P),E[B+K+4]=i.x,E[B+K+5]=i.y,E[B+K+6]=i.z,E[B+K+7]=0),g===!0&&(i.fromBufferAttribute(U,P),E[B+K+8]=i.x,E[B+K+9]=i.y,E[B+K+10]=i.z,E[B+K+11]=U.itemSize===4?i.w:1)}}d={count:u,texture:S,size:new $(_,T)},n.set(a,d),a.addEventListener("dispose",w)}if(o.isInstancedMesh===!0&&o.morphTexture!==null)l.getUniforms().setValue(r,"morphTexture",o.morphTexture,t);else{let q=0;for(let g=0;g<c.length;g++)q+=c[g];const m=a.morphTargetsRelative?1:1-q;l.getUniforms().setValue(r,"morphTargetBaseInfluence",m),l.getUniforms().setValue(r,"morphTargetInfluences",c)}l.getUniforms().setValue(r,"morphTargetsTexture",d.texture,t),l.getUniforms().setValue(r,"morphTargetsTextureSize",d.size)}return{update:s}}function id(r,e,t,n){let i=new WeakMap;function s(l){const c=n.render.frame,h=l.geometry,u=e.get(l,h);if(i.get(u)!==c&&(e.update(u),i.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),i.get(l)!==c&&(t.update(l.instanceMatrix,r.ARRAY_BUFFER),l.instanceColor!==null&&t.update(l.instanceColor,r.ARRAY_BUFFER),i.set(l,c))),l.isSkinnedMesh){const d=l.skeleton;i.get(d)!==c&&(d.update(),i.set(d,c))}return u}function o(){i=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a),t.remove(c.instanceMatrix),c.instanceColor!==null&&t.remove(c.instanceColor)}return{update:s,dispose:o}}const W5=new Mt,X5=new n4(1,1),Y5=new Ls,$5=new p2,Z5=new Os,j5=[],J5=[],K5=new Float32Array(16),Q5=new Float32Array(9),e6=new Float32Array(4);function as(r,e,t){const n=r[0];if(n<=0||n>0)return r;const i=e*t;let s=j5[i];if(s===void 0&&(s=new Float32Array(i),j5[i]=s),e!==0){n.toArray(s,0);for(let o=1,a=0;o!==e;++o)a+=t,r[o].toArray(s,a)}return s}function Lt(r,e){if(r.length!==e.length)return!1;for(let t=0,n=r.length;t<n;t++)if(r[t]!==e[t])return!1;return!0}function Pt(r,e){for(let t=0,n=e.length;t<n;t++)r[t]=e[t]}function No(r,e){let t=J5[e];t===void 0&&(t=new Int32Array(e),J5[e]=t);for(let n=0;n!==e;++n)t[n]=r.allocateTextureUnit();return t}function sd(r,e){const t=this.cache;t[0]!==e&&(r.uniform1f(this.addr,e),t[0]=e)}function rd(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Lt(t,e))return;r.uniform2fv(this.addr,e),Pt(t,e)}}function od(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(r.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Lt(t,e))return;r.uniform3fv(this.addr,e),Pt(t,e)}}function ad(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Lt(t,e))return;r.uniform4fv(this.addr,e),Pt(t,e)}}function ld(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Lt(t,e))return;r.uniformMatrix2fv(this.addr,!1,e),Pt(t,e)}else{if(Lt(t,n))return;e6.set(n),r.uniformMatrix2fv(this.addr,!1,e6),Pt(t,n)}}function cd(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Lt(t,e))return;r.uniformMatrix3fv(this.addr,!1,e),Pt(t,e)}else{if(Lt(t,n))return;Q5.set(n),r.uniformMatrix3fv(this.addr,!1,Q5),Pt(t,n)}}function hd(r,e){const t=this.cache,n=e.elements;if(n===void 0){if(Lt(t,e))return;r.uniformMatrix4fv(this.addr,!1,e),Pt(t,e)}else{if(Lt(t,n))return;K5.set(n),r.uniformMatrix4fv(this.addr,!1,K5),Pt(t,n)}}function ud(r,e){const t=this.cache;t[0]!==e&&(r.uniform1i(this.addr,e),t[0]=e)}function dd(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Lt(t,e))return;r.uniform2iv(this.addr,e),Pt(t,e)}}function qd(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Lt(t,e))return;r.uniform3iv(this.addr,e),Pt(t,e)}}function md(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Lt(t,e))return;r.uniform4iv(this.addr,e),Pt(t,e)}}function fd(r,e){const t=this.cache;t[0]!==e&&(r.uniform1ui(this.addr,e),t[0]=e)}function pd(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(r.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Lt(t,e))return;r.uniform2uiv(this.addr,e),Pt(t,e)}}function gd(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(r.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Lt(t,e))return;r.uniform3uiv(this.addr,e),Pt(t,e)}}function xd(r,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(r.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Lt(t,e))return;r.uniform4uiv(this.addr,e),Pt(t,e)}}function _d(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i);let s;this.type===r.SAMPLER_2D_SHADOW?(X5.compareFunction=xa,s=X5):s=W5,t.setTexture2D(e||s,i)}function yd(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture3D(e||$5,i)}function vd(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTextureCube(e||Z5,i)}function wd(r,e,t){const n=this.cache,i=t.allocateTextureUnit();n[0]!==i&&(r.uniform1i(this.addr,i),n[0]=i),t.setTexture2DArray(e||Y5,i)}function Md(r){switch(r){case 5126:return sd;case 35664:return rd;case 35665:return od;case 35666:return ad;case 35674:return ld;case 35675:return cd;case 35676:return hd;case 5124:case 35670:return ud;case 35667:case 35671:return dd;case 35668:case 35672:return qd;case 35669:case 35673:return md;case 5125:return fd;case 36294:return pd;case 36295:return gd;case 36296:return xd;case 35678:case 36198:case 36298:case 36306:case 35682:return _d;case 35679:case 36299:case 36307:return yd;case 35680:case 36300:case 36308:case 36293:return vd;case 36289:case 36303:case 36311:case 36292:return wd}}function Sd(r,e){r.uniform1fv(this.addr,e)}function bd(r,e){const t=as(e,this.size,2);r.uniform2fv(this.addr,t)}function Ed(r,e){const t=as(e,this.size,3);r.uniform3fv(this.addr,t)}function Td(r,e){const t=as(e,this.size,4);r.uniform4fv(this.addr,t)}function Ad(r,e){const t=as(e,this.size,4);r.uniformMatrix2fv(this.addr,!1,t)}function Cd(r,e){const t=as(e,this.size,9);r.uniformMatrix3fv(this.addr,!1,t)}function Rd(r,e){const t=as(e,this.size,16);r.uniformMatrix4fv(this.addr,!1,t)}function Id(r,e){r.uniform1iv(this.addr,e)}function zd(r,e){r.uniform2iv(this.addr,e)}function Nd(r,e){r.uniform3iv(this.addr,e)}function Ld(r,e){r.uniform4iv(this.addr,e)}function Pd(r,e){r.uniform1uiv(this.addr,e)}function Dd(r,e){r.uniform2uiv(this.addr,e)}function kd(r,e){r.uniform3uiv(this.addr,e)}function Fd(r,e){r.uniform4uiv(this.addr,e)}function Ud(r,e,t){const n=this.cache,i=e.length,s=No(t,i);Lt(n,s)||(r.uniform1iv(this.addr,s),Pt(n,s));for(let o=0;o!==i;++o)t.setTexture2D(e[o]||W5,s[o])}function Od(r,e,t){const n=this.cache,i=e.length,s=No(t,i);Lt(n,s)||(r.uniform1iv(this.addr,s),Pt(n,s));for(let o=0;o!==i;++o)t.setTexture3D(e[o]||$5,s[o])}function Bd(r,e,t){const n=this.cache,i=e.length,s=No(t,i);Lt(n,s)||(r.uniform1iv(this.addr,s),Pt(n,s));for(let o=0;o!==i;++o)t.setTextureCube(e[o]||Z5,s[o])}function Vd(r,e,t){const n=this.cache,i=e.length,s=No(t,i);Lt(n,s)||(r.uniform1iv(this.addr,s),Pt(n,s));for(let o=0;o!==i;++o)t.setTexture2DArray(e[o]||Y5,s[o])}function Hd(r){switch(r){case 5126:return Sd;case 35664:return bd;case 35665:return Ed;case 35666:return Td;case 35674:return Ad;case 35675:return Cd;case 35676:return Rd;case 5124:case 35670:return Id;case 35667:case 35671:return zd;case 35668:case 35672:return Nd;case 35669:case 35673:return Ld;case 5125:return Pd;case 36294:return Dd;case 36295:return kd;case 36296:return Fd;case 35678:case 36198:case 36298:case 36306:case 35682:return Ud;case 35679:case 36299:case 36307:return Od;case 35680:case 36300:case 36308:case 36293:return Bd;case 36289:case 36303:case 36311:case 36292:return Vd}}class Gd{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.setValue=Md(t.type)}}class Wd{constructor(e,t,n){this.id=e,this.addr=n,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=Hd(t.type)}}class Xd{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,n){const i=this.seq;for(let s=0,o=i.length;s!==o;++s){const a=i[s];a.setValue(e,t[a.id],n)}}}const Y4=/(\w+)(\])?(\[|\.)?/g;function t6(r,e){r.seq.push(e),r.map[e.id]=e}function Yd(r,e,t){const n=r.name,i=n.length;for(Y4.lastIndex=0;;){const s=Y4.exec(n),o=Y4.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===i){t6(t,c===void 0?new Gd(a,r,e):new Wd(a,r,e));break}else{let u=t.map[a];u===void 0&&(u=new Xd(a),t6(t,u)),t=u}}}class Lo{constructor(e,t){this.seq=[],this.map={};const n=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const s=e.getActiveUniform(t,i),o=e.getUniformLocation(t,s.name);Yd(s,o,this)}}setValue(e,t,n,i){const s=this.map[t];s!==void 0&&s.setValue(e,n,i)}setOptional(e,t,n){const i=t[n];i!==void 0&&this.setValue(e,n,i)}static upload(e,t,n,i){for(let s=0,o=t.length;s!==o;++s){const a=t[s],l=n[a.id];l.needsUpdate!==!1&&a.setValue(e,l.value,i)}}static seqWithValue(e,t){const n=[];for(let i=0,s=e.length;i!==s;++i){const o=e[i];o.id in t&&n.push(o)}return n}}function n6(r,e,t){const n=r.createShader(e);return r.shaderSource(n,t),r.compileShader(n),n}const $d=37297;let Zd=0;function jd(r,e){const t=r.split(`
`),n=[],i=Math.max(e-6,0),s=Math.min(e+6,t.length);for(let o=i;o<s;o++){const a=o+1;n.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return n.join(`
`)}const i6=new Ve;function Jd(r){nt._getMatrix(i6,nt.workingColorSpace,r);const e=`mat3( ${i6.elements.map(t=>t.toFixed(4))} )`;switch(nt.getTransfer(r)){case Cs:return[e,"LinearTransferOETF"];case dt:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",r),[e,"LinearTransferOETF"]}}function s6(r,e,t){const n=r.getShaderParameter(e,r.COMPILE_STATUS),i=r.getShaderInfoLog(e).trim();if(n&&i==="")return"";const s=/ERROR: 0:(\d+)/.exec(i);if(s){const o=parseInt(s[1]);return t.toUpperCase()+`

`+i+`

`+jd(r.getShaderSource(e),o)}else return i}function Kd(r,e){const t=Jd(e);return[`vec4 ${r}( vec4 value ) {`,`	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,"}"].join(`
`)}function Qd(r,e){let t;switch(e){case r3:t="Linear";break;case o3:t="Reinhard";break;case a3:t="Cineon";break;case l3:t="ACESFilmic";break;case h3:t="AgX";break;case u3:t="Neutral";break;case c3:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+r+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}const Po=new L;function eq(){nt.getLuminanceCoefficients(Po);const r=Po.x.toFixed(4),e=Po.y.toFixed(4),t=Po.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,"	return dot( weights, rgb );","}"].join(`
`)}function tq(r){return[r.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",r.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(dr).join(`
`)}function nq(r){const e=[];for(const t in r){const n=r[t];n!==!1&&e.push("#define "+t+" "+n)}return e.join(`
`)}function iq(r,e){const t={},n=r.getProgramParameter(e,r.ACTIVE_ATTRIBUTES);for(let i=0;i<n;i++){const s=r.getActiveAttrib(e,i),o=s.name;let a=1;s.type===r.FLOAT_MAT2&&(a=2),s.type===r.FLOAT_MAT3&&(a=3),s.type===r.FLOAT_MAT4&&(a=4),t[o]={type:s.type,location:r.getAttribLocation(e,o),locationSize:a}}return t}function dr(r){return r!==""}function r6(r,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return r.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function o6(r,e){return r.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const sq=/^[ \t]*#include +<([\w\d./]+)>/gm;function $4(r){return r.replace(sq,oq)}const rq=new Map;function oq(r,e){let t=Ke[e];if(t===void 0){const n=rq.get(e);if(n!==void 0)t=Ke[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,n);else throw new Error("Can not resolve #include <"+e+">")}return $4(t)}const aq=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function a6(r){return r.replace(aq,lq)}function lq(r,e,t,n){let i="";for(let s=parseInt(e);s<parseInt(t);s++)i+=n.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return i}function l6(r){let e=`precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;return r.precision==="highp"?e+=`
#define HIGH_PRECISION`:r.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:r.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function cq(r){let e="SHADOWMAP_TYPE_BASIC";return r.shadowMapType===ta?e="SHADOWMAP_TYPE_PCF":r.shadowMapType===F0?e="SHADOWMAP_TYPE_PCF_SOFT":r.shadowMapType===Yn&&(e="SHADOWMAP_TYPE_VSM"),e}function hq(r){let e="ENVMAP_TYPE_CUBE";if(r.envMap)switch(r.envMapMode){case a1:case b1:e="ENVMAP_TYPE_CUBE";break;case Ai:e="ENVMAP_TYPE_CUBE_UV";break}return e}function uq(r){let e="ENVMAP_MODE_REFLECTION";if(r.envMap)switch(r.envMapMode){case b1:e="ENVMAP_MODE_REFRACTION";break}return e}function dq(r){let e="ENVMAP_BLENDING_NONE";if(r.envMap)switch(r.combine){case fs:e="ENVMAP_BLENDING_MULTIPLY";break;case i3:e="ENVMAP_BLENDING_MIX";break;case s3:e="ENVMAP_BLENDING_ADD";break}return e}function qq(r){const e=r.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,n=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:n,maxMip:t}}function mq(r,e,t,n){const i=r.getContext(),s=t.defines;let o=t.vertexShader,a=t.fragmentShader;const l=cq(t),c=hq(t),h=uq(t),u=dq(t),d=qq(t),q=tq(t),m=nq(s),g=i.createProgram();let p,f,v=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(p=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m].filter(dr).join(`
`),p.length>0&&(p+=`
`),f=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m].filter(dr).join(`
`),f.length>0&&(f+=`
`)):(p=[l6(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.batchingColor?"#define USE_BATCHING_COLOR":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.instancingMorph?"#define USE_INSTANCING_MORPH":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(dr).join(`
`),f=[l6(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,m,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+h:"",t.envMap?"#define "+u:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.dispersion?"#define USE_DISPERSION":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor||t.batchingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==o1?"#define TONE_MAPPING":"",t.toneMapping!==o1?Ke.tonemapping_pars_fragment:"",t.toneMapping!==o1?Qd("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",Ke.colorspace_pars_fragment,Kd("linearToOutputTexel",t.outputColorSpace),eq(),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(dr).join(`
`)),o=$4(o),o=r6(o,t),o=o6(o,t),a=$4(a),a=r6(a,t),a=o6(a,t),o=a6(o),a=a6(a),t.isRawShaderMaterial!==!0&&(v=`#version 300 es
`,p=[q,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+p,f=["#define varying in",t.glslVersion===_a?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===_a?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+f);const y=v+p+o,_=v+f+a,T=n6(i,i.VERTEX_SHADER,y),E=n6(i,i.FRAGMENT_SHADER,_);i.attachShader(g,T),i.attachShader(g,E),t.index0AttributeName!==void 0?i.bindAttribLocation(g,0,t.index0AttributeName):t.morphTargets===!0&&i.bindAttribLocation(g,0,"position"),i.linkProgram(g);function S(C){if(r.debug.checkShaderErrors){const O=i.getProgramInfoLog(g).trim(),U=i.getShaderInfoLog(T).trim(),B=i.getShaderInfoLog(E).trim();let P=!0,K=!0;if(i.getProgramParameter(g,i.LINK_STATUS)===!1)if(P=!1,typeof r.debug.onShaderError=="function")r.debug.onShaderError(i,g,T,E);else{const ie=s6(i,T,"vertex"),H=s6(i,E,"fragment");console.error("THREE.WebGLProgram: Shader Error "+i.getError()+" - VALIDATE_STATUS "+i.getProgramParameter(g,i.VALIDATE_STATUS)+`

Material Name: `+C.name+`
Material Type: `+C.type+`

Program Info Log: `+O+`
`+ie+`
`+H)}else O!==""?console.warn("THREE.WebGLProgram: Program Info Log:",O):(U===""||B==="")&&(K=!1);K&&(C.diagnostics={runnable:P,programLog:O,vertexShader:{log:U,prefix:p},fragmentShader:{log:B,prefix:f}})}i.deleteShader(T),i.deleteShader(E),I=new Lo(i,g),w=iq(i,g)}let I;this.getUniforms=function(){return I===void 0&&S(this),I};let w;this.getAttributes=function(){return w===void 0&&S(this),w};let x=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return x===!1&&(x=i.getProgramParameter(g,$d)),x},this.destroy=function(){n.releaseStatesOfProgram(this),i.deleteProgram(g),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=Zd++,this.cacheKey=e,this.usedTimes=1,this.program=g,this.vertexShader=T,this.fragmentShader=E,this}let fq=0;class pq{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,n=e.fragmentShader,i=this._getShaderStage(t),s=this._getShaderStage(n),o=this._getShaderCacheForMaterial(e);return o.has(i)===!1&&(o.add(i),i.usedTimes++),o.has(s)===!1&&(o.add(s),s.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const n of t)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let n=t.get(e);return n===void 0&&(n=new Set,t.set(e,n)),n}_getShaderStage(e){const t=this.shaderCache;let n=t.get(e);return n===void 0&&(n=new gq(e),t.set(e,n)),n}}class gq{constructor(e){this.id=fq++,this.code=e,this.usedTimes=0}}function xq(r,e,t,n,i,s,o){const a=new M2,l=new pq,c=new Set,h=[],u=i.logarithmicDepthBuffer,d=i.vertexTextures;let q=i.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function g(w){return c.add(w),w===0?"uv":`uv${w}`}function p(w,x,C,O,U){const B=O.fog,P=U.geometry,K=w.isMeshStandardMaterial?O.environment:null,ie=(w.isMeshStandardMaterial?t:e).get(w.envMap||K),H=ie&&ie.mapping===Ai?ie.image.height:null,fe=m[w.type];w.precision!==null&&(q=i.getMaxPrecision(w.precision),q!==w.precision&&console.warn("THREE.WebGLProgram.getParameters:",w.precision,"not supported, using",q,"instead."));const ge=P.morphAttributes.position||P.morphAttributes.normal||P.morphAttributes.color,ve=ge!==void 0?ge.length:0;let De=0;P.morphAttributes.position!==void 0&&(De=1),P.morphAttributes.normal!==void 0&&(De=2),P.morphAttributes.color!==void 0&&(De=3);let ke,F,D,N;if(fe){const ft=On[fe];ke=ft.vertexShader,F=ft.fragmentShader}else ke=w.vertexShader,F=w.fragmentShader,l.update(w),D=l.getVertexShaderID(w),N=l.getFragmentShaderID(w);const A=r.getRenderTarget(),Q=r.state.buffers.depth.getReversed(),he=U.isInstancedMesh===!0,j=U.isBatchedMesh===!0,pe=!!w.map,Z=!!w.matcap,te=!!ie,M=!!w.aoMap,re=!!w.lightMap,ee=!!w.bumpMap,ue=!!w.normalMap,V=!!w.displacementMap,k=!!w.emissiveMap,ae=!!w.metalnessMap,z=!!w.roughnessMap,b=w.anisotropy>0,J=w.clearcoat>0,oe=w.dispersion>0,qe=w.iridescence>0,de=w.sheen>0,Pe=w.transmission>0,Me=b&&!!w.anisotropyMap,Te=J&&!!w.clearcoatMap,Qe=J&&!!w.clearcoatNormalMap,xe=J&&!!w.clearcoatRoughnessMap,Re=qe&&!!w.iridescenceMap,Ue=qe&&!!w.iridescenceThicknessMap,He=de&&!!w.sheenColorMap,Ne=de&&!!w.sheenRoughnessMap,st=!!w.specularMap,tt=!!w.specularColorMap,xt=!!w.specularIntensityMap,G=Pe&&!!w.transmissionMap,be=Pe&&!!w.thicknessMap,ce=!!w.gradientMap,me=!!w.alphaMap,Ce=w.alphaTest>0,Ae=!!w.alphaHash,et=!!w.extensions;let Et=o1;w.toneMapped&&(A===null||A.isXRRenderTarget===!0)&&(Et=r.toneMapping);const Qt={shaderID:fe,shaderType:w.type,shaderName:w.name,vertexShader:ke,fragmentShader:F,defines:w.defines,customVertexShaderID:D,customFragmentShaderID:N,isRawShaderMaterial:w.isRawShaderMaterial===!0,glslVersion:w.glslVersion,precision:q,batching:j,batchingColor:j&&U._colorsTexture!==null,instancing:he,instancingColor:he&&U.instanceColor!==null,instancingMorph:he&&U.morphTexture!==null,supportsVertexTextures:d,outputColorSpace:A===null?r.outputColorSpace:A.isXRRenderTarget===!0?A.texture.colorSpace:J1,alphaToCoverage:!!w.alphaToCoverage,map:pe,matcap:Z,envMap:te,envMapMode:te&&ie.mapping,envMapCubeUVHeight:H,aoMap:M,lightMap:re,bumpMap:ee,normalMap:ue,displacementMap:d&&V,emissiveMap:k,normalMapObjectSpace:ue&&w.normalMapType===x3,normalMapTangentSpace:ue&&w.normalMapType===E1,metalnessMap:ae,roughnessMap:z,anisotropy:b,anisotropyMap:Me,clearcoat:J,clearcoatMap:Te,clearcoatNormalMap:Qe,clearcoatRoughnessMap:xe,dispersion:oe,iridescence:qe,iridescenceMap:Re,iridescenceThicknessMap:Ue,sheen:de,sheenColorMap:He,sheenRoughnessMap:Ne,specularMap:st,specularColorMap:tt,specularIntensityMap:xt,transmission:Pe,transmissionMap:G,thicknessMap:be,gradientMap:ce,opaque:w.transparent===!1&&w.blending===G1&&w.alphaToCoverage===!1,alphaMap:me,alphaTest:Ce,alphaHash:Ae,combine:w.combine,mapUv:pe&&g(w.map.channel),aoMapUv:M&&g(w.aoMap.channel),lightMapUv:re&&g(w.lightMap.channel),bumpMapUv:ee&&g(w.bumpMap.channel),normalMapUv:ue&&g(w.normalMap.channel),displacementMapUv:V&&g(w.displacementMap.channel),emissiveMapUv:k&&g(w.emissiveMap.channel),metalnessMapUv:ae&&g(w.metalnessMap.channel),roughnessMapUv:z&&g(w.roughnessMap.channel),anisotropyMapUv:Me&&g(w.anisotropyMap.channel),clearcoatMapUv:Te&&g(w.clearcoatMap.channel),clearcoatNormalMapUv:Qe&&g(w.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:xe&&g(w.clearcoatRoughnessMap.channel),iridescenceMapUv:Re&&g(w.iridescenceMap.channel),iridescenceThicknessMapUv:Ue&&g(w.iridescenceThicknessMap.channel),sheenColorMapUv:He&&g(w.sheenColorMap.channel),sheenRoughnessMapUv:Ne&&g(w.sheenRoughnessMap.channel),specularMapUv:st&&g(w.specularMap.channel),specularColorMapUv:tt&&g(w.specularColorMap.channel),specularIntensityMapUv:xt&&g(w.specularIntensityMap.channel),transmissionMapUv:G&&g(w.transmissionMap.channel),thicknessMapUv:be&&g(w.thicknessMap.channel),alphaMapUv:me&&g(w.alphaMap.channel),vertexTangents:!!P.attributes.tangent&&(ue||b),vertexColors:w.vertexColors,vertexAlphas:w.vertexColors===!0&&!!P.attributes.color&&P.attributes.color.itemSize===4,pointsUvs:U.isPoints===!0&&!!P.attributes.uv&&(pe||me),fog:!!B,useFog:w.fog===!0,fogExp2:!!B&&B.isFogExp2,flatShading:w.flatShading===!0,sizeAttenuation:w.sizeAttenuation===!0,logarithmicDepthBuffer:u,reverseDepthBuffer:Q,skinning:U.isSkinnedMesh===!0,morphTargets:P.morphAttributes.position!==void 0,morphNormals:P.morphAttributes.normal!==void 0,morphColors:P.morphAttributes.color!==void 0,morphTargetsCount:ve,morphTextureStride:De,numDirLights:x.directional.length,numPointLights:x.point.length,numSpotLights:x.spot.length,numSpotLightMaps:x.spotLightMap.length,numRectAreaLights:x.rectArea.length,numHemiLights:x.hemi.length,numDirLightShadows:x.directionalShadowMap.length,numPointLightShadows:x.pointShadowMap.length,numSpotLightShadows:x.spotShadowMap.length,numSpotLightShadowsWithMaps:x.numSpotLightShadowsWithMaps,numLightProbes:x.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:w.dithering,shadowMapEnabled:r.shadowMap.enabled&&C.length>0,shadowMapType:r.shadowMap.type,toneMapping:Et,decodeVideoTexture:pe&&w.map.isVideoTexture===!0&&nt.getTransfer(w.map.colorSpace)===dt,decodeVideoTextureEmissive:k&&w.emissiveMap.isVideoTexture===!0&&nt.getTransfer(w.emissiveMap.colorSpace)===dt,premultipliedAlpha:w.premultipliedAlpha,doubleSided:w.side===Cn,flipSided:w.side===en,useDepthPacking:w.depthPacking>=0,depthPacking:w.depthPacking||0,index0AttributeName:w.index0AttributeName,extensionClipCullDistance:et&&w.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(et&&w.extensions.multiDraw===!0||j)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:w.customProgramCacheKey()};return Qt.vertexUv1s=c.has(1),Qt.vertexUv2s=c.has(2),Qt.vertexUv3s=c.has(3),c.clear(),Qt}function f(w){const x=[];if(w.shaderID?x.push(w.shaderID):(x.push(w.customVertexShaderID),x.push(w.customFragmentShaderID)),w.defines!==void 0)for(const C in w.defines)x.push(C),x.push(w.defines[C]);return w.isRawShaderMaterial===!1&&(v(x,w),y(x,w),x.push(r.outputColorSpace)),x.push(w.customProgramCacheKey),x.join()}function v(w,x){w.push(x.precision),w.push(x.outputColorSpace),w.push(x.envMapMode),w.push(x.envMapCubeUVHeight),w.push(x.mapUv),w.push(x.alphaMapUv),w.push(x.lightMapUv),w.push(x.aoMapUv),w.push(x.bumpMapUv),w.push(x.normalMapUv),w.push(x.displacementMapUv),w.push(x.emissiveMapUv),w.push(x.metalnessMapUv),w.push(x.roughnessMapUv),w.push(x.anisotropyMapUv),w.push(x.clearcoatMapUv),w.push(x.clearcoatNormalMapUv),w.push(x.clearcoatRoughnessMapUv),w.push(x.iridescenceMapUv),w.push(x.iridescenceThicknessMapUv),w.push(x.sheenColorMapUv),w.push(x.sheenRoughnessMapUv),w.push(x.specularMapUv),w.push(x.specularColorMapUv),w.push(x.specularIntensityMapUv),w.push(x.transmissionMapUv),w.push(x.thicknessMapUv),w.push(x.combine),w.push(x.fogExp2),w.push(x.sizeAttenuation),w.push(x.morphTargetsCount),w.push(x.morphAttributeCount),w.push(x.numDirLights),w.push(x.numPointLights),w.push(x.numSpotLights),w.push(x.numSpotLightMaps),w.push(x.numHemiLights),w.push(x.numRectAreaLights),w.push(x.numDirLightShadows),w.push(x.numPointLightShadows),w.push(x.numSpotLightShadows),w.push(x.numSpotLightShadowsWithMaps),w.push(x.numLightProbes),w.push(x.shadowMapType),w.push(x.toneMapping),w.push(x.numClippingPlanes),w.push(x.numClipIntersection),w.push(x.depthPacking)}function y(w,x){a.disableAll(),x.supportsVertexTextures&&a.enable(0),x.instancing&&a.enable(1),x.instancingColor&&a.enable(2),x.instancingMorph&&a.enable(3),x.matcap&&a.enable(4),x.envMap&&a.enable(5),x.normalMapObjectSpace&&a.enable(6),x.normalMapTangentSpace&&a.enable(7),x.clearcoat&&a.enable(8),x.iridescence&&a.enable(9),x.alphaTest&&a.enable(10),x.vertexColors&&a.enable(11),x.vertexAlphas&&a.enable(12),x.vertexUv1s&&a.enable(13),x.vertexUv2s&&a.enable(14),x.vertexUv3s&&a.enable(15),x.vertexTangents&&a.enable(16),x.anisotropy&&a.enable(17),x.alphaHash&&a.enable(18),x.batching&&a.enable(19),x.dispersion&&a.enable(20),x.batchingColor&&a.enable(21),w.push(a.mask),a.disableAll(),x.fog&&a.enable(0),x.useFog&&a.enable(1),x.flatShading&&a.enable(2),x.logarithmicDepthBuffer&&a.enable(3),x.reverseDepthBuffer&&a.enable(4),x.skinning&&a.enable(5),x.morphTargets&&a.enable(6),x.morphNormals&&a.enable(7),x.morphColors&&a.enable(8),x.premultipliedAlpha&&a.enable(9),x.shadowMapEnabled&&a.enable(10),x.doubleSided&&a.enable(11),x.flipSided&&a.enable(12),x.useDepthPacking&&a.enable(13),x.dithering&&a.enable(14),x.transmission&&a.enable(15),x.sheen&&a.enable(16),x.opaque&&a.enable(17),x.pointsUvs&&a.enable(18),x.decodeVideoTexture&&a.enable(19),x.decodeVideoTextureEmissive&&a.enable(20),x.alphaToCoverage&&a.enable(21),w.push(a.mask)}function _(w){const x=m[w.type];let C;if(x){const O=On[x];C=Y3.clone(O.uniforms)}else C=w.uniforms;return C}function T(w,x){let C;for(let O=0,U=h.length;O<U;O++){const B=h[O];if(B.cacheKey===x){C=B,++C.usedTimes;break}}return C===void 0&&(C=new mq(r,x,w,s),h.push(C)),C}function E(w){if(--w.usedTimes===0){const x=h.indexOf(w);h[x]=h[h.length-1],h.pop(),w.destroy()}}function S(w){l.remove(w)}function I(){l.dispose()}return{getParameters:p,getProgramCacheKey:f,getUniforms:_,acquireProgram:T,releaseProgram:E,releaseShaderCache:S,programs:h,dispose:I}}function _q(){let r=new WeakMap;function e(o){return r.has(o)}function t(o){let a=r.get(o);return a===void 0&&(a={},r.set(o,a)),a}function n(o){r.delete(o)}function i(o,a,l){r.get(o)[a]=l}function s(){r=new WeakMap}return{has:e,get:t,remove:n,update:i,dispose:s}}function yq(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.material.id!==e.material.id?r.material.id-e.material.id:r.z!==e.z?r.z-e.z:r.id-e.id}function c6(r,e){return r.groupOrder!==e.groupOrder?r.groupOrder-e.groupOrder:r.renderOrder!==e.renderOrder?r.renderOrder-e.renderOrder:r.z!==e.z?e.z-r.z:r.id-e.id}function h6(){const r=[];let e=0;const t=[],n=[],i=[];function s(){e=0,t.length=0,n.length=0,i.length=0}function o(u,d,q,m,g,p){let f=r[e];return f===void 0?(f={id:u.id,object:u,geometry:d,material:q,groupOrder:m,renderOrder:u.renderOrder,z:g,group:p},r[e]=f):(f.id=u.id,f.object=u,f.geometry=d,f.material=q,f.groupOrder=m,f.renderOrder=u.renderOrder,f.z=g,f.group=p),e++,f}function a(u,d,q,m,g,p){const f=o(u,d,q,m,g,p);q.transmission>0?n.push(f):q.transparent===!0?i.push(f):t.push(f)}function l(u,d,q,m,g,p){const f=o(u,d,q,m,g,p);q.transmission>0?n.unshift(f):q.transparent===!0?i.unshift(f):t.unshift(f)}function c(u,d){t.length>1&&t.sort(u||yq),n.length>1&&n.sort(d||c6),i.length>1&&i.sort(d||c6)}function h(){for(let u=e,d=r.length;u<d;u++){const q=r[u];if(q.id===null)break;q.id=null,q.object=null,q.geometry=null,q.material=null,q.group=null}}return{opaque:t,transmissive:n,transparent:i,init:s,push:a,unshift:l,finish:h,sort:c}}function vq(){let r=new WeakMap;function e(n,i){const s=r.get(n);let o;return s===void 0?(o=new h6,r.set(n,[o])):i>=s.length?(o=new h6,s.push(o)):o=s[i],o}function t(){r=new WeakMap}return{get:e,dispose:t}}function wq(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new L,color:new _e};break;case"SpotLight":t={position:new L,direction:new L,color:new _e,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new L,color:new _e,distance:0,decay:0};break;case"HemisphereLight":t={direction:new L,skyColor:new _e,groundColor:new _e};break;case"RectAreaLight":t={color:new _e,position:new L,halfWidth:new L,halfHeight:new L};break}return r[e.id]=t,t}}}function Mq(){const r={};return{get:function(e){if(r[e.id]!==void 0)return r[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $};break;case"SpotLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $};break;case"PointLight":t={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new $,shadowCameraNear:1,shadowCameraFar:1e3};break}return r[e.id]=t,t}}}let Sq=0;function bq(r,e){return(e.castShadow?2:0)-(r.castShadow?2:0)+(e.map?1:0)-(r.map?1:0)}function Eq(r){const e=new wq,t=Mq(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let c=0;c<9;c++)n.probe.push(new L);const i=new L,s=new Ge,o=new Ge;function a(c){let h=0,u=0,d=0;for(let w=0;w<9;w++)n.probe[w].set(0,0,0);let q=0,m=0,g=0,p=0,f=0,v=0,y=0,_=0,T=0,E=0,S=0;c.sort(bq);for(let w=0,x=c.length;w<x;w++){const C=c[w],O=C.color,U=C.intensity,B=C.distance,P=C.shadow&&C.shadow.map?C.shadow.map.texture:null;if(C.isAmbientLight)h+=O.r*U,u+=O.g*U,d+=O.b*U;else if(C.isLightProbe){for(let K=0;K<9;K++)n.probe[K].addScaledVector(C.sh.coefficients[K],U);S++}else if(C.isDirectionalLight){const K=e.get(C);if(K.color.copy(C.color).multiplyScalar(C.intensity),C.castShadow){const ie=C.shadow,H=t.get(C);H.shadowIntensity=ie.intensity,H.shadowBias=ie.bias,H.shadowNormalBias=ie.normalBias,H.shadowRadius=ie.radius,H.shadowMapSize=ie.mapSize,n.directionalShadow[q]=H,n.directionalShadowMap[q]=P,n.directionalShadowMatrix[q]=C.shadow.matrix,v++}n.directional[q]=K,q++}else if(C.isSpotLight){const K=e.get(C);K.position.setFromMatrixPosition(C.matrixWorld),K.color.copy(O).multiplyScalar(U),K.distance=B,K.coneCos=Math.cos(C.angle),K.penumbraCos=Math.cos(C.angle*(1-C.penumbra)),K.decay=C.decay,n.spot[g]=K;const ie=C.shadow;if(C.map&&(n.spotLightMap[T]=C.map,T++,ie.updateMatrices(C),C.castShadow&&E++),n.spotLightMatrix[g]=ie.matrix,C.castShadow){const H=t.get(C);H.shadowIntensity=ie.intensity,H.shadowBias=ie.bias,H.shadowNormalBias=ie.normalBias,H.shadowRadius=ie.radius,H.shadowMapSize=ie.mapSize,n.spotShadow[g]=H,n.spotShadowMap[g]=P,_++}g++}else if(C.isRectAreaLight){const K=e.get(C);K.color.copy(O).multiplyScalar(U),K.halfWidth.set(C.width*.5,0,0),K.halfHeight.set(0,C.height*.5,0),n.rectArea[p]=K,p++}else if(C.isPointLight){const K=e.get(C);if(K.color.copy(C.color).multiplyScalar(C.intensity),K.distance=C.distance,K.decay=C.decay,C.castShadow){const ie=C.shadow,H=t.get(C);H.shadowIntensity=ie.intensity,H.shadowBias=ie.bias,H.shadowNormalBias=ie.normalBias,H.shadowRadius=ie.radius,H.shadowMapSize=ie.mapSize,H.shadowCameraNear=ie.camera.near,H.shadowCameraFar=ie.camera.far,n.pointShadow[m]=H,n.pointShadowMap[m]=P,n.pointShadowMatrix[m]=C.shadow.matrix,y++}n.point[m]=K,m++}else if(C.isHemisphereLight){const K=e.get(C);K.skyColor.copy(C.color).multiplyScalar(U),K.groundColor.copy(C.groundColor).multiplyScalar(U),n.hemi[f]=K,f++}}p>0&&(r.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=Se.LTC_FLOAT_1,n.rectAreaLTC2=Se.LTC_FLOAT_2):(n.rectAreaLTC1=Se.LTC_HALF_1,n.rectAreaLTC2=Se.LTC_HALF_2)),n.ambient[0]=h,n.ambient[1]=u,n.ambient[2]=d;const I=n.hash;(I.directionalLength!==q||I.pointLength!==m||I.spotLength!==g||I.rectAreaLength!==p||I.hemiLength!==f||I.numDirectionalShadows!==v||I.numPointShadows!==y||I.numSpotShadows!==_||I.numSpotMaps!==T||I.numLightProbes!==S)&&(n.directional.length=q,n.spot.length=g,n.rectArea.length=p,n.point.length=m,n.hemi.length=f,n.directionalShadow.length=v,n.directionalShadowMap.length=v,n.pointShadow.length=y,n.pointShadowMap.length=y,n.spotShadow.length=_,n.spotShadowMap.length=_,n.directionalShadowMatrix.length=v,n.pointShadowMatrix.length=y,n.spotLightMatrix.length=_+T-E,n.spotLightMap.length=T,n.numSpotLightShadowsWithMaps=E,n.numLightProbes=S,I.directionalLength=q,I.pointLength=m,I.spotLength=g,I.rectAreaLength=p,I.hemiLength=f,I.numDirectionalShadows=v,I.numPointShadows=y,I.numSpotShadows=_,I.numSpotMaps=T,I.numLightProbes=S,n.version=Sq++)}function l(c,h){let u=0,d=0,q=0,m=0,g=0;const p=h.matrixWorldInverse;for(let f=0,v=c.length;f<v;f++){const y=c[f];if(y.isDirectionalLight){const _=n.directional[u];_.direction.setFromMatrixPosition(y.matrixWorld),i.setFromMatrixPosition(y.target.matrixWorld),_.direction.sub(i),_.direction.transformDirection(p),u++}else if(y.isSpotLight){const _=n.spot[q];_.position.setFromMatrixPosition(y.matrixWorld),_.position.applyMatrix4(p),_.direction.setFromMatrixPosition(y.matrixWorld),i.setFromMatrixPosition(y.target.matrixWorld),_.direction.sub(i),_.direction.transformDirection(p),q++}else if(y.isRectAreaLight){const _=n.rectArea[m];_.position.setFromMatrixPosition(y.matrixWorld),_.position.applyMatrix4(p),o.identity(),s.copy(y.matrixWorld),s.premultiply(p),o.extractRotation(s),_.halfWidth.set(y.width*.5,0,0),_.halfHeight.set(0,y.height*.5,0),_.halfWidth.applyMatrix4(o),_.halfHeight.applyMatrix4(o),m++}else if(y.isPointLight){const _=n.point[d];_.position.setFromMatrixPosition(y.matrixWorld),_.position.applyMatrix4(p),d++}else if(y.isHemisphereLight){const _=n.hemi[g];_.direction.setFromMatrixPosition(y.matrixWorld),_.direction.transformDirection(p),g++}}}return{setup:a,setupView:l,state:n}}function u6(r){const e=new Eq(r),t=[],n=[];function i(h){c.camera=h,t.length=0,n.length=0}function s(h){t.push(h)}function o(h){n.push(h)}function a(){e.setup(t)}function l(h){e.setupView(t,h)}const c={lightsArray:t,shadowsArray:n,camera:null,lights:e,transmissionRenderTarget:{}};return{init:i,state:c,setupLights:a,setupLightsView:l,pushLight:s,pushShadow:o}}function Tq(r){let e=new WeakMap;function t(i,s=0){const o=e.get(i);let a;return o===void 0?(a=new u6(r),e.set(i,[a])):s>=o.length?(a=new u6(r),o.push(a)):a=o[s],a}function n(){e=new WeakMap}return{get:t,dispose:n}}const Aq=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,Cq=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Rq(r,e,t){let n=new Ys;const i=new $,s=new $,o=new lt,a=new x4({depthPacking:g3}),l=new _4,c={},h=t.maxTextureSize,u={[s1]:en,[en]:s1,[Cn]:Cn},d=new Ln({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new $},radius:{value:4}},vertexShader:Aq,fragmentShader:Cq}),q=d.clone();q.defines.HORIZONTAL_PASS=1;const m=new Ze;m.setAttribute("position",new qt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new St(m,d),p=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=ta;let f=this.type;this.render=function(E,S,I){if(p.enabled===!1||p.autoUpdate===!1&&p.needsUpdate===!1||E.length===0)return;const w=r.getRenderTarget(),x=r.getActiveCubeFace(),C=r.getActiveMipmapLevel(),O=r.state;O.setBlending(r1),O.buffers.color.setClear(1,1,1,1),O.buffers.depth.setTest(!0),O.setScissorTest(!1);const U=f!==Yn&&this.type===Yn,B=f===Yn&&this.type!==Yn;for(let P=0,K=E.length;P<K;P++){const ie=E[P],H=ie.shadow;if(H===void 0){console.warn("THREE.WebGLShadowMap:",ie,"has no shadow.");continue}if(H.autoUpdate===!1&&H.needsUpdate===!1)continue;i.copy(H.mapSize);const fe=H.getFrameExtents();if(i.multiply(fe),s.copy(H.mapSize),(i.x>h||i.y>h)&&(i.x>h&&(s.x=Math.floor(h/fe.x),i.x=s.x*fe.x,H.mapSize.x=s.x),i.y>h&&(s.y=Math.floor(h/fe.y),i.y=s.y*fe.y,H.mapSize.y=s.y)),H.map===null||U===!0||B===!0){const ve=this.type!==Yn?{minFilter:Bt,magFilter:Bt}:{};H.map!==null&&H.map.dispose(),H.map=new Jn(i.x,i.y,ve),H.map.texture.name=ie.name+".shadowMap",H.camera.updateProjectionMatrix()}r.setRenderTarget(H.map),r.clear();const ge=H.getViewportCount();for(let ve=0;ve<ge;ve++){const De=H.getViewport(ve);o.set(s.x*De.x,s.y*De.y,s.x*De.z,s.y*De.w),O.viewport(o),H.updateMatrices(ie,ve),n=H.getFrustum(),_(S,I,H.camera,ie,this.type)}H.isPointLightShadow!==!0&&this.type===Yn&&v(H,I),H.needsUpdate=!1}f=this.type,p.needsUpdate=!1,r.setRenderTarget(w,x,C)};function v(E,S){const I=e.update(g);d.defines.VSM_SAMPLES!==E.blurSamples&&(d.defines.VSM_SAMPLES=E.blurSamples,q.defines.VSM_SAMPLES=E.blurSamples,d.needsUpdate=!0,q.needsUpdate=!0),E.mapPass===null&&(E.mapPass=new Jn(i.x,i.y)),d.uniforms.shadow_pass.value=E.map.texture,d.uniforms.resolution.value=E.mapSize,d.uniforms.radius.value=E.radius,r.setRenderTarget(E.mapPass),r.clear(),r.renderBufferDirect(S,null,I,d,g,null),q.uniforms.shadow_pass.value=E.mapPass.texture,q.uniforms.resolution.value=E.mapSize,q.uniforms.radius.value=E.radius,r.setRenderTarget(E.map),r.clear(),r.renderBufferDirect(S,null,I,q,g,null)}function y(E,S,I,w){let x=null;const C=I.isPointLight===!0?E.customDistanceMaterial:E.customDepthMaterial;if(C!==void 0)x=C;else if(x=I.isPointLight===!0?l:a,r.localClippingEnabled&&S.clipShadows===!0&&Array.isArray(S.clippingPlanes)&&S.clippingPlanes.length!==0||S.displacementMap&&S.displacementScale!==0||S.alphaMap&&S.alphaTest>0||S.map&&S.alphaTest>0){const O=x.uuid,U=S.uuid;let B=c[O];B===void 0&&(B={},c[O]=B);let P=B[U];P===void 0&&(P=x.clone(),B[U]=P,S.addEventListener("dispose",T)),x=P}if(x.visible=S.visible,x.wireframe=S.wireframe,w===Yn?x.side=S.shadowSide!==null?S.shadowSide:S.side:x.side=S.shadowSide!==null?S.shadowSide:u[S.side],x.alphaMap=S.alphaMap,x.alphaTest=S.alphaTest,x.map=S.map,x.clipShadows=S.clipShadows,x.clippingPlanes=S.clippingPlanes,x.clipIntersection=S.clipIntersection,x.displacementMap=S.displacementMap,x.displacementScale=S.displacementScale,x.displacementBias=S.displacementBias,x.wireframeLinewidth=S.wireframeLinewidth,x.linewidth=S.linewidth,I.isPointLight===!0&&x.isMeshDistanceMaterial===!0){const O=r.properties.get(x);O.light=I}return x}function _(E,S,I,w,x){if(E.visible===!1)return;if(E.layers.test(S.layers)&&(E.isMesh||E.isLine||E.isPoints)&&(E.castShadow||E.receiveShadow&&x===Yn)&&(!E.frustumCulled||n.intersectsObject(E))){E.modelViewMatrix.multiplyMatrices(I.matrixWorldInverse,E.matrixWorld);const U=e.update(E),B=E.material;if(Array.isArray(B)){const P=U.groups;for(let K=0,ie=P.length;K<ie;K++){const H=P[K],fe=B[H.materialIndex];if(fe&&fe.visible){const ge=y(E,fe,w,x);E.onBeforeShadow(r,E,S,I,U,ge,H),r.renderBufferDirect(I,null,U,ge,E,H),E.onAfterShadow(r,E,S,I,U,ge,H)}}}else if(B.visible){const P=y(E,B,w,x);E.onBeforeShadow(r,E,S,I,U,P,null),r.renderBufferDirect(I,null,U,P,E,null),E.onAfterShadow(r,E,S,I,U,P,null)}}const O=E.children;for(let U=0,B=O.length;U<B;U++)_(O[U],S,I,w,x)}function T(E){E.target.removeEventListener("dispose",T);for(const I in c){const w=c[I],x=E.target.uuid;x in w&&(w[x].dispose(),delete w[x])}}}const Iq={[Er]:Tr,[Ar]:Ir,[Cr]:zr,[W1]:Rr,[Tr]:Er,[Ir]:Ar,[zr]:Cr,[Rr]:W1};function zq(r,e){function t(){let G=!1;const be=new lt;let ce=null;const me=new lt(0,0,0,0);return{setMask:function(Ce){ce!==Ce&&!G&&(r.colorMask(Ce,Ce,Ce,Ce),ce=Ce)},setLocked:function(Ce){G=Ce},setClear:function(Ce,Ae,et,Et,Qt){Qt===!0&&(Ce*=Et,Ae*=Et,et*=Et),be.set(Ce,Ae,et,Et),me.equals(be)===!1&&(r.clearColor(Ce,Ae,et,Et),me.copy(be))},reset:function(){G=!1,ce=null,me.set(-1,0,0,0)}}}function n(){let G=!1,be=!1,ce=null,me=null,Ce=null;return{setReversed:function(Ae){if(be!==Ae){const et=e.get("EXT_clip_control");be?et.clipControlEXT(et.LOWER_LEFT_EXT,et.ZERO_TO_ONE_EXT):et.clipControlEXT(et.LOWER_LEFT_EXT,et.NEGATIVE_ONE_TO_ONE_EXT);const Et=Ce;Ce=null,this.setClear(Et)}be=Ae},getReversed:function(){return be},setTest:function(Ae){Ae?A(r.DEPTH_TEST):Q(r.DEPTH_TEST)},setMask:function(Ae){ce!==Ae&&!G&&(r.depthMask(Ae),ce=Ae)},setFunc:function(Ae){if(be&&(Ae=Iq[Ae]),me!==Ae){switch(Ae){case Er:r.depthFunc(r.NEVER);break;case Tr:r.depthFunc(r.ALWAYS);break;case Ar:r.depthFunc(r.LESS);break;case W1:r.depthFunc(r.LEQUAL);break;case Cr:r.depthFunc(r.EQUAL);break;case Rr:r.depthFunc(r.GEQUAL);break;case Ir:r.depthFunc(r.GREATER);break;case zr:r.depthFunc(r.NOTEQUAL);break;default:r.depthFunc(r.LEQUAL)}me=Ae}},setLocked:function(Ae){G=Ae},setClear:function(Ae){Ce!==Ae&&(be&&(Ae=1-Ae),r.clearDepth(Ae),Ce=Ae)},reset:function(){G=!1,ce=null,me=null,Ce=null,be=!1}}}function i(){let G=!1,be=null,ce=null,me=null,Ce=null,Ae=null,et=null,Et=null,Qt=null;return{setTest:function(ft){G||(ft?A(r.STENCIL_TEST):Q(r.STENCIL_TEST))},setMask:function(ft){be!==ft&&!G&&(r.stencilMask(ft),be=ft)},setFunc:function(ft,Gn,w1){(ce!==ft||me!==Gn||Ce!==w1)&&(r.stencilFunc(ft,Gn,w1),ce=ft,me=Gn,Ce=w1)},setOp:function(ft,Gn,w1){(Ae!==ft||et!==Gn||Et!==w1)&&(r.stencilOp(ft,Gn,w1),Ae=ft,et=Gn,Et=w1)},setLocked:function(ft){G=ft},setClear:function(ft){Qt!==ft&&(r.clearStencil(ft),Qt=ft)},reset:function(){G=!1,be=null,ce=null,me=null,Ce=null,Ae=null,et=null,Et=null,Qt=null}}}const s=new t,o=new n,a=new i,l=new WeakMap,c=new WeakMap;let h={},u={},d=new WeakMap,q=[],m=null,g=!1,p=null,f=null,v=null,y=null,_=null,T=null,E=null,S=new _e(0,0,0),I=0,w=!1,x=null,C=null,O=null,U=null,B=null;const P=r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let K=!1,ie=0;const H=r.getParameter(r.VERSION);H.indexOf("WebGL")!==-1?(ie=parseFloat(/^WebGL (\d)/.exec(H)[1]),K=ie>=1):H.indexOf("OpenGL ES")!==-1&&(ie=parseFloat(/^OpenGL ES (\d)/.exec(H)[1]),K=ie>=2);let fe=null,ge={};const ve=r.getParameter(r.SCISSOR_BOX),De=r.getParameter(r.VIEWPORT),ke=new lt().fromArray(ve),F=new lt().fromArray(De);function D(G,be,ce,me){const Ce=new Uint8Array(4),Ae=r.createTexture();r.bindTexture(G,Ae),r.texParameteri(G,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(G,r.TEXTURE_MAG_FILTER,r.NEAREST);for(let et=0;et<ce;et++)G===r.TEXTURE_3D||G===r.TEXTURE_2D_ARRAY?r.texImage3D(be,0,r.RGBA,1,1,me,0,r.RGBA,r.UNSIGNED_BYTE,Ce):r.texImage2D(be+et,0,r.RGBA,1,1,0,r.RGBA,r.UNSIGNED_BYTE,Ce);return Ae}const N={};N[r.TEXTURE_2D]=D(r.TEXTURE_2D,r.TEXTURE_2D,1),N[r.TEXTURE_CUBE_MAP]=D(r.TEXTURE_CUBE_MAP,r.TEXTURE_CUBE_MAP_POSITIVE_X,6),N[r.TEXTURE_2D_ARRAY]=D(r.TEXTURE_2D_ARRAY,r.TEXTURE_2D_ARRAY,1,1),N[r.TEXTURE_3D]=D(r.TEXTURE_3D,r.TEXTURE_3D,1,1),s.setClear(0,0,0,1),o.setClear(1),a.setClear(0),A(r.DEPTH_TEST),o.setFunc(W1),ee(!1),ue(ea),A(r.CULL_FACE),M(r1);function A(G){h[G]!==!0&&(r.enable(G),h[G]=!0)}function Q(G){h[G]!==!1&&(r.disable(G),h[G]=!1)}function he(G,be){return u[G]!==be?(r.bindFramebuffer(G,be),u[G]=be,G===r.DRAW_FRAMEBUFFER&&(u[r.FRAMEBUFFER]=be),G===r.FRAMEBUFFER&&(u[r.DRAW_FRAMEBUFFER]=be),!0):!1}function j(G,be){let ce=q,me=!1;if(G){ce=d.get(be),ce===void 0&&(ce=[],d.set(be,ce));const Ce=G.textures;if(ce.length!==Ce.length||ce[0]!==r.COLOR_ATTACHMENT0){for(let Ae=0,et=Ce.length;Ae<et;Ae++)ce[Ae]=r.COLOR_ATTACHMENT0+Ae;ce.length=Ce.length,me=!0}}else ce[0]!==r.BACK&&(ce[0]=r.BACK,me=!0);me&&r.drawBuffers(ce)}function pe(G){return m!==G?(r.useProgram(G),m=G,!0):!1}const Z={[S1]:r.FUNC_ADD,[O0]:r.FUNC_SUBTRACT,[B0]:r.FUNC_REVERSE_SUBTRACT};Z[V0]=r.MIN,Z[H0]=r.MAX;const te={[G0]:r.ZERO,[W0]:r.ONE,[X0]:r.SRC_COLOR,[Sr]:r.SRC_ALPHA,[K0]:r.SRC_ALPHA_SATURATE,[j0]:r.DST_COLOR,[$0]:r.DST_ALPHA,[Y0]:r.ONE_MINUS_SRC_COLOR,[br]:r.ONE_MINUS_SRC_ALPHA,[J0]:r.ONE_MINUS_DST_COLOR,[Z0]:r.ONE_MINUS_DST_ALPHA,[Q0]:r.CONSTANT_COLOR,[e3]:r.ONE_MINUS_CONSTANT_COLOR,[t3]:r.CONSTANT_ALPHA,[n3]:r.ONE_MINUS_CONSTANT_ALPHA};function M(G,be,ce,me,Ce,Ae,et,Et,Qt,ft){if(G===r1){g===!0&&(Q(r.BLEND),g=!1);return}if(g===!1&&(A(r.BLEND),g=!0),G!==U0){if(G!==p||ft!==w){if((f!==S1||_!==S1)&&(r.blendEquation(r.FUNC_ADD),f=S1,_=S1),ft)switch(G){case G1:r.blendFuncSeparate(r.ONE,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case na:r.blendFunc(r.ONE,r.ONE);break;case ia:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case sa:r.blendFuncSeparate(r.ZERO,r.SRC_COLOR,r.ZERO,r.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",G);break}else switch(G){case G1:r.blendFuncSeparate(r.SRC_ALPHA,r.ONE_MINUS_SRC_ALPHA,r.ONE,r.ONE_MINUS_SRC_ALPHA);break;case na:r.blendFunc(r.SRC_ALPHA,r.ONE);break;case ia:r.blendFuncSeparate(r.ZERO,r.ONE_MINUS_SRC_COLOR,r.ZERO,r.ONE);break;case sa:r.blendFunc(r.ZERO,r.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",G);break}v=null,y=null,T=null,E=null,S.set(0,0,0),I=0,p=G,w=ft}return}Ce=Ce||be,Ae=Ae||ce,et=et||me,(be!==f||Ce!==_)&&(r.blendEquationSeparate(Z[be],Z[Ce]),f=be,_=Ce),(ce!==v||me!==y||Ae!==T||et!==E)&&(r.blendFuncSeparate(te[ce],te[me],te[Ae],te[et]),v=ce,y=me,T=Ae,E=et),(Et.equals(S)===!1||Qt!==I)&&(r.blendColor(Et.r,Et.g,Et.b,Qt),S.copy(Et),I=Qt),p=G,w=!1}function re(G,be){G.side===Cn?Q(r.CULL_FACE):A(r.CULL_FACE);let ce=G.side===en;be&&(ce=!ce),ee(ce),G.blending===G1&&G.transparent===!1?M(r1):M(G.blending,G.blendEquation,G.blendSrc,G.blendDst,G.blendEquationAlpha,G.blendSrcAlpha,G.blendDstAlpha,G.blendColor,G.blendAlpha,G.premultipliedAlpha),o.setFunc(G.depthFunc),o.setTest(G.depthTest),o.setMask(G.depthWrite),s.setMask(G.colorWrite);const me=G.stencilWrite;a.setTest(me),me&&(a.setMask(G.stencilWriteMask),a.setFunc(G.stencilFunc,G.stencilRef,G.stencilFuncMask),a.setOp(G.stencilFail,G.stencilZFail,G.stencilZPass)),k(G.polygonOffset,G.polygonOffsetFactor,G.polygonOffsetUnits),G.alphaToCoverage===!0?A(r.SAMPLE_ALPHA_TO_COVERAGE):Q(r.SAMPLE_ALPHA_TO_COVERAGE)}function ee(G){x!==G&&(G?r.frontFace(r.CW):r.frontFace(r.CCW),x=G)}function ue(G){G!==D0?(A(r.CULL_FACE),G!==C&&(G===ea?r.cullFace(r.BACK):G===k0?r.cullFace(r.FRONT):r.cullFace(r.FRONT_AND_BACK))):Q(r.CULL_FACE),C=G}function V(G){G!==O&&(K&&r.lineWidth(G),O=G)}function k(G,be,ce){G?(A(r.POLYGON_OFFSET_FILL),(U!==be||B!==ce)&&(r.polygonOffset(be,ce),U=be,B=ce)):Q(r.POLYGON_OFFSET_FILL)}function ae(G){G?A(r.SCISSOR_TEST):Q(r.SCISSOR_TEST)}function z(G){G===void 0&&(G=r.TEXTURE0+P-1),fe!==G&&(r.activeTexture(G),fe=G)}function b(G,be,ce){ce===void 0&&(fe===null?ce=r.TEXTURE0+P-1:ce=fe);let me=ge[ce];me===void 0&&(me={type:void 0,texture:void 0},ge[ce]=me),(me.type!==G||me.texture!==be)&&(fe!==ce&&(r.activeTexture(ce),fe=ce),r.bindTexture(G,be||N[G]),me.type=G,me.texture=be)}function J(){const G=ge[fe];G!==void 0&&G.type!==void 0&&(r.bindTexture(G.type,null),G.type=void 0,G.texture=void 0)}function oe(){try{r.compressedTexImage2D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function qe(){try{r.compressedTexImage3D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function de(){try{r.texSubImage2D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Pe(){try{r.texSubImage3D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Me(){try{r.compressedTexSubImage2D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Te(){try{r.compressedTexSubImage3D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Qe(){try{r.texStorage2D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function xe(){try{r.texStorage3D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Re(){try{r.texImage2D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function Ue(){try{r.texImage3D.apply(r,arguments)}catch(G){console.error("THREE.WebGLState:",G)}}function He(G){ke.equals(G)===!1&&(r.scissor(G.x,G.y,G.z,G.w),ke.copy(G))}function Ne(G){F.equals(G)===!1&&(r.viewport(G.x,G.y,G.z,G.w),F.copy(G))}function st(G,be){let ce=c.get(be);ce===void 0&&(ce=new WeakMap,c.set(be,ce));let me=ce.get(G);me===void 0&&(me=r.getUniformBlockIndex(be,G.name),ce.set(G,me))}function tt(G,be){const me=c.get(be).get(G);l.get(be)!==me&&(r.uniformBlockBinding(be,me,G.__bindingPointIndex),l.set(be,me))}function xt(){r.disable(r.BLEND),r.disable(r.CULL_FACE),r.disable(r.DEPTH_TEST),r.disable(r.POLYGON_OFFSET_FILL),r.disable(r.SCISSOR_TEST),r.disable(r.STENCIL_TEST),r.disable(r.SAMPLE_ALPHA_TO_COVERAGE),r.blendEquation(r.FUNC_ADD),r.blendFunc(r.ONE,r.ZERO),r.blendFuncSeparate(r.ONE,r.ZERO,r.ONE,r.ZERO),r.blendColor(0,0,0,0),r.colorMask(!0,!0,!0,!0),r.clearColor(0,0,0,0),r.depthMask(!0),r.depthFunc(r.LESS),o.setReversed(!1),r.clearDepth(1),r.stencilMask(4294967295),r.stencilFunc(r.ALWAYS,0,4294967295),r.stencilOp(r.KEEP,r.KEEP,r.KEEP),r.clearStencil(0),r.cullFace(r.BACK),r.frontFace(r.CCW),r.polygonOffset(0,0),r.activeTexture(r.TEXTURE0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),r.bindFramebuffer(r.READ_FRAMEBUFFER,null),r.useProgram(null),r.lineWidth(1),r.scissor(0,0,r.canvas.width,r.canvas.height),r.viewport(0,0,r.canvas.width,r.canvas.height),h={},fe=null,ge={},u={},d=new WeakMap,q=[],m=null,g=!1,p=null,f=null,v=null,y=null,_=null,T=null,E=null,S=new _e(0,0,0),I=0,w=!1,x=null,C=null,O=null,U=null,B=null,ke.set(0,0,r.canvas.width,r.canvas.height),F.set(0,0,r.canvas.width,r.canvas.height),s.reset(),o.reset(),a.reset()}return{buffers:{color:s,depth:o,stencil:a},enable:A,disable:Q,bindFramebuffer:he,drawBuffers:j,useProgram:pe,setBlending:M,setMaterial:re,setFlipSided:ee,setCullFace:ue,setLineWidth:V,setPolygonOffset:k,setScissorTest:ae,activeTexture:z,bindTexture:b,unbindTexture:J,compressedTexImage2D:oe,compressedTexImage3D:qe,texImage2D:Re,texImage3D:Ue,updateUBOMapping:st,uniformBlockBinding:tt,texStorage2D:Qe,texStorage3D:xe,texSubImage2D:de,texSubImage3D:Pe,compressedTexSubImage2D:Me,compressedTexSubImage3D:Te,scissor:He,viewport:Ne,reset:xt}}function Nq(r,e,t,n,i,s,o){const a=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),c=new $,h=new WeakMap;let u;const d=new WeakMap;let q=!1;try{q=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function m(z,b){return q?new OffscreenCanvas(z,b):Ns("canvas")}function g(z,b,J){let oe=1;const qe=ae(z);if((qe.width>J||qe.height>J)&&(oe=J/Math.max(qe.width,qe.height)),oe<1)if(typeof HTMLImageElement<"u"&&z instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&z instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&z instanceof ImageBitmap||typeof VideoFrame<"u"&&z instanceof VideoFrame){const de=Math.floor(oe*qe.width),Pe=Math.floor(oe*qe.height);u===void 0&&(u=m(de,Pe));const Me=b?m(de,Pe):u;return Me.width=de,Me.height=Pe,Me.getContext("2d").drawImage(z,0,0,de,Pe),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+qe.width+"x"+qe.height+") to ("+de+"x"+Pe+")."),Me}else return"data"in z&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+qe.width+"x"+qe.height+")."),z;return z}function p(z){return z.generateMipmaps}function f(z){r.generateMipmap(z)}function v(z){return z.isWebGLCubeRenderTarget?r.TEXTURE_CUBE_MAP:z.isWebGL3DRenderTarget?r.TEXTURE_3D:z.isWebGLArrayRenderTarget||z.isCompressedArrayTexture?r.TEXTURE_2D_ARRAY:r.TEXTURE_2D}function y(z,b,J,oe,qe=!1){if(z!==null){if(r[z]!==void 0)return r[z];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+z+"'")}let de=b;if(b===r.RED&&(J===r.FLOAT&&(de=r.R32F),J===r.HALF_FLOAT&&(de=r.R16F),J===r.UNSIGNED_BYTE&&(de=r.R8)),b===r.RED_INTEGER&&(J===r.UNSIGNED_BYTE&&(de=r.R8UI),J===r.UNSIGNED_SHORT&&(de=r.R16UI),J===r.UNSIGNED_INT&&(de=r.R32UI),J===r.BYTE&&(de=r.R8I),J===r.SHORT&&(de=r.R16I),J===r.INT&&(de=r.R32I)),b===r.RG&&(J===r.FLOAT&&(de=r.RG32F),J===r.HALF_FLOAT&&(de=r.RG16F),J===r.UNSIGNED_BYTE&&(de=r.RG8)),b===r.RG_INTEGER&&(J===r.UNSIGNED_BYTE&&(de=r.RG8UI),J===r.UNSIGNED_SHORT&&(de=r.RG16UI),J===r.UNSIGNED_INT&&(de=r.RG32UI),J===r.BYTE&&(de=r.RG8I),J===r.SHORT&&(de=r.RG16I),J===r.INT&&(de=r.RG32I)),b===r.RGB_INTEGER&&(J===r.UNSIGNED_BYTE&&(de=r.RGB8UI),J===r.UNSIGNED_SHORT&&(de=r.RGB16UI),J===r.UNSIGNED_INT&&(de=r.RGB32UI),J===r.BYTE&&(de=r.RGB8I),J===r.SHORT&&(de=r.RGB16I),J===r.INT&&(de=r.RGB32I)),b===r.RGBA_INTEGER&&(J===r.UNSIGNED_BYTE&&(de=r.RGBA8UI),J===r.UNSIGNED_SHORT&&(de=r.RGBA16UI),J===r.UNSIGNED_INT&&(de=r.RGBA32UI),J===r.BYTE&&(de=r.RGBA8I),J===r.SHORT&&(de=r.RGBA16I),J===r.INT&&(de=r.RGBA32I)),b===r.RGB&&J===r.UNSIGNED_INT_5_9_9_9_REV&&(de=r.RGB9_E5),b===r.RGBA){const Pe=qe?Cs:nt.getTransfer(oe);J===r.FLOAT&&(de=r.RGBA32F),J===r.HALF_FLOAT&&(de=r.RGBA16F),J===r.UNSIGNED_BYTE&&(de=Pe===dt?r.SRGB8_ALPHA8:r.RGBA8),J===r.UNSIGNED_SHORT_4_4_4_4&&(de=r.RGBA4),J===r.UNSIGNED_SHORT_5_5_5_1&&(de=r.RGB5_A1)}return(de===r.R16F||de===r.R32F||de===r.RG16F||de===r.RG32F||de===r.RGBA16F||de===r.RGBA32F)&&e.get("EXT_color_buffer_float"),de}function _(z,b){let J;return z?b===null||b===l1||b===X1?J=r.DEPTH24_STENCIL8:b===hn?J=r.DEPTH32F_STENCIL8:b===Ri&&(J=r.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):b===null||b===l1||b===X1?J=r.DEPTH_COMPONENT24:b===hn?J=r.DEPTH_COMPONENT32F:b===Ri&&(J=r.DEPTH_COMPONENT16),J}function T(z,b){return p(z)===!0||z.isFramebufferTexture&&z.minFilter!==Bt&&z.minFilter!==Nt?Math.log2(Math.max(b.width,b.height))+1:z.mipmaps!==void 0&&z.mipmaps.length>0?z.mipmaps.length:z.isCompressedTexture&&Array.isArray(z.image)?b.mipmaps.length:1}function E(z){const b=z.target;b.removeEventListener("dispose",E),I(b),b.isVideoTexture&&h.delete(b)}function S(z){const b=z.target;b.removeEventListener("dispose",S),x(b)}function I(z){const b=n.get(z);if(b.__webglInit===void 0)return;const J=z.source,oe=d.get(J);if(oe){const qe=oe[b.__cacheKey];qe.usedTimes--,qe.usedTimes===0&&w(z),Object.keys(oe).length===0&&d.delete(J)}n.remove(z)}function w(z){const b=n.get(z);r.deleteTexture(b.__webglTexture);const J=z.source,oe=d.get(J);delete oe[b.__cacheKey],o.memory.textures--}function x(z){const b=n.get(z);if(z.depthTexture&&(z.depthTexture.dispose(),n.remove(z.depthTexture)),z.isWebGLCubeRenderTarget)for(let oe=0;oe<6;oe++){if(Array.isArray(b.__webglFramebuffer[oe]))for(let qe=0;qe<b.__webglFramebuffer[oe].length;qe++)r.deleteFramebuffer(b.__webglFramebuffer[oe][qe]);else r.deleteFramebuffer(b.__webglFramebuffer[oe]);b.__webglDepthbuffer&&r.deleteRenderbuffer(b.__webglDepthbuffer[oe])}else{if(Array.isArray(b.__webglFramebuffer))for(let oe=0;oe<b.__webglFramebuffer.length;oe++)r.deleteFramebuffer(b.__webglFramebuffer[oe]);else r.deleteFramebuffer(b.__webglFramebuffer);if(b.__webglDepthbuffer&&r.deleteRenderbuffer(b.__webglDepthbuffer),b.__webglMultisampledFramebuffer&&r.deleteFramebuffer(b.__webglMultisampledFramebuffer),b.__webglColorRenderbuffer)for(let oe=0;oe<b.__webglColorRenderbuffer.length;oe++)b.__webglColorRenderbuffer[oe]&&r.deleteRenderbuffer(b.__webglColorRenderbuffer[oe]);b.__webglDepthRenderbuffer&&r.deleteRenderbuffer(b.__webglDepthRenderbuffer)}const J=z.textures;for(let oe=0,qe=J.length;oe<qe;oe++){const de=n.get(J[oe]);de.__webglTexture&&(r.deleteTexture(de.__webglTexture),o.memory.textures--),n.remove(J[oe])}n.remove(z)}let C=0;function O(){C=0}function U(){const z=C;return z>=i.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+z+" texture units while this GPU supports only "+i.maxTextures),C+=1,z}function B(z){const b=[];return b.push(z.wrapS),b.push(z.wrapT),b.push(z.wrapR||0),b.push(z.magFilter),b.push(z.minFilter),b.push(z.anisotropy),b.push(z.internalFormat),b.push(z.format),b.push(z.type),b.push(z.generateMipmaps),b.push(z.premultiplyAlpha),b.push(z.flipY),b.push(z.unpackAlignment),b.push(z.colorSpace),b.join()}function P(z,b){const J=n.get(z);if(z.isVideoTexture&&V(z),z.isRenderTargetTexture===!1&&z.version>0&&J.__version!==z.version){const oe=z.image;if(oe===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(oe.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{F(J,z,b);return}}t.bindTexture(r.TEXTURE_2D,J.__webglTexture,r.TEXTURE0+b)}function K(z,b){const J=n.get(z);if(z.version>0&&J.__version!==z.version){F(J,z,b);return}t.bindTexture(r.TEXTURE_2D_ARRAY,J.__webglTexture,r.TEXTURE0+b)}function ie(z,b){const J=n.get(z);if(z.version>0&&J.__version!==z.version){F(J,z,b);return}t.bindTexture(r.TEXTURE_3D,J.__webglTexture,r.TEXTURE0+b)}function H(z,b){const J=n.get(z);if(z.version>0&&J.__version!==z.version){D(J,z,b);return}t.bindTexture(r.TEXTURE_CUBE_MAP,J.__webglTexture,r.TEXTURE0+b)}const fe={[xs]:r.REPEAT,[Sn]:r.CLAMP_TO_EDGE,[_s]:r.MIRRORED_REPEAT},ge={[Bt]:r.NEAREST,[oa]:r.NEAREST_MIPMAP_NEAREST,[Ci]:r.NEAREST_MIPMAP_LINEAR,[Nt]:r.LINEAR,[ys]:r.LINEAR_MIPMAP_NEAREST,[$n]:r.LINEAR_MIPMAP_LINEAR},ve={[_3]:r.NEVER,[b3]:r.ALWAYS,[y3]:r.LESS,[xa]:r.LEQUAL,[v3]:r.EQUAL,[S3]:r.GEQUAL,[w3]:r.GREATER,[M3]:r.NOTEQUAL};function De(z,b){if(b.type===hn&&e.has("OES_texture_float_linear")===!1&&(b.magFilter===Nt||b.magFilter===ys||b.magFilter===Ci||b.magFilter===$n||b.minFilter===Nt||b.minFilter===ys||b.minFilter===Ci||b.minFilter===$n)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),r.texParameteri(z,r.TEXTURE_WRAP_S,fe[b.wrapS]),r.texParameteri(z,r.TEXTURE_WRAP_T,fe[b.wrapT]),(z===r.TEXTURE_3D||z===r.TEXTURE_2D_ARRAY)&&r.texParameteri(z,r.TEXTURE_WRAP_R,fe[b.wrapR]),r.texParameteri(z,r.TEXTURE_MAG_FILTER,ge[b.magFilter]),r.texParameteri(z,r.TEXTURE_MIN_FILTER,ge[b.minFilter]),b.compareFunction&&(r.texParameteri(z,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(z,r.TEXTURE_COMPARE_FUNC,ve[b.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){if(b.magFilter===Bt||b.minFilter!==Ci&&b.minFilter!==$n||b.type===hn&&e.has("OES_texture_float_linear")===!1)return;if(b.anisotropy>1||n.get(b).__currentAnisotropy){const J=e.get("EXT_texture_filter_anisotropic");r.texParameterf(z,J.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,i.getMaxAnisotropy())),n.get(b).__currentAnisotropy=b.anisotropy}}}function ke(z,b){let J=!1;z.__webglInit===void 0&&(z.__webglInit=!0,b.addEventListener("dispose",E));const oe=b.source;let qe=d.get(oe);qe===void 0&&(qe={},d.set(oe,qe));const de=B(b);if(de!==z.__cacheKey){qe[de]===void 0&&(qe[de]={texture:r.createTexture(),usedTimes:0},o.memory.textures++,J=!0),qe[de].usedTimes++;const Pe=qe[z.__cacheKey];Pe!==void 0&&(qe[z.__cacheKey].usedTimes--,Pe.usedTimes===0&&w(b)),z.__cacheKey=de,z.__webglTexture=qe[de].texture}return J}function F(z,b,J){let oe=r.TEXTURE_2D;(b.isDataArrayTexture||b.isCompressedArrayTexture)&&(oe=r.TEXTURE_2D_ARRAY),b.isData3DTexture&&(oe=r.TEXTURE_3D);const qe=ke(z,b),de=b.source;t.bindTexture(oe,z.__webglTexture,r.TEXTURE0+J);const Pe=n.get(de);if(de.version!==Pe.__version||qe===!0){t.activeTexture(r.TEXTURE0+J);const Me=nt.getPrimaries(nt.workingColorSpace),Te=b.colorSpace===c1?null:nt.getPrimaries(b.colorSpace),Qe=b.colorSpace===c1||Me===Te?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,b.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,b.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Qe);let xe=g(b.image,!1,i.maxTextureSize);xe=k(b,xe);const Re=s.convert(b.format,b.colorSpace),Ue=s.convert(b.type);let He=y(b.internalFormat,Re,Ue,b.colorSpace,b.isVideoTexture);De(oe,b);let Ne;const st=b.mipmaps,tt=b.isVideoTexture!==!0,xt=Pe.__version===void 0||qe===!0,G=de.dataReady,be=T(b,xe);if(b.isDepthTexture)He=_(b.format===$1,b.type),xt&&(tt?t.texStorage2D(r.TEXTURE_2D,1,He,xe.width,xe.height):t.texImage2D(r.TEXTURE_2D,0,He,xe.width,xe.height,0,Re,Ue,null));else if(b.isDataTexture)if(st.length>0){tt&&xt&&t.texStorage2D(r.TEXTURE_2D,be,He,st[0].width,st[0].height);for(let ce=0,me=st.length;ce<me;ce++)Ne=st[ce],tt?G&&t.texSubImage2D(r.TEXTURE_2D,ce,0,0,Ne.width,Ne.height,Re,Ue,Ne.data):t.texImage2D(r.TEXTURE_2D,ce,He,Ne.width,Ne.height,0,Re,Ue,Ne.data);b.generateMipmaps=!1}else tt?(xt&&t.texStorage2D(r.TEXTURE_2D,be,He,xe.width,xe.height),G&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,xe.width,xe.height,Re,Ue,xe.data)):t.texImage2D(r.TEXTURE_2D,0,He,xe.width,xe.height,0,Re,Ue,xe.data);else if(b.isCompressedTexture)if(b.isCompressedArrayTexture){tt&&xt&&t.texStorage3D(r.TEXTURE_2D_ARRAY,be,He,st[0].width,st[0].height,xe.depth);for(let ce=0,me=st.length;ce<me;ce++)if(Ne=st[ce],b.format!==tn)if(Re!==null)if(tt){if(G)if(b.layerUpdates.size>0){const Ce=U4(Ne.width,Ne.height,b.format,b.type);for(const Ae of b.layerUpdates){const et=Ne.data.subarray(Ae*Ce/Ne.data.BYTES_PER_ELEMENT,(Ae+1)*Ce/Ne.data.BYTES_PER_ELEMENT);t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,ce,0,0,Ae,Ne.width,Ne.height,1,Re,et)}b.clearLayerUpdates()}else t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,ce,0,0,0,Ne.width,Ne.height,xe.depth,Re,Ne.data)}else t.compressedTexImage3D(r.TEXTURE_2D_ARRAY,ce,He,Ne.width,Ne.height,xe.depth,0,Ne.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else tt?G&&t.texSubImage3D(r.TEXTURE_2D_ARRAY,ce,0,0,0,Ne.width,Ne.height,xe.depth,Re,Ue,Ne.data):t.texImage3D(r.TEXTURE_2D_ARRAY,ce,He,Ne.width,Ne.height,xe.depth,0,Re,Ue,Ne.data)}else{tt&&xt&&t.texStorage2D(r.TEXTURE_2D,be,He,st[0].width,st[0].height);for(let ce=0,me=st.length;ce<me;ce++)Ne=st[ce],b.format!==tn?Re!==null?tt?G&&t.compressedTexSubImage2D(r.TEXTURE_2D,ce,0,0,Ne.width,Ne.height,Re,Ne.data):t.compressedTexImage2D(r.TEXTURE_2D,ce,He,Ne.width,Ne.height,0,Ne.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):tt?G&&t.texSubImage2D(r.TEXTURE_2D,ce,0,0,Ne.width,Ne.height,Re,Ue,Ne.data):t.texImage2D(r.TEXTURE_2D,ce,He,Ne.width,Ne.height,0,Re,Ue,Ne.data)}else if(b.isDataArrayTexture)if(tt){if(xt&&t.texStorage3D(r.TEXTURE_2D_ARRAY,be,He,xe.width,xe.height,xe.depth),G)if(b.layerUpdates.size>0){const ce=U4(xe.width,xe.height,b.format,b.type);for(const me of b.layerUpdates){const Ce=xe.data.subarray(me*ce/xe.data.BYTES_PER_ELEMENT,(me+1)*ce/xe.data.BYTES_PER_ELEMENT);t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,me,xe.width,xe.height,1,Re,Ue,Ce)}b.clearLayerUpdates()}else t.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,xe.width,xe.height,xe.depth,Re,Ue,xe.data)}else t.texImage3D(r.TEXTURE_2D_ARRAY,0,He,xe.width,xe.height,xe.depth,0,Re,Ue,xe.data);else if(b.isData3DTexture)tt?(xt&&t.texStorage3D(r.TEXTURE_3D,be,He,xe.width,xe.height,xe.depth),G&&t.texSubImage3D(r.TEXTURE_3D,0,0,0,0,xe.width,xe.height,xe.depth,Re,Ue,xe.data)):t.texImage3D(r.TEXTURE_3D,0,He,xe.width,xe.height,xe.depth,0,Re,Ue,xe.data);else if(b.isFramebufferTexture){if(xt)if(tt)t.texStorage2D(r.TEXTURE_2D,be,He,xe.width,xe.height);else{let ce=xe.width,me=xe.height;for(let Ce=0;Ce<be;Ce++)t.texImage2D(r.TEXTURE_2D,Ce,He,ce,me,0,Re,Ue,null),ce>>=1,me>>=1}}else if(st.length>0){if(tt&&xt){const ce=ae(st[0]);t.texStorage2D(r.TEXTURE_2D,be,He,ce.width,ce.height)}for(let ce=0,me=st.length;ce<me;ce++)Ne=st[ce],tt?G&&t.texSubImage2D(r.TEXTURE_2D,ce,0,0,Re,Ue,Ne):t.texImage2D(r.TEXTURE_2D,ce,He,Re,Ue,Ne);b.generateMipmaps=!1}else if(tt){if(xt){const ce=ae(xe);t.texStorage2D(r.TEXTURE_2D,be,He,ce.width,ce.height)}G&&t.texSubImage2D(r.TEXTURE_2D,0,0,0,Re,Ue,xe)}else t.texImage2D(r.TEXTURE_2D,0,He,Re,Ue,xe);p(b)&&f(oe),Pe.__version=de.version,b.onUpdate&&b.onUpdate(b)}z.__version=b.version}function D(z,b,J){if(b.image.length!==6)return;const oe=ke(z,b),qe=b.source;t.bindTexture(r.TEXTURE_CUBE_MAP,z.__webglTexture,r.TEXTURE0+J);const de=n.get(qe);if(qe.version!==de.__version||oe===!0){t.activeTexture(r.TEXTURE0+J);const Pe=nt.getPrimaries(nt.workingColorSpace),Me=b.colorSpace===c1?null:nt.getPrimaries(b.colorSpace),Te=b.colorSpace===c1||Pe===Me?r.NONE:r.BROWSER_DEFAULT_WEBGL;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,b.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,b.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,Te);const Qe=b.isCompressedTexture||b.image[0].isCompressedTexture,xe=b.image[0]&&b.image[0].isDataTexture,Re=[];for(let me=0;me<6;me++)!Qe&&!xe?Re[me]=g(b.image[me],!0,i.maxCubemapSize):Re[me]=xe?b.image[me].image:b.image[me],Re[me]=k(b,Re[me]);const Ue=Re[0],He=s.convert(b.format,b.colorSpace),Ne=s.convert(b.type),st=y(b.internalFormat,He,Ne,b.colorSpace),tt=b.isVideoTexture!==!0,xt=de.__version===void 0||oe===!0,G=qe.dataReady;let be=T(b,Ue);De(r.TEXTURE_CUBE_MAP,b);let ce;if(Qe){tt&&xt&&t.texStorage2D(r.TEXTURE_CUBE_MAP,be,st,Ue.width,Ue.height);for(let me=0;me<6;me++){ce=Re[me].mipmaps;for(let Ce=0;Ce<ce.length;Ce++){const Ae=ce[Ce];b.format!==tn?He!==null?tt?G&&t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce,0,0,Ae.width,Ae.height,He,Ae.data):t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce,st,Ae.width,Ae.height,0,Ae.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):tt?G&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce,0,0,Ae.width,Ae.height,He,Ne,Ae.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce,st,Ae.width,Ae.height,0,He,Ne,Ae.data)}}}else{if(ce=b.mipmaps,tt&&xt){ce.length>0&&be++;const me=ae(Re[0]);t.texStorage2D(r.TEXTURE_CUBE_MAP,be,st,me.width,me.height)}for(let me=0;me<6;me++)if(xe){tt?G&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,0,0,0,Re[me].width,Re[me].height,He,Ne,Re[me].data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,0,st,Re[me].width,Re[me].height,0,He,Ne,Re[me].data);for(let Ce=0;Ce<ce.length;Ce++){const et=ce[Ce].image[me].image;tt?G&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce+1,0,0,et.width,et.height,He,Ne,et.data):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce+1,st,et.width,et.height,0,He,Ne,et.data)}}else{tt?G&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,0,0,0,He,Ne,Re[me]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,0,st,He,Ne,Re[me]);for(let Ce=0;Ce<ce.length;Ce++){const Ae=ce[Ce];tt?G&&t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce+1,0,0,He,Ne,Ae.image[me]):t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+me,Ce+1,st,He,Ne,Ae.image[me])}}}p(b)&&f(r.TEXTURE_CUBE_MAP),de.__version=qe.version,b.onUpdate&&b.onUpdate(b)}z.__version=b.version}function N(z,b,J,oe,qe,de){const Pe=s.convert(J.format,J.colorSpace),Me=s.convert(J.type),Te=y(J.internalFormat,Pe,Me,J.colorSpace),Qe=n.get(b),xe=n.get(J);if(xe.__renderTarget=b,!Qe.__hasExternalTextures){const Re=Math.max(1,b.width>>de),Ue=Math.max(1,b.height>>de);qe===r.TEXTURE_3D||qe===r.TEXTURE_2D_ARRAY?t.texImage3D(qe,de,Te,Re,Ue,b.depth,0,Pe,Me,null):t.texImage2D(qe,de,Te,Re,Ue,0,Pe,Me,null)}t.bindFramebuffer(r.FRAMEBUFFER,z),ue(b)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,oe,qe,xe.__webglTexture,0,ee(b)):(qe===r.TEXTURE_2D||qe>=r.TEXTURE_CUBE_MAP_POSITIVE_X&&qe<=r.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&r.framebufferTexture2D(r.FRAMEBUFFER,oe,qe,xe.__webglTexture,de),t.bindFramebuffer(r.FRAMEBUFFER,null)}function A(z,b,J){if(r.bindRenderbuffer(r.RENDERBUFFER,z),b.depthBuffer){const oe=b.depthTexture,qe=oe&&oe.isDepthTexture?oe.type:null,de=_(b.stencilBuffer,qe),Pe=b.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Me=ee(b);ue(b)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,Me,de,b.width,b.height):J?r.renderbufferStorageMultisample(r.RENDERBUFFER,Me,de,b.width,b.height):r.renderbufferStorage(r.RENDERBUFFER,de,b.width,b.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,Pe,r.RENDERBUFFER,z)}else{const oe=b.textures;for(let qe=0;qe<oe.length;qe++){const de=oe[qe],Pe=s.convert(de.format,de.colorSpace),Me=s.convert(de.type),Te=y(de.internalFormat,Pe,Me,de.colorSpace),Qe=ee(b);J&&ue(b)===!1?r.renderbufferStorageMultisample(r.RENDERBUFFER,Qe,Te,b.width,b.height):ue(b)?a.renderbufferStorageMultisampleEXT(r.RENDERBUFFER,Qe,Te,b.width,b.height):r.renderbufferStorage(r.RENDERBUFFER,Te,b.width,b.height)}}r.bindRenderbuffer(r.RENDERBUFFER,null)}function Q(z,b){if(b&&b.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(r.FRAMEBUFFER,z),!(b.depthTexture&&b.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const oe=n.get(b.depthTexture);oe.__renderTarget=b,(!oe.__webglTexture||b.depthTexture.image.width!==b.width||b.depthTexture.image.height!==b.height)&&(b.depthTexture.image.width=b.width,b.depthTexture.image.height=b.height,b.depthTexture.needsUpdate=!0),P(b.depthTexture,0);const qe=oe.__webglTexture,de=ee(b);if(b.depthTexture.format===Y1)ue(b)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,qe,0,de):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,qe,0);else if(b.depthTexture.format===$1)ue(b)?a.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,qe,0,de):r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.TEXTURE_2D,qe,0);else throw new Error("Unknown depthTexture format")}function he(z){const b=n.get(z),J=z.isWebGLCubeRenderTarget===!0;if(b.__boundDepthTexture!==z.depthTexture){const oe=z.depthTexture;if(b.__depthDisposeCallback&&b.__depthDisposeCallback(),oe){const qe=()=>{delete b.__boundDepthTexture,delete b.__depthDisposeCallback,oe.removeEventListener("dispose",qe)};oe.addEventListener("dispose",qe),b.__depthDisposeCallback=qe}b.__boundDepthTexture=oe}if(z.depthTexture&&!b.__autoAllocateDepthBuffer){if(J)throw new Error("target.depthTexture not supported in Cube render targets");Q(b.__webglFramebuffer,z)}else if(J){b.__webglDepthbuffer=[];for(let oe=0;oe<6;oe++)if(t.bindFramebuffer(r.FRAMEBUFFER,b.__webglFramebuffer[oe]),b.__webglDepthbuffer[oe]===void 0)b.__webglDepthbuffer[oe]=r.createRenderbuffer(),A(b.__webglDepthbuffer[oe],z,!1);else{const qe=z.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,de=b.__webglDepthbuffer[oe];r.bindRenderbuffer(r.RENDERBUFFER,de),r.framebufferRenderbuffer(r.FRAMEBUFFER,qe,r.RENDERBUFFER,de)}}else if(t.bindFramebuffer(r.FRAMEBUFFER,b.__webglFramebuffer),b.__webglDepthbuffer===void 0)b.__webglDepthbuffer=r.createRenderbuffer(),A(b.__webglDepthbuffer,z,!1);else{const oe=z.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,qe=b.__webglDepthbuffer;r.bindRenderbuffer(r.RENDERBUFFER,qe),r.framebufferRenderbuffer(r.FRAMEBUFFER,oe,r.RENDERBUFFER,qe)}t.bindFramebuffer(r.FRAMEBUFFER,null)}function j(z,b,J){const oe=n.get(z);b!==void 0&&N(oe.__webglFramebuffer,z,z.texture,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,0),J!==void 0&&he(z)}function pe(z){const b=z.texture,J=n.get(z),oe=n.get(b);z.addEventListener("dispose",S);const qe=z.textures,de=z.isWebGLCubeRenderTarget===!0,Pe=qe.length>1;if(Pe||(oe.__webglTexture===void 0&&(oe.__webglTexture=r.createTexture()),oe.__version=b.version,o.memory.textures++),de){J.__webglFramebuffer=[];for(let Me=0;Me<6;Me++)if(b.mipmaps&&b.mipmaps.length>0){J.__webglFramebuffer[Me]=[];for(let Te=0;Te<b.mipmaps.length;Te++)J.__webglFramebuffer[Me][Te]=r.createFramebuffer()}else J.__webglFramebuffer[Me]=r.createFramebuffer()}else{if(b.mipmaps&&b.mipmaps.length>0){J.__webglFramebuffer=[];for(let Me=0;Me<b.mipmaps.length;Me++)J.__webglFramebuffer[Me]=r.createFramebuffer()}else J.__webglFramebuffer=r.createFramebuffer();if(Pe)for(let Me=0,Te=qe.length;Me<Te;Me++){const Qe=n.get(qe[Me]);Qe.__webglTexture===void 0&&(Qe.__webglTexture=r.createTexture(),o.memory.textures++)}if(z.samples>0&&ue(z)===!1){J.__webglMultisampledFramebuffer=r.createFramebuffer(),J.__webglColorRenderbuffer=[],t.bindFramebuffer(r.FRAMEBUFFER,J.__webglMultisampledFramebuffer);for(let Me=0;Me<qe.length;Me++){const Te=qe[Me];J.__webglColorRenderbuffer[Me]=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,J.__webglColorRenderbuffer[Me]);const Qe=s.convert(Te.format,Te.colorSpace),xe=s.convert(Te.type),Re=y(Te.internalFormat,Qe,xe,Te.colorSpace,z.isXRRenderTarget===!0),Ue=ee(z);r.renderbufferStorageMultisample(r.RENDERBUFFER,Ue,Re,z.width,z.height),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Me,r.RENDERBUFFER,J.__webglColorRenderbuffer[Me])}r.bindRenderbuffer(r.RENDERBUFFER,null),z.depthBuffer&&(J.__webglDepthRenderbuffer=r.createRenderbuffer(),A(J.__webglDepthRenderbuffer,z,!0)),t.bindFramebuffer(r.FRAMEBUFFER,null)}}if(de){t.bindTexture(r.TEXTURE_CUBE_MAP,oe.__webglTexture),De(r.TEXTURE_CUBE_MAP,b);for(let Me=0;Me<6;Me++)if(b.mipmaps&&b.mipmaps.length>0)for(let Te=0;Te<b.mipmaps.length;Te++)N(J.__webglFramebuffer[Me][Te],z,b,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+Me,Te);else N(J.__webglFramebuffer[Me],z,b,r.COLOR_ATTACHMENT0,r.TEXTURE_CUBE_MAP_POSITIVE_X+Me,0);p(b)&&f(r.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(Pe){for(let Me=0,Te=qe.length;Me<Te;Me++){const Qe=qe[Me],xe=n.get(Qe);t.bindTexture(r.TEXTURE_2D,xe.__webglTexture),De(r.TEXTURE_2D,Qe),N(J.__webglFramebuffer,z,Qe,r.COLOR_ATTACHMENT0+Me,r.TEXTURE_2D,0),p(Qe)&&f(r.TEXTURE_2D)}t.unbindTexture()}else{let Me=r.TEXTURE_2D;if((z.isWebGL3DRenderTarget||z.isWebGLArrayRenderTarget)&&(Me=z.isWebGL3DRenderTarget?r.TEXTURE_3D:r.TEXTURE_2D_ARRAY),t.bindTexture(Me,oe.__webglTexture),De(Me,b),b.mipmaps&&b.mipmaps.length>0)for(let Te=0;Te<b.mipmaps.length;Te++)N(J.__webglFramebuffer[Te],z,b,r.COLOR_ATTACHMENT0,Me,Te);else N(J.__webglFramebuffer,z,b,r.COLOR_ATTACHMENT0,Me,0);p(b)&&f(Me),t.unbindTexture()}z.depthBuffer&&he(z)}function Z(z){const b=z.textures;for(let J=0,oe=b.length;J<oe;J++){const qe=b[J];if(p(qe)){const de=v(z),Pe=n.get(qe).__webglTexture;t.bindTexture(de,Pe),f(de),t.unbindTexture()}}}const te=[],M=[];function re(z){if(z.samples>0){if(ue(z)===!1){const b=z.textures,J=z.width,oe=z.height;let qe=r.COLOR_BUFFER_BIT;const de=z.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT,Pe=n.get(z),Me=b.length>1;if(Me)for(let Te=0;Te<b.length;Te++)t.bindFramebuffer(r.FRAMEBUFFER,Pe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Te,r.RENDERBUFFER,null),t.bindFramebuffer(r.FRAMEBUFFER,Pe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Te,r.TEXTURE_2D,null,0);t.bindFramebuffer(r.READ_FRAMEBUFFER,Pe.__webglMultisampledFramebuffer),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,Pe.__webglFramebuffer);for(let Te=0;Te<b.length;Te++){if(z.resolveDepthBuffer&&(z.depthBuffer&&(qe|=r.DEPTH_BUFFER_BIT),z.stencilBuffer&&z.resolveStencilBuffer&&(qe|=r.STENCIL_BUFFER_BIT)),Me){r.framebufferRenderbuffer(r.READ_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.RENDERBUFFER,Pe.__webglColorRenderbuffer[Te]);const Qe=n.get(b[Te]).__webglTexture;r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,Qe,0)}r.blitFramebuffer(0,0,J,oe,0,0,J,oe,qe,r.NEAREST),l===!0&&(te.length=0,M.length=0,te.push(r.COLOR_ATTACHMENT0+Te),z.depthBuffer&&z.resolveDepthBuffer===!1&&(te.push(de),M.push(de),r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,M)),r.invalidateFramebuffer(r.READ_FRAMEBUFFER,te))}if(t.bindFramebuffer(r.READ_FRAMEBUFFER,null),t.bindFramebuffer(r.DRAW_FRAMEBUFFER,null),Me)for(let Te=0;Te<b.length;Te++){t.bindFramebuffer(r.FRAMEBUFFER,Pe.__webglMultisampledFramebuffer),r.framebufferRenderbuffer(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0+Te,r.RENDERBUFFER,Pe.__webglColorRenderbuffer[Te]);const Qe=n.get(b[Te]).__webglTexture;t.bindFramebuffer(r.FRAMEBUFFER,Pe.__webglFramebuffer),r.framebufferTexture2D(r.DRAW_FRAMEBUFFER,r.COLOR_ATTACHMENT0+Te,r.TEXTURE_2D,Qe,0)}t.bindFramebuffer(r.DRAW_FRAMEBUFFER,Pe.__webglMultisampledFramebuffer)}else if(z.depthBuffer&&z.resolveDepthBuffer===!1&&l){const b=z.stencilBuffer?r.DEPTH_STENCIL_ATTACHMENT:r.DEPTH_ATTACHMENT;r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER,[b])}}}function ee(z){return Math.min(i.maxSamples,z.samples)}function ue(z){const b=n.get(z);return z.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&b.__useRenderToTexture!==!1}function V(z){const b=o.render.frame;h.get(z)!==b&&(h.set(z,b),z.update())}function k(z,b){const J=z.colorSpace,oe=z.format,qe=z.type;return z.isCompressedTexture===!0||z.isVideoTexture===!0||J!==J1&&J!==c1&&(nt.getTransfer(J)===dt?(oe!==tn||qe!==Zn)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",J)),b}function ae(z){return typeof HTMLImageElement<"u"&&z instanceof HTMLImageElement?(c.width=z.naturalWidth||z.width,c.height=z.naturalHeight||z.height):typeof VideoFrame<"u"&&z instanceof VideoFrame?(c.width=z.displayWidth,c.height=z.displayHeight):(c.width=z.width,c.height=z.height),c}this.allocateTextureUnit=U,this.resetTextureUnits=O,this.setTexture2D=P,this.setTexture2DArray=K,this.setTexture3D=ie,this.setTextureCube=H,this.rebindTextures=j,this.setupRenderTarget=pe,this.updateRenderTargetMipmap=Z,this.updateMultisampleRenderTarget=re,this.setupDepthRenderbuffer=he,this.setupFrameBufferTexture=N,this.useMultisampledRTT=ue}function d6(r,e){function t(n,i=c1){let s;const o=nt.getTransfer(i);if(n===Zn)return r.UNSIGNED_BYTE;if(n===Pr)return r.UNSIGNED_SHORT_4_4_4_4;if(n===Dr)return r.UNSIGNED_SHORT_5_5_5_1;if(n===ca)return r.UNSIGNED_INT_5_9_9_9_REV;if(n===aa)return r.BYTE;if(n===la)return r.SHORT;if(n===Ri)return r.UNSIGNED_SHORT;if(n===Lr)return r.INT;if(n===l1)return r.UNSIGNED_INT;if(n===hn)return r.FLOAT;if(n===Ii)return r.HALF_FLOAT;if(n===ha)return r.ALPHA;if(n===ua)return r.RGB;if(n===tn)return r.RGBA;if(n===da)return r.LUMINANCE;if(n===qa)return r.LUMINANCE_ALPHA;if(n===Y1)return r.DEPTH_COMPONENT;if(n===$1)return r.DEPTH_STENCIL;if(n===kr)return r.RED;if(n===vs)return r.RED_INTEGER;if(n===ma)return r.RG;if(n===Fr)return r.RG_INTEGER;if(n===Ur)return r.RGBA_INTEGER;if(n===ws||n===Ms||n===Ss||n===bs)if(o===dt)if(s=e.get("WEBGL_compressed_texture_s3tc_srgb"),s!==null){if(n===ws)return s.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Ms)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===Ss)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===bs)return s.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(s=e.get("WEBGL_compressed_texture_s3tc"),s!==null){if(n===ws)return s.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Ms)return s.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===Ss)return s.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===bs)return s.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===Or||n===Br||n===Vr||n===Hr)if(s=e.get("WEBGL_compressed_texture_pvrtc"),s!==null){if(n===Or)return s.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===Br)return s.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===Vr)return s.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===Hr)return s.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===Gr||n===Wr||n===Xr)if(s=e.get("WEBGL_compressed_texture_etc"),s!==null){if(n===Gr||n===Wr)return o===dt?s.COMPRESSED_SRGB8_ETC2:s.COMPRESSED_RGB8_ETC2;if(n===Xr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:s.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Yr||n===$r||n===Zr||n===jr||n===Jr||n===Kr||n===Qr||n===e2||n===t2||n===n2||n===i2||n===s2||n===r2||n===o2)if(s=e.get("WEBGL_compressed_texture_astc"),s!==null){if(n===Yr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:s.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===$r)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:s.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Zr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:s.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===jr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:s.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Jr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:s.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Kr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:s.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Qr)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:s.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===e2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:s.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===t2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:s.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===n2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:s.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===i2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:s.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===s2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:s.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===r2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:s.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===o2)return o===dt?s.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:s.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===Es||n===a2||n===l2)if(s=e.get("EXT_texture_compression_bptc"),s!==null){if(n===Es)return o===dt?s.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:s.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===a2)return s.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===l2)return s.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===fa||n===c2||n===h2||n===u2)if(s=e.get("EXT_texture_compression_rgtc"),s!==null){if(n===Es)return s.COMPRESSED_RED_RGTC1_EXT;if(n===c2)return s.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===h2)return s.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===u2)return s.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===X1?r.UNSIGNED_INT_24_8:r[n]!==void 0?r[n]:null}return{convert:t}}const Lq={type:"move"};class Z4{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new ts,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new ts,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new L,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new L),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new ts,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new L,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new L),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const n of e.hand.values())this._getHandJoint(t,n)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,n){let i=null,s=null,o=null;const a=this._targetRay,l=this._grip,c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){o=!0;for(const g of e.hand.values()){const p=t.getJointPose(g,n),f=this._getHandJoint(c,g);p!==null&&(f.matrix.fromArray(p.transform.matrix),f.matrix.decompose(f.position,f.rotation,f.scale),f.matrixWorldNeedsUpdate=!0,f.jointRadius=p.radius),f.visible=p!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),q=.02,m=.005;c.inputState.pinching&&d>q+m?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&d<=q-m&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(s=t.getPose(e.gripSpace,n),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(i=t.getPose(e.targetRaySpace,n),i===null&&s!==null&&(i=s),i!==null&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(Lq)))}return a!==null&&(a.visible=i!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=o!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const n=new ts;n.matrixAutoUpdate=!1,n.visible=!1,e.joints[t.jointName]=n,e.add(n)}return e.joints[t.jointName]}}const Pq=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,Dq=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class kq{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(e,t,n){if(this.texture===null){const i=new Mt,s=e.properties.get(i);s.__webglTexture=t.texture,(t.depthNear!==n.depthNear||t.depthFar!==n.depthFar)&&(this.depthNear=t.depthNear,this.depthFar=t.depthFar),this.texture=i}}getMesh(e){if(this.texture!==null&&this.mesh===null){const t=e.cameras[0].viewport,n=new Ln({vertexShader:Pq,fragmentShader:Dq,uniforms:{depthColor:{value:this.texture},depthWidth:{value:t.z},depthHeight:{value:t.w}}});this.mesh=new St(new ss(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class Fq extends jn{constructor(e,t){super();const n=this;let i=null,s=1,o=null,a="local-floor",l=1,c=null,h=null,u=null,d=null,q=null,m=null;const g=new kq,p=t.getContextAttributes();let f=null,v=null;const y=[],_=[],T=new $;let E=null;const S=new Ot;S.viewport=new lt;const I=new Ot;I.viewport=new lt;const w=[S,I],x=new m5;let C=null,O=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(F){let D=y[F];return D===void 0&&(D=new Z4,y[F]=D),D.getTargetRaySpace()},this.getControllerGrip=function(F){let D=y[F];return D===void 0&&(D=new Z4,y[F]=D),D.getGripSpace()},this.getHand=function(F){let D=y[F];return D===void 0&&(D=new Z4,y[F]=D),D.getHandSpace()};function U(F){const D=_.indexOf(F.inputSource);if(D===-1)return;const N=y[D];N!==void 0&&(N.update(F.inputSource,F.frame,c||o),N.dispatchEvent({type:F.type,data:F.inputSource}))}function B(){i.removeEventListener("select",U),i.removeEventListener("selectstart",U),i.removeEventListener("selectend",U),i.removeEventListener("squeeze",U),i.removeEventListener("squeezestart",U),i.removeEventListener("squeezeend",U),i.removeEventListener("end",B),i.removeEventListener("inputsourceschange",P);for(let F=0;F<y.length;F++){const D=_[F];D!==null&&(_[F]=null,y[F].disconnect(D))}C=null,O=null,g.reset(),e.setRenderTarget(f),q=null,d=null,u=null,i=null,v=null,ke.stop(),n.isPresenting=!1,e.setPixelRatio(E),e.setSize(T.width,T.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(F){s=F,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(F){a=F,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||o},this.setReferenceSpace=function(F){c=F},this.getBaseLayer=function(){return d!==null?d:q},this.getBinding=function(){return u},this.getFrame=function(){return m},this.getSession=function(){return i},this.setSession=async function(F){if(i=F,i!==null){if(f=e.getRenderTarget(),i.addEventListener("select",U),i.addEventListener("selectstart",U),i.addEventListener("selectend",U),i.addEventListener("squeeze",U),i.addEventListener("squeezestart",U),i.addEventListener("squeezeend",U),i.addEventListener("end",B),i.addEventListener("inputsourceschange",P),p.xrCompatible!==!0&&await t.makeXRCompatible(),E=e.getPixelRatio(),e.getSize(T),i.enabledFeatures!==void 0&&i.enabledFeatures.includes("layers")){let N=null,A=null,Q=null;p.depth&&(Q=p.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,N=p.stencil?$1:Y1,A=p.stencil?X1:l1);const he={colorFormat:t.RGBA8,depthFormat:Q,scaleFactor:s};u=new XRWebGLBinding(i,t),d=u.createProjectionLayer(he),i.updateRenderState({layers:[d]}),e.setPixelRatio(1),e.setSize(d.textureWidth,d.textureHeight,!1),v=new Jn(d.textureWidth,d.textureHeight,{format:tn,type:Zn,depthTexture:new n4(d.textureWidth,d.textureHeight,A,void 0,void 0,void 0,void 0,void 0,void 0,N),stencilBuffer:p.stencil,colorSpace:e.outputColorSpace,samples:p.antialias?4:0,resolveDepthBuffer:d.ignoreDepthValues===!1})}else{const N={antialias:p.antialias,alpha:!0,depth:p.depth,stencil:p.stencil,framebufferScaleFactor:s};q=new XRWebGLLayer(i,t,N),i.updateRenderState({baseLayer:q}),e.setPixelRatio(1),e.setSize(q.framebufferWidth,q.framebufferHeight,!1),v=new Jn(q.framebufferWidth,q.framebufferHeight,{format:tn,type:Zn,colorSpace:e.outputColorSpace,stencilBuffer:p.stencil})}v.isXRRenderTarget=!0,this.setFoveation(l),c=null,o=await i.requestReferenceSpace(a),ke.setContext(i),ke.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(i!==null)return i.environmentBlendMode},this.getDepthTexture=function(){return g.getDepthTexture()};function P(F){for(let D=0;D<F.removed.length;D++){const N=F.removed[D],A=_.indexOf(N);A>=0&&(_[A]=null,y[A].disconnect(N))}for(let D=0;D<F.added.length;D++){const N=F.added[D];let A=_.indexOf(N);if(A===-1){for(let he=0;he<y.length;he++)if(he>=_.length){_.push(N),A=he;break}else if(_[he]===null){_[he]=N,A=he;break}if(A===-1)break}const Q=y[A];Q&&Q.connect(N)}}const K=new L,ie=new L;function H(F,D,N){K.setFromMatrixPosition(D.matrixWorld),ie.setFromMatrixPosition(N.matrixWorld);const A=K.distanceTo(ie),Q=D.projectionMatrix.elements,he=N.projectionMatrix.elements,j=Q[14]/(Q[10]-1),pe=Q[14]/(Q[10]+1),Z=(Q[9]+1)/Q[5],te=(Q[9]-1)/Q[5],M=(Q[8]-1)/Q[0],re=(he[8]+1)/he[0],ee=j*M,ue=j*re,V=A/(-M+re),k=V*-M;if(D.matrixWorld.decompose(F.position,F.quaternion,F.scale),F.translateX(k),F.translateZ(V),F.matrixWorld.compose(F.position,F.quaternion,F.scale),F.matrixWorldInverse.copy(F.matrixWorld).invert(),Q[10]===-1)F.projectionMatrix.copy(D.projectionMatrix),F.projectionMatrixInverse.copy(D.projectionMatrixInverse);else{const ae=j+V,z=pe+V,b=ee-k,J=ue+(A-k),oe=Z*pe/z*ae,qe=te*pe/z*ae;F.projectionMatrix.makePerspective(b,J,oe,qe,ae,z),F.projectionMatrixInverse.copy(F.projectionMatrix).invert()}}function fe(F,D){D===null?F.matrixWorld.copy(F.matrix):F.matrixWorld.multiplyMatrices(D.matrixWorld,F.matrix),F.matrixWorldInverse.copy(F.matrixWorld).invert()}this.updateCamera=function(F){if(i===null)return;let D=F.near,N=F.far;g.texture!==null&&(g.depthNear>0&&(D=g.depthNear),g.depthFar>0&&(N=g.depthFar)),x.near=I.near=S.near=D,x.far=I.far=S.far=N,(C!==x.near||O!==x.far)&&(i.updateRenderState({depthNear:x.near,depthFar:x.far}),C=x.near,O=x.far),S.layers.mask=F.layers.mask|2,I.layers.mask=F.layers.mask|4,x.layers.mask=S.layers.mask|I.layers.mask;const A=F.parent,Q=x.cameras;fe(x,A);for(let he=0;he<Q.length;he++)fe(Q[he],A);Q.length===2?H(x,S,I):x.projectionMatrix.copy(S.projectionMatrix),ge(F,x,A)};function ge(F,D,N){N===null?F.matrix.copy(D.matrixWorld):(F.matrix.copy(N.matrixWorld),F.matrix.invert(),F.matrix.multiply(D.matrixWorld)),F.matrix.decompose(F.position,F.quaternion,F.scale),F.updateMatrixWorld(!0),F.projectionMatrix.copy(D.projectionMatrix),F.projectionMatrixInverse.copy(D.projectionMatrixInverse),F.isPerspectiveCamera&&(F.fov=zi*2*Math.atan(1/F.projectionMatrix.elements[5]),F.zoom=1)}this.getCamera=function(){return x},this.getFoveation=function(){if(!(d===null&&q===null))return l},this.setFoveation=function(F){l=F,d!==null&&(d.fixedFoveation=F),q!==null&&q.fixedFoveation!==void 0&&(q.fixedFoveation=F)},this.hasDepthSensing=function(){return g.texture!==null},this.getDepthSensingMesh=function(){return g.getMesh(x)};let ve=null;function De(F,D){if(h=D.getViewerPose(c||o),m=D,h!==null){const N=h.views;q!==null&&(e.setRenderTargetFramebuffer(v,q.framebuffer),e.setRenderTarget(v));let A=!1;N.length!==x.cameras.length&&(x.cameras.length=0,A=!0);for(let he=0;he<N.length;he++){const j=N[he];let pe=null;if(q!==null)pe=q.getViewport(j);else{const te=u.getViewSubImage(d,j);pe=te.viewport,he===0&&(e.setRenderTargetTextures(v,te.colorTexture,d.ignoreDepthValues?void 0:te.depthStencilTexture),e.setRenderTarget(v))}let Z=w[he];Z===void 0&&(Z=new Ot,Z.layers.enable(he),Z.viewport=new lt,w[he]=Z),Z.matrix.fromArray(j.transform.matrix),Z.matrix.decompose(Z.position,Z.quaternion,Z.scale),Z.projectionMatrix.fromArray(j.projectionMatrix),Z.projectionMatrixInverse.copy(Z.projectionMatrix).invert(),Z.viewport.set(pe.x,pe.y,pe.width,pe.height),he===0&&(x.matrix.copy(Z.matrix),x.matrix.decompose(x.position,x.quaternion,x.scale)),A===!0&&x.cameras.push(Z)}const Q=i.enabledFeatures;if(Q&&Q.includes("depth-sensing")){const he=u.getDepthInformation(N[0]);he&&he.isValid&&he.texture&&g.init(e,he,i.renderState)}}for(let N=0;N<y.length;N++){const A=_[N],Q=y[N];A!==null&&Q!==void 0&&Q.update(A,D,c||o)}ve&&ve(F,D),D.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:D}),m=null}const ke=new F5;ke.setAnimationLoop(De),this.setAnimationLoop=function(F){ve=F},this.dispose=function(){}}}const yi=new xn,Uq=new Ge;function Oq(r,e){function t(p,f){p.matrixAutoUpdate===!0&&p.updateMatrix(),f.value.copy(p.matrix)}function n(p,f){f.color.getRGB(p.fogColor.value,X3(r)),f.isFog?(p.fogNear.value=f.near,p.fogFar.value=f.far):f.isFogExp2&&(p.fogDensity.value=f.density)}function i(p,f,v,y,_){f.isMeshBasicMaterial||f.isMeshLambertMaterial?s(p,f):f.isMeshToonMaterial?(s(p,f),u(p,f)):f.isMeshPhongMaterial?(s(p,f),h(p,f)):f.isMeshStandardMaterial?(s(p,f),d(p,f),f.isMeshPhysicalMaterial&&q(p,f,_)):f.isMeshMatcapMaterial?(s(p,f),m(p,f)):f.isMeshDepthMaterial?s(p,f):f.isMeshDistanceMaterial?(s(p,f),g(p,f)):f.isMeshNormalMaterial?s(p,f):f.isLineBasicMaterial?(o(p,f),f.isLineDashedMaterial&&a(p,f)):f.isPointsMaterial?l(p,f,v,y):f.isSpriteMaterial?c(p,f):f.isShadowMaterial?(p.color.value.copy(f.color),p.opacity.value=f.opacity):f.isShaderMaterial&&(f.uniformsNeedUpdate=!1)}function s(p,f){p.opacity.value=f.opacity,f.color&&p.diffuse.value.copy(f.color),f.emissive&&p.emissive.value.copy(f.emissive).multiplyScalar(f.emissiveIntensity),f.map&&(p.map.value=f.map,t(f.map,p.mapTransform)),f.alphaMap&&(p.alphaMap.value=f.alphaMap,t(f.alphaMap,p.alphaMapTransform)),f.bumpMap&&(p.bumpMap.value=f.bumpMap,t(f.bumpMap,p.bumpMapTransform),p.bumpScale.value=f.bumpScale,f.side===en&&(p.bumpScale.value*=-1)),f.normalMap&&(p.normalMap.value=f.normalMap,t(f.normalMap,p.normalMapTransform),p.normalScale.value.copy(f.normalScale),f.side===en&&p.normalScale.value.negate()),f.displacementMap&&(p.displacementMap.value=f.displacementMap,t(f.displacementMap,p.displacementMapTransform),p.displacementScale.value=f.displacementScale,p.displacementBias.value=f.displacementBias),f.emissiveMap&&(p.emissiveMap.value=f.emissiveMap,t(f.emissiveMap,p.emissiveMapTransform)),f.specularMap&&(p.specularMap.value=f.specularMap,t(f.specularMap,p.specularMapTransform)),f.alphaTest>0&&(p.alphaTest.value=f.alphaTest);const v=e.get(f),y=v.envMap,_=v.envMapRotation;y&&(p.envMap.value=y,yi.copy(_),yi.x*=-1,yi.y*=-1,yi.z*=-1,y.isCubeTexture&&y.isRenderTargetTexture===!1&&(yi.y*=-1,yi.z*=-1),p.envMapRotation.value.setFromMatrix4(Uq.makeRotationFromEuler(yi)),p.flipEnvMap.value=y.isCubeTexture&&y.isRenderTargetTexture===!1?-1:1,p.reflectivity.value=f.reflectivity,p.ior.value=f.ior,p.refractionRatio.value=f.refractionRatio),f.lightMap&&(p.lightMap.value=f.lightMap,p.lightMapIntensity.value=f.lightMapIntensity,t(f.lightMap,p.lightMapTransform)),f.aoMap&&(p.aoMap.value=f.aoMap,p.aoMapIntensity.value=f.aoMapIntensity,t(f.aoMap,p.aoMapTransform))}function o(p,f){p.diffuse.value.copy(f.color),p.opacity.value=f.opacity,f.map&&(p.map.value=f.map,t(f.map,p.mapTransform))}function a(p,f){p.dashSize.value=f.dashSize,p.totalSize.value=f.dashSize+f.gapSize,p.scale.value=f.scale}function l(p,f,v,y){p.diffuse.value.copy(f.color),p.opacity.value=f.opacity,p.size.value=f.size*v,p.scale.value=y*.5,f.map&&(p.map.value=f.map,t(f.map,p.uvTransform)),f.alphaMap&&(p.alphaMap.value=f.alphaMap,t(f.alphaMap,p.alphaMapTransform)),f.alphaTest>0&&(p.alphaTest.value=f.alphaTest)}function c(p,f){p.diffuse.value.copy(f.color),p.opacity.value=f.opacity,p.rotation.value=f.rotation,f.map&&(p.map.value=f.map,t(f.map,p.mapTransform)),f.alphaMap&&(p.alphaMap.value=f.alphaMap,t(f.alphaMap,p.alphaMapTransform)),f.alphaTest>0&&(p.alphaTest.value=f.alphaTest)}function h(p,f){p.specular.value.copy(f.specular),p.shininess.value=Math.max(f.shininess,1e-4)}function u(p,f){f.gradientMap&&(p.gradientMap.value=f.gradientMap)}function d(p,f){p.metalness.value=f.metalness,f.metalnessMap&&(p.metalnessMap.value=f.metalnessMap,t(f.metalnessMap,p.metalnessMapTransform)),p.roughness.value=f.roughness,f.roughnessMap&&(p.roughnessMap.value=f.roughnessMap,t(f.roughnessMap,p.roughnessMapTransform)),f.envMap&&(p.envMapIntensity.value=f.envMapIntensity)}function q(p,f,v){p.ior.value=f.ior,f.sheen>0&&(p.sheenColor.value.copy(f.sheenColor).multiplyScalar(f.sheen),p.sheenRoughness.value=f.sheenRoughness,f.sheenColorMap&&(p.sheenColorMap.value=f.sheenColorMap,t(f.sheenColorMap,p.sheenColorMapTransform)),f.sheenRoughnessMap&&(p.sheenRoughnessMap.value=f.sheenRoughnessMap,t(f.sheenRoughnessMap,p.sheenRoughnessMapTransform))),f.clearcoat>0&&(p.clearcoat.value=f.clearcoat,p.clearcoatRoughness.value=f.clearcoatRoughness,f.clearcoatMap&&(p.clearcoatMap.value=f.clearcoatMap,t(f.clearcoatMap,p.clearcoatMapTransform)),f.clearcoatRoughnessMap&&(p.clearcoatRoughnessMap.value=f.clearcoatRoughnessMap,t(f.clearcoatRoughnessMap,p.clearcoatRoughnessMapTransform)),f.clearcoatNormalMap&&(p.clearcoatNormalMap.value=f.clearcoatNormalMap,t(f.clearcoatNormalMap,p.clearcoatNormalMapTransform),p.clearcoatNormalScale.value.copy(f.clearcoatNormalScale),f.side===en&&p.clearcoatNormalScale.value.negate())),f.dispersion>0&&(p.dispersion.value=f.dispersion),f.iridescence>0&&(p.iridescence.value=f.iridescence,p.iridescenceIOR.value=f.iridescenceIOR,p.iridescenceThicknessMinimum.value=f.iridescenceThicknessRange[0],p.iridescenceThicknessMaximum.value=f.iridescenceThicknessRange[1],f.iridescenceMap&&(p.iridescenceMap.value=f.iridescenceMap,t(f.iridescenceMap,p.iridescenceMapTransform)),f.iridescenceThicknessMap&&(p.iridescenceThicknessMap.value=f.iridescenceThicknessMap,t(f.iridescenceThicknessMap,p.iridescenceThicknessMapTransform))),f.transmission>0&&(p.transmission.value=f.transmission,p.transmissionSamplerMap.value=v.texture,p.transmissionSamplerSize.value.set(v.width,v.height),f.transmissionMap&&(p.transmissionMap.value=f.transmissionMap,t(f.transmissionMap,p.transmissionMapTransform)),p.thickness.value=f.thickness,f.thicknessMap&&(p.thicknessMap.value=f.thicknessMap,t(f.thicknessMap,p.thicknessMapTransform)),p.attenuationDistance.value=f.attenuationDistance,p.attenuationColor.value.copy(f.attenuationColor)),f.anisotropy>0&&(p.anisotropyVector.value.set(f.anisotropy*Math.cos(f.anisotropyRotation),f.anisotropy*Math.sin(f.anisotropyRotation)),f.anisotropyMap&&(p.anisotropyMap.value=f.anisotropyMap,t(f.anisotropyMap,p.anisotropyMapTransform))),p.specularIntensity.value=f.specularIntensity,p.specularColor.value.copy(f.specularColor),f.specularColorMap&&(p.specularColorMap.value=f.specularColorMap,t(f.specularColorMap,p.specularColorMapTransform)),f.specularIntensityMap&&(p.specularIntensityMap.value=f.specularIntensityMap,t(f.specularIntensityMap,p.specularIntensityMapTransform))}function m(p,f){f.matcap&&(p.matcap.value=f.matcap)}function g(p,f){const v=e.get(f).light;p.referencePosition.value.setFromMatrixPosition(v.matrixWorld),p.nearDistance.value=v.shadow.camera.near,p.farDistance.value=v.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:i}}function Bq(r,e,t,n){let i={},s={},o=[];const a=r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);function l(v,y){const _=y.program;n.uniformBlockBinding(v,_)}function c(v,y){let _=i[v.id];_===void 0&&(m(v),_=h(v),i[v.id]=_,v.addEventListener("dispose",p));const T=y.program;n.updateUBOMapping(v,T);const E=e.render.frame;s[v.id]!==E&&(d(v),s[v.id]=E)}function h(v){const y=u();v.__bindingPointIndex=y;const _=r.createBuffer(),T=v.__size,E=v.usage;return r.bindBuffer(r.UNIFORM_BUFFER,_),r.bufferData(r.UNIFORM_BUFFER,T,E),r.bindBuffer(r.UNIFORM_BUFFER,null),r.bindBufferBase(r.UNIFORM_BUFFER,y,_),_}function u(){for(let v=0;v<a;v++)if(o.indexOf(v)===-1)return o.push(v),v;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(v){const y=i[v.id],_=v.uniforms,T=v.__cache;r.bindBuffer(r.UNIFORM_BUFFER,y);for(let E=0,S=_.length;E<S;E++){const I=Array.isArray(_[E])?_[E]:[_[E]];for(let w=0,x=I.length;w<x;w++){const C=I[w];if(q(C,E,w,T)===!0){const O=C.__offset,U=Array.isArray(C.value)?C.value:[C.value];let B=0;for(let P=0;P<U.length;P++){const K=U[P],ie=g(K);typeof K=="number"||typeof K=="boolean"?(C.__data[0]=K,r.bufferSubData(r.UNIFORM_BUFFER,O+B,C.__data)):K.isMatrix3?(C.__data[0]=K.elements[0],C.__data[1]=K.elements[1],C.__data[2]=K.elements[2],C.__data[3]=0,C.__data[4]=K.elements[3],C.__data[5]=K.elements[4],C.__data[6]=K.elements[5],C.__data[7]=0,C.__data[8]=K.elements[6],C.__data[9]=K.elements[7],C.__data[10]=K.elements[8],C.__data[11]=0):(K.toArray(C.__data,B),B+=ie.storage/Float32Array.BYTES_PER_ELEMENT)}r.bufferSubData(r.UNIFORM_BUFFER,O,C.__data)}}}r.bindBuffer(r.UNIFORM_BUFFER,null)}function q(v,y,_,T){const E=v.value,S=y+"_"+_;if(T[S]===void 0)return typeof E=="number"||typeof E=="boolean"?T[S]=E:T[S]=E.clone(),!0;{const I=T[S];if(typeof E=="number"||typeof E=="boolean"){if(I!==E)return T[S]=E,!0}else if(I.equals(E)===!1)return I.copy(E),!0}return!1}function m(v){const y=v.uniforms;let _=0;const T=16;for(let S=0,I=y.length;S<I;S++){const w=Array.isArray(y[S])?y[S]:[y[S]];for(let x=0,C=w.length;x<C;x++){const O=w[x],U=Array.isArray(O.value)?O.value:[O.value];for(let B=0,P=U.length;B<P;B++){const K=U[B],ie=g(K),H=_%T,fe=H%ie.boundary,ge=H+fe;_+=fe,ge!==0&&T-ge<ie.storage&&(_+=T-ge),O.__data=new Float32Array(ie.storage/Float32Array.BYTES_PER_ELEMENT),O.__offset=_,_+=ie.storage}}}const E=_%T;return E>0&&(_+=T-E),v.__size=_,v.__cache={},this}function g(v){const y={boundary:0,storage:0};return typeof v=="number"||typeof v=="boolean"?(y.boundary=4,y.storage=4):v.isVector2?(y.boundary=8,y.storage=8):v.isVector3||v.isColor?(y.boundary=16,y.storage=12):v.isVector4?(y.boundary=16,y.storage=16):v.isMatrix3?(y.boundary=48,y.storage=48):v.isMatrix4?(y.boundary=64,y.storage=64):v.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",v),y}function p(v){const y=v.target;y.removeEventListener("dispose",p);const _=o.indexOf(y.__bindingPointIndex);o.splice(_,1),r.deleteBuffer(i[y.id]),delete i[y.id],delete s[y.id]}function f(){for(const v in i)r.deleteBuffer(i[v]);o=[],i={},s={}}return{bind:l,update:c,dispose:f}}class q6{constructor(e={}){const{canvas:t=A3(),context:n=null,depth:i=!0,stencil:s=!1,alpha:o=!1,antialias:a=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:u=!1,reverseDepthBuffer:d=!1}=e;this.isWebGLRenderer=!0;let q;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");q=n.getContextAttributes().alpha}else q=o;const m=new Uint32Array(4),g=new Int32Array(4);let p=null,f=null;const v=[],y=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=nn,this.toneMapping=o1,this.toneMappingExposure=1;const _=this;let T=!1,E=0,S=0,I=null,w=-1,x=null;const C=new lt,O=new lt;let U=null;const B=new _e(0);let P=0,K=t.width,ie=t.height,H=1,fe=null,ge=null;const ve=new lt(0,0,K,ie),De=new lt(0,0,K,ie);let ke=!1;const F=new Ys;let D=!1,N=!1;this.transmissionResolutionScale=1;const A=new Ge,Q=new Ge,he=new L,j=new lt,pe={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let Z=!1;function te(){return I===null?H:1}let M=n;function re(R,X){return t.getContext(R,X)}try{const R={alpha:!0,depth:i,stencil:s,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${M1}`),t.addEventListener("webglcontextlost",me,!1),t.addEventListener("webglcontextrestored",Ce,!1),t.addEventListener("webglcontextcreationerror",Ae,!1),M===null){const X="webgl2";if(M=re(X,R),M===null)throw re(X)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(R){throw console.error("THREE.WebGLRenderer: "+R.message),R}let ee,ue,V,k,ae,z,b,J,oe,qe,de,Pe,Me,Te,Qe,xe,Re,Ue,He,Ne,st,tt,xt,G;function be(){ee=new Ku(M),ee.init(),tt=new d6(M,ee),ue=new Xu(M,ee,e,tt),V=new zq(M,ee),ue.reverseDepthBuffer&&d&&V.buffers.depth.setReversed(!0),k=new td(M),ae=new _q,z=new Nq(M,ee,V,ae,ue,tt,k),b=new $u(_),J=new Ju(_),oe=new Vc(M),xt=new Gu(M,oe),qe=new Qu(M,oe,k,xt),de=new id(M,qe,oe,k),He=new nd(M,ue,z),xe=new Yu(ae),Pe=new xq(_,b,J,ee,ue,xt,xe),Me=new Oq(_,ae),Te=new vq,Qe=new Tq(ee),Ue=new Hu(_,b,J,V,de,q,l),Re=new Rq(_,de,ue),G=new Bq(M,k,ue,V),Ne=new Wu(M,ee,k),st=new ed(M,ee,k),k.programs=Pe.programs,_.capabilities=ue,_.extensions=ee,_.properties=ae,_.renderLists=Te,_.shadowMap=Re,_.state=V,_.info=k}be();const ce=new Fq(_,M);this.xr=ce,this.getContext=function(){return M},this.getContextAttributes=function(){return M.getContextAttributes()},this.forceContextLoss=function(){const R=ee.get("WEBGL_lose_context");R&&R.loseContext()},this.forceContextRestore=function(){const R=ee.get("WEBGL_lose_context");R&&R.restoreContext()},this.getPixelRatio=function(){return H},this.setPixelRatio=function(R){R!==void 0&&(H=R,this.setSize(K,ie,!1))},this.getSize=function(R){return R.set(K,ie)},this.setSize=function(R,X,ne=!0){if(ce.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}K=R,ie=X,t.width=Math.floor(R*H),t.height=Math.floor(X*H),ne===!0&&(t.style.width=R+"px",t.style.height=X+"px"),this.setViewport(0,0,R,X)},this.getDrawingBufferSize=function(R){return R.set(K*H,ie*H).floor()},this.setDrawingBufferSize=function(R,X,ne){K=R,ie=X,H=ne,t.width=Math.floor(R*ne),t.height=Math.floor(X*ne),this.setViewport(0,0,R,X)},this.getCurrentViewport=function(R){return R.copy(C)},this.getViewport=function(R){return R.copy(ve)},this.setViewport=function(R,X,ne,se){R.isVector4?ve.set(R.x,R.y,R.z,R.w):ve.set(R,X,ne,se),V.viewport(C.copy(ve).multiplyScalar(H).round())},this.getScissor=function(R){return R.copy(De)},this.setScissor=function(R,X,ne,se){R.isVector4?De.set(R.x,R.y,R.z,R.w):De.set(R,X,ne,se),V.scissor(O.copy(De).multiplyScalar(H).round())},this.getScissorTest=function(){return ke},this.setScissorTest=function(R){V.setScissorTest(ke=R)},this.setOpaqueSort=function(R){fe=R},this.setTransparentSort=function(R){ge=R},this.getClearColor=function(R){return R.copy(Ue.getClearColor())},this.setClearColor=function(){Ue.setClearColor.apply(Ue,arguments)},this.getClearAlpha=function(){return Ue.getClearAlpha()},this.setClearAlpha=function(){Ue.setClearAlpha.apply(Ue,arguments)},this.clear=function(R=!0,X=!0,ne=!0){let se=0;if(R){let Y=!1;if(I!==null){const ye=I.texture.format;Y=ye===Ur||ye===Fr||ye===vs}if(Y){const ye=I.texture.type,Ee=ye===Zn||ye===l1||ye===Ri||ye===X1||ye===Pr||ye===Dr,Ie=Ue.getClearColor(),Le=Ue.getClearAlpha(),We=Ie.r,$e=Ie.g,Fe=Ie.b;Ee?(m[0]=We,m[1]=$e,m[2]=Fe,m[3]=Le,M.clearBufferuiv(M.COLOR,0,m)):(g[0]=We,g[1]=$e,g[2]=Fe,g[3]=Le,M.clearBufferiv(M.COLOR,0,g))}else se|=M.COLOR_BUFFER_BIT}X&&(se|=M.DEPTH_BUFFER_BIT),ne&&(se|=M.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),M.clear(se)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",me,!1),t.removeEventListener("webglcontextrestored",Ce,!1),t.removeEventListener("webglcontextcreationerror",Ae,!1),Ue.dispose(),Te.dispose(),Qe.dispose(),ae.dispose(),b.dispose(),J.dispose(),de.dispose(),xt.dispose(),G.dispose(),Pe.dispose(),ce.dispose(),ce.removeEventListener("sessionstart",a7),ce.removeEventListener("sessionend",l7),bi.stop()};function me(R){R.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),T=!0}function Ce(){console.log("THREE.WebGLRenderer: Context Restored."),T=!1;const R=k.autoReset,X=Re.enabled,ne=Re.autoUpdate,se=Re.needsUpdate,Y=Re.type;be(),k.autoReset=R,Re.enabled=X,Re.autoUpdate=ne,Re.needsUpdate=se,Re.type=Y}function Ae(R){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",R.statusMessage)}function et(R){const X=R.target;X.removeEventListener("dispose",et),Et(X)}function Et(R){Qt(R),ae.remove(R)}function Qt(R){const X=ae.get(R).programs;X!==void 0&&(X.forEach(function(ne){Pe.releaseProgram(ne)}),R.isShaderMaterial&&Pe.releaseShaderCache(R))}this.renderBufferDirect=function(R,X,ne,se,Y,ye){X===null&&(X=pe);const Ee=Y.isMesh&&Y.matrixWorld.determinant()<0,Ie=sx(R,X,ne,se,Y);V.setMaterial(se,Ee);let Le=ne.index,We=1;if(se.wireframe===!0){if(Le=qe.getWireframeAttribute(ne),Le===void 0)return;We=2}const $e=ne.drawRange,Fe=ne.attributes.position;let ot=$e.start*We,ht=($e.start+$e.count)*We;ye!==null&&(ot=Math.max(ot,ye.start*We),ht=Math.min(ht,(ye.start+ye.count)*We)),Le!==null?(ot=Math.max(ot,0),ht=Math.min(ht,Le.count)):Fe!=null&&(ot=Math.max(ot,0),ht=Math.min(ht,Fe.count));const zt=ht-ot;if(zt<0||zt===1/0)return;xt.setup(Y,se,Ie,ne,Le);let Tt,at=Ne;if(Le!==null&&(Tt=oe.get(Le),at=st,at.setIndex(Tt)),Y.isMesh)se.wireframe===!0?(V.setLineWidth(se.wireframeLinewidth*te()),at.setMode(M.LINES)):at.setMode(M.TRIANGLES);else if(Y.isLine){let Oe=se.linewidth;Oe===void 0&&(Oe=1),V.setLineWidth(Oe*te()),Y.isLineSegments?at.setMode(M.LINES):Y.isLineLoop?at.setMode(M.LINE_LOOP):at.setMode(M.LINE_STRIP)}else Y.isPoints?at.setMode(M.POINTS):Y.isSprite&&at.setMode(M.TRIANGLES);if(Y.isBatchedMesh)if(Y._multiDrawInstances!==null)at.renderMultiDrawInstances(Y._multiDrawStarts,Y._multiDrawCounts,Y._multiDrawCount,Y._multiDrawInstances);else if(ee.get("WEBGL_multi_draw"))at.renderMultiDraw(Y._multiDrawStarts,Y._multiDrawCounts,Y._multiDrawCount);else{const Oe=Y._multiDrawStarts,Ht=Y._multiDrawCounts,ut=Y._multiDrawCount,Wn=Le?oe.get(Le).bytesPerElement:1,ms=ae.get(se).currentProgram.getUniforms();for(let Mn=0;Mn<ut;Mn++)ms.setValue(M,"_gl_DrawID",Mn),at.render(Oe[Mn]/Wn,Ht[Mn])}else if(Y.isInstancedMesh)at.renderInstances(ot,zt,Y.count);else if(ne.isInstancedBufferGeometry){const Oe=ne._maxInstanceCount!==void 0?ne._maxInstanceCount:1/0,Ht=Math.min(ne.instanceCount,Oe);at.renderInstances(ot,zt,Ht)}else at.render(ot,zt)};function ft(R,X,ne){R.transparent===!0&&R.side===Cn&&R.forceSinglePass===!1?(R.side=en,R.needsUpdate=!0,Qo(R,X,ne),R.side=s1,R.needsUpdate=!0,Qo(R,X,ne),R.side=Cn):Qo(R,X,ne)}this.compile=function(R,X,ne=null){ne===null&&(ne=R),f=Qe.get(ne),f.init(X),y.push(f),ne.traverseVisible(function(Y){Y.isLight&&Y.layers.test(X.layers)&&(f.pushLight(Y),Y.castShadow&&f.pushShadow(Y))}),R!==ne&&R.traverseVisible(function(Y){Y.isLight&&Y.layers.test(X.layers)&&(f.pushLight(Y),Y.castShadow&&f.pushShadow(Y))}),f.setupLights();const se=new Set;return R.traverse(function(Y){if(!(Y.isMesh||Y.isPoints||Y.isLine||Y.isSprite))return;const ye=Y.material;if(ye)if(Array.isArray(ye))for(let Ee=0;Ee<ye.length;Ee++){const Ie=ye[Ee];ft(Ie,ne,Y),se.add(Ie)}else ft(ye,ne,Y),se.add(ye)}),y.pop(),f=null,se},this.compileAsync=function(R,X,ne=null){const se=this.compile(R,X,ne);return new Promise(Y=>{function ye(){if(se.forEach(function(Ee){ae.get(Ee).currentProgram.isReady()&&se.delete(Ee)}),se.size===0){Y(R);return}setTimeout(ye,10)}ee.get("KHR_parallel_shader_compile")!==null?ye():setTimeout(ye,10)})};let Gn=null;function w1(R){Gn&&Gn(R)}function a7(){bi.stop()}function l7(){bi.start()}const bi=new F5;bi.setAnimationLoop(w1),typeof self<"u"&&bi.setContext(self),this.setAnimationLoop=function(R){Gn=R,ce.setAnimationLoop(R),R===null?bi.stop():bi.start()},ce.addEventListener("sessionstart",a7),ce.addEventListener("sessionend",l7),this.render=function(R,X){if(X!==void 0&&X.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(T===!0)return;if(R.matrixWorldAutoUpdate===!0&&R.updateMatrixWorld(),X.parent===null&&X.matrixWorldAutoUpdate===!0&&X.updateMatrixWorld(),ce.enabled===!0&&ce.isPresenting===!0&&(ce.cameraAutoUpdate===!0&&ce.updateCamera(X),X=ce.getCamera()),R.isScene===!0&&R.onBeforeRender(_,R,X,I),f=Qe.get(R,y.length),f.init(X),y.push(f),Q.multiplyMatrices(X.projectionMatrix,X.matrixWorldInverse),F.setFromProjectionMatrix(Q),N=this.localClippingEnabled,D=xe.init(this.clippingPlanes,N),p=Te.get(R,v.length),p.init(),v.push(p),ce.enabled===!0&&ce.isPresenting===!0){const ye=_.xr.getDepthSensingMesh();ye!==null&&N0(ye,X,-1/0,_.sortObjects)}N0(R,X,0,_.sortObjects),p.finish(),_.sortObjects===!0&&p.sort(fe,ge),Z=ce.enabled===!1||ce.isPresenting===!1||ce.hasDepthSensing()===!1,Z&&Ue.addToRenderList(p,R),this.info.render.frame++,D===!0&&xe.beginShadows();const ne=f.state.shadowsArray;Re.render(ne,R,X),D===!0&&xe.endShadows(),this.info.autoReset===!0&&this.info.reset();const se=p.opaque,Y=p.transmissive;if(f.setupLights(),X.isArrayCamera){const ye=X.cameras;if(Y.length>0)for(let Ee=0,Ie=ye.length;Ee<Ie;Ee++){const Le=ye[Ee];h7(se,Y,R,Le)}Z&&Ue.render(R);for(let Ee=0,Ie=ye.length;Ee<Ie;Ee++){const Le=ye[Ee];c7(p,R,Le,Le.viewport)}}else Y.length>0&&h7(se,Y,R,X),Z&&Ue.render(R),c7(p,R,X);I!==null&&S===0&&(z.updateMultisampleRenderTarget(I),z.updateRenderTargetMipmap(I)),R.isScene===!0&&R.onAfterRender(_,R,X),xt.resetDefaultState(),w=-1,x=null,y.pop(),y.length>0?(f=y[y.length-1],D===!0&&xe.setGlobalState(_.clippingPlanes,f.state.camera)):f=null,v.pop(),v.length>0?p=v[v.length-1]:p=null};function N0(R,X,ne,se){if(R.visible===!1)return;if(R.layers.test(X.layers)){if(R.isGroup)ne=R.renderOrder;else if(R.isLOD)R.autoUpdate===!0&&R.update(X);else if(R.isLight)f.pushLight(R),R.castShadow&&f.pushShadow(R);else if(R.isSprite){if(!R.frustumCulled||F.intersectsSprite(R)){se&&j.setFromMatrixPosition(R.matrixWorld).applyMatrix4(Q);const Ee=de.update(R),Ie=R.material;Ie.visible&&p.push(R,Ee,Ie,ne,j.z,null)}}else if((R.isMesh||R.isLine||R.isPoints)&&(!R.frustumCulled||F.intersectsObject(R))){const Ee=de.update(R),Ie=R.material;if(se&&(R.boundingSphere!==void 0?(R.boundingSphere===null&&R.computeBoundingSphere(),j.copy(R.boundingSphere.center)):(Ee.boundingSphere===null&&Ee.computeBoundingSphere(),j.copy(Ee.boundingSphere.center)),j.applyMatrix4(R.matrixWorld).applyMatrix4(Q)),Array.isArray(Ie)){const Le=Ee.groups;for(let We=0,$e=Le.length;We<$e;We++){const Fe=Le[We],ot=Ie[Fe.materialIndex];ot&&ot.visible&&p.push(R,Ee,ot,ne,j.z,Fe)}}else Ie.visible&&p.push(R,Ee,Ie,ne,j.z,null)}}const ye=R.children;for(let Ee=0,Ie=ye.length;Ee<Ie;Ee++)N0(ye[Ee],X,ne,se)}function c7(R,X,ne,se){const Y=R.opaque,ye=R.transmissive,Ee=R.transparent;f.setupLightsView(ne),D===!0&&xe.setGlobalState(_.clippingPlanes,ne),se&&V.viewport(C.copy(se)),Y.length>0&&Ko(Y,X,ne),ye.length>0&&Ko(ye,X,ne),Ee.length>0&&Ko(Ee,X,ne),V.buffers.depth.setTest(!0),V.buffers.depth.setMask(!0),V.buffers.color.setMask(!0),V.setPolygonOffset(!1)}function h7(R,X,ne,se){if((ne.isScene===!0?ne.overrideMaterial:null)!==null)return;f.state.transmissionRenderTarget[se.id]===void 0&&(f.state.transmissionRenderTarget[se.id]=new Jn(1,1,{generateMipmaps:!0,type:ee.has("EXT_color_buffer_half_float")||ee.has("EXT_color_buffer_float")?Ii:Zn,minFilter:$n,samples:4,stencilBuffer:s,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:nt.workingColorSpace}));const ye=f.state.transmissionRenderTarget[se.id],Ee=se.viewport||C;ye.setSize(Ee.z*_.transmissionResolutionScale,Ee.w*_.transmissionResolutionScale);const Ie=_.getRenderTarget();_.setRenderTarget(ye),_.getClearColor(B),P=_.getClearAlpha(),P<1&&_.setClearColor(16777215,.5),_.clear(),Z&&Ue.render(ne);const Le=_.toneMapping;_.toneMapping=o1;const We=se.viewport;if(se.viewport!==void 0&&(se.viewport=void 0),f.setupLightsView(se),D===!0&&xe.setGlobalState(_.clippingPlanes,se),Ko(R,ne,se),z.updateMultisampleRenderTarget(ye),z.updateRenderTargetMipmap(ye),ee.has("WEBGL_multisampled_render_to_texture")===!1){let $e=!1;for(let Fe=0,ot=X.length;Fe<ot;Fe++){const ht=X[Fe],zt=ht.object,Tt=ht.geometry,at=ht.material,Oe=ht.group;if(at.side===Cn&&zt.layers.test(se.layers)){const Ht=at.side;at.side=en,at.needsUpdate=!0,u7(zt,ne,se,Tt,at,Oe),at.side=Ht,at.needsUpdate=!0,$e=!0}}$e===!0&&(z.updateMultisampleRenderTarget(ye),z.updateRenderTargetMipmap(ye))}_.setRenderTarget(Ie),_.setClearColor(B,P),We!==void 0&&(se.viewport=We),_.toneMapping=Le}function Ko(R,X,ne){const se=X.isScene===!0?X.overrideMaterial:null;for(let Y=0,ye=R.length;Y<ye;Y++){const Ee=R[Y],Ie=Ee.object,Le=Ee.geometry,We=se===null?Ee.material:se,$e=Ee.group;Ie.layers.test(ne.layers)&&u7(Ie,X,ne,Le,We,$e)}}function u7(R,X,ne,se,Y,ye){R.onBeforeRender(_,X,ne,se,Y,ye),R.modelViewMatrix.multiplyMatrices(ne.matrixWorldInverse,R.matrixWorld),R.normalMatrix.getNormalMatrix(R.modelViewMatrix),Y.onBeforeRender(_,X,ne,se,R,ye),Y.transparent===!0&&Y.side===Cn&&Y.forceSinglePass===!1?(Y.side=en,Y.needsUpdate=!0,_.renderBufferDirect(ne,X,se,Y,R,ye),Y.side=s1,Y.needsUpdate=!0,_.renderBufferDirect(ne,X,se,Y,R,ye),Y.side=Cn):_.renderBufferDirect(ne,X,se,Y,R,ye),R.onAfterRender(_,X,ne,se,Y,ye)}function Qo(R,X,ne){X.isScene!==!0&&(X=pe);const se=ae.get(R),Y=f.state.lights,ye=f.state.shadowsArray,Ee=Y.state.version,Ie=Pe.getParameters(R,Y.state,ye,X,ne),Le=Pe.getProgramCacheKey(Ie);let We=se.programs;se.environment=R.isMeshStandardMaterial?X.environment:null,se.fog=X.fog,se.envMap=(R.isMeshStandardMaterial?J:b).get(R.envMap||se.environment),se.envMapRotation=se.environment!==null&&R.envMap===null?X.environmentRotation:R.envMapRotation,We===void 0&&(R.addEventListener("dispose",et),We=new Map,se.programs=We);let $e=We.get(Le);if($e!==void 0){if(se.currentProgram===$e&&se.lightsStateVersion===Ee)return q7(R,Ie),$e}else Ie.uniforms=Pe.getUniforms(R),R.onBeforeCompile(Ie,_),$e=Pe.acquireProgram(Ie,Le),We.set(Le,$e),se.uniforms=Ie.uniforms;const Fe=se.uniforms;return(!R.isShaderMaterial&&!R.isRawShaderMaterial||R.clipping===!0)&&(Fe.clippingPlanes=xe.uniform),q7(R,Ie),se.needsLights=ox(R),se.lightsStateVersion=Ee,se.needsLights&&(Fe.ambientLightColor.value=Y.state.ambient,Fe.lightProbe.value=Y.state.probe,Fe.directionalLights.value=Y.state.directional,Fe.directionalLightShadows.value=Y.state.directionalShadow,Fe.spotLights.value=Y.state.spot,Fe.spotLightShadows.value=Y.state.spotShadow,Fe.rectAreaLights.value=Y.state.rectArea,Fe.ltc_1.value=Y.state.rectAreaLTC1,Fe.ltc_2.value=Y.state.rectAreaLTC2,Fe.pointLights.value=Y.state.point,Fe.pointLightShadows.value=Y.state.pointShadow,Fe.hemisphereLights.value=Y.state.hemi,Fe.directionalShadowMap.value=Y.state.directionalShadowMap,Fe.directionalShadowMatrix.value=Y.state.directionalShadowMatrix,Fe.spotShadowMap.value=Y.state.spotShadowMap,Fe.spotLightMatrix.value=Y.state.spotLightMatrix,Fe.spotLightMap.value=Y.state.spotLightMap,Fe.pointShadowMap.value=Y.state.pointShadowMap,Fe.pointShadowMatrix.value=Y.state.pointShadowMatrix),se.currentProgram=$e,se.uniformsList=null,$e}function d7(R){if(R.uniformsList===null){const X=R.currentProgram.getUniforms();R.uniformsList=Lo.seqWithValue(X.seq,R.uniforms)}return R.uniformsList}function q7(R,X){const ne=ae.get(R);ne.outputColorSpace=X.outputColorSpace,ne.batching=X.batching,ne.batchingColor=X.batchingColor,ne.instancing=X.instancing,ne.instancingColor=X.instancingColor,ne.instancingMorph=X.instancingMorph,ne.skinning=X.skinning,ne.morphTargets=X.morphTargets,ne.morphNormals=X.morphNormals,ne.morphColors=X.morphColors,ne.morphTargetsCount=X.morphTargetsCount,ne.numClippingPlanes=X.numClippingPlanes,ne.numIntersection=X.numClipIntersection,ne.vertexAlphas=X.vertexAlphas,ne.vertexTangents=X.vertexTangents,ne.toneMapping=X.toneMapping}function sx(R,X,ne,se,Y){X.isScene!==!0&&(X=pe),z.resetTextureUnits();const ye=X.fog,Ee=se.isMeshStandardMaterial?X.environment:null,Ie=I===null?_.outputColorSpace:I.isXRRenderTarget===!0?I.texture.colorSpace:J1,Le=(se.isMeshStandardMaterial?J:b).get(se.envMap||Ee),We=se.vertexColors===!0&&!!ne.attributes.color&&ne.attributes.color.itemSize===4,$e=!!ne.attributes.tangent&&(!!se.normalMap||se.anisotropy>0),Fe=!!ne.morphAttributes.position,ot=!!ne.morphAttributes.normal,ht=!!ne.morphAttributes.color;let zt=o1;se.toneMapped&&(I===null||I.isXRRenderTarget===!0)&&(zt=_.toneMapping);const Tt=ne.morphAttributes.position||ne.morphAttributes.normal||ne.morphAttributes.color,at=Tt!==void 0?Tt.length:0,Oe=ae.get(se),Ht=f.state.lights;if(D===!0&&(N===!0||R!==x)){const cn=R===x&&se.id===w;xe.setState(se,R,cn)}let ut=!1;se.version===Oe.__version?(Oe.needsLights&&Oe.lightsStateVersion!==Ht.state.version||Oe.outputColorSpace!==Ie||Y.isBatchedMesh&&Oe.batching===!1||!Y.isBatchedMesh&&Oe.batching===!0||Y.isBatchedMesh&&Oe.batchingColor===!0&&Y.colorTexture===null||Y.isBatchedMesh&&Oe.batchingColor===!1&&Y.colorTexture!==null||Y.isInstancedMesh&&Oe.instancing===!1||!Y.isInstancedMesh&&Oe.instancing===!0||Y.isSkinnedMesh&&Oe.skinning===!1||!Y.isSkinnedMesh&&Oe.skinning===!0||Y.isInstancedMesh&&Oe.instancingColor===!0&&Y.instanceColor===null||Y.isInstancedMesh&&Oe.instancingColor===!1&&Y.instanceColor!==null||Y.isInstancedMesh&&Oe.instancingMorph===!0&&Y.morphTexture===null||Y.isInstancedMesh&&Oe.instancingMorph===!1&&Y.morphTexture!==null||Oe.envMap!==Le||se.fog===!0&&Oe.fog!==ye||Oe.numClippingPlanes!==void 0&&(Oe.numClippingPlanes!==xe.numPlanes||Oe.numIntersection!==xe.numIntersection)||Oe.vertexAlphas!==We||Oe.vertexTangents!==$e||Oe.morphTargets!==Fe||Oe.morphNormals!==ot||Oe.morphColors!==ht||Oe.toneMapping!==zt||Oe.morphTargetsCount!==at)&&(ut=!0):(ut=!0,Oe.__version=se.version);let Wn=Oe.currentProgram;ut===!0&&(Wn=Qo(se,X,Y));let ms=!1,Mn=!1,Mr=!1;const yt=Wn.getUniforms(),Tn=Oe.uniforms;if(V.useProgram(Wn.program)&&(ms=!0,Mn=!0,Mr=!0),se.id!==w&&(w=se.id,Mn=!0),ms||x!==R){V.buffers.depth.getReversed()?(A.copy(R.projectionMatrix),x8(A),_8(A),yt.setValue(M,"projectionMatrix",A)):yt.setValue(M,"projectionMatrix",R.projectionMatrix),yt.setValue(M,"viewMatrix",R.matrixWorldInverse);const fn=yt.map.cameraPosition;fn!==void 0&&fn.setValue(M,he.setFromMatrixPosition(R.matrixWorld)),ue.logarithmicDepthBuffer&&yt.setValue(M,"logDepthBufFC",2/(Math.log(R.far+1)/Math.LN2)),(se.isMeshPhongMaterial||se.isMeshToonMaterial||se.isMeshLambertMaterial||se.isMeshBasicMaterial||se.isMeshStandardMaterial||se.isShaderMaterial)&&yt.setValue(M,"isOrthographic",R.isOrthographicCamera===!0),x!==R&&(x=R,Mn=!0,Mr=!0)}if(Y.isSkinnedMesh){yt.setOptional(M,Y,"bindMatrix"),yt.setOptional(M,Y,"bindMatrixInverse");const cn=Y.skeleton;cn&&(cn.boneTexture===null&&cn.computeBoneTexture(),yt.setValue(M,"boneTexture",cn.boneTexture,z))}Y.isBatchedMesh&&(yt.setOptional(M,Y,"batchingTexture"),yt.setValue(M,"batchingTexture",Y._matricesTexture,z),yt.setOptional(M,Y,"batchingIdTexture"),yt.setValue(M,"batchingIdTexture",Y._indirectTexture,z),yt.setOptional(M,Y,"batchingColorTexture"),Y._colorsTexture!==null&&yt.setValue(M,"batchingColorTexture",Y._colorsTexture,z));const An=ne.morphAttributes;if((An.position!==void 0||An.normal!==void 0||An.color!==void 0)&&He.update(Y,ne,Wn),(Mn||Oe.receiveShadow!==Y.receiveShadow)&&(Oe.receiveShadow=Y.receiveShadow,yt.setValue(M,"receiveShadow",Y.receiveShadow)),se.isMeshGouraudMaterial&&se.envMap!==null&&(Tn.envMap.value=Le,Tn.flipEnvMap.value=Le.isCubeTexture&&Le.isRenderTargetTexture===!1?-1:1),se.isMeshStandardMaterial&&se.envMap===null&&X.environment!==null&&(Tn.envMapIntensity.value=X.environmentIntensity),Mn&&(yt.setValue(M,"toneMappingExposure",_.toneMappingExposure),Oe.needsLights&&rx(Tn,Mr),ye&&se.fog===!0&&Me.refreshFogUniforms(Tn,ye),Me.refreshMaterialUniforms(Tn,se,H,ie,f.state.transmissionRenderTarget[R.id]),Lo.upload(M,d7(Oe),Tn,z)),se.isShaderMaterial&&se.uniformsNeedUpdate===!0&&(Lo.upload(M,d7(Oe),Tn,z),se.uniformsNeedUpdate=!1),se.isSpriteMaterial&&yt.setValue(M,"center",Y.center),yt.setValue(M,"modelViewMatrix",Y.modelViewMatrix),yt.setValue(M,"normalMatrix",Y.normalMatrix),yt.setValue(M,"modelMatrix",Y.matrixWorld),se.isShaderMaterial||se.isRawShaderMaterial){const cn=se.uniformsGroups;for(let fn=0,L0=cn.length;fn<L0;fn++){const Ei=cn[fn];G.update(Ei,Wn),G.bind(Ei,Wn)}}return Wn}function rx(R,X){R.ambientLightColor.needsUpdate=X,R.lightProbe.needsUpdate=X,R.directionalLights.needsUpdate=X,R.directionalLightShadows.needsUpdate=X,R.pointLights.needsUpdate=X,R.pointLightShadows.needsUpdate=X,R.spotLights.needsUpdate=X,R.spotLightShadows.needsUpdate=X,R.rectAreaLights.needsUpdate=X,R.hemisphereLights.needsUpdate=X}function ox(R){return R.isMeshLambertMaterial||R.isMeshToonMaterial||R.isMeshPhongMaterial||R.isMeshStandardMaterial||R.isShadowMaterial||R.isShaderMaterial&&R.lights===!0}this.getActiveCubeFace=function(){return E},this.getActiveMipmapLevel=function(){return S},this.getRenderTarget=function(){return I},this.setRenderTargetTextures=function(R,X,ne){ae.get(R.texture).__webglTexture=X,ae.get(R.depthTexture).__webglTexture=ne;const se=ae.get(R);se.__hasExternalTextures=!0,se.__autoAllocateDepthBuffer=ne===void 0,se.__autoAllocateDepthBuffer||ee.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),se.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(R,X){const ne=ae.get(R);ne.__webglFramebuffer=X,ne.__useDefaultFramebuffer=X===void 0};const ax=M.createFramebuffer();this.setRenderTarget=function(R,X=0,ne=0){I=R,E=X,S=ne;let se=!0,Y=null,ye=!1,Ee=!1;if(R){const Le=ae.get(R);if(Le.__useDefaultFramebuffer!==void 0)V.bindFramebuffer(M.FRAMEBUFFER,null),se=!1;else if(Le.__webglFramebuffer===void 0)z.setupRenderTarget(R);else if(Le.__hasExternalTextures)z.rebindTextures(R,ae.get(R.texture).__webglTexture,ae.get(R.depthTexture).__webglTexture);else if(R.depthBuffer){const Fe=R.depthTexture;if(Le.__boundDepthTexture!==Fe){if(Fe!==null&&ae.has(Fe)&&(R.width!==Fe.image.width||R.height!==Fe.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");z.setupDepthRenderbuffer(R)}}const We=R.texture;(We.isData3DTexture||We.isDataArrayTexture||We.isCompressedArrayTexture)&&(Ee=!0);const $e=ae.get(R).__webglFramebuffer;R.isWebGLCubeRenderTarget?(Array.isArray($e[X])?Y=$e[X][ne]:Y=$e[X],ye=!0):R.samples>0&&z.useMultisampledRTT(R)===!1?Y=ae.get(R).__webglMultisampledFramebuffer:Array.isArray($e)?Y=$e[ne]:Y=$e,C.copy(R.viewport),O.copy(R.scissor),U=R.scissorTest}else C.copy(ve).multiplyScalar(H).floor(),O.copy(De).multiplyScalar(H).floor(),U=ke;if(ne!==0&&(Y=ax),V.bindFramebuffer(M.FRAMEBUFFER,Y)&&se&&V.drawBuffers(R,Y),V.viewport(C),V.scissor(O),V.setScissorTest(U),ye){const Le=ae.get(R.texture);M.framebufferTexture2D(M.FRAMEBUFFER,M.COLOR_ATTACHMENT0,M.TEXTURE_CUBE_MAP_POSITIVE_X+X,Le.__webglTexture,ne)}else if(Ee){const Le=ae.get(R.texture),We=X;M.framebufferTextureLayer(M.FRAMEBUFFER,M.COLOR_ATTACHMENT0,Le.__webglTexture,ne,We)}else if(R!==null&&ne!==0){const Le=ae.get(R.texture);M.framebufferTexture2D(M.FRAMEBUFFER,M.COLOR_ATTACHMENT0,M.TEXTURE_2D,Le.__webglTexture,ne)}w=-1},this.readRenderTargetPixels=function(R,X,ne,se,Y,ye,Ee){if(!(R&&R.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Ie=ae.get(R).__webglFramebuffer;if(R.isWebGLCubeRenderTarget&&Ee!==void 0&&(Ie=Ie[Ee]),Ie){V.bindFramebuffer(M.FRAMEBUFFER,Ie);try{const Le=R.texture,We=Le.format,$e=Le.type;if(!ue.textureFormatReadable(We)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!ue.textureTypeReadable($e)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}X>=0&&X<=R.width-se&&ne>=0&&ne<=R.height-Y&&M.readPixels(X,ne,se,Y,tt.convert(We),tt.convert($e),ye)}finally{const Le=I!==null?ae.get(I).__webglFramebuffer:null;V.bindFramebuffer(M.FRAMEBUFFER,Le)}}},this.readRenderTargetPixelsAsync=async function(R,X,ne,se,Y,ye,Ee){if(!(R&&R.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let Ie=ae.get(R).__webglFramebuffer;if(R.isWebGLCubeRenderTarget&&Ee!==void 0&&(Ie=Ie[Ee]),Ie){const Le=R.texture,We=Le.format,$e=Le.type;if(!ue.textureFormatReadable(We))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!ue.textureTypeReadable($e))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(X>=0&&X<=R.width-se&&ne>=0&&ne<=R.height-Y){V.bindFramebuffer(M.FRAMEBUFFER,Ie);const Fe=M.createBuffer();M.bindBuffer(M.PIXEL_PACK_BUFFER,Fe),M.bufferData(M.PIXEL_PACK_BUFFER,ye.byteLength,M.STREAM_READ),M.readPixels(X,ne,se,Y,tt.convert(We),tt.convert($e),0);const ot=I!==null?ae.get(I).__webglFramebuffer:null;V.bindFramebuffer(M.FRAMEBUFFER,ot);const ht=M.fenceSync(M.SYNC_GPU_COMMANDS_COMPLETE,0);return M.flush(),await g8(M,ht,4),M.bindBuffer(M.PIXEL_PACK_BUFFER,Fe),M.getBufferSubData(M.PIXEL_PACK_BUFFER,0,ye),M.deleteBuffer(Fe),M.deleteSync(ht),ye}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(R,X=null,ne=0){R.isTexture!==!0&&(Li("WebGLRenderer: copyFramebufferToTexture function signature has changed."),X=arguments[0]||null,R=arguments[1]);const se=Math.pow(2,-ne),Y=Math.floor(R.image.width*se),ye=Math.floor(R.image.height*se),Ee=X!==null?X.x:0,Ie=X!==null?X.y:0;z.setTexture2D(R,0),M.copyTexSubImage2D(M.TEXTURE_2D,ne,0,0,Ee,Ie,Y,ye),V.unbindTexture()};const lx=M.createFramebuffer(),cx=M.createFramebuffer();this.copyTextureToTexture=function(R,X,ne=null,se=null,Y=0,ye=null){R.isTexture!==!0&&(Li("WebGLRenderer: copyTextureToTexture function signature has changed."),se=arguments[0]||null,R=arguments[1],X=arguments[2],ye=arguments[3]||0,ne=null),ye===null&&(Y!==0?(Li("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),ye=Y,Y=0):ye=0);let Ee,Ie,Le,We,$e,Fe,ot,ht,zt;const Tt=R.isCompressedTexture?R.mipmaps[ye]:R.image;if(ne!==null)Ee=ne.max.x-ne.min.x,Ie=ne.max.y-ne.min.y,Le=ne.isBox3?ne.max.z-ne.min.z:1,We=ne.min.x,$e=ne.min.y,Fe=ne.isBox3?ne.min.z:0;else{const An=Math.pow(2,-Y);Ee=Math.floor(Tt.width*An),Ie=Math.floor(Tt.height*An),R.isDataArrayTexture?Le=Tt.depth:R.isData3DTexture?Le=Math.floor(Tt.depth*An):Le=1,We=0,$e=0,Fe=0}se!==null?(ot=se.x,ht=se.y,zt=se.z):(ot=0,ht=0,zt=0);const at=tt.convert(X.format),Oe=tt.convert(X.type);let Ht;X.isData3DTexture?(z.setTexture3D(X,0),Ht=M.TEXTURE_3D):X.isDataArrayTexture||X.isCompressedArrayTexture?(z.setTexture2DArray(X,0),Ht=M.TEXTURE_2D_ARRAY):(z.setTexture2D(X,0),Ht=M.TEXTURE_2D),M.pixelStorei(M.UNPACK_FLIP_Y_WEBGL,X.flipY),M.pixelStorei(M.UNPACK_PREMULTIPLY_ALPHA_WEBGL,X.premultiplyAlpha),M.pixelStorei(M.UNPACK_ALIGNMENT,X.unpackAlignment);const ut=M.getParameter(M.UNPACK_ROW_LENGTH),Wn=M.getParameter(M.UNPACK_IMAGE_HEIGHT),ms=M.getParameter(M.UNPACK_SKIP_PIXELS),Mn=M.getParameter(M.UNPACK_SKIP_ROWS),Mr=M.getParameter(M.UNPACK_SKIP_IMAGES);M.pixelStorei(M.UNPACK_ROW_LENGTH,Tt.width),M.pixelStorei(M.UNPACK_IMAGE_HEIGHT,Tt.height),M.pixelStorei(M.UNPACK_SKIP_PIXELS,We),M.pixelStorei(M.UNPACK_SKIP_ROWS,$e),M.pixelStorei(M.UNPACK_SKIP_IMAGES,Fe);const yt=R.isDataArrayTexture||R.isData3DTexture,Tn=X.isDataArrayTexture||X.isData3DTexture;if(R.isDepthTexture){const An=ae.get(R),cn=ae.get(X),fn=ae.get(An.__renderTarget),L0=ae.get(cn.__renderTarget);V.bindFramebuffer(M.READ_FRAMEBUFFER,fn.__webglFramebuffer),V.bindFramebuffer(M.DRAW_FRAMEBUFFER,L0.__webglFramebuffer);for(let Ei=0;Ei<Le;Ei++)yt&&(M.framebufferTextureLayer(M.READ_FRAMEBUFFER,M.COLOR_ATTACHMENT0,ae.get(R).__webglTexture,Y,Fe+Ei),M.framebufferTextureLayer(M.DRAW_FRAMEBUFFER,M.COLOR_ATTACHMENT0,ae.get(X).__webglTexture,ye,zt+Ei)),M.blitFramebuffer(We,$e,Ee,Ie,ot,ht,Ee,Ie,M.DEPTH_BUFFER_BIT,M.NEAREST);V.bindFramebuffer(M.READ_FRAMEBUFFER,null),V.bindFramebuffer(M.DRAW_FRAMEBUFFER,null)}else if(Y!==0||R.isRenderTargetTexture||ae.has(R)){const An=ae.get(R),cn=ae.get(X);V.bindFramebuffer(M.READ_FRAMEBUFFER,lx),V.bindFramebuffer(M.DRAW_FRAMEBUFFER,cx);for(let fn=0;fn<Le;fn++)yt?M.framebufferTextureLayer(M.READ_FRAMEBUFFER,M.COLOR_ATTACHMENT0,An.__webglTexture,Y,Fe+fn):M.framebufferTexture2D(M.READ_FRAMEBUFFER,M.COLOR_ATTACHMENT0,M.TEXTURE_2D,An.__webglTexture,Y),Tn?M.framebufferTextureLayer(M.DRAW_FRAMEBUFFER,M.COLOR_ATTACHMENT0,cn.__webglTexture,ye,zt+fn):M.framebufferTexture2D(M.DRAW_FRAMEBUFFER,M.COLOR_ATTACHMENT0,M.TEXTURE_2D,cn.__webglTexture,ye),Y!==0?M.blitFramebuffer(We,$e,Ee,Ie,ot,ht,Ee,Ie,M.COLOR_BUFFER_BIT,M.NEAREST):Tn?M.copyTexSubImage3D(Ht,ye,ot,ht,zt+fn,We,$e,Ee,Ie):M.copyTexSubImage2D(Ht,ye,ot,ht,We,$e,Ee,Ie);V.bindFramebuffer(M.READ_FRAMEBUFFER,null),V.bindFramebuffer(M.DRAW_FRAMEBUFFER,null)}else Tn?R.isDataTexture||R.isData3DTexture?M.texSubImage3D(Ht,ye,ot,ht,zt,Ee,Ie,Le,at,Oe,Tt.data):X.isCompressedArrayTexture?M.compressedTexSubImage3D(Ht,ye,ot,ht,zt,Ee,Ie,Le,at,Tt.data):M.texSubImage3D(Ht,ye,ot,ht,zt,Ee,Ie,Le,at,Oe,Tt):R.isDataTexture?M.texSubImage2D(M.TEXTURE_2D,ye,ot,ht,Ee,Ie,at,Oe,Tt.data):R.isCompressedTexture?M.compressedTexSubImage2D(M.TEXTURE_2D,ye,ot,ht,Tt.width,Tt.height,at,Tt.data):M.texSubImage2D(M.TEXTURE_2D,ye,ot,ht,Ee,Ie,at,Oe,Tt);M.pixelStorei(M.UNPACK_ROW_LENGTH,ut),M.pixelStorei(M.UNPACK_IMAGE_HEIGHT,Wn),M.pixelStorei(M.UNPACK_SKIP_PIXELS,ms),M.pixelStorei(M.UNPACK_SKIP_ROWS,Mn),M.pixelStorei(M.UNPACK_SKIP_IMAGES,Mr),ye===0&&X.generateMipmaps&&M.generateMipmap(Ht),V.unbindTexture()},this.copyTextureToTexture3D=function(R,X,ne=null,se=null,Y=0){return R.isTexture!==!0&&(Li("WebGLRenderer: copyTextureToTexture3D function signature has changed."),ne=arguments[0]||null,se=arguments[1]||null,R=arguments[2],X=arguments[3],Y=arguments[4]||0),Li('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(R,X,ne,se,Y)},this.initRenderTarget=function(R){ae.get(R).__webglFramebuffer===void 0&&z.setupRenderTarget(R)},this.initTexture=function(R){R.isCubeTexture?z.setTextureCube(R,0):R.isData3DTexture?z.setTexture3D(R,0):R.isDataArrayTexture||R.isCompressedArrayTexture?z.setTexture2DArray(R,0):z.setTexture2D(R,0),V.unbindTexture()},this.resetState=function(){E=0,S=0,I=null,V.reset(),xt.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Rn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorspace=nt._getDrawingBufferColorSpace(e),t.unpackColorSpace=nt._getUnpackColorSpace()}}const Vq=Object.freeze(Object.defineProperty({__proto__:null,ACESFilmicToneMapping:l3,AddEquation:S1,AddOperation:s3,AdditiveAnimationBlendMode:pa,AdditiveBlending:na,AgXToneMapping:h3,AlphaFormat:ha,AlwaysCompare:b3,AlwaysDepth:Tr,AlwaysStencilFunc:ga,AmbientLight:A4,AnimationAction:v5,AnimationClip:cr,AnimationLoader:B9,AnimationMixer:pc,AnimationObjectGroup:mc,AnimationUtils:k9,ArcCurve:Sl,ArrayCamera:m5,ArrowHelper:Dc,AttachedBindMode:ra,Audio:x5,AudioAnalyser:sc,AudioContext:R4,AudioListener:tc,AudioLoader:K9,AxesHelper:D5,BackSide:en,BasicDepthPacking:p3,BasicShadowMap:y7,BatchedMesh:fl,Bone:$a,BooleanKeyframeTrack:hi,Box2:b5,Box3:Vt,Box3Helper:Lc,BoxGeometry:N1,BoxHelper:Nc,BufferAttribute:qt,BufferGeometry:Ze,BufferGeometryLoader:c5,ByteType:aa,Cache:x1,Camera:L2,CameraHelper:L5,CanvasTexture:a9,CapsuleGeometry:so,CatmullRomCurve3:bl,CineonToneMapping:a3,CircleGeometry:ro,ClampToEdgeWrapping:Sn,Clock:f5,Color:_e,ColorKeyframeTrack:M4,ColorManagement:nt,CompressedArrayTexture:r9,CompressedCubeTexture:o9,CompressedTexture:eo,CompressedTextureLoader:V9,ConeGeometry:oo,ConstantAlphaFactor:t3,ConstantColorFactor:Q0,Controls:k5,CubeCamera:j3,CubeReflectionMapping:a1,CubeRefractionMapping:b1,CubeTexture:Os,CubeTextureLoader:H9,CubeUVReflectionMapping:Ai,CubicBezierCurve:a4,CubicBezierCurve3:Tl,CubicInterpolant:Zl,CullFaceBack:ea,CullFaceFront:k0,CullFaceFrontBack:_7,CullFaceNone:D0,Curve:Pn,CurvePath:Cl,CustomBlending:U0,CustomToneMapping:c3,CylinderGeometry:ns,Cylindrical:Sc,Data3DTexture:p2,DataArrayTexture:Ls,DataTexture:Kn,DataTextureLoader:G9,DataUtils:L8,DecrementStencilOp:L7,DecrementWrapStencilOp:D7,DefaultLoadingManager:Kl,DepthFormat:Y1,DepthStencilFormat:$1,DepthTexture:n4,DetachedBindMode:d3,DirectionalLight:s5,DirectionalLightHelper:zc,DiscreteInterpolant:jl,DodecahedronGeometry:ao,DoubleSide:Cn,DstAlphaFactor:$0,DstColorFactor:j0,DynamicCopyUsage:J7,DynamicDrawUsage:W7,DynamicReadUsage:$7,EdgesGeometry:Rl,EllipseCurve:to,EqualCompare:v3,EqualDepth:Cr,EqualStencilFunc:O7,EquirectangularReflectionMapping:ps,EquirectangularRefractionMapping:gs,Euler:xn,EventDispatcher:jn,ExtrudeGeometry:e1,FileLoader:Un,Float16BufferAttribute:O8,Float32BufferAttribute:ze,FloatType:hn,Fog:D2,FogExp2:P2,FramebufferTexture:s9,FrontSide:s1,Frustum:Ys,GLBufferAttribute:wc,GLSL1:Q7,GLSL3:_a,GreaterCompare:w3,GreaterDepth:Ir,GreaterEqualCompare:S3,GreaterEqualDepth:Rr,GreaterEqualStencilFunc:G7,GreaterStencilFunc:V7,GridHelper:I5,Group:ts,HalfFloatType:Ii,HemisphereLight:Ql,HemisphereLightHelper:Rc,IcosahedronGeometry:fo,ImageBitmapLoader:J9,ImageLoader:hr,ImageUtils:z3,IncrementStencilOp:N7,IncrementWrapStencilOp:P7,InstancedBufferAttribute:Qi,InstancedBufferGeometry:l5,InstancedInterleavedBuffer:vc,InstancedMesh:ql,Int16BufferAttribute:F8,Int32BufferAttribute:U8,Int8BufferAttribute:P8,IntType:Lr,InterleavedBuffer:k2,InterleavedBufferAttribute:Bs,Interpolant:rr,InterpolateDiscrete:Ts,InterpolateLinear:d2,InterpolateSmooth:q2,InvertStencilOp:k7,KeepStencilOp:K1,KeyframeTrack:Fn,LOD:il,LatheGeometry:Ks,Layers:M2,LessCompare:y3,LessDepth:Ar,LessEqualCompare:xa,LessEqualDepth:W1,LessEqualStencilFunc:B7,LessStencilFunc:U7,Light:k1,LightProbe:a5,Line:P1,Line3:bc,LineBasicMaterial:an,LineCurve:l4,LineCurve3:Al,LineDashedMaterial:Xl,LineLoop:yl,LineSegments:Qn,LinearFilter:Nt,LinearInterpolant:w4,LinearMipMapLinearFilter:S7,LinearMipMapNearestFilter:M7,LinearMipmapLinearFilter:$n,LinearMipmapNearestFilter:ys,LinearSRGBColorSpace:J1,LinearToneMapping:r3,LinearTransfer:Cs,Loader:jt,LoaderUtils:C4,LoadingManager:S4,LoopOnce:q3,LoopPingPong:f3,LoopRepeat:m3,LuminanceAlphaFormat:qa,LuminanceFormat:da,MOUSE:Xn,Material:$t,MaterialLoader:Mo,MathUtils:va,Matrix2:D4,Matrix3:Ve,Matrix4:Ge,MaxEquation:H0,Mesh:St,MeshBasicMaterial:z1,MeshDepthMaterial:x4,MeshDistanceMaterial:_4,MeshLambertMaterial:g4,MeshMatcapMaterial:Wl,MeshNormalMaterial:Gl,MeshPhongMaterial:p4,MeshPhysicalMaterial:Vl,MeshStandardMaterial:f4,MeshToonMaterial:Hl,MinEquation:V0,MirroredRepeatWrapping:_s,MixOperation:i3,MultiplyBlending:sa,MultiplyOperation:fs,NearestFilter:Bt,NearestMipMapLinearFilter:w7,NearestMipMapNearestFilter:v7,NearestMipmapLinearFilter:Ci,NearestMipmapNearestFilter:oa,NeutralToneMapping:u3,NeverCompare:_3,NeverDepth:Er,NeverStencilFunc:F7,NoBlending:r1,NoColorSpace:c1,NoToneMapping:o1,NormalAnimationBlendMode:m2,NormalBlending:G1,NotEqualCompare:M3,NotEqualDepth:zr,NotEqualStencilFunc:H7,NumberKeyframeTrack:or,Object3D:it,ObjectLoader:Z9,ObjectSpaceNormalMap:x3,OctahedronGeometry:nr,OneFactor:W0,OneMinusConstantAlphaFactor:n3,OneMinusConstantColorFactor:e3,OneMinusDstAlphaFactor:Z0,OneMinusDstColorFactor:J0,OneMinusSrcAlphaFactor:br,OneMinusSrcColorFactor:Y0,OrthographicCamera:wo,PCFShadowMap:ta,PCFSoftShadowMap:F0,PMREMGenerator:W4,Path:Dn,PerspectiveCamera:Ot,Plane:g1,PlaneGeometry:ss,PlaneHelper:Pc,PointLight:vo,PointLightHelper:Ac,Points:wl,PointsMaterial:e4,PolarGridHelper:Ic,PolyhedronGeometry:D1,PositionalAudio:ic,PropertyBinding:rt,PropertyMixer:y5,QuadraticBezierCurve:c4,QuadraticBezierCurve3:h4,Quaternion:Wt,QuaternionKeyframeTrack:ar,QuaternionLinearInterpolant:Jl,RED_GREEN_RGTC2_Format:h2,RED_RGTC1_Format:fa,REVISION:M1,RGBADepthPacking:g3,RGBAFormat:tn,RGBAIntegerFormat:Ur,RGBA_ASTC_10x10_Format:s2,RGBA_ASTC_10x5_Format:t2,RGBA_ASTC_10x6_Format:n2,RGBA_ASTC_10x8_Format:i2,RGBA_ASTC_12x10_Format:r2,RGBA_ASTC_12x12_Format:o2,RGBA_ASTC_4x4_Format:Yr,RGBA_ASTC_5x4_Format:$r,RGBA_ASTC_5x5_Format:Zr,RGBA_ASTC_6x5_Format:jr,RGBA_ASTC_6x6_Format:Jr,RGBA_ASTC_8x5_Format:Kr,RGBA_ASTC_8x6_Format:Qr,RGBA_ASTC_8x8_Format:e2,RGBA_BPTC_Format:Es,RGBA_ETC2_EAC_Format:Xr,RGBA_PVRTC_2BPPV1_Format:Hr,RGBA_PVRTC_4BPPV1_Format:Vr,RGBA_S3TC_DXT1_Format:Ms,RGBA_S3TC_DXT3_Format:Ss,RGBA_S3TC_DXT5_Format:bs,RGBDepthPacking:C7,RGBFormat:ua,RGBIntegerFormat:b7,RGB_BPTC_SIGNED_Format:a2,RGB_BPTC_UNSIGNED_Format:l2,RGB_ETC1_Format:Gr,RGB_ETC2_Format:Wr,RGB_PVRTC_2BPPV1_Format:Br,RGB_PVRTC_4BPPV1_Format:Or,RGB_S3TC_DXT1_Format:ws,RGDepthPacking:R7,RGFormat:ma,RGIntegerFormat:Fr,RawShaderMaterial:Bl,Ray:ii,Raycaster:Mc,RectAreaLight:r5,RedFormat:kr,RedIntegerFormat:vs,ReinhardToneMapping:o3,RenderTarget:f2,RenderTarget3D:gc,RenderTargetArray:xc,RepeatWrapping:xs,ReplaceStencilOp:z7,ReverseSubtractEquation:B0,RingGeometry:po,SIGNED_RED_GREEN_RGTC2_Format:u2,SIGNED_RED_RGTC1_Format:c2,SRGBColorSpace:nn,SRGBTransfer:dt,Scene:Ha,ShaderChunk:Ke,ShaderLib:On,ShaderMaterial:Ln,ShadowMaterial:Ol,Shape:yn,ShapeGeometry:ir,ShapePath:y1,ShapeUtils:kn,ShortType:la,Skeleton:H2,SkeletonHelper:Tc,SkinnedMesh:cl,Source:ei,Sphere:Xt,SphereGeometry:sr,Spherical:P4,SphericalHarmonics3:o5,SplineCurve:u4,SpotLight:n5,SpotLightHelper:Ec,Sprite:tl,SpriteMaterial:Ga,SrcAlphaFactor:Sr,SrcAlphaSaturateFactor:K0,SrcColorFactor:X0,StaticCopyUsage:j7,StaticDrawUsage:Rs,StaticReadUsage:Y7,StereoCamera:Q9,StreamCopyUsage:K7,StreamDrawUsage:X7,StreamReadUsage:Z7,StringKeyframeTrack:ui,SubtractEquation:O0,SubtractiveBlending:ia,TOUCH:i1,TangentSpaceNormalMap:E1,TetrahedronGeometry:go,Texture:Mt,TextureLoader:W9,TextureUtils:Bc,TorusGeometry:xo,TorusKnotGeometry:_o,Triangle:un,TriangleFanDrawMode:A7,TriangleStripDrawMode:T7,TrianglesDrawMode:E7,TubeGeometry:yo,UVMapping:Nr,Uint16BufferAttribute:Ua,Uint32BufferAttribute:Oa,Uint8BufferAttribute:D8,Uint8ClampedBufferAttribute:k8,Uniform:N4,UniformsGroup:yc,UniformsLib:Se,UniformsUtils:Y3,UnsignedByteType:Zn,UnsignedInt248Type:X1,UnsignedInt5999Type:ca,UnsignedIntType:l1,UnsignedShort4444Type:Pr,UnsignedShort5551Type:Dr,UnsignedShortType:Ri,VSMShadowMap:Yn,Vector2:$,Vector3:L,Vector4:lt,VectorKeyframeTrack:lr,VideoTexture:i9,WebGL3DRenderTarget:S8,WebGLArrayRenderTarget:M8,WebGLCoordinateSystem:Rn,WebGLCubeRenderTarget:J3,WebGLRenderTarget:Jn,WebGLRenderer:q6,WebGLUtils:d6,WebGPUCoordinateSystem:Is,WireframeGeometry:kl,WrapAroundEnding:As,ZeroCurvatureEnding:Z1,ZeroFactor:G0,ZeroSlopeEnding:j1,ZeroStencilOp:I7,createCanvasElement:A3},Symbol.toStringTag,{value:"Module"}));var vi=Object.freeze({Linear:Object.freeze({None:function(r){return r},In:function(r){return r},Out:function(r){return r},InOut:function(r){return r}}),Quadratic:Object.freeze({In:function(r){return r*r},Out:function(r){return r*(2-r)},InOut:function(r){return(r*=2)<1?.5*r*r:-.5*(--r*(r-2)-1)}}),Cubic:Object.freeze({In:function(r){return r*r*r},Out:function(r){return--r*r*r+1},InOut:function(r){return(r*=2)<1?.5*r*r*r:.5*((r-=2)*r*r+2)}}),Quartic:Object.freeze({In:function(r){return r*r*r*r},Out:function(r){return 1- --r*r*r*r},InOut:function(r){return(r*=2)<1?.5*r*r*r*r:-.5*((r-=2)*r*r*r-2)}}),Quintic:Object.freeze({In:function(r){return r*r*r*r*r},Out:function(r){return--r*r*r*r*r+1},InOut:function(r){return(r*=2)<1?.5*r*r*r*r*r:.5*((r-=2)*r*r*r*r+2)}}),Sinusoidal:Object.freeze({In:function(r){return 1-Math.sin((1-r)*Math.PI/2)},Out:function(r){return Math.sin(r*Math.PI/2)},InOut:function(r){return .5*(1-Math.sin(Math.PI*(.5-r)))}}),Exponential:Object.freeze({In:function(r){return r===0?0:Math.pow(1024,r-1)},Out:function(r){return r===1?1:1-Math.pow(2,-10*r)},InOut:function(r){return r===0?0:r===1?1:(r*=2)<1?.5*Math.pow(1024,r-1):.5*(-Math.pow(2,-10*(r-1))+2)}}),Circular:Object.freeze({In:function(r){return 1-Math.sqrt(1-r*r)},Out:function(r){return Math.sqrt(1- --r*r)},InOut:function(r){return(r*=2)<1?-.5*(Math.sqrt(1-r*r)-1):.5*(Math.sqrt(1-(r-=2)*r)+1)}}),Elastic:Object.freeze({In:function(r){return r===0?0:r===1?1:-Math.pow(2,10*(r-1))*Math.sin((r-1.1)*5*Math.PI)},Out:function(r){return r===0?0:r===1?1:Math.pow(2,-10*r)*Math.sin((r-.1)*5*Math.PI)+1},InOut:function(r){return r===0?0:r===1?1:(r*=2,r<1?-.5*Math.pow(2,10*(r-1))*Math.sin((r-1.1)*5*Math.PI):.5*Math.pow(2,-10*(r-1))*Math.sin((r-1.1)*5*Math.PI)+1)}}),Back:Object.freeze({In:function(r){var e=1.70158;return r===1?1:r*r*((e+1)*r-e)},Out:function(r){var e=1.70158;return r===0?0:--r*r*((e+1)*r+e)+1},InOut:function(r){var e=2.5949095;return(r*=2)<1?.5*(r*r*((e+1)*r-e)):.5*((r-=2)*r*((e+1)*r+e)+2)}}),Bounce:Object.freeze({In:function(r){return 1-vi.Bounce.Out(1-r)},Out:function(r){return r<1/2.75?7.5625*r*r:r<2/2.75?7.5625*(r-=1.5/2.75)*r+.75:r<2.5/2.75?7.5625*(r-=2.25/2.75)*r+.9375:7.5625*(r-=2.625/2.75)*r+.984375},InOut:function(r){return r<.5?vi.Bounce.In(r*2)*.5:vi.Bounce.Out(r*2-1)*.5+.5}}),generatePow:function(r){return r===void 0&&(r=4),r=r<Number.EPSILON?Number.EPSILON:r,r=r>1e4?1e4:r,{In:function(e){return Math.pow(e,r)},Out:function(e){return 1-Math.pow(1-e,r)},InOut:function(e){return e<.5?Math.pow(e*2,r)/2:(1-Math.pow(2-e*2,r))/2+.5}}}}),qr=function(){return performance.now()},Hq=function(){function r(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._tweens={},this._tweensAddedDuringUpdate={},this.add.apply(this,e)}return r.prototype.getAll=function(){var e=this;return Object.keys(this._tweens).map(function(t){return e._tweens[t]})},r.prototype.removeAll=function(){this._tweens={}},r.prototype.add=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var i=0,s=t;i<s.length;i++){var o=s[i];(e=o._group)===null||e===void 0||e.remove(o),o._group=this,this._tweens[o.getId()]=o,this._tweensAddedDuringUpdate[o.getId()]=o}},r.prototype.remove=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n=0,i=e;n<i.length;n++){var s=i[n];s._group=void 0,delete this._tweens[s.getId()],delete this._tweensAddedDuringUpdate[s.getId()]}},r.prototype.allStopped=function(){return this.getAll().every(function(e){return!e.isPlaying()})},r.prototype.update=function(e,t){e===void 0&&(e=qr()),t===void 0&&(t=!0);var n=Object.keys(this._tweens);if(n.length!==0)for(;n.length>0;){this._tweensAddedDuringUpdate={};for(var i=0;i<n.length;i++){var s=this._tweens[n[i]],o=!t;s&&s.update(e,o)===!1&&!t&&this.remove(s)}n=Object.keys(this._tweensAddedDuringUpdate)}},r}(),j4={Linear:function(r,e){var t=r.length-1,n=t*e,i=Math.floor(n),s=j4.Utils.Linear;return e<0?s(r[0],r[1],n):e>1?s(r[t],r[t-1],t-n):s(r[i],r[i+1>t?t:i+1],n-i)},Utils:{Linear:function(r,e,t){return(e-r)*t+r}}},m6=function(){function r(){}return r.nextId=function(){return r._nextId++},r._nextId=0,r}(),J4=new Hq,f6=function(){function r(e,t){this._isPaused=!1,this._pauseStart=0,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._isDynamic=!1,this._initialRepeat=0,this._repeat=0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,this._startTime=0,this._easingFunction=vi.Linear.None,this._interpolationFunction=j4.Linear,this._chainedTweens=[],this._onStartCallbackFired=!1,this._onEveryStartCallbackFired=!1,this._id=m6.nextId(),this._isChainStopped=!1,this._propertiesAreSetUp=!1,this._goToEnd=!1,this._object=e,typeof t=="object"?(this._group=t,t.add(this)):t===!0&&(this._group=J4,J4.add(this))}return r.prototype.getId=function(){return this._id},r.prototype.isPlaying=function(){return this._isPlaying},r.prototype.isPaused=function(){return this._isPaused},r.prototype.getDuration=function(){return this._duration},r.prototype.to=function(e,t){if(t===void 0&&(t=1e3),this._isPlaying)throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");return this._valuesEnd=e,this._propertiesAreSetUp=!1,this._duration=t<0?0:t,this},r.prototype.duration=function(e){return e===void 0&&(e=1e3),this._duration=e<0?0:e,this},r.prototype.dynamic=function(e){return e===void 0&&(e=!1),this._isDynamic=e,this},r.prototype.start=function(e,t){if(e===void 0&&(e=qr()),t===void 0&&(t=!1),this._isPlaying)return this;if(this._repeat=this._initialRepeat,this._reversed){this._reversed=!1;for(var n in this._valuesStartRepeat)this._swapEndStartRepeatValues(n),this._valuesStart[n]=this._valuesStartRepeat[n]}if(this._isPlaying=!0,this._isPaused=!1,this._onStartCallbackFired=!1,this._onEveryStartCallbackFired=!1,this._isChainStopped=!1,this._startTime=e,this._startTime+=this._delayTime,!this._propertiesAreSetUp||t){if(this._propertiesAreSetUp=!0,!this._isDynamic){var i={};for(var s in this._valuesEnd)i[s]=this._valuesEnd[s];this._valuesEnd=i}this._setupProperties(this._object,this._valuesStart,this._valuesEnd,this._valuesStartRepeat,t)}return this},r.prototype.startFromCurrentValues=function(e){return this.start(e,!0)},r.prototype._setupProperties=function(e,t,n,i,s){for(var o in n){var a=e[o],l=Array.isArray(a),c=l?"array":typeof a,h=!l&&Array.isArray(n[o]);if(!(c==="undefined"||c==="function")){if(h){var u=n[o];if(u.length===0)continue;for(var d=[a],q=0,m=u.length;q<m;q+=1){var g=this._handleRelativeValue(a,u[q]);if(isNaN(g)){h=!1,console.warn("Found invalid interpolation list. Skipping.");break}d.push(g)}h&&(n[o]=d)}if((c==="object"||l)&&a&&!h){t[o]=l?[]:{};var p=a;for(var f in p)t[o][f]=p[f];i[o]=l?[]:{};var u=n[o];if(!this._isDynamic){var v={};for(var f in u)v[f]=u[f];n[o]=u=v}this._setupProperties(p,t[o],u,i[o],s)}else(typeof t[o]>"u"||s)&&(t[o]=a),l||(t[o]*=1),h?i[o]=n[o].slice().reverse():i[o]=t[o]||0}}},r.prototype.stop=function(){return this._isChainStopped||(this._isChainStopped=!0,this.stopChainedTweens()),this._isPlaying?(this._isPlaying=!1,this._isPaused=!1,this._onStopCallback&&this._onStopCallback(this._object),this):this},r.prototype.end=function(){return this._goToEnd=!0,this.update(this._startTime+this._duration),this},r.prototype.pause=function(e){return e===void 0&&(e=qr()),this._isPaused||!this._isPlaying?this:(this._isPaused=!0,this._pauseStart=e,this)},r.prototype.resume=function(e){return e===void 0&&(e=qr()),!this._isPaused||!this._isPlaying?this:(this._isPaused=!1,this._startTime+=e-this._pauseStart,this._pauseStart=0,this)},r.prototype.stopChainedTweens=function(){for(var e=0,t=this._chainedTweens.length;e<t;e++)this._chainedTweens[e].stop();return this},r.prototype.group=function(e){return e?(e.add(this),this):(console.warn("tween.group() without args has been removed, use group.add(tween) instead."),this)},r.prototype.remove=function(){var e;return(e=this._group)===null||e===void 0||e.remove(this),this},r.prototype.delay=function(e){return e===void 0&&(e=0),this._delayTime=e,this},r.prototype.repeat=function(e){return e===void 0&&(e=0),this._initialRepeat=e,this._repeat=e,this},r.prototype.repeatDelay=function(e){return this._repeatDelayTime=e,this},r.prototype.yoyo=function(e){return e===void 0&&(e=!1),this._yoyo=e,this},r.prototype.easing=function(e){return e===void 0&&(e=vi.Linear.None),this._easingFunction=e,this},r.prototype.interpolation=function(e){return e===void 0&&(e=j4.Linear),this._interpolationFunction=e,this},r.prototype.chain=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this._chainedTweens=e,this},r.prototype.onStart=function(e){return this._onStartCallback=e,this},r.prototype.onEveryStart=function(e){return this._onEveryStartCallback=e,this},r.prototype.onUpdate=function(e){return this._onUpdateCallback=e,this},r.prototype.onRepeat=function(e){return this._onRepeatCallback=e,this},r.prototype.onComplete=function(e){return this._onCompleteCallback=e,this},r.prototype.onStop=function(e){return this._onStopCallback=e,this},r.prototype.update=function(e,t){var n=this,i;if(e===void 0&&(e=qr()),t===void 0&&(t=r.autoStartOnUpdate),this._isPaused)return!0;var s;if(!this._goToEnd&&!this._isPlaying)if(t)this.start(e,!0);else return!1;if(this._goToEnd=!1,e<this._startTime)return!0;this._onStartCallbackFired===!1&&(this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),this._onEveryStartCallbackFired===!1&&(this._onEveryStartCallback&&this._onEveryStartCallback(this._object),this._onEveryStartCallbackFired=!0);var o=e-this._startTime,a=this._duration+((i=this._repeatDelayTime)!==null&&i!==void 0?i:this._delayTime),l=this._duration+this._repeat*a,c=function(){if(n._duration===0||o>l)return 1;var g=Math.trunc(o/a),p=o-g*a,f=Math.min(p/n._duration,1);return f===0&&o===n._duration?1:f},h=c(),u=this._easingFunction(h);if(this._updateProperties(this._object,this._valuesStart,this._valuesEnd,u),this._onUpdateCallback&&this._onUpdateCallback(this._object,h),this._duration===0||o>=this._duration)if(this._repeat>0){var d=Math.min(Math.trunc((o-this._duration)/a)+1,this._repeat);isFinite(this._repeat)&&(this._repeat-=d);for(s in this._valuesStartRepeat)!this._yoyo&&typeof this._valuesEnd[s]=="string"&&(this._valuesStartRepeat[s]=this._valuesStartRepeat[s]+parseFloat(this._valuesEnd[s])),this._yoyo&&this._swapEndStartRepeatValues(s),this._valuesStart[s]=this._valuesStartRepeat[s];return this._yoyo&&(this._reversed=!this._reversed),this._startTime+=a*d,this._onRepeatCallback&&this._onRepeatCallback(this._object),this._onEveryStartCallbackFired=!1,!0}else{this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var q=0,m=this._chainedTweens.length;q<m;q++)this._chainedTweens[q].start(this._startTime+this._duration,!1);return this._isPlaying=!1,!1}return!0},r.prototype._updateProperties=function(e,t,n,i){for(var s in n)if(t[s]!==void 0){var o=t[s]||0,a=n[s],l=Array.isArray(e[s]),c=Array.isArray(a),h=!l&&c;h?e[s]=this._interpolationFunction(a,i):typeof a=="object"&&a?this._updateProperties(e[s],o,a,i):(a=this._handleRelativeValue(o,a),typeof a=="number"&&(e[s]=o+(a-o)*i))}},r.prototype._handleRelativeValue=function(e,t){return typeof t!="string"?t:t.charAt(0)==="+"||t.charAt(0)==="-"?e+parseFloat(t):parseFloat(t)},r.prototype._swapEndStartRepeatValues=function(e){var t=this._valuesStartRepeat[e],n=this._valuesEnd[e];typeof n=="string"?this._valuesStartRepeat[e]=this._valuesStartRepeat[e]+parseFloat(n):this._valuesStartRepeat[e]=this._valuesEnd[e],this._valuesEnd[e]=t},r.autoStartOnUpdate=!1,r}();m6.nextId;var t1=J4;t1.getAll.bind(t1),t1.removeAll.bind(t1),t1.add.bind(t1),t1.remove.bind(t1),t1.update.bind(t1);const p6={type:"change"},K4={type:"start"},g6={type:"end"},Do=new ii,x6=new g1,Gq=Math.cos(70*va.DEG2RAD),Dt=new L,mn=2*Math.PI,pt={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},Q4=1e-6;class Wq extends k5{constructor(e,t=null){super(e,t),this.state=pt.NONE,this.enabled=!0,this.target=new L,this.cursor=new L,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Xn.ROTATE,MIDDLE:Xn.DOLLY,RIGHT:Xn.PAN},this.touches={ONE:i1.ROTATE,TWO:i1.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new L,this._lastQuaternion=new Wt,this._lastTargetPosition=new L,this._quat=new Wt().setFromUnitVectors(e.up,new L(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new P4,this._sphericalDelta=new P4,this._scale=1,this._panOffset=new L,this._rotateStart=new $,this._rotateEnd=new $,this._rotateDelta=new $,this._panStart=new $,this._panEnd=new $,this._panDelta=new $,this._dollyStart=new $,this._dollyEnd=new $,this._dollyDelta=new $,this._dollyDirection=new L,this._mouse=new $,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=Yq.bind(this),this._onPointerDown=Xq.bind(this),this._onPointerUp=$q.bind(this),this._onContextMenu=tm.bind(this),this._onMouseWheel=Jq.bind(this),this._onKeyDown=Kq.bind(this),this._onTouchStart=Qq.bind(this),this._onTouchMove=em.bind(this),this._onMouseDown=Zq.bind(this),this._onMouseMove=jq.bind(this),this._interceptControlDown=nm.bind(this),this._interceptControlUp=im.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(e){e.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=e}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(p6),this.update(),this.state=pt.NONE}update(e=null){const t=this.object.position;Dt.copy(t).sub(this.target),Dt.applyQuaternion(this._quat),this._spherical.setFromVector3(Dt),this.autoRotate&&this.state===pt.NONE&&this._rotateLeft(this._getAutoRotationAngle(e)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,i=this.maxAzimuthAngle;isFinite(n)&&isFinite(i)&&(n<-Math.PI?n+=mn:n>Math.PI&&(n-=mn),i<-Math.PI?i+=mn:i>Math.PI&&(i-=mn),n<=i?this._spherical.theta=Math.max(n,Math.min(i,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+i)/2?Math.max(n,this._spherical.theta):Math.min(i,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let s=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const o=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),s=o!=this._spherical.radius}if(Dt.setFromSpherical(this._spherical),Dt.applyQuaternion(this._quatInverse),t.copy(this.target).add(Dt),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let o=null;if(this.object.isPerspectiveCamera){const a=Dt.length();o=this._clampDistance(a*this._scale);const l=a-o;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),s=!!l}else if(this.object.isOrthographicCamera){const a=new L(this._mouse.x,this._mouse.y,0);a.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),s=l!==this.object.zoom;const c=new L(this._mouse.x,this._mouse.y,0);c.unproject(this.object),this.object.position.sub(c).add(a),this.object.updateMatrixWorld(),o=Dt.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;o!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(o).add(this.object.position):(Do.origin.copy(this.object.position),Do.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(Do.direction))<Gq?this.object.lookAt(this.target):(x6.setFromNormalAndCoplanarPoint(this.object.up,this.target),Do.intersectPlane(x6,this.target))))}else if(this.object.isOrthographicCamera){const o=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),o!==this.object.zoom&&(this.object.updateProjectionMatrix(),s=!0)}return this._scale=1,this._performCursorZoom=!1,s||this._lastPosition.distanceToSquared(this.object.position)>Q4||8*(1-this._lastQuaternion.dot(this.object.quaternion))>Q4||this._lastTargetPosition.distanceToSquared(this.target)>Q4?(this.dispatchEvent(p6),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(e){return e!==null?mn/60*this.autoRotateSpeed*e:mn/60/60*this.autoRotateSpeed}_getZoomScale(e){const t=Math.abs(e*.01);return Math.pow(.95,this.zoomSpeed*t)}_rotateLeft(e){this._sphericalDelta.theta-=e}_rotateUp(e){this._sphericalDelta.phi-=e}_panLeft(e,t){Dt.setFromMatrixColumn(t,0),Dt.multiplyScalar(-e),this._panOffset.add(Dt)}_panUp(e,t){this.screenSpacePanning===!0?Dt.setFromMatrixColumn(t,1):(Dt.setFromMatrixColumn(t,0),Dt.crossVectors(this.object.up,Dt)),Dt.multiplyScalar(e),this._panOffset.add(Dt)}_pan(e,t){const n=this.domElement;if(this.object.isPerspectiveCamera){const i=this.object.position;Dt.copy(i).sub(this.target);let s=Dt.length();s*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*e*s/n.clientHeight,this.object.matrix),this._panUp(2*t*s/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(e*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(t*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(e){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(e,t){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),i=e-n.left,s=t-n.top,o=n.width,a=n.height;this._mouse.x=i/o*2-1,this._mouse.y=-(s/a)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(e){return Math.max(this.minDistance,Math.min(this.maxDistance,e))}_handleMouseDownRotate(e){this._rotateStart.set(e.clientX,e.clientY)}_handleMouseDownDolly(e){this._updateZoomParameters(e.clientX,e.clientX),this._dollyStart.set(e.clientX,e.clientY)}_handleMouseDownPan(e){this._panStart.set(e.clientX,e.clientY)}_handleMouseMoveRotate(e){this._rotateEnd.set(e.clientX,e.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(mn*this._rotateDelta.x/t.clientHeight),this._rotateUp(mn*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(e){this._dollyEnd.set(e.clientX,e.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(e){this._panEnd.set(e.clientX,e.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(e){this._updateZoomParameters(e.clientX,e.clientY),e.deltaY<0?this._dollyIn(this._getZoomScale(e.deltaY)):e.deltaY>0&&this._dollyOut(this._getZoomScale(e.deltaY)),this.update()}_handleKeyDown(e){let t=!1;switch(e.code){case this.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(mn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),t=!0;break;case this.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateUp(-mn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),t=!0;break;case this.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(mn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),t=!0;break;case this.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?this.enableRotate&&this._rotateLeft(-mn*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),t=!0;break}t&&(e.preventDefault(),this.update())}_handleTouchStartRotate(e){if(this._pointers.length===1)this._rotateStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._rotateStart.set(n,i)}}_handleTouchStartPan(e){if(this._pointers.length===1)this._panStart.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._panStart.set(n,i)}}_handleTouchStartDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,i=e.pageY-t.y,s=Math.sqrt(n*n+i*i);this._dollyStart.set(0,s)}_handleTouchStartDollyPan(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enablePan&&this._handleTouchStartPan(e)}_handleTouchStartDollyRotate(e){this.enableZoom&&this._handleTouchStartDolly(e),this.enableRotate&&this._handleTouchStartRotate(e)}_handleTouchMoveRotate(e){if(this._pointers.length==1)this._rotateEnd.set(e.pageX,e.pageY);else{const n=this._getSecondPointerPosition(e),i=.5*(e.pageX+n.x),s=.5*(e.pageY+n.y);this._rotateEnd.set(i,s)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const t=this.domElement;this._rotateLeft(mn*this._rotateDelta.x/t.clientHeight),this._rotateUp(mn*this._rotateDelta.y/t.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(e){if(this._pointers.length===1)this._panEnd.set(e.pageX,e.pageY);else{const t=this._getSecondPointerPosition(e),n=.5*(e.pageX+t.x),i=.5*(e.pageY+t.y);this._panEnd.set(n,i)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(e){const t=this._getSecondPointerPosition(e),n=e.pageX-t.x,i=e.pageY-t.y,s=Math.sqrt(n*n+i*i);this._dollyEnd.set(0,s),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const o=(e.pageX+t.x)*.5,a=(e.pageY+t.y)*.5;this._updateZoomParameters(o,a)}_handleTouchMoveDollyPan(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enablePan&&this._handleTouchMovePan(e)}_handleTouchMoveDollyRotate(e){this.enableZoom&&this._handleTouchMoveDolly(e),this.enableRotate&&this._handleTouchMoveRotate(e)}_addPointer(e){this._pointers.push(e.pointerId)}_removePointer(e){delete this._pointerPositions[e.pointerId];for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId){this._pointers.splice(t,1);return}}_isTrackingPointer(e){for(let t=0;t<this._pointers.length;t++)if(this._pointers[t]==e.pointerId)return!0;return!1}_trackPointer(e){let t=this._pointerPositions[e.pointerId];t===void 0&&(t=new $,this._pointerPositions[e.pointerId]=t),t.set(e.pageX,e.pageY)}_getSecondPointerPosition(e){const t=e.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[t]}_customWheelEvent(e){const t=e.deltaMode,n={clientX:e.clientX,clientY:e.clientY,deltaY:e.deltaY};switch(t){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return e.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function Xq(r){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(r.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(r)&&(this._addPointer(r),r.pointerType==="touch"?this._onTouchStart(r):this._onMouseDown(r)))}function Yq(r){this.enabled!==!1&&(r.pointerType==="touch"?this._onTouchMove(r):this._onMouseMove(r))}function $q(r){switch(this._removePointer(r),this._pointers.length){case 0:this.domElement.releasePointerCapture(r.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(g6),this.state=pt.NONE;break;case 1:const e=this._pointers[0],t=this._pointerPositions[e];this._onTouchStart({pointerId:e,pageX:t.x,pageY:t.y});break}}function Zq(r){let e;switch(r.button){case 0:e=this.mouseButtons.LEFT;break;case 1:e=this.mouseButtons.MIDDLE;break;case 2:e=this.mouseButtons.RIGHT;break;default:e=-1}switch(e){case Xn.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(r),this.state=pt.DOLLY;break;case Xn.ROTATE:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=pt.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=pt.ROTATE}break;case Xn.PAN:if(r.ctrlKey||r.metaKey||r.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(r),this.state=pt.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(r),this.state=pt.PAN}break;default:this.state=pt.NONE}this.state!==pt.NONE&&this.dispatchEvent(K4)}function jq(r){switch(this.state){case pt.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(r);break;case pt.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(r);break;case pt.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(r);break}}function Jq(r){this.enabled===!1||this.enableZoom===!1||this.state!==pt.NONE||(r.preventDefault(),this.dispatchEvent(K4),this._handleMouseWheel(this._customWheelEvent(r)),this.dispatchEvent(g6))}function Kq(r){this.enabled!==!1&&this._handleKeyDown(r)}function Qq(r){switch(this._trackPointer(r),this._pointers.length){case 1:switch(this.touches.ONE){case i1.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(r),this.state=pt.TOUCH_ROTATE;break;case i1.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(r),this.state=pt.TOUCH_PAN;break;default:this.state=pt.NONE}break;case 2:switch(this.touches.TWO){case i1.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(r),this.state=pt.TOUCH_DOLLY_PAN;break;case i1.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(r),this.state=pt.TOUCH_DOLLY_ROTATE;break;default:this.state=pt.NONE}break;default:this.state=pt.NONE}this.state!==pt.NONE&&this.dispatchEvent(K4)}function em(r){switch(this._trackPointer(r),this.state){case pt.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(r),this.update();break;case pt.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(r),this.update();break;case pt.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(r),this.update();break;case pt.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(r),this.update();break;default:this.state=pt.NONE}}function tm(r){this.enabled!==!1&&r.preventDefault()}function nm(r){r.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function im(r){r.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}class sm extends Wq{constructor(e,t){super(e,t),this.screenSpacePanning=!1,this.mouseButtons={LEFT:Xn.PAN,MIDDLE:Xn.DOLLY,RIGHT:Xn.ROTATE},this.touches={ONE:i1.PAN,TWO:i1.DOLLY_ROTATE}}}const _6={VERTEX:"vertex"},U1={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},mr=["x","y","z","w"],Jt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let y6=1234567;const v6=Math.PI/180,w6=180/Math.PI;function ko(){const r=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Jt[r&255]+Jt[r>>8&255]+Jt[r>>16&255]+Jt[r>>24&255]+"-"+Jt[e&255]+Jt[e>>8&255]+"-"+Jt[e>>16&15|64]+Jt[e>>24&255]+"-"+Jt[t&63|128]+Jt[t>>8&255]+"-"+Jt[t>>16&255]+Jt[t>>24&255]+Jt[n&255]+Jt[n>>8&255]+Jt[n>>16&255]+Jt[n>>24&255]).toLowerCase()}function ct(r,e,t){return Math.max(e,Math.min(t,r))}function e0(r,e){return(r%e+e)%e}function rm(r,e,t,n,i){return n+(r-e)*(i-n)/(t-e)}function om(r,e,t){return r!==e?(t-r)/(e-r):0}function fr(r,e,t){return(1-t)*r+t*e}function am(r,e,t,n){return fr(r,e,1-Math.exp(-t*n))}function lm(r,e=1){return e-Math.abs(e0(r,e*2)-e)}function cm(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*(3-2*r))}function hm(r,e,t){return r<=e?0:r>=t?1:(r=(r-e)/(t-e),r*r*r*(r*(r*6-15)+10))}function um(r,e){return r+Math.floor(Math.random()*(e-r+1))}function dm(r,e){return r+Math.random()*(e-r)}function qm(r){return r*(.5-Math.random())}function mm(r){r!==void 0&&(y6=r);let e=y6+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function fm(r){return r*v6}function pm(r){return r*w6}function gm(r){return(r&r-1)===0&&r!==0}function xm(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function _m(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function ym(r,e,t,n,i){const s=Math.cos,o=Math.sin,a=s(t/2),l=o(t/2),c=s((e+n)/2),h=o((e+n)/2),u=s((e-n)/2),d=o((e-n)/2),q=s((n-e)/2),m=o((n-e)/2);switch(i){case"XYX":r.set(a*h,l*u,l*d,a*c);break;case"YZY":r.set(l*d,a*h,l*u,a*c);break;case"ZXZ":r.set(l*u,l*d,a*h,a*c);break;case"XZX":r.set(a*h,l*m,l*q,a*c);break;case"YXY":r.set(l*q,a*h,l*m,a*c);break;case"ZYZ":r.set(l*m,l*q,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+i)}}function Bn(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function mt(r,e){switch(e.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const vm={DEG2RAD:v6,RAD2DEG:w6,generateUUID:ko,clamp:ct,euclideanModulo:e0,mapLinear:rm,inverseLerp:om,lerp:fr,damp:am,pingpong:lm,smoothstep:cm,smootherstep:hm,randInt:um,randFloat:dm,randFloatSpread:qm,seededRandom:mm,degToRad:fm,radToDeg:pm,isPowerOfTwo:gm,ceilPowerOfTwo:xm,floorPowerOfTwo:_m,setQuaternionFromProperEuler:ym,normalize:mt,denormalize:Bn},t0=0,wm=1015,n0="",Vn="srgb",M6="srgb-linear",S6="linear",pr="srgb",Fo=35044,ls=2e3,i0=2001;class wi{constructor(e,t,n,i,s,o,a,l,c){wi.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,n,i,s,o,a,l,c)}set(e,t,n,i,s,o,a,l,c){const h=this.elements;return h[0]=e,h[1]=i,h[2]=a,h[3]=t,h[4]=s,h[5]=l,h[6]=n,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],this}extractBasis(e,t,n){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,o=n[0],a=n[3],l=n[6],c=n[1],h=n[4],u=n[7],d=n[2],q=n[5],m=n[8],g=i[0],p=i[3],f=i[6],v=i[1],y=i[4],_=i[7],T=i[2],E=i[5],S=i[8];return s[0]=o*g+a*v+l*T,s[3]=o*p+a*y+l*E,s[6]=o*f+a*_+l*S,s[1]=c*g+h*v+u*T,s[4]=c*p+h*y+u*E,s[7]=c*f+h*_+u*S,s[2]=d*g+q*v+m*T,s[5]=d*p+q*y+m*E,s[8]=d*f+q*_+m*S,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8];return t*o*h-t*a*c-n*s*h+n*a*l+i*s*c-i*o*l}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=h*o-a*c,d=a*l-h*s,q=c*s-o*l,m=t*u+n*d+i*q;if(m===0)return this.set(0,0,0,0,0,0,0,0,0);const g=1/m;return e[0]=u*g,e[1]=(i*c-h*n)*g,e[2]=(a*n-i*o)*g,e[3]=d*g,e[4]=(h*t-i*l)*g,e[5]=(i*s-a*t)*g,e[6]=q*g,e[7]=(n*l-c*t)*g,e[8]=(o*t-n*s)*g,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,n,i,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(n*l,n*c,-n*(l*o+c*a)+o+e,-i*c,i*l,-i*(-c*o+l*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(s0.makeScale(e,t)),this}rotate(e){return this.premultiply(s0.makeRotation(-e)),this}translate(e,t){return this.premultiply(s0.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,n,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<9;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<9;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const s0=new wi,b6=new wi().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),E6=new wi().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function Mm(){const r={enabled:!0,workingColorSpace:M6,spaces:{},convert:function(i,s,o){return this.enabled===!1||s===o||!s||!o||(this.spaces[s].transfer===pr&&(i.r=cs(i.r),i.g=cs(i.g),i.b=cs(i.b)),this.spaces[s].primaries!==this.spaces[o].primaries&&(i.applyMatrix3(this.spaces[s].toXYZ),i.applyMatrix3(this.spaces[o].fromXYZ)),this.spaces[o].transfer===pr&&(i.r=hs(i.r),i.g=hs(i.g),i.b=hs(i.b))),i},fromWorkingColorSpace:function(i,s){return this.convert(i,this.workingColorSpace,s)},toWorkingColorSpace:function(i,s){return this.convert(i,s,this.workingColorSpace)},getPrimaries:function(i){return this.spaces[i].primaries},getTransfer:function(i){return i===n0?S6:this.spaces[i].transfer},getLuminanceCoefficients:function(i,s=this.workingColorSpace){return i.fromArray(this.spaces[s].luminanceCoefficients)},define:function(i){Object.assign(this.spaces,i)},_getMatrix:function(i,s,o){return i.copy(this.spaces[s].toXYZ).multiply(this.spaces[o].fromXYZ)},_getDrawingBufferColorSpace:function(i){return this.spaces[i].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(i=this.workingColorSpace){return this.spaces[i].workingColorSpaceConfig.unpackColorSpace}},e=[.64,.33,.3,.6,.15,.06],t=[.2126,.7152,.0722],n=[.3127,.329];return r.define({[M6]:{primaries:e,whitePoint:n,transfer:S6,toXYZ:b6,fromXYZ:E6,luminanceCoefficients:t,workingColorSpaceConfig:{unpackColorSpace:Vn},outputColorSpaceConfig:{drawingBufferColorSpace:Vn}},[Vn]:{primaries:e,whitePoint:n,transfer:pr,toXYZ:b6,fromXYZ:E6,luminanceCoefficients:t,outputColorSpaceConfig:{drawingBufferColorSpace:Vn}}}),r}const kt=Mm();function cs(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function hs(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}const T6={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},O1={h:0,s:0,l:0},Uo={h:0,s:0,l:0};function r0(r,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?r+(e-r)*6*t:t<1/2?e:t<2/3?r+(e-r)*6*(2/3-t):r}class o0{constructor(e,t,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,n)}set(e,t,n){if(t===void 0&&n===void 0){const i=e;i&&i.isColor?this.copy(i):typeof i=="number"?this.setHex(i):typeof i=="string"&&this.setStyle(i)}else this.setRGB(e,t,n);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Vn){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,kt.toWorkingColorSpace(this,t),this}setRGB(e,t,n,i=kt.workingColorSpace){return this.r=e,this.g=t,this.b=n,kt.toWorkingColorSpace(this,i),this}setHSL(e,t,n,i=kt.workingColorSpace){if(e=e0(e,1),t=ct(t,0,1),n=ct(n,0,1),t===0)this.r=this.g=this.b=n;else{const s=n<=.5?n*(1+t):n+t-n*t,o=2*n-s;this.r=r0(o,s,e+1/3),this.g=r0(o,s,e),this.b=r0(o,s,e-1/3)}return kt.toWorkingColorSpace(this,i),this}setStyle(e,t=Vn){function n(s){s!==void 0&&parseFloat(s)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(e)){let s;const o=i[1],a=i[2];switch(o){case"rgb":case"rgba":if(s=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(255,parseInt(s[1],10))/255,Math.min(255,parseInt(s[2],10))/255,Math.min(255,parseInt(s[3],10))/255,t);if(s=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setRGB(Math.min(100,parseInt(s[1],10))/100,Math.min(100,parseInt(s[2],10))/100,Math.min(100,parseInt(s[3],10))/100,t);break;case"hsl":case"hsla":if(s=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return n(s[4]),this.setHSL(parseFloat(s[1])/360,parseFloat(s[2])/100,parseFloat(s[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(e)){const s=i[1],o=s.length;if(o===3)return this.setRGB(parseInt(s.charAt(0),16)/15,parseInt(s.charAt(1),16)/15,parseInt(s.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(s,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=Vn){const n=T6[e.toLowerCase()];return n!==void 0?this.setHex(n,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=cs(e.r),this.g=cs(e.g),this.b=cs(e.b),this}copyLinearToSRGB(e){return this.r=hs(e.r),this.g=hs(e.g),this.b=hs(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Vn){return kt.fromWorkingColorSpace(Kt.copy(this),e),Math.round(ct(Kt.r*255,0,255))*65536+Math.round(ct(Kt.g*255,0,255))*256+Math.round(ct(Kt.b*255,0,255))}getHexString(e=Vn){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=kt.workingColorSpace){kt.fromWorkingColorSpace(Kt.copy(this),t);const n=Kt.r,i=Kt.g,s=Kt.b,o=Math.max(n,i,s),a=Math.min(n,i,s);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case n:l=(i-s)/u+(i<s?6:0);break;case i:l=(s-n)/u+2;break;case s:l=(n-i)/u+4;break}l/=6}return e.h=l,e.s=c,e.l=h,e}getRGB(e,t=kt.workingColorSpace){return kt.fromWorkingColorSpace(Kt.copy(this),t),e.r=Kt.r,e.g=Kt.g,e.b=Kt.b,e}getStyle(e=Vn){kt.fromWorkingColorSpace(Kt.copy(this),e);const t=Kt.r,n=Kt.g,i=Kt.b;return e!==Vn?`color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(e,t,n){return this.getHSL(O1),this.setHSL(O1.h+e,O1.s+t,O1.l+n)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,n){return this.r=e.r+(t.r-e.r)*n,this.g=e.g+(t.g-e.g)*n,this.b=e.b+(t.b-e.b)*n,this}lerpHSL(e,t){this.getHSL(O1),e.getHSL(Uo);const n=fr(O1.h,Uo.h,t),i=fr(O1.s,Uo.s,t),s=fr(O1.l,Uo.l,t);return this.setHSL(n,i,s),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,n=this.g,i=this.b,s=e.elements;return this.r=s[0]*t+s[3]*n+s[6]*i,this.g=s[1]*t+s[4]*n+s[7]*i,this.b=s[2]*t+s[5]*n+s[8]*i,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Kt=new o0;o0.NAMES=T6;class Sm{constructor(e=0,t=0,n=0,i=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=n,this._w=i}static slerpFlat(e,t,n,i,s,o,a){let l=n[i+0],c=n[i+1],h=n[i+2],u=n[i+3];const d=s[o+0],q=s[o+1],m=s[o+2],g=s[o+3];if(a===0){e[t+0]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u;return}if(a===1){e[t+0]=d,e[t+1]=q,e[t+2]=m,e[t+3]=g;return}if(u!==g||l!==d||c!==q||h!==m){let p=1-a;const f=l*d+c*q+h*m+u*g,v=f>=0?1:-1,y=1-f*f;if(y>Number.EPSILON){const T=Math.sqrt(y),E=Math.atan2(T,f*v);p=Math.sin(p*E)/T,a=Math.sin(a*E)/T}const _=a*v;if(l=l*p+d*_,c=c*p+q*_,h=h*p+m*_,u=u*p+g*_,p===1-a){const T=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=T,c*=T,h*=T,u*=T}}e[t]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u}static multiplyQuaternionsFlat(e,t,n,i,s,o){const a=n[i],l=n[i+1],c=n[i+2],h=n[i+3],u=s[o],d=s[o+1],q=s[o+2],m=s[o+3];return e[t]=a*m+h*u+l*q-c*d,e[t+1]=l*m+h*d+c*u-a*q,e[t+2]=c*m+h*q+a*d-l*u,e[t+3]=h*m-a*u-l*d-c*q,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,n,i){return this._x=e,this._y=t,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const n=e._x,i=e._y,s=e._z,o=e._order,a=Math.cos,l=Math.sin,c=a(n/2),h=a(i/2),u=a(s/2),d=l(n/2),q=l(i/2),m=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*q*m,this._y=c*q*u-d*h*m,this._z=c*h*m+d*q*u,this._w=c*h*u-d*q*m;break;case"YXZ":this._x=d*h*u+c*q*m,this._y=c*q*u-d*h*m,this._z=c*h*m-d*q*u,this._w=c*h*u+d*q*m;break;case"ZXY":this._x=d*h*u-c*q*m,this._y=c*q*u+d*h*m,this._z=c*h*m+d*q*u,this._w=c*h*u-d*q*m;break;case"ZYX":this._x=d*h*u-c*q*m,this._y=c*q*u+d*h*m,this._z=c*h*m-d*q*u,this._w=c*h*u+d*q*m;break;case"YZX":this._x=d*h*u+c*q*m,this._y=c*q*u+d*h*m,this._z=c*h*m-d*q*u,this._w=c*h*u-d*q*m;break;case"XZY":this._x=d*h*u-c*q*m,this._y=c*q*u-d*h*m,this._z=c*h*m+d*q*u,this._w=c*h*u+d*q*m;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const n=t/2,i=Math.sin(n);return this._x=e.x*i,this._y=e.y*i,this._z=e.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,n=t[0],i=t[4],s=t[8],o=t[1],a=t[5],l=t[9],c=t[2],h=t[6],u=t[10],d=n+a+u;if(d>0){const q=.5/Math.sqrt(d+1);this._w=.25/q,this._x=(h-l)*q,this._y=(s-c)*q,this._z=(o-i)*q}else if(n>a&&n>u){const q=2*Math.sqrt(1+n-a-u);this._w=(h-l)/q,this._x=.25*q,this._y=(i+o)/q,this._z=(s+c)/q}else if(a>u){const q=2*Math.sqrt(1+a-n-u);this._w=(s-c)/q,this._x=(i+o)/q,this._y=.25*q,this._z=(l+h)/q}else{const q=2*Math.sqrt(1+u-n-a);this._w=(o-i)/q,this._x=(s+c)/q,this._y=(l+h)/q,this._z=.25*q}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let n=e.dot(t)+1;return n<Number.EPSILON?(n=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=n):(this._x=0,this._y=-e.z,this._z=e.y,this._w=n)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=n),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(ct(this.dot(e),-1,1)))}rotateTowards(e,t){const n=this.angleTo(e);if(n===0)return this;const i=Math.min(1,t/n);return this.slerp(e,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const n=e._x,i=e._y,s=e._z,o=e._w,a=t._x,l=t._y,c=t._z,h=t._w;return this._x=n*h+o*a+i*c-s*l,this._y=i*h+o*l+s*a-n*c,this._z=s*h+o*c+n*l-i*a,this._w=o*h-n*a-i*l-s*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const n=this._x,i=this._y,s=this._z,o=this._w;let a=o*e._w+n*e._x+i*e._y+s*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=n,this._y=i,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const q=1-t;return this._w=q*o+t*this._w,this._x=q*n+t*this._x,this._y=q*i+t*this._y,this._z=q*s+t*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-t)*h)/c,d=Math.sin(t*h)/c;return this._w=o*u+this._w*d,this._x=n*u+this._x*d,this._y=i*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,n){return this.copy(e).slerp(t,n)}random(){const e=2*Math.PI*Math.random(),t=2*Math.PI*Math.random(),n=Math.random(),i=Math.sqrt(1-n),s=Math.sqrt(n);return this.set(i*Math.sin(e),i*Math.cos(e),s*Math.sin(t),s*Math.cos(t))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class En{constructor(e=0,t=0,n=0){En.prototype.isVector3=!0,this.x=e,this.y=t,this.z=n}set(e,t,n){return n===void 0&&(n=this.z),this.x=e,this.y=t,this.z=n,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(A6.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(A6.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[3]*n+s[6]*i,this.y=s[1]*t+s[4]*n+s[7]*i,this.z=s[2]*t+s[5]*n+s[8]*i,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=e.elements,o=1/(s[3]*t+s[7]*n+s[11]*i+s[15]);return this.x=(s[0]*t+s[4]*n+s[8]*i+s[12])*o,this.y=(s[1]*t+s[5]*n+s[9]*i+s[13])*o,this.z=(s[2]*t+s[6]*n+s[10]*i+s[14])*o,this}applyQuaternion(e){const t=this.x,n=this.y,i=this.z,s=e.x,o=e.y,a=e.z,l=e.w,c=2*(o*i-a*n),h=2*(a*t-s*i),u=2*(s*n-o*t);return this.x=t+l*c+o*u-a*h,this.y=n+l*h+a*c-s*u,this.z=i+l*u+s*h-o*c,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,n=this.y,i=this.z,s=e.elements;return this.x=s[0]*t+s[4]*n+s[8]*i,this.y=s[1]*t+s[5]*n+s[9]*i,this.z=s[2]*t+s[6]*n+s[10]*i,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=ct(this.x,e.x,t.x),this.y=ct(this.y,e.y,t.y),this.z=ct(this.z,e.z,t.z),this}clampScalar(e,t){return this.x=ct(this.x,e,t),this.y=ct(this.y,e,t),this.z=ct(this.z,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(ct(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const n=e.x,i=e.y,s=e.z,o=t.x,a=t.y,l=t.z;return this.x=i*l-s*a,this.y=s*o-n*l,this.z=n*a-i*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const n=e.dot(this)/t;return this.copy(e).multiplyScalar(n)}projectOnPlane(e){return a0.copy(this).projectOnVector(e),this.sub(a0)}reflect(e){return this.sub(a0.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(ct(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y,i=this.z-e.z;return t*t+n*n+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,n){const i=Math.sin(t)*e;return this.x=i*Math.sin(n),this.y=Math.cos(t)*e,this.z=i*Math.cos(n),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,n){return this.x=e*Math.sin(t),this.y=n,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),n=this.setFromMatrixColumn(e,1).length(),i=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=n,this.z=i,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=Math.random()*Math.PI*2,t=Math.random()*2-1,n=Math.sqrt(1-t*t);return this.x=n*Math.cos(e),this.y=t,this.z=n*Math.sin(e),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const a0=new En,A6=new Sm;class gr{constructor(e,t,n,i,s,o,a,l,c,h,u,d,q,m,g,p){gr.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,n,i,s,o,a,l,c,h,u,d,q,m,g,p)}set(e,t,n,i,s,o,a,l,c,h,u,d,q,m,g,p){const f=this.elements;return f[0]=e,f[4]=t,f[8]=n,f[12]=i,f[1]=s,f[5]=o,f[9]=a,f[13]=l,f[2]=c,f[6]=h,f[10]=u,f[14]=d,f[3]=q,f[7]=m,f[11]=g,f[15]=p,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new gr().fromArray(this.elements)}copy(e){const t=this.elements,n=e.elements;return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this}copyPosition(e){const t=this.elements,n=e.elements;return t[12]=n[12],t[13]=n[13],t[14]=n[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,n){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(e,t,n){return this.set(e.x,t.x,n.x,0,e.y,t.y,n.y,0,e.z,t.z,n.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,n=e.elements,i=1/us.setFromMatrixColumn(e,0).length(),s=1/us.setFromMatrixColumn(e,1).length(),o=1/us.setFromMatrixColumn(e,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[3]=0,t[4]=n[4]*s,t[5]=n[5]*s,t[6]=n[6]*s,t[7]=0,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,n=e.x,i=e.y,s=e.z,o=Math.cos(n),a=Math.sin(n),l=Math.cos(i),c=Math.sin(i),h=Math.cos(s),u=Math.sin(s);if(e.order==="XYZ"){const d=o*h,q=o*u,m=a*h,g=a*u;t[0]=l*h,t[4]=-l*u,t[8]=c,t[1]=q+m*c,t[5]=d-g*c,t[9]=-a*l,t[2]=g-d*c,t[6]=m+q*c,t[10]=o*l}else if(e.order==="YXZ"){const d=l*h,q=l*u,m=c*h,g=c*u;t[0]=d+g*a,t[4]=m*a-q,t[8]=o*c,t[1]=o*u,t[5]=o*h,t[9]=-a,t[2]=q*a-m,t[6]=g+d*a,t[10]=o*l}else if(e.order==="ZXY"){const d=l*h,q=l*u,m=c*h,g=c*u;t[0]=d-g*a,t[4]=-o*u,t[8]=m+q*a,t[1]=q+m*a,t[5]=o*h,t[9]=g-d*a,t[2]=-o*c,t[6]=a,t[10]=o*l}else if(e.order==="ZYX"){const d=o*h,q=o*u,m=a*h,g=a*u;t[0]=l*h,t[4]=m*c-q,t[8]=d*c+g,t[1]=l*u,t[5]=g*c+d,t[9]=q*c-m,t[2]=-c,t[6]=a*l,t[10]=o*l}else if(e.order==="YZX"){const d=o*l,q=o*c,m=a*l,g=a*c;t[0]=l*h,t[4]=g-d*u,t[8]=m*u+q,t[1]=u,t[5]=o*h,t[9]=-a*h,t[2]=-c*h,t[6]=q*u+m,t[10]=d-g*u}else if(e.order==="XZY"){const d=o*l,q=o*c,m=a*l,g=a*c;t[0]=l*h,t[4]=-u,t[8]=c*h,t[1]=d*u+g,t[5]=o*h,t[9]=q*u-m,t[2]=m*u-q,t[6]=a*h,t[10]=g*u+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(bm,e,Em)}lookAt(e,t,n){const i=this.elements;return vn.subVectors(e,t),vn.lengthSq()===0&&(vn.z=1),vn.normalize(),B1.crossVectors(n,vn),B1.lengthSq()===0&&(Math.abs(n.z)===1?vn.x+=1e-4:vn.z+=1e-4,vn.normalize(),B1.crossVectors(n,vn)),B1.normalize(),Oo.crossVectors(vn,B1),i[0]=B1.x,i[4]=Oo.x,i[8]=vn.x,i[1]=B1.y,i[5]=Oo.y,i[9]=vn.y,i[2]=B1.z,i[6]=Oo.z,i[10]=vn.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const n=e.elements,i=t.elements,s=this.elements,o=n[0],a=n[4],l=n[8],c=n[12],h=n[1],u=n[5],d=n[9],q=n[13],m=n[2],g=n[6],p=n[10],f=n[14],v=n[3],y=n[7],_=n[11],T=n[15],E=i[0],S=i[4],I=i[8],w=i[12],x=i[1],C=i[5],O=i[9],U=i[13],B=i[2],P=i[6],K=i[10],ie=i[14],H=i[3],fe=i[7],ge=i[11],ve=i[15];return s[0]=o*E+a*x+l*B+c*H,s[4]=o*S+a*C+l*P+c*fe,s[8]=o*I+a*O+l*K+c*ge,s[12]=o*w+a*U+l*ie+c*ve,s[1]=h*E+u*x+d*B+q*H,s[5]=h*S+u*C+d*P+q*fe,s[9]=h*I+u*O+d*K+q*ge,s[13]=h*w+u*U+d*ie+q*ve,s[2]=m*E+g*x+p*B+f*H,s[6]=m*S+g*C+p*P+f*fe,s[10]=m*I+g*O+p*K+f*ge,s[14]=m*w+g*U+p*ie+f*ve,s[3]=v*E+y*x+_*B+T*H,s[7]=v*S+y*C+_*P+T*fe,s[11]=v*I+y*O+_*K+T*ge,s[15]=v*w+y*U+_*ie+T*ve,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],n=e[4],i=e[8],s=e[12],o=e[1],a=e[5],l=e[9],c=e[13],h=e[2],u=e[6],d=e[10],q=e[14],m=e[3],g=e[7],p=e[11],f=e[15];return m*(+s*l*u-i*c*u-s*a*d+n*c*d+i*a*q-n*l*q)+g*(+t*l*q-t*c*d+s*o*d-i*o*q+i*c*h-s*l*h)+p*(+t*c*u-t*a*q-s*o*u+n*o*q+s*a*h-n*c*h)+f*(-i*a*h-t*l*u+t*a*d+i*o*u-n*o*d+n*l*h)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,n){const i=this.elements;return e.isVector3?(i[12]=e.x,i[13]=e.y,i[14]=e.z):(i[12]=e,i[13]=t,i[14]=n),this}invert(){const e=this.elements,t=e[0],n=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=e[9],d=e[10],q=e[11],m=e[12],g=e[13],p=e[14],f=e[15],v=u*p*c-g*d*c+g*l*q-a*p*q-u*l*f+a*d*f,y=m*d*c-h*p*c-m*l*q+o*p*q+h*l*f-o*d*f,_=h*g*c-m*u*c+m*a*q-o*g*q-h*a*f+o*u*f,T=m*u*l-h*g*l-m*a*d+o*g*d+h*a*p-o*u*p,E=t*v+n*y+i*_+s*T;if(E===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/E;return e[0]=v*S,e[1]=(g*d*s-u*p*s-g*i*q+n*p*q+u*i*f-n*d*f)*S,e[2]=(a*p*s-g*l*s+g*i*c-n*p*c-a*i*f+n*l*f)*S,e[3]=(u*l*s-a*d*s-u*i*c+n*d*c+a*i*q-n*l*q)*S,e[4]=y*S,e[5]=(h*p*s-m*d*s+m*i*q-t*p*q-h*i*f+t*d*f)*S,e[6]=(m*l*s-o*p*s-m*i*c+t*p*c+o*i*f-t*l*f)*S,e[7]=(o*d*s-h*l*s+h*i*c-t*d*c-o*i*q+t*l*q)*S,e[8]=_*S,e[9]=(m*u*s-h*g*s-m*n*q+t*g*q+h*n*f-t*u*f)*S,e[10]=(o*g*s-m*a*s+m*n*c-t*g*c-o*n*f+t*a*f)*S,e[11]=(h*a*s-o*u*s-h*n*c+t*u*c+o*n*q-t*a*q)*S,e[12]=T*S,e[13]=(h*g*i-m*u*i+m*n*d-t*g*d-h*n*p+t*u*p)*S,e[14]=(m*a*i-o*g*i-m*n*l+t*g*l+o*n*p-t*a*p)*S,e[15]=(o*u*i-h*a*i+h*n*l-t*u*l-o*n*d+t*a*d)*S,this}scale(e){const t=this.elements,n=e.x,i=e.y,s=e.z;return t[0]*=n,t[4]*=i,t[8]*=s,t[1]*=n,t[5]*=i,t[9]*=s,t[2]*=n,t[6]*=i,t[10]*=s,t[3]*=n,t[7]*=i,t[11]*=s,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],n=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],i=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,n,i))}makeTranslation(e,t,n){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,n,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),n=Math.sin(e);return this.set(1,0,0,0,0,t,-n,0,0,n,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,0,n,0,0,1,0,0,-n,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),n=Math.sin(e);return this.set(t,-n,0,0,n,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const n=Math.cos(t),i=Math.sin(t),s=1-n,o=e.x,a=e.y,l=e.z,c=s*o,h=s*a;return this.set(c*o+n,c*a-i*l,c*l+i*a,0,c*a+i*l,h*a+n,h*l-i*o,0,c*l-i*a,h*l+i*o,s*l*l+n,0,0,0,0,1),this}makeScale(e,t,n){return this.set(e,0,0,0,0,t,0,0,0,0,n,0,0,0,0,1),this}makeShear(e,t,n,i,s,o){return this.set(1,n,s,0,e,1,o,0,t,i,1,0,0,0,0,1),this}compose(e,t,n){const i=this.elements,s=t._x,o=t._y,a=t._z,l=t._w,c=s+s,h=o+o,u=a+a,d=s*c,q=s*h,m=s*u,g=o*h,p=o*u,f=a*u,v=l*c,y=l*h,_=l*u,T=n.x,E=n.y,S=n.z;return i[0]=(1-(g+f))*T,i[1]=(q+_)*T,i[2]=(m-y)*T,i[3]=0,i[4]=(q-_)*E,i[5]=(1-(d+f))*E,i[6]=(p+v)*E,i[7]=0,i[8]=(m+y)*S,i[9]=(p-v)*S,i[10]=(1-(d+g))*S,i[11]=0,i[12]=e.x,i[13]=e.y,i[14]=e.z,i[15]=1,this}decompose(e,t,n){const i=this.elements;let s=us.set(i[0],i[1],i[2]).length();const o=us.set(i[4],i[5],i[6]).length(),a=us.set(i[8],i[9],i[10]).length();this.determinant()<0&&(s=-s),e.x=i[12],e.y=i[13],e.z=i[14],Hn.copy(this);const c=1/s,h=1/o,u=1/a;return Hn.elements[0]*=c,Hn.elements[1]*=c,Hn.elements[2]*=c,Hn.elements[4]*=h,Hn.elements[5]*=h,Hn.elements[6]*=h,Hn.elements[8]*=u,Hn.elements[9]*=u,Hn.elements[10]*=u,t.setFromRotationMatrix(Hn),n.x=s,n.y=o,n.z=a,this}makePerspective(e,t,n,i,s,o,a=ls){const l=this.elements,c=2*s/(t-e),h=2*s/(n-i),u=(t+e)/(t-e),d=(n+i)/(n-i);let q,m;if(a===ls)q=-(o+s)/(o-s),m=-2*o*s/(o-s);else if(a===i0)q=-o/(o-s),m=-o*s/(o-s);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=q,l[14]=m,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(e,t,n,i,s,o,a=ls){const l=this.elements,c=1/(t-e),h=1/(n-i),u=1/(o-s),d=(t+e)*c,q=(n+i)*h;let m,g;if(a===ls)m=(o+s)*u,g=-2*u;else if(a===i0)m=s*u,g=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-q,l[2]=0,l[6]=0,l[10]=g,l[14]=-m,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(e){const t=this.elements,n=e.elements;for(let i=0;i<16;i++)if(t[i]!==n[i])return!1;return!0}fromArray(e,t=0){for(let n=0;n<16;n++)this.elements[n]=e[n+t];return this}toArray(e=[],t=0){const n=this.elements;return e[t]=n[0],e[t+1]=n[1],e[t+2]=n[2],e[t+3]=n[3],e[t+4]=n[4],e[t+5]=n[5],e[t+6]=n[6],e[t+7]=n[7],e[t+8]=n[8],e[t+9]=n[9],e[t+10]=n[10],e[t+11]=n[11],e[t+12]=n[12],e[t+13]=n[13],e[t+14]=n[14],e[t+15]=n[15],e}}const us=new En,Hn=new gr,bm=new En(0,0,0),Em=new En(1,1,1),B1=new En,Oo=new En,vn=new En;class Bo{constructor(e=0,t=0){Bo.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,n=this.y,i=e.elements;return this.x=i[0]*t+i[3]*n+i[6],this.y=i[1]*t+i[4]*n+i[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=ct(this.x,e.x,t.x),this.y=ct(this.y,e.y,t.y),this}clampScalar(e,t){return this.x=ct(this.x,e,t),this.y=ct(this.y,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(ct(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const n=this.dot(e)/t;return Math.acos(ct(n,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,n=this.y-e.y;return t*t+n*n}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const n=Math.cos(t),i=Math.sin(t),s=this.x-e.x,o=this.y-e.y;return this.x=s*n-o*i+e.x,this.y=s*i+o*n+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class l0{constructor(e=0,t=0,n=0,i=1){l0.prototype.isVector4=!0,this.x=e,this.y=t,this.z=n,this.w=i}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,n,i){return this.x=e,this.y=t,this.z=n,this.w=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,n=this.y,i=this.z,s=this.w,o=e.elements;return this.x=o[0]*t+o[4]*n+o[8]*i+o[12]*s,this.y=o[1]*t+o[5]*n+o[9]*i+o[13]*s,this.z=o[2]*t+o[6]*n+o[10]*i+o[14]*s,this.w=o[3]*t+o[7]*n+o[11]*i+o[15]*s,this}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this.w/=e.w,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,n,i,s;const l=e.elements,c=l[0],h=l[4],u=l[8],d=l[1],q=l[5],m=l[9],g=l[2],p=l[6],f=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-g)<.01&&Math.abs(m-p)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+g)<.1&&Math.abs(m+p)<.1&&Math.abs(c+q+f-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const y=(c+1)/2,_=(q+1)/2,T=(f+1)/2,E=(h+d)/4,S=(u+g)/4,I=(m+p)/4;return y>_&&y>T?y<.01?(n=0,i=.707106781,s=.707106781):(n=Math.sqrt(y),i=E/n,s=S/n):_>T?_<.01?(n=.707106781,i=0,s=.707106781):(i=Math.sqrt(_),n=E/i,s=I/i):T<.01?(n=.707106781,i=.707106781,s=0):(s=Math.sqrt(T),n=S/s,i=I/s),this.set(n,i,s,t),this}let v=Math.sqrt((p-m)*(p-m)+(u-g)*(u-g)+(d-h)*(d-h));return Math.abs(v)<.001&&(v=1),this.x=(p-m)/v,this.y=(u-g)/v,this.z=(d-h)/v,this.w=Math.acos((c+q+f-1)/2),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this.w=t[15],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=ct(this.x,e.x,t.x),this.y=ct(this.y,e.y,t.y),this.z=ct(this.z,e.z,t.z),this.w=ct(this.w,e.w,t.w),this}clampScalar(e,t){return this.x=ct(this.x,e,t),this.y=ct(this.y,e,t),this.z=ct(this.z,e,t),this.w=ct(this.w,e,t),this}clampLength(e,t){const n=this.length();return this.divideScalar(n||1).multiplyScalar(ct(n,e,t))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,n){return this.x=e.x+(t.x-e.x)*n,this.y=e.y+(t.y-e.y)*n,this.z=e.z+(t.z-e.z)*n,this.w=e.w+(t.w-e.w)*n,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}function c0(r,e=0){let t=3735928559^e,n=1103547991^e;if(r instanceof Array)for(let i=0,s;i<r.length;i++)s=r[i],t=Math.imul(t^s,2654435761),n=Math.imul(n^s,1597334677);else for(let i=0,s;i<r.length;i++)s=r.charCodeAt(i),t=Math.imul(t^s,2654435761),n=Math.imul(n^s,1597334677);return t=Math.imul(t^t>>>16,2246822507),t^=Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507),n^=Math.imul(t^t>>>13,3266489909),4294967296*(2097151&n)+(t>>>0)}const C6=(...r)=>c0(r);function Tm(r,e=!1){const t=[];r.isNode===!0&&(t.push(r.id),r=r.getSelf());for(const{property:n,childNode:i}of h0(r))t.push(t,c0(n.slice(0,-4)),i.getCacheKey(e));return c0(t)}function*h0(r,e=!1){for(const t in r){if(t.startsWith("_")===!0)continue;const n=r[t];if(Array.isArray(n)===!0)for(let i=0;i<n.length;i++){const s=n[i];s&&(s.isNode===!0||e&&typeof s.toJSON=="function")&&(yield{property:t,index:i,childNode:s})}else if(n&&n.isNode===!0)yield{property:t,childNode:n};else if(typeof n=="object")for(const i in n){const s=n[i];s&&(s.isNode===!0||e&&typeof s.toJSON=="function")&&(yield{property:t,index:i,childNode:s})}}}function u0(r){if(r==null)return null;const e=typeof r;return r.isNode===!0?"node":e==="number"?"float":e==="boolean"?"bool":e==="string"?"string":e==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function R6(r,...e){const t=r?r.slice(-4):void 0;return e.length===1&&(t==="vec2"?e=[e[0],e[0]]:t==="vec3"?e=[e[0],e[0],e[0]]:t==="vec4"&&(e=[e[0],e[0],e[0],e[0]])),r==="color"?new o0(...e):t==="vec2"?new Bo(...e):t==="vec3"?new En(...e):t==="vec4"?new l0(...e):t==="mat3"?new wi(...e):t==="mat4"?new gr(...e):r==="bool"?e[0]||!1:r==="float"||r==="int"||r==="uint"?e[0]||0:r==="string"?e[0]||"":r==="ArrayBuffer"?Cm(e[0]):null}function Am(r){let e="";const t=new Uint8Array(r);for(let n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return btoa(e)}function Cm(r){return Uint8Array.from(atob(r),e=>e.charCodeAt(0)).buffer}class Rm{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[e]===void 0&&(n[e]=[]),n[e].indexOf(t)===-1&&n[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const n=this._listeners;return n[e]!==void 0&&n[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const i=this._listeners[e];if(i!==void 0){const s=i.indexOf(t);s!==-1&&i.splice(s,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const n=this._listeners[e.type];if(n!==void 0){e.target=this;const i=n.slice(0);for(let s=0,o=i.length;s<o;s++)i[s].call(this,e);e.target=null}}}let Im=0;class Ft extends Rm{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=U1.NONE,this.updateBeforeType=U1.NONE,this.updateAfterType=U1.NONE,this.uuid=vm.generateUUID(),this.version=0,this.global=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:Im++})}set needsUpdate(e){e===!0&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,U1.FRAME)}onRenderUpdate(e){return this.onUpdate(e,U1.RENDER)}onObjectUpdate(e){return this.onUpdate(e,U1.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of h0(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return e=e||this.version!==this._cacheKeyVersion,(e===!0||this._cacheKey===null)&&(this._cacheKey=C6(Tm(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let n=0;for(const i of this.getChildren())t["node"+n++]=i;return t.outputNode||null}analyze(e){if(e.increaseUsage(this)===1){const n=e.getNodeProperties(this);for(const i of Object.values(n))i&&i.isNode===!0&&i.build(e)}}generate(e,t){const{outputNode:n}=e.getNodeProperties(this);if(n&&n.isNode===!0)return n.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const n=this.getShared(e);if(this!==n)return n.build(e,t);e.addNode(this),e.addChain(this);let i=null;const s=e.getBuildStage();if(s==="setup"){this.updateReference(e);const o=e.getNodeProperties(this);if(o.initialized!==!0){o.initialized=!0;const a=this.setup(e),l=a&&a.isNode===!0;for(const c of Object.values(o))c&&c.isNode===!0&&c.build(e);l&&a.build(e),o.outputNode=a}}else if(s==="analyze")this.analyze(e);else if(s==="generate")if(this.generate.length===1){const a=this.getNodeType(e),l=e.getDataFromNode(this);i=l.snippet,i===void 0?(i=this.generate(e)||"",l.snippet=i):l.flowCodes!==void 0&&e.context.nodeBlock!==void 0&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),i=e.format(i,a,t)}else i=this.generate(e,t)||"";return e.removeChain(this),e.addSequentialNode(this),i}getSerializeChildren(){return h0(this)}serialize(e){const t=this.getSerializeChildren(),n={};for(const{property:i,index:s,childNode:o}of t)s!==void 0?(n[i]===void 0&&(n[i]=Number.isInteger(s)?[]:{}),n[i][s]=o.toJSON(e.meta).uuid):n[i]=o.toJSON(e.meta).uuid;Object.keys(n).length>0&&(e.inputNodes=n)}deserialize(e){if(e.inputNodes!==void 0){const t=e.meta.nodes;for(const n in e.inputNodes)if(Array.isArray(e.inputNodes[n])){const i=[];for(const s of e.inputNodes[n])i.push(t[s]);this[n]=i}else if(typeof e.inputNodes[n]=="object"){const i={};for(const s in e.inputNodes[n]){const o=e.inputNodes[n][s];i[s]=t[o]}this[n]=i}else{const i=e.inputNodes[n];this[n]=t[i]}}}toJSON(e){const{uuid:t,type:n}=this,i=e===void 0||typeof e=="string";i&&(e={textures:{},images:{},nodes:{}});let s=e.nodes[t];s===void 0&&(s={uuid:t,type:n,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},i!==!0&&(e.nodes[s.uuid]=s),this.serialize(s),delete s.meta);function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}if(i){const a=o(e.textures),l=o(e.images),c=o(e.nodes);a.length>0&&(s.textures=a),l.length>0&&(s.images=l),c.length>0&&(s.nodes=c)}return s}}class d0 extends Ft{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){const t=this.node.build(e),n=this.indexNode.build(e,"uint");return`${t}[ ${n} ]`}}class I6 extends Ft{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let n=null;for(const i of this.convertTo.split("|"))(n===null||e.getTypeLength(t)===e.getTypeLength(i))&&(n=i);return n}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const n=this.node,i=this.getNodeType(e),s=n.build(e,i);return e.format(s,i,t)}}class n1 extends Ft{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if(e.getBuildStage()==="generate"){const i=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(s.propertyName!==void 0)return e.format(s.propertyName,i,t);if(i!=="void"&&t!=="void"&&this.hasDependencies(e)){const o=super.build(e,i),a=e.getVarFromNode(this,null,i),l=e.getPropertyName(a);return e.addLineFlowCode(`${l} = ${o}`,this),s.snippet=o,s.propertyName=l,e.format(s.propertyName,i,t)}}return super.build(e,t)}}class zm extends n1{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return this.nodeType!==null?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce((t,n)=>t+e.getTypeLength(n.getNodeType(e)),0))}generate(e,t){const n=this.getNodeType(e),i=this.nodes,s=e.getComponentType(n),o=[];for(const l of i){let c=l.build(e);const h=e.getComponentType(l.getNodeType(e));h!==s&&(c=e.format(c,h,s)),o.push(c)}const a=`${e.getType(n)}( ${o.join(", ")} )`;return e.format(a,n,t)}}const Nm=mr.join("");class z6 extends Ft{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(mr.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const n=this.node,i=e.getTypeLength(n.getNodeType(e));let s=null;if(i>1){let o=null;this.getVectorLength()>=i&&(o=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const l=n.build(e,o);this.components.length===i&&this.components===Nm.slice(0,this.components.length)?s=e.format(l,o,t):s=e.format(`${l}.${this.components}`,this.getNodeType(e),t)}else s=n.build(e,t);return s}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class Lm extends n1{static get type(){return"SetNode"}constructor(e,t,n){super(),this.sourceNode=e,this.components=t,this.targetNode=n}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:n,targetNode:i}=this,s=this.getNodeType(e),o=e.getComponentType(i.getNodeType(e)),a=e.getTypeFromLength(n.length,o),l=i.build(e,a),c=t.build(e,s),h=e.getTypeLength(s),u=[];for(let d=0;d<h;d++){const q=mr[d];q===n[0]?(u.push(l),d+=n.length-1):u.push(c+"."+q)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Pm extends n1{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:n}=this,i=this.getNodeType(e),s=n.build(e),o=e.getVarFromNode(this),a=e.getPropertyName(o);e.addLineFlowCode(a+" = "+s,this);const l=e.getTypeLength(i),c=[];let h=0;for(let u=0;u<l;u++){const d=mr[u];d===t[h]?(c.push("1.0 - "+(a+"."+d)),h++):c.push(a+"."+d)}return`${e.getType(i)}( ${c.join(", ")} )`}}class q0 extends Ft{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return this.nodeType===null?u0(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=u0(this.value),e.nodeType=this.nodeType,e.valueType==="ArrayBuffer"&&(e.value=Am(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?R6(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}class v1 extends q0{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const n=this.getNodeType(e);return e.format(this.generateConst(e),n,t)}}let Dm=null;const ds=new Map;function le(r,e){if(ds.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof e!="function")throw new Error(`Node element ${r} is not a function`);ds.set(r,e)}const N6=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),L6=r=>N6(r).split("").sort().join(""),P6={setup(r,e){const t=e.shift();return r(Go(t),...e)},get(r,e,t){if(typeof e=="string"&&r[e]===void 0){if(r.isStackNode!==!0&&e==="assign")return(...n)=>(Dm.assign(t,...n),t);if(ds.has(e)){const n=ds.get(e);return r.isStackNode?(...i)=>t.add(n(...i)):(...i)=>n(t,...i)}else{if(e==="self")return r;if(e.endsWith("Assign")&&ds.has(e.slice(0,e.length-6))){const n=ds.get(e.slice(0,e.length-6));return r.isStackNode?(...i)=>t.assign(i[0],n(...i)):(...i)=>t.assign(n(t,...i))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(e)===!0)return e=N6(e),Be(new z6(t,e));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(e)===!0)return e=L6(e.slice(3).toLowerCase()),n=>Be(new Lm(r,e,n));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(e)===!0)return e=L6(e.slice(4).toLowerCase()),()=>Be(new Pm(Be(r),e));if(e==="width"||e==="height"||e==="depth")return e==="width"?e="x":e==="height"?e="y":e==="depth"&&(e="z"),Be(new z6(r,e));if(/^\d+$/.test(e)===!0)return Be(new d0(t,new v1(Number(e),"uint")))}}}return Reflect.get(r,e,t)},set(r,e,t,n){return typeof e=="string"&&r[e]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(e)===!0||e==="width"||e==="height"||e==="depth"||/^\d+$/.test(e)===!0)?(n[e].assign(t),!0):Reflect.set(r,e,t,n)}},m0=new WeakMap,D6=new WeakMap,km=function(r,e=null){const t=u0(r);if(t==="node"){let n=m0.get(r);return n===void 0&&(n=new Proxy(r,P6),m0.set(r,n),m0.set(n,n)),n}else{if(e===null&&(t==="float"||t==="boolean")||t&&t!=="shader"&&t!=="string")return Be(x0(r,e));if(t==="shader")return Xo(r)}return r},Fm=function(r,e=null){for(const t in r)r[t]=Be(r[t],e);return r},Um=function(r,e=null){const t=r.length;for(let n=0;n<t;n++)r[n]=Be(r[n],e);return r},Om=function(r,e=null,t=null,n=null){const i=s=>Be(n!==null?Object.assign(s,n):s);return e===null?(...s)=>i(new r(...Wo(s))):t!==null?(t=Be(t),(...s)=>i(new r(e,...Wo(s),t))):(...s)=>i(new r(e,...Wo(s)))};class Bm extends Ft{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}call(e){const{shaderNode:t,inputNodes:n}=this,i=e.getNodeProperties(t);if(i.onceOutput)return i.onceOutput;let s=null;if(t.layout){let o=D6.get(e.constructor);o===void 0&&(o=new WeakMap,D6.set(e.constructor,o));let a=o.get(t);a===void 0&&(a=Be(e.buildFunctionNode(t)),o.set(t,a)),e.currentFunctionNode!==null&&e.currentFunctionNode.includes.push(a),s=Be(a.call(n))}else{const o=t.jsFunc,a=n!==null?o(n,e):o(e);s=Be(a)}return t.once&&(i.onceOutput=s),s}getOutputNode(e){const t=e.getNodeProperties(this);return t.outputNode===null&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class Vm extends Ft{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return Go(e),Be(new Bm(this,e))}setup(){return this.call()}}const Hm=[!1,!0],Gm=[0,1,2,3],Wm=[-1,-2],k6=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],f0=new Map;for(const r of Hm)f0.set(r,new v1(r));const p0=new Map;for(const r of Gm)p0.set(r,new v1(r,"uint"));const g0=new Map([...p0].map(r=>new v1(r.value,"int")));for(const r of Wm)g0.set(r,new v1(r,"int"));const Vo=new Map([...g0].map(r=>new v1(r.value)));for(const r of k6)Vo.set(r,new v1(r));for(const r of k6)Vo.set(-r,new v1(-r));const Ho={bool:f0,uint:p0,ints:g0,float:Vo},F6=new Map([...f0,...Vo]),x0=(r,e)=>F6.has(r)?F6.get(r):r.isNode===!0?r:new v1(r,e),Xm=r=>{try{return r.getNodeType()}catch{return}},Rt=function(r,e=null){return(...t)=>{if((t.length===0||!["bool","float","int","uint"].includes(r)&&t.every(i=>typeof i!="object"))&&(t=[R6(r,...t)]),t.length===1&&e!==null&&e.has(t[0]))return Be(e.get(t[0]));if(t.length===1){const i=x0(t[0],r);return Xm(i)===r?Be(i):Be(new I6(i,r))}const n=t.map(i=>x0(i));return Be(new zm(n,r))}},Ym=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function $m(r,e){return new Proxy(new Vm(r,e),P6)}const Be=(r,e=null)=>km(r,e),Go=(r,e=null)=>new Fm(r,e),Wo=(r,e=null)=>new Um(r,e),we=(...r)=>new Om(...r),Xo=(r,e)=>{const t=new $m(r,e),n=(...i)=>{let s;return Go(i),i[0]&&i[0].isNode?s=[...i]:s=i[0],t.call(s)};return n.shaderNode=t,n.setLayout=i=>(t.setLayout(i),n),n.once=()=>(t.once=!0,n),n};le("toGlobal",r=>(r.global=!0,r));function Zm(r){return r}le("append",Zm);const jm=new Rt("color"),Yo=new Rt("float",Ho.float),Jm=new Rt("int",Ho.ints),Km=new Rt("uint",Ho.uint),Qm=new Rt("bool",Ho.bool),U6=new Rt("vec2"),ef=new Rt("ivec2"),tf=new Rt("uvec2"),nf=new Rt("bvec2"),_0=new Rt("vec3"),sf=new Rt("ivec3"),rf=new Rt("uvec3"),of=new Rt("bvec3"),Mi=new Rt("vec4"),af=new Rt("ivec4"),lf=new Rt("uvec4"),cf=new Rt("bvec4"),hf=new Rt("mat2"),O6=new Rt("mat3"),uf=new Rt("mat4");le("toColor",jm),le("toFloat",Yo),le("toInt",Jm),le("toUint",Km),le("toBool",Qm),le("toVec2",U6),le("toIVec2",ef),le("toUVec2",tf),le("toBVec2",nf),le("toVec3",_0),le("toIVec3",sf),le("toUVec3",rf),le("toBVec3",of),le("toVec4",Mi),le("toIVec4",af),le("toUVec4",lf),le("toBVec4",cf),le("toMat2",hf),le("toMat3",O6),le("toMat4",uf);const df=we(d0),qf=(r,e)=>Be(new I6(Be(r),e));le("element",df),le("convert",qf);class B6 extends Ft{static get type(){return"UniformGroupNode"}constructor(e,t=!1,n=1){super("string"),this.name=e,this.shared=t,this.order=n,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const mf=r=>new B6(r),ff=((r,e=0)=>new B6(r,!0,e))("render"),pf=mf("object");class gf extends q0{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=pf}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const n=this.getSelf();return e=e.bind(n),super.onUpdate(i=>{const s=e(i,n);s!==void 0&&(this.value=s)},t)}generate(e,t){const n=this.getNodeType(e),i=this.getUniformHash(e);let s=e.getNodeFromHash(i);s===void 0&&(e.setHashNode(this,i),s=this);const o=s.getInputType(e),a=e.getUniformFromNode(s,o,e.shaderStage,this.name||e.context.label),l=e.getPropertyName(a);return e.context.label!==void 0&&delete e.context.label,e.format(l,n,t)}}const xf=(r,e)=>{const t=Ym(e||r),n=r;return Be(new gf(n,t))};class _f extends Ft{static get type(){return"PropertyNode"}constructor(e,t=null,n=!1){super(e),this.name=t,this.varying=n,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return this.varying===!0?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const yf=(r,e)=>Be(new _f(r,e));class vf extends n1{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return t!=="void"?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(e.isAvailable("swizzleAssign")===!1&&t.isSplitNode&&t.components.length>1){const n=e.getTypeLength(t.node.getNodeType(e));return mr.join("").slice(0,n)!==t.components}return!1}generate(e,t){const{targetNode:n,sourceNode:i}=this,s=this.needsSplitAssign(e),o=n.getNodeType(e),a=n.context({assign:!0}).build(e),l=i.build(e,o),c=i.getNodeType(e),h=e.getDataFromNode(this);let u;if(h.initialized===!0)t!=="void"&&(u=a);else if(s){const d=e.getVarFromNode(this,null,o),q=e.getPropertyName(d);e.addLineFlowCode(`${q} = ${l}`,this);const m=n.node.context({assign:!0}).build(e);for(let g=0;g<n.components.length;g++){const p=n.components[g];e.addLineFlowCode(`${m}.${p} = ${q}[ ${g} ]`,this)}t!=="void"&&(u=a)}else u=`${a} = ${l}`,(t==="void"||c==="void")&&(e.addLineFlowCode(u,this),t!=="void"&&(u=a));return h.initialized=!0,e.format(u,o,t)}}le("assign",we(vf));class wf extends n1{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],n=this.functionNode,i=n.getInputs(e),s=this.parameters,o=(l,c)=>{const h=c.type,u=h==="pointer";let d;return u?d="&"+l.build(e):d=l.build(e,h),d};if(Array.isArray(s))for(let l=0;l<s.length;l++)t.push(o(s[l],i[l]));else for(const l of i){const c=s[l.name];if(c!==void 0)t.push(o(c,l));else throw new Error(`FunctionCallNode: Input '${l.name}' not found in FunctionNode.`)}return`${n.build(e,"property")}( ${t.join(", ")} )`}}le("call",(r,...e)=>(e=e.length>1||e[0]&&e[0].isNode===!0?Wo(e):Go(e[0]),Be(new wf(Be(r),e))));class _t extends n1{static get type(){return"OperatorNode"}constructor(e,t,n,...i){if(super(),i.length>0){let s=new _t(e,t,n);for(let o=0;o<i.length-1;o++)s=new _t(e,s,i[o]);t=s,n=i[i.length-1]}this.op=e,this.aNode=t,this.bNode=n}getNodeType(e,t){const n=this.op,i=this.aNode,s=this.bNode,o=i.getNodeType(e),a=typeof s<"u"?s.getNodeType(e):null;if(o==="void"||a==="void")return"void";if(n==="%")return o;if(n==="~"||n==="&"||n==="|"||n==="^"||n===">>"||n==="<<")return e.getIntegerType(o);if(n==="!"||n==="=="||n==="&&"||n==="||"||n==="^^")return"bool";if(n==="<"||n===">"||n==="<="||n===">="){const l=t?e.getTypeLength(t):Math.max(e.getTypeLength(o),e.getTypeLength(a));return l>1?`bvec${l}`:"bool"}else return o==="float"&&e.isMatrix(a)?a:e.isMatrix(o)&&e.isVector(a)?e.getVectorFromMatrix(o):e.isVector(o)&&e.isMatrix(a)?e.getVectorFromMatrix(a):e.getTypeLength(a)>e.getTypeLength(o)?a:o}generate(e,t){const n=this.op,i=this.aNode,s=this.bNode,o=this.getNodeType(e,t);let a=null,l=null;o!=="void"?(a=i.getNodeType(e),l=typeof s<"u"?s.getNodeType(e):null,n==="<"||n===">"||n==="<="||n===">="||n==="=="?e.isVector(a)?l=a:a!==l&&(a=l="float"):n===">>"||n==="<<"?(a=o,l=e.changeComponentType(l,"uint")):e.isMatrix(a)&&e.isVector(l)?l=e.getVectorFromMatrix(a):e.isVector(a)&&e.isMatrix(l)?a=e.getVectorFromMatrix(l):a=l=o):a=l=o;const c=i.build(e,a),h=typeof s<"u"?s.build(e,l):null,u=e.getTypeLength(t),d=e.getFunctionOperator(n);if(t!=="void")return n==="<"&&u>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${c}, ${h} )`,o,t):e.format(`( ${c} < ${h} )`,o,t):n==="<="&&u>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${c}, ${h} )`,o,t):e.format(`( ${c} <= ${h} )`,o,t):n===">"&&u>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${c}, ${h} )`,o,t):e.format(`( ${c} > ${h} )`,o,t):n===">="&&u>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${c}, ${h} )`,o,t):e.format(`( ${c} >= ${h} )`,o,t):n==="!"||n==="~"?e.format(`(${n}${c})`,a,t):d?e.format(`${d}( ${c}, ${h} )`,o,t):e.format(`( ${c} ${n} ${h} )`,o,t);if(a!=="void")return d?e.format(`${d}( ${c}, ${h} )`,o,t):e.format(`${c} ${n} ${h}`,o,t)}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const Mf=we(_t,"+"),y0=we(_t,"-"),v0=we(_t,"*"),V6=we(_t,"/"),H6=we(_t,"%"),Sf=we(_t,"=="),bf=we(_t,"!="),Ef=we(_t,"<"),Tf=we(_t,">"),Af=we(_t,"<="),Cf=we(_t,">="),Rf=we(_t,"&&"),If=we(_t,"||"),zf=we(_t,"!"),Nf=we(_t,"^^"),Lf=we(_t,"&"),Pf=we(_t,"~"),Df=we(_t,"|"),kf=we(_t,"^"),Ff=we(_t,"<<"),Uf=we(_t,">>");le("add",Mf),le("sub",y0),le("mul",v0),le("div",V6),le("modInt",H6),le("equal",Sf),le("notEqual",bf),le("lessThan",Ef),le("greaterThan",Tf),le("lessThanEqual",Af),le("greaterThanEqual",Cf),le("and",Rf),le("or",If),le("not",zf),le("xor",Nf),le("bitAnd",Lf),le("bitNot",Pf),le("bitOr",Df),le("bitXor",kf),le("shiftLeft",Ff),le("shiftRight",Uf),le("remainder",(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),H6(...r)));class W extends n1{static get type(){return"MathNode"}constructor(e,t,n=null,i=null){super(),this.method=e,this.aNode=t,this.bNode=n,this.cNode=i}getInputType(e){const t=this.aNode.getNodeType(e),n=this.bNode?this.bNode.getNodeType(e):null,i=this.cNode?this.cNode.getNodeType(e):null,s=e.isMatrix(t)?0:e.getTypeLength(t),o=e.isMatrix(n)?0:e.getTypeLength(n),a=e.isMatrix(i)?0:e.getTypeLength(i);return s>o&&s>a?t:o>a?n:a>s?i:t}getNodeType(e){const t=this.method;return t===W.LENGTH||t===W.DISTANCE||t===W.DOT?"float":t===W.CROSS?"vec3":t===W.ALL?"bool":t===W.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===W.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){let n=this.method;const i=this.getNodeType(e),s=this.getInputType(e),o=this.aNode,a=this.bNode,l=this.cNode,c=e.renderer.coordinateSystem;if(n===W.TRANSFORM_DIRECTION){let h=o,u=a;e.isMatrix(h.getNodeType(e))?u=Mi(_0(u),0):h=Mi(_0(h),0);const d=v0(h,u).xyz;return G6(d).build(e,t)}else{if(n===W.NEGATE)return e.format("( - "+o.build(e,s)+" )",i,t);if(n===W.ONE_MINUS)return y0(1,o).build(e,t);if(n===W.RECIPROCAL)return V6(1,o).build(e,t);if(n===W.DIFFERENCE)return w0(y0(o,a)).build(e,t);{const h=[];return n===W.CROSS||n===W.MOD?h.push(o.build(e,i),a.build(e,i)):c===ls&&n===W.STEP?h.push(o.build(e,e.getTypeLength(o.getNodeType(e))===1?"float":s),a.build(e,s)):c===ls&&(n===W.MIN||n===W.MAX)||n===W.MOD?h.push(o.build(e,s),a.build(e,e.getTypeLength(a.getNodeType(e))===1?"float":s)):n===W.REFRACT?h.push(o.build(e,s),a.build(e,s),l.build(e,"float")):n===W.MIX?h.push(o.build(e,s),a.build(e,s),l.build(e,e.getTypeLength(l.getNodeType(e))===1?"float":s)):(c===i0&&n===W.ATAN&&a!==null&&(n="atan2"),h.push(o.build(e,s)),a!==null&&h.push(a.build(e,s)),l!==null&&h.push(l.build(e,s))),e.format(`${e.getMethod(n,i)}( ${h.join(", ")} )`,i,t)}}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}W.ALL="all",W.ANY="any",W.RADIANS="radians",W.DEGREES="degrees",W.EXP="exp",W.EXP2="exp2",W.LOG="log",W.LOG2="log2",W.SQRT="sqrt",W.INVERSE_SQRT="inversesqrt",W.FLOOR="floor",W.CEIL="ceil",W.NORMALIZE="normalize",W.FRACT="fract",W.SIN="sin",W.COS="cos",W.TAN="tan",W.ASIN="asin",W.ACOS="acos",W.ATAN="atan",W.ABS="abs",W.SIGN="sign",W.LENGTH="length",W.NEGATE="negate",W.ONE_MINUS="oneMinus",W.DFDX="dFdx",W.DFDY="dFdy",W.ROUND="round",W.RECIPROCAL="reciprocal",W.TRUNC="trunc",W.FWIDTH="fwidth",W.TRANSPOSE="transpose",W.BITCAST="bitcast",W.EQUALS="equals",W.MIN="min",W.MAX="max",W.MOD="mod",W.STEP="step",W.REFLECT="reflect",W.DISTANCE="distance",W.DIFFERENCE="difference",W.DOT="dot",W.CROSS="cross",W.POW="pow",W.TRANSFORM_DIRECTION="transformDirection",W.MIX="mix",W.CLAMP="clamp",W.REFRACT="refract",W.SMOOTHSTEP="smoothstep",W.FACEFORWARD="faceforward";const Of=Yo(Math.PI),Bf=we(W,W.ALL),Vf=we(W,W.ANY),Hf=we(W,W.RADIANS),Gf=we(W,W.DEGREES),Wf=we(W,W.EXP),Xf=we(W,W.EXP2),Yf=we(W,W.LOG),$f=we(W,W.LOG2),Zf=we(W,W.SQRT),jf=we(W,W.INVERSE_SQRT),Jf=we(W,W.FLOOR),Kf=we(W,W.CEIL),G6=we(W,W.NORMALIZE),W6=we(W,W.FRACT),X6=we(W,W.SIN),Qf=we(W,W.COS),ep=we(W,W.TAN),tp=we(W,W.ASIN),np=we(W,W.ACOS),Y6=we(W,W.ATAN),w0=we(W,W.ABS),$6=we(W,W.SIGN),ip=we(W,W.LENGTH),sp=we(W,W.NEGATE),rp=we(W,W.ONE_MINUS),op=we(W,W.DFDX),ap=we(W,W.DFDY),lp=we(W,W.ROUND),cp=we(W,W.RECIPROCAL),hp=we(W,W.TRUNC),up=we(W,W.FWIDTH),dp=we(W,W.TRANSPOSE);W.BITCAST;const qp=we(W,W.EQUALS),mp=we(W,W.MIN),fp=we(W,W.MAX),Z6=we(W,W.MOD),pp=we(W,W.STEP),gp=we(W,W.REFLECT),xp=we(W,W.DISTANCE),_p=we(W,W.DIFFERENCE),M0=we(W,W.DOT),yp=we(W,W.CROSS),j6=we(W,W.POW),vp=we(W,W.POW,2),wp=we(W,W.POW,3),Mp=we(W,W.POW,4),Sp=we(W,W.TRANSFORM_DIRECTION),bp=r=>v0($6(r),j6(w0(r),1/3)),Ep=r=>M0(r,r),S0=we(W,W.MIX),J6=(r,e=0,t=1)=>Be(new W(W.CLAMP,Be(r),Be(e),Be(t))),Tp=r=>J6(r),Ap=we(W,W.REFRACT),Cp=we(W,W.SMOOTHSTEP),Rp=we(W,W.FACEFORWARD),Ip=Xo(([r])=>{const n=43758.5453,i=M0(r.xy,U6(12.9898,78.233)),s=Z6(i,Of);return W6(X6(s).mul(n))}),zp=(r,e,t)=>S0(e,t,r),Np=(r,e,t)=>Cp(e,t,r),Lp=(r,e)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),Y6(r,e));le("all",Bf),le("any",Vf),le("equals",qp),le("radians",Hf),le("degrees",Gf),le("exp",Wf),le("exp2",Xf),le("log",Yf),le("log2",$f),le("sqrt",Zf),le("inverseSqrt",jf),le("floor",Jf),le("ceil",Kf),le("normalize",G6),le("fract",W6),le("sin",X6),le("cos",Qf),le("tan",ep),le("asin",tp),le("acos",np),le("atan",Y6),le("abs",w0),le("sign",$6),le("length",ip),le("lengthSq",Ep),le("negate",sp),le("oneMinus",rp),le("dFdx",op),le("dFdy",ap),le("round",lp),le("reciprocal",cp),le("trunc",hp),le("fwidth",up),le("atan2",Lp),le("min",mp),le("max",fp),le("mod",Z6),le("step",pp),le("reflect",gp),le("distance",xp),le("dot",M0),le("cross",yp),le("pow",j6),le("pow2",vp),le("pow3",wp),le("pow4",Mp),le("transformDirection",Sp),le("mix",zp),le("clamp",J6),le("refract",Ap),le("smoothstep",Np),le("faceForward",Rp),le("difference",_p),le("saturate",Tp),le("cbrt",bp),le("transpose",dp),le("rand",Ip);class Pp extends Ft{static get type(){return"ConditionalNode"}constructor(e,t,n=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=n}getNodeType(e){const{ifNode:t,elseNode:n}=e.getNodeProperties(this);if(t===void 0)return this.setup(e),this.getNodeType(e);const i=t.getNodeType(e);if(n!==null){const s=n.getNodeType(e);if(e.getTypeLength(s)>e.getTypeLength(i))return s}return i}setup(e){const t=this.condNode.cache(),n=this.ifNode.cache(),i=this.elseNode?this.elseNode.cache():null,s=e.context.nodeBlock;e.getDataFromNode(n).parentNodeBlock=s,i!==null&&(e.getDataFromNode(i).parentNodeBlock=s);const o=e.getNodeProperties(this);o.condNode=t,o.ifNode=n.context({nodeBlock:n}),o.elseNode=i?i.context({nodeBlock:i}):null}generate(e,t){const n=this.getNodeType(e),i=e.getDataFromNode(this);if(i.nodeProperty!==void 0)return i.nodeProperty;const{condNode:s,ifNode:o,elseNode:a}=e.getNodeProperties(this),l=t!=="void",c=l?yf(n).build(e):"";i.nodeProperty=c;const h=s.build(e,"bool");e.addFlowCode(`
${e.tab}if ( ${h} ) {

`).addFlowTab();let u=o.build(e,n);if(u&&(l?u=c+" = "+u+";":u="return "+u+";"),e.removeFlowTab().addFlowCode(e.tab+"	"+u+`

`+e.tab+"}"),a!==null){e.addFlowCode(` else {

`).addFlowTab();let d=a.build(e,n);d&&(l?d=c+" = "+d+";":d="return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"	"+d+`

`+e.tab+`}

`)}else e.addFlowCode(`

`);return e.format(c,n,t)}}const b0=we(Pp);le("select",b0),le("cond",(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),b0(...r)));class Dp extends Ft{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const n=this.node.build(e);return e.setContext(t),n}generate(e,t){const n=e.getContext();e.setContext({...e.context,...this.value});const i=this.node.build(e,t);return e.setContext(n),i}}const K6=we(Dp),kp=(r,e)=>K6(r,{label:e});le("context",K6),le("label",kp);class Fp extends Ft{static get type(){return"VarNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:n}=this,i=e.getVarFromNode(this,n,e.getVectorType(this.getNodeType(e))),s=e.getPropertyName(i),o=t.build(e,i.type);return e.addLineFlowCode(`${s} = ${o}`,this),s}}const Q6=we(Fp);le("toVar",(...r)=>Q6(...r).append()),le("temp",r=>(console.warn('TSL: "temp" is deprecated. Use ".toVar()" instead.'),Q6(r)));class Up extends Ft{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let n=t.varying;if(n===void 0){const i=this.name,s=this.getNodeType(e);t.varying=n=e.getVaryingFromNode(this,i,s),t.node=this.node}return n.needsInterpolation||(n.needsInterpolation=e.shaderStage==="fragment"),n}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),n=this.setupVarying(e),i=e.shaderStage==="fragment"&&t.reassignPosition===!0&&e.context.needsPositionReassign;if(t.propertyName===void 0||i){const s=this.getNodeType(e),o=e.getPropertyName(n,_6.VERTEX);e.flowNodeFromShaderStage(_6.VERTEX,this.node,s,o),t.propertyName=o,i?t.reassignPosition=!1:t.reassignPosition===void 0&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(n)}}const E0=we(Up),Op=r=>E0(r);le("varying",E0),le("vertexStage",Op);const Bp=Xo(([r])=>{const e=r.mul(.9478672986).add(.0521327014).pow(2.4),t=r.mul(.0773993808),n=r.lessThanEqual(.04045);return S0(e,t,n)}).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Vp=Xo(([r])=>{const e=r.pow(.41666).mul(1.055).sub(.055),t=r.mul(12.92),n=r.lessThanEqual(.0031308);return S0(e,t,n)}).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),xr="WorkingColorSpace",T0="OutputColorSpace";class $o extends n1{static get type(){return"ColorSpaceNode"}constructor(e,t,n){super("vec4"),this.colorNode=e,this.source=t,this.target=n}resolveColorSpace(e,t){return t===xr?kt.workingColorSpace:t===T0?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,n=this.resolveColorSpace(e,this.source),i=this.resolveColorSpace(e,this.target);let s=t;return kt.enabled===!1||n===i||!n||!i||(kt.getTransfer(n)===pr&&(s=Mi(Bp(s.rgb),s.a)),kt.getPrimaries(n)!==kt.getPrimaries(i)&&(s=Mi(O6(kt._getMatrix(new wi,n,i)).mul(s.rgb),s.a)),kt.getTransfer(i)===pr&&(s=Mi(Vp(s.rgb),s.a))),s}}const Hp=r=>Be(new $o(Be(r),xr,T0)),Gp=r=>Be(new $o(Be(r),T0,xr)),Wp=(r,e)=>Be(new $o(Be(r),xr,e)),Xp=(r,e)=>Be(new $o(Be(r),e,xr));le("toOutputColorSpace",Hp),le("toWorkingColorSpace",Gp),le("workingToColorSpace",Wp),le("colorSpaceToWorking",Xp);class Yp extends d0{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),n=this.referenceNode.getNodeType(),i=this.getNodeType();return e.format(t,n,i)}}class $p extends Ft{static get type(){return"ReferenceBaseNode"}constructor(e,t,n=null,i=null){super(),this.property=e,this.uniformType=t,this.object=n,this.count=i,this.properties=e.split("."),this.reference=n,this.node=null,this.group=null,this.updateType=U1.OBJECT}setGroup(e){return this.group=e,this}element(e){return Be(new Yp(this,Be(e)))}setNodeType(e){const t=xf(null,e).getSelf();this.group!==null&&t.setGroup(this.group),this.node=t}getNodeType(e){return this.node===null&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let n=e[t[0]];for(let i=1;i<t.length;i++)n=n[t[i]];return n}updateReference(e){return this.reference=this.object!==null?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class Zp extends $p{static get type(){return"RendererReferenceNode"}constructor(e,t,n=null){super(e,t,n),this.renderer=n,this.setGroup(ff)}updateReference(e){return this.reference=this.renderer!==null?this.renderer:e.renderer,this.reference}}const jp=(r,e,t=null)=>Be(new Zp(r,e,t));class Jp extends n1{static get type(){return"ToneMappingNode"}constructor(e,t=Qp,n=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=n}customCacheKey(){return C6(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,n=this.toneMapping;if(n===t0)return t;let i=null;const s=e.renderer.library.getToneMappingFunction(n);return s!==null?i=Mi(s(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),i=t),i}}const Kp=(r,e,t)=>Be(new Jp(r,Be(e),Be(t))),Qp=jp("toneMappingExposure","float");le("toneMapping",(r,e,t)=>Kp(e,t,r));const It=new En,Zo=new Bo;class eg{constructor(e,t,n=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=n,this.usage=Fo,this.updateRanges=[],this.gpuType=wm,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,n){e*=this.itemSize,n*=t.itemSize;for(let i=0,s=this.itemSize;i<s;i++)this.array[e+i]=t.array[n+i];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,n=this.count;t<n;t++)Zo.fromBufferAttribute(this,t),Zo.applyMatrix3(e),this.setXY(t,Zo.x,Zo.y);else if(this.itemSize===3)for(let t=0,n=this.count;t<n;t++)It.fromBufferAttribute(this,t),It.applyMatrix3(e),this.setXYZ(t,It.x,It.y,It.z);return this}applyMatrix4(e){for(let t=0,n=this.count;t<n;t++)It.fromBufferAttribute(this,t),It.applyMatrix4(e),this.setXYZ(t,It.x,It.y,It.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)It.fromBufferAttribute(this,t),It.applyNormalMatrix(e),this.setXYZ(t,It.x,It.y,It.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)It.fromBufferAttribute(this,t),It.transformDirection(e),this.setXYZ(t,It.x,It.y,It.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let n=this.array[e*this.itemSize+t];return this.normalized&&(n=Bn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=mt(n,this.array)),this.array[e*this.itemSize+t]=n,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=Bn(t,this.array)),t}setX(e,t){return this.normalized&&(t=mt(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=Bn(t,this.array)),t}setY(e,t){return this.normalized&&(t=mt(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=Bn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=mt(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=Bn(t,this.array)),t}setW(e,t){return this.normalized&&(t=mt(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,n){return e*=this.itemSize,this.normalized&&(t=mt(t,this.array),n=mt(n,this.array)),this.array[e+0]=t,this.array[e+1]=n,this}setXYZ(e,t,n,i){return e*=this.itemSize,this.normalized&&(t=mt(t,this.array),n=mt(n,this.array),i=mt(i,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e*=this.itemSize,this.normalized&&(t=mt(t,this.array),n=mt(n,this.array),i=mt(i,this.array),s=mt(s,this.array)),this.array[e+0]=t,this.array[e+1]=n,this.array[e+2]=i,this.array[e+3]=s,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Fo&&(e.usage=this.usage),e}}const ln=new En;class A0{constructor(e,t,n,i=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=n,this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,n=this.data.count;t<n;t++)ln.fromBufferAttribute(this,t),ln.applyMatrix4(e),this.setXYZ(t,ln.x,ln.y,ln.z);return this}applyNormalMatrix(e){for(let t=0,n=this.count;t<n;t++)ln.fromBufferAttribute(this,t),ln.applyNormalMatrix(e),this.setXYZ(t,ln.x,ln.y,ln.z);return this}transformDirection(e){for(let t=0,n=this.count;t<n;t++)ln.fromBufferAttribute(this,t),ln.transformDirection(e),this.setXYZ(t,ln.x,ln.y,ln.z);return this}getComponent(e,t){let n=this.array[e*this.data.stride+this.offset+t];return this.normalized&&(n=Bn(n,this.array)),n}setComponent(e,t,n){return this.normalized&&(n=mt(n,this.array)),this.data.array[e*this.data.stride+this.offset+t]=n,this}setX(e,t){return this.normalized&&(t=mt(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=mt(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=mt(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=mt(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=Bn(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=Bn(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=Bn(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=Bn(t,this.array)),t}setXY(e,t,n){return e=e*this.data.stride+this.offset,this.normalized&&(t=mt(t,this.array),n=mt(n,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this}setXYZ(e,t,n,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=mt(t,this.array),n=mt(n,this.array),i=mt(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this}setXYZW(e,t,n,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=mt(t,this.array),n=mt(n,this.array),i=mt(i,this.array),s=mt(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=n,this.data.array[e+2]=i,this.data.array[e+3]=s,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return new eg(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new A0(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let n=0;n<this.count;n++){const i=n*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)t.push(this.data.array[i+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class tg{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Fo,this.updateRanges=[],this.version=0,this.uuid=ko()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,n){e*=this.stride,n*=t.stride;for(let i=0,s=this.stride;i<s;i++)this.array[e+i]=t.array[n+i];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=ko()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(t,this.stride);return n.setUsage(this.usage),n}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=ko()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}class ng extends q0{static get type(){return"BufferAttributeNode"}constructor(e,t=null,n=0,i=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=n,this.bufferOffset=i,this.usage=Fo,this.instanced=!1,this.attribute=null,this.global=!0,e&&e.isBufferAttribute===!0&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(this.bufferStride===0&&this.bufferOffset===0){let t=e.globalCache.getData(this.value);return t===void 0&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return this.bufferType===null&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(this.attribute!==null)return;const t=this.getNodeType(e),n=this.value,i=e.getTypeLength(t),s=this.bufferStride||i,o=this.bufferOffset,a=n.isInterleavedBuffer===!0?n:new tg(n,s),l=new A0(a,i,o);a.setUsage(this.usage),this.attribute=l,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),n=e.getBufferAttributeFromNode(this,t),i=e.getPropertyName(n);let s=null;return e.shaderStage==="vertex"||e.shaderStage==="compute"?(this.name=i,s=i):s=E0(this).build(e,t),s}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const ig=(r,e=null,t=0,n=0)=>Be(new ng(r,e,t,n));le("toAttribute",r=>ig(r.value));class sg extends Ft{static get type(){return"ComputeNode"}constructor(e,t,n=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=n,this.dispatchCount=0,this.version=1,this.name="",this.updateBeforeType=U1.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}label(e){return this.name=e,this}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let n=t[0];for(let i=1;i<t.length;i++)n*=t[i];this.dispatchCount=Math.ceil(e/n)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if(t==="compute"){const n=this.computeNode.build(e,"void");n!==""&&e.addLineFlowCode(n,this)}}}le("compute",(r,e,t)=>Be(new sg(Be(r),e,t)));class rg extends Ft{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),n=e.getCacheFromNode(this,this.parent);e.setCache(n);const i=this.node.getNodeType(e);return e.setCache(t),i}build(e,...t){const n=e.getCache(),i=e.getCacheFromNode(this,this.parent);e.setCache(i);const s=this.node.build(e,...t);return e.setCache(n),s}}le("cache",(r,e)=>Be(new rg(Be(r),e)));class og extends Ft{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return t!==""&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}le("bypass",we(og));class e7 extends Ft{static get type(){return"RemapNode"}constructor(e,t,n,i=Yo(0),s=Yo(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=n,this.outLowNode=i,this.outHighNode=s,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:n,outLowNode:i,outHighNode:s,doClamp:o}=this;let a=e.sub(t).div(n.sub(t));return o===!0&&(a=a.clamp()),a.mul(s.sub(i)).add(i)}}const ag=we(e7,null,null,{doClamp:!1}),lg=we(e7);le("remap",ag),le("remapClamp",lg);class cg extends Ft{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const n=this.getNodeType(e),i=this.snippet;if(n==="void")e.addLineFlowCode(i,this);else return e.format(`( ${i} )`,n,t)}}const t7=we(cg);le("discard",r=>(r?b0(r,t7("discard")):t7("discard")).append());class hg extends n1{static get type(){return"RenderOutputNode"}constructor(e,t,n){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=n,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const n=(this.toneMapping!==null?this.toneMapping:e.toneMapping)||t0,i=(this.outputColorSpace!==null?this.outputColorSpace:e.outputColorSpace)||n0;return n!==t0&&(t=t.toneMapping(n)),i!==n0&&i!==kt.workingColorSpace&&(t=t.workingToColorSpace(i)),t}}le("renderOutput",(r,e=null,t=null)=>Be(new hg(Be(r),e,t)));class ug{constructor(e){this.elements=[],this.connectors=[],this.mode="VIEW",this.helpers=!1,this.container=e,this.initScene(),this.initCamera(),this.setHelpers(),this.initRenderer(),this.initLighting(),this.initControls(),this.addEventListeners(),this.animate(),console.log("THREE",Vq),console.log(this)}initScene(){this.scene=new Ha,this.scene.background=new _e(15790320)}initCamera(){const e=window.innerWidth/window.innerHeight;this.camera=new Ot(75,e,.1,2e3),this.camera.position.set(0,0,500),this.camera.updateProjectionMatrix()}setHelpers(){this.axesHelper=new D5(100),this.cameraHelper=new L5(this.camera);const e=400,t=50;this.gridHelper=new I5(e,t),this.cameraDirection=new L,this.camPositionSpan=document.querySelector("#position"),this.camLookAtSpan=document.querySelector("#lookingAt"),this.helpers=!1}showHelpers(){this.helpers||(this.scene.add(this.axesHelper),this.scene.add(this.cameraHelper),this.scene.add(this.gridHelper),this.helpers=!0)}hideHelpers(){this.helpers&&(this.scene.remove(this.axesHelper),this.scene.remove(this.cameraHelper),this.scene.remove(this.gridHelper),this.helpers=!1)}initRenderer(){this.renderer=new q6({antialias:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(this.renderer.domElement),console.log("initRenderer",this.container,this.renderer.domElement)}initLighting(){let e=16777215,t=4,n=0,i=0;const s=new vo(e,t,n,i);let o=-1*(580/2)+1/3*580,a=-1*209*4,l=Math.abs(a);s.position.set(o,a,l),this.scene.add(s),this.spotLight=new vo(16777215,4,0,0),this.spotLightPosX=0,this.spotLightPosY=-1*209-300,this.spotLightPosZ=70,this.scene.add(this.spotLight),this.spotLightDirection=1}initControls(){this.controls=new sm(this.camera,this.renderer.domElement),this.controls.enableDamping=!0,this.controls.dampingFactor=.1,this.controls.screenSpacePanning=!0,this.controls.zoomToCursor=!0,this.controls.saveState()}addEventListeners(){window.addEventListener("resize",this.onWindowResize.bind(this),!1)}onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}animate(){this.tween&&this.tween.update(),requestAnimationFrame(this.animate.bind(this)),this.controls.update(),this.renderer.render(this.scene,this.camera),this.spotLightPosX>500&&(this.spotLightDirection=-1,this.spotLightPosX=500),this.spotLightPosX<-500&&(this.spotLightDirection=1,this.spotLightPosX=-500),this.spotLightPosX+=10*this.spotLightDirection,this.spotLight.position.set(this.spotLightPosX,this.spotLightPosY,this.spotLightPosZ),this.camera.getWorldDirection(this.cameraDirection),this.cameraDirection.set(this.cameraDirection.x*100,this.cameraDirection.y*100,this.cameraDirection.z*100),this.camPositionSpan.innerHTML=`Position: (${this.camera.position.x.toFixed(1)}, ${this.camera.position.y.toFixed(1)}, ${this.camera.position.z.toFixed(1)})`,this.camLookAtSpan.innerHTML=`LookAt: (${(this.camera.position.x+this.cameraDirection.x).toFixed(1)}, ${(this.camera.position.y+this.cameraDirection.y).toFixed(1)}, ${(this.camera.position.z+this.cameraDirection.z).toFixed(1)})`}reset(){this.hideHelpers(),this.controls.reset(),this.setMode("VIEW"),this.fitScreen()}arrange(){if(this.scene.children.length===0){console.warn("Scene is empty. Cannot calculate center.");return}const t=new Vt().setFromObject(this.scene).getCenter(new L),n=new L(-t.x,-t.y,-t.z);this.scene.children.forEach(i=>{i instanceof it&&i.position.add(n)})}fitScreen(){const t=new Vt().setFromObject(this.scene).getSize(new L);console.log("fitScreen() -> size:",t);const n=Math.max(t.x,t.y,t.z),i=this.camera.fov*(Math.PI/180),s=Math.abs(n/2/Math.tan(i/2));this.camera.position.set(0,0,s),this.camera.lookAt(new L(0,0,0)),this.camera.updateProjectionMatrix(),this.controls.saveState(),this.initialCameraPosition=this.camera.position.clone(),this.initialTarget=this.controls.target.clone()}center(){if(!this.initialCameraPosition||!this.initialTarget){console.warn("Initial camera position or target is not defined.");return}const e={cameraPositionX:this.camera.position.x,cameraPositionY:this.camera.position.y,cameraPositionZ:this.camera.position.z,controlsTargetX:this.controls.target.x,controlsTargetY:this.controls.target.y,controlsTargetZ:this.controls.target.z},t={cameraPositionX:this.initialCameraPosition.x,cameraPositionY:this.initialCameraPosition.y,cameraPositionZ:this.initialCameraPosition.z,controlsTargetX:this.initialTarget.x,controlsTargetY:this.initialTarget.y,controlsTargetZ:this.initialTarget.z},n=this.camera,i=this.controls;this.tween=new f6(e).to(t,1200).easing(vi.Quartic.Out).onUpdate(function(){n.position.set(e.cameraPositionX,e.cameraPositionY,e.cameraPositionZ),i.target.set(e.controlsTargetX,e.controlsTargetY,e.controlsTargetZ)}).onComplete(function(){}).start()}rotate(e){if(!this.initialCameraPosition||!this.initialTarget){console.warn("Initial camera position or target is not defined.");return}const t=Math.sqrt(this.initialCameraPosition.y*this.initialCameraPosition.y+this.initialCameraPosition.z*this.initialCameraPosition.z),n={cameraPositionX:this.camera.position.x,cameraPositionY:this.camera.position.y,cameraPositionZ:this.camera.position.z,controlsTargetX:this.controls.target.x,controlsTargetY:this.controls.target.y,controlsTargetZ:this.controls.target.z},i=va.degToRad(e),s={cameraPositionX:this.initialCameraPosition.x,cameraPositionY:t*Math.sin(i),cameraPositionZ:t*Math.cos(i),controlsTargetX:this.initialTarget.x,controlsTargetY:this.initialTarget.y,controlsTargetZ:this.initialTarget.z};console.log("rotate() -> from:",n),console.log("rotate() -> to:",s);const o=this.camera,a=this.controls;this.tween=new f6(n).to(s,1200).easing(vi.Quartic.Out).onUpdate(function(){o.position.set(n.cameraPositionX,n.cameraPositionY,n.cameraPositionZ),a.target.set(n.controlsTargetX,n.controlsTargetY,n.controlsTargetZ)}).start()}removeValueBars(){for(let e=this.elements.length-1;e>=0;e--){const t=this.elements[e];t.type==="ValueBarShape"&&(t.parent&&t.parent.remove(t),this.scene.remove(t),this.elements.splice(e,1))}}addValueBars(){const e=this.elements.filter(s=>s.parameters&&s.parameters.value!==void 0);if(e.length===0)throw new Error("No elements with `parameters.value` found.");const t=Math.max(...e.map(s=>s.parameters.value)),n=0,i=t-n;e.forEach((s,o)=>{const l=(s.parameters.value-n)/i,c=new _e(`hsl(${(l*120).toString(10)}, 100%, 50%)`);s.addValueBar(l*100,c)})}setMode(e){switch(this.removeValueBars(),this.mode=e,e){case"EDIT":case"VIEW":this.rotate(0);break;case"ANALYZE":this.rotate(-65),this.addValueBars();break;default:console.warn(`Unknown mode: ${e}`)}}addElement(e,t){return this.elements.push(e),this.scene.add(e),t&&e.position.set(t.x,t.y,0),e.setDiagram(this),e}getElementById(e){return this.elements.find(t=>t.elementId===e)}getElements(){return this.elements}addConnector(e){return this.connectors.push(e),this.scene.add(e),e.setDiagram(this),e}clear(){this.elements=[],this.connectors=[],this.scene.children=this.scene.children.filter(e=>e instanceof A4)}toJSON(){return JSON.stringify(this.elements)}fromJSON(e){this.elements=JSON.parse(e)}export(){const e=JSON.stringify(this.scene.toJSON()),t=new Blob([e],{type:"application/json"}),n=URL.createObjectURL(t),i=document.createElement("a");i.href=n,i.download="diagram.json",i.click(),URL.revokeObjectURL(n)}import(e){console.error("Import method should be implemented by subclasses.")}}const wn={DISTANCE_BETWEEN_ELEMENTS:48},jo={steps:2,depth:.6,bevelEnabled:!0,bevelThickness:.2,bevelSize:.4,bevelOffset:0,bevelSegments:4},qs={ELEMENT_STROKE:26265,ELEMENT_TEXT:26265};class V1{constructor(e,t){this.geometry=e,this.material=t,this.width=this.getSize().x,this.height=this.getSize().y}getSize(){var e=new L;return this.geometry.computeBoundingBox(),this.geometry.boundingBox.getSize(e),e}}class Si extends g4{constructor(e){super({vertexColors:!1,color:e,side:Cn,emissive:new _e(e),emissiveIntensity:.1})}}class dg extends V1{constructor(){super(new N1(1,1,1),new Si(255))}}class qg extends jt{constructor(e){super(e)}load(e,t,n,i){const s=this,o=new Un(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(a){const l=s.parse(JSON.parse(a));t&&t(l)},n,i)}parse(e){return new mg(e)}}class mg{constructor(e){this.isFont=!0,this.type="Font",this.data=e}generateShapes(e,t=100){const n=[],i=fg(e,t,this.data);for(let s=0,o=i.length;s<o;s++)n.push(...i[s].toShapes());return n}}function fg(r,e,t){const n=Array.from(r),i=e/t.resolution,s=(t.boundingBox.yMax-t.boundingBox.yMin+t.underlineThickness)*i,o=[];let a=0,l=0;for(let c=0;c<n.length;c++){const h=n[c];if(h===`
`)a=0,l-=s;else{const u=pg(h,i,a,l,t);a+=u.offsetX,o.push(u.path)}}return o}function pg(r,e,t,n,i){const s=i.glyphs[r]||i.glyphs["?"];if(!s){console.error('THREE.Font: character "'+r+'" does not exists in font family '+i.familyName+".");return}const o=new y1;let a,l,c,h,u,d,q,m;if(s.o){const g=s._cachedOutline||(s._cachedOutline=s.o.split(" "));for(let p=0,f=g.length;p<f;)switch(g[p++]){case"m":a=g[p++]*e+t,l=g[p++]*e+n,o.moveTo(a,l);break;case"l":a=g[p++]*e+t,l=g[p++]*e+n,o.lineTo(a,l);break;case"q":c=g[p++]*e+t,h=g[p++]*e+n,u=g[p++]*e+t,d=g[p++]*e+n,o.quadraticCurveTo(u,d,c,h);break;case"b":c=g[p++]*e+t,h=g[p++]*e+n,u=g[p++]*e+t,d=g[p++]*e+n,q=g[p++]*e+t,m=g[p++]*e+n,o.bezierCurveTo(u,d,q,m,c,h);break}}return{offsetX:s.ha*e,path:o}}class gg extends e1{constructor(e,t={}){const n=t.font;if(n===void 0)super();else{const i=n.generateShapes(e,t.size);t.depth===void 0&&t.height!==void 0&&console.warn("THREE.TextGeometry: .height is now depreciated. Please use .depth instead"),t.depth=t.depth!==void 0?t.depth:t.height!==void 0?t.height:50,t.bevelThickness===void 0&&(t.bevelThickness=10),t.bevelSize===void 0&&(t.bevelSize=8),t.bevelEnabled===void 0&&(t.bevelEnabled=!1),super(i,t)}this.type="TextGeometry"}}const xg={glyphs:JSON.parse('{"0":{"ha":781,"x_min":78,"x_max":702,"o":"m 702 572 l 702 422 q 680 217 702 300 q 618 83 659 134 q 520 9 577 32 q 391 -14 463 -14 q 286 1 334 -14 q 199 46 237 15 q 134 129 161 78 q 92 252 106 180 q 78 422 78 325 l 78 572 q 100 776 78 694 q 163 908 122 858 q 261 979 203 958 q 389 1001 318 1001 q 495 987 447 1001 q 582 943 544 973 q 647 863 620 913 q 688 741 673 813 q 702 572 702 669 m 576 401 l 576 593 q 568 710 576 660 q 545 797 560 761 q 508 855 530 833 q 455 888 485 878 q 389 899 426 899 q 310 882 345 899 q 252 829 275 865 q 216 735 229 793 q 204 593 204 677 l 204 401 q 212 284 204 335 q 235 196 220 233 q 273 136 251 159 q 325 101 296 112 q 391 90 355 90 q 471 107 437 90 q 529 162 506 125 q 564 259 553 200 q 576 401 576 319 z "},"1":{"ha":781,"x_min":116,"x_max":494,"o":"m 494 993 l 494 0 l 369 0 l 369 836 l 116 744 l 116 857 l 475 993 l 494 993 z "},"2":{"ha":781,"x_min":64,"x_max":729,"o":"m 729 103 l 729 0 l 83 0 l 83 90 l 406 450 q 499 563 466 517 q 545 647 532 610 q 558 722 558 684 q 538 811 558 771 q 479 874 518 850 q 386 898 441 898 q 276 872 320 898 q 211 802 233 847 q 189 697 189 756 l 64 697 q 100 850 64 781 q 209 960 137 919 q 386 1001 281 1001 q 546 968 479 1001 q 648 876 612 935 q 684 737 684 817 q 669 649 684 694 q 629 561 654 605 q 570 474 604 517 q 498 390 536 431 l 234 103 l 729 103 z "},"3":{"ha":781,"x_min":64,"x_max":690,"o":"m 265 555 l 355 555 q 464 577 420 555 q 528 638 507 600 q 549 724 549 676 q 530 820 549 781 q 473 878 511 859 q 377 898 435 898 q 284 877 324 898 q 221 819 243 857 q 198 729 198 781 l 73 729 q 111 866 73 804 q 217 964 149 928 q 377 1001 286 1001 q 534 969 467 1001 q 638 876 601 938 q 675 722 675 814 q 658 642 675 684 q 605 563 641 600 q 511 503 568 526 q 372 479 453 479 l 265 479 l 265 555 m 265 452 l 265 528 l 372 528 q 528 505 467 528 q 626 446 590 483 q 676 364 661 408 q 690 275 690 319 q 667 153 690 206 q 601 62 644 99 q 502 5 559 24 q 378 -14 445 -14 q 257 5 313 -14 q 157 58 200 23 q 89 144 113 93 q 64 261 64 195 l 190 261 q 213 171 190 210 q 278 111 235 132 q 378 90 320 90 q 477 110 435 90 q 542 170 519 130 q 564 273 564 211 q 538 374 564 334 q 466 433 513 414 q 355 452 418 452 l 265 452 z "},"4":{"ha":781,"x_min":36,"x_max":749,"o":"m 749 332 l 749 229 l 36 229 l 36 303 l 478 987 l 581 987 l 471 789 l 178 332 l 749 332 m 612 987 l 612 0 l 486 0 l 486 987 l 612 987 z "},"5":{"ha":781,"x_min":104,"x_max":726,"o":"m 241 470 l 140 496 l 190 987 l 696 987 l 696 871 l 296 871 l 267 603 q 335 632 294 618 q 431 646 377 646 q 554 622 500 646 q 647 555 608 599 q 705 451 685 512 q 726 315 726 390 q 706 184 726 243 q 648 80 687 124 q 551 11 610 35 q 413 -14 492 -14 q 300 3 353 -14 q 205 54 247 20 q 137 139 163 88 q 104 260 111 191 l 224 260 q 256 166 232 204 q 320 109 281 128 q 413 90 360 90 q 492 105 458 90 q 551 150 527 121 q 587 220 574 179 q 600 313 600 262 q 587 400 600 360 q 548 470 574 440 q 486 516 523 500 q 402 533 450 533 q 307 516 339 533 q 241 470 275 499 z "},"6":{"ha":781,"x_min":90,"x_max":714,"o":"m 564 989 l 574 989 l 574 882 l 564 882 q 397 850 464 882 q 290 764 330 818 q 234 643 251 710 q 216 507 216 576 l 216 361 q 232 245 216 296 q 275 160 248 195 q 336 108 302 125 q 408 90 370 90 q 485 107 451 90 q 542 154 519 123 q 578 225 566 184 q 590 316 590 267 q 579 401 590 360 q 546 474 568 442 q 490 525 524 507 q 410 544 456 544 q 313 518 358 544 q 239 452 268 493 q 206 363 210 411 l 140 363 q 175 493 149 439 q 240 582 201 547 q 328 632 279 616 q 431 648 376 648 q 558 620 505 648 q 646 546 612 592 q 697 441 681 499 q 714 322 714 383 q 694 191 714 252 q 636 84 675 130 q 540 12 597 38 q 408 -14 483 -14 q 268 19 328 -14 q 169 107 208 52 q 110 229 130 162 q 90 366 90 296 l 90 425 q 111 629 90 529 q 184 811 132 730 q 328 941 236 892 q 564 989 420 989 z "},"7":{"ha":781,"x_min":53,"x_max":720,"o":"m 720 987 l 720 917 l 311 0 l 179 0 l 587 884 l 53 884 l 53 987 l 720 987 z "},"8":{"ha":781,"x_min":77,"x_max":705,"o":"m 705 267 q 663 114 705 177 q 550 19 621 52 q 391 -14 479 -14 q 231 19 302 -14 q 118 114 159 52 q 77 267 77 177 q 99 375 77 326 q 164 461 122 425 q 263 518 205 498 q 389 538 320 538 q 551 503 480 538 q 664 407 623 468 q 705 267 705 346 m 578 270 q 555 367 578 325 q 488 433 531 410 q 389 457 446 457 q 290 433 332 457 q 225 367 248 410 q 202 270 202 325 q 225 173 202 213 q 290 111 248 132 q 391 90 332 90 q 491 111 449 90 q 556 173 533 132 q 578 270 578 213 m 682 730 q 644 601 682 659 q 540 510 606 543 q 391 477 474 477 q 240 510 306 477 q 136 601 174 543 q 99 730 99 659 q 137 877 99 817 q 240 969 174 937 q 390 1001 306 1001 q 541 969 475 1001 q 644 877 606 937 q 682 730 682 817 m 556 728 q 535 816 556 778 q 477 876 514 854 q 390 898 439 898 q 303 877 340 898 q 246 819 267 857 q 225 728 225 781 q 246 640 225 677 q 304 581 267 602 q 391 559 341 559 q 477 581 440 559 q 535 640 514 602 q 556 728 556 677 z "},"9":{"ha":781,"x_min":68,"x_max":689,"o":"m 207 105 l 220 105 q 396 136 328 105 q 500 218 464 166 q 551 334 537 269 q 564 467 564 399 l 564 618 q 549 738 564 686 q 507 825 534 790 q 446 879 480 861 q 374 897 412 897 q 297 880 331 897 q 239 831 262 863 q 203 758 216 800 q 191 667 191 716 q 202 581 191 623 q 235 507 213 540 q 291 454 258 473 q 370 435 325 435 q 449 451 412 435 q 515 497 486 468 q 561 562 544 526 q 581 639 578 599 l 641 639 q 619 528 641 583 q 557 429 597 473 q 465 357 518 384 q 350 330 412 330 q 223 359 277 330 q 135 435 170 387 q 84 541 101 482 q 68 660 68 600 q 87 792 68 730 q 146 901 107 854 q 242 975 184 948 q 374 1001 299 1001 q 519 967 459 1001 q 616 876 578 933 q 671 748 654 819 q 689 602 689 677 l 689 556 q 679 400 689 479 q 642 250 669 321 q 562 121 614 178 q 426 32 510 64 q 220 -1 342 -1 l 207 -1 l 207 105 z "},"\\u0000":{"ha":0,"x_min":0,"x_max":0,"o":""},"\\u0002":{"ha":0,"x_min":0,"x_max":0,"o":""},"\\r":{"ha":345,"x_min":0,"x_max":0,"o":""}," ":{"ha":345,"x_min":0,"x_max":0,"o":""},"!":{"ha":358,"x_min":109,"x_max":258,"o":"m 245 987 l 236 279 l 123 279 l 113 987 l 245 987 m 109 63 q 128 115 109 94 q 183 136 146 136 q 238 115 219 136 q 258 63 258 94 q 238 13 258 34 q 183 -8 219 -8 q 128 13 146 -8 q 109 63 109 34 z "},"\\"":{"ha":445,"x_min":93,"x_max":372,"o":"m 189 1042 l 189 949 l 168 707 l 93 707 l 93 943 l 93 1042 l 189 1042 m 372 1042 l 372 949 l 351 707 l 276 707 l 276 948 l 276 1042 l 372 1042 z "},"#":{"ha":855,"x_min":81,"x_max":838,"o":"m 189 0 l 381 987 l 479 987 l 286 0 l 189 0 m 465 0 l 658 987 l 755 987 l 562 0 l 465 0 m 838 611 l 132 611 l 132 705 l 838 705 l 838 611 m 787 278 l 81 278 l 81 372 l 787 372 l 787 278 z "},"$":{"ha":781,"x_min":75,"x_max":707,"o":"m 457 1147 l 457 941 l 355 941 l 355 1147 l 457 1147 m 445 40 l 445 -141 l 344 -141 l 344 40 l 445 40 m 581 254 q 562 328 581 295 q 502 387 544 360 q 389 437 460 414 q 242 502 304 464 q 146 596 180 540 q 113 732 113 652 q 149 876 113 816 q 250 969 184 937 q 405 1002 316 1002 q 528 981 474 1002 q 620 920 583 960 q 678 820 658 879 q 698 684 698 761 l 573 684 q 562 767 573 729 q 530 833 551 805 q 477 877 508 861 q 405 892 446 892 q 311 872 348 892 q 256 817 274 852 q 239 734 239 781 q 256 659 239 691 q 316 600 274 626 q 433 549 359 574 q 582 483 521 521 q 675 391 643 446 q 707 256 707 336 q 667 108 707 168 q 557 17 628 48 q 390 -14 486 -14 q 276 1 332 -14 q 174 53 220 17 q 102 147 129 88 q 75 291 75 205 l 201 291 q 217 196 201 233 q 262 136 234 158 q 323 105 290 114 q 390 96 357 96 q 493 115 451 96 q 558 170 536 134 q 581 254 581 206 z "},"%":{"ha":1017,"x_min":71,"x_max":957,"o":"m 71 745 l 71 798 q 96 900 71 854 q 165 974 120 946 q 273 1002 211 1002 q 382 974 337 1002 q 452 900 427 946 q 476 798 476 854 l 476 745 q 452 644 476 690 q 383 570 428 598 q 275 543 338 543 q 166 570 212 543 q 96 644 120 598 q 71 745 71 690 m 165 798 l 165 745 q 177 686 165 714 q 214 641 189 659 q 275 624 238 624 q 335 641 311 624 q 370 686 359 659 q 382 745 382 714 l 382 798 q 370 858 382 829 q 334 903 358 886 q 273 920 310 920 q 213 903 237 920 q 177 858 189 886 q 165 798 165 829 m 552 189 l 552 242 q 576 344 552 298 q 646 418 601 390 q 754 446 692 446 q 863 418 818 446 q 932 344 908 390 q 957 242 957 298 l 957 189 q 933 87 957 134 q 864 14 909 41 q 755 -14 819 -14 q 647 14 692 -14 q 577 87 602 41 q 552 189 552 134 m 646 242 l 646 189 q 658 130 646 158 q 694 84 670 102 q 755 67 719 67 q 816 84 792 67 q 852 130 840 102 q 863 189 863 157 l 863 242 q 851 302 863 274 q 815 347 840 330 q 754 364 791 364 q 694 347 718 364 q 658 302 670 330 q 646 242 646 274 m 785 847 l 303 75 l 233 120 l 715 892 l 785 847 z "},"&":{"ha":864,"x_min":69,"x_max":859,"o":"m 278 548 l 426 653 q 492 712 469 682 q 515 793 515 741 q 484 866 515 833 q 396 899 453 899 q 330 880 357 899 q 289 832 302 862 q 275 766 275 802 q 290 703 275 735 q 332 635 305 670 q 392 560 358 600 l 859 0 l 709 0 l 326 458 q 235 568 275 518 q 172 665 195 618 q 149 762 149 711 q 180 892 149 839 q 267 973 211 945 q 397 1001 322 1001 q 522 972 469 1001 q 603 896 574 943 q 631 793 631 849 q 614 708 631 745 q 567 639 597 670 q 497 578 537 608 l 301 432 q 230 363 252 396 q 201 306 208 331 q 195 266 195 281 q 216 178 195 218 q 280 114 237 138 q 388 90 323 90 q 499 116 445 90 q 595 190 553 142 q 664 306 638 239 q 689 456 689 374 l 802 456 q 789 329 802 389 q 749 218 776 269 q 681 125 722 167 q 671 111 675 119 q 662 96 668 102 q 537 14 611 41 q 388 -14 463 -14 q 218 22 290 -14 q 108 121 146 58 q 69 266 69 184 q 96 376 69 328 q 170 465 123 423 q 278 548 217 506 z "},"\'":{"ha":243,"x_min":71,"x_max":172,"o":"m 172 1042 l 172 967 l 158 718 l 71 718 l 71 956 l 71 1042 l 172 1042 z "},"(":{"ha":475,"x_min":91,"x_max":449,"o":"m 91 395 l 91 401 q 124 669 91 549 q 209 879 157 789 q 317 1028 260 969 q 422 1114 374 1088 l 449 1031 q 368 947 409 1001 q 293 816 327 894 q 237 635 258 738 q 216 403 216 532 l 216 393 q 237 161 216 264 q 293 -21 258 58 q 368 -155 327 -100 q 449 -243 409 -210 l 422 -319 q 317 -233 374 -292 q 209 -84 260 -174 q 124 126 157 6 q 91 395 91 246 z "},")":{"ha":484,"x_min":26,"x_max":385,"o":"m 385 401 l 385 395 q 351 126 385 246 q 267 -84 318 6 q 158 -233 215 -174 q 53 -319 101 -292 l 26 -243 q 107 -158 66 -212 q 182 -23 148 -103 q 238 160 217 56 q 259 393 259 264 l 259 403 q 237 636 259 532 q 179 819 214 740 q 103 953 143 899 q 26 1038 62 1008 l 53 1114 q 158 1028 101 1088 q 267 879 215 969 q 351 669 318 789 q 385 401 385 549 z "},"*":{"ha":598,"x_min":19,"x_max":579,"o":"m 87 480 l 224 667 l 19 728 l 51 830 l 256 755 l 250 988 l 353 988 l 346 751 l 548 826 l 579 722 l 371 661 l 505 477 l 420 414 l 295 609 l 172 418 l 87 480 z "},"+":{"ha":788,"x_min":53,"x_max":730,"o":"m 730 530 l 730 412 l 53 412 l 53 530 l 730 530 m 454 818 l 454 99 l 329 99 l 329 818 l 454 818 z "},",":{"ha":273,"x_min":20,"x_max":210,"o":"m 210 149 l 210 48 q 178 -82 210 -14 q 91 -197 147 -151 l 20 -148 q 56 -87 41 -118 q 79 -23 71 -56 q 87 46 87 9 l 87 149 l 210 149 z "},"-":{"ha":384,"x_min":26,"x_max":357,"o":"m 357 471 l 357 368 l 26 368 l 26 471 l 357 471 z "},".":{"ha":366,"x_min":98,"x_max":254,"o":"m 98 66 q 118 120 98 98 q 176 142 138 142 q 234 120 214 142 q 254 66 254 98 q 234 14 254 35 q 176 -8 214 -8 q 118 14 138 -8 q 98 66 98 35 z "},"/":{"ha":573,"x_min":13,"x_max":532,"o":"m 532 987 l 121 -85 l 13 -85 l 425 987 l 532 987 z "},":":{"ha":336,"x_min":90,"x_max":247,"o":"m 90 66 q 110 120 90 98 q 168 142 130 142 q 226 120 206 142 q 246 66 246 98 q 226 14 246 35 q 168 -8 206 -8 q 110 14 130 -8 q 90 66 90 35 m 91 665 q 111 719 91 697 q 169 741 131 741 q 227 719 207 741 q 247 665 247 697 q 227 612 247 634 q 169 591 207 591 q 111 612 131 591 q 91 665 91 634 z "},";":{"ha":294,"x_min":28,"x_max":231,"o":"m 75 665 q 95 719 75 697 q 153 741 115 741 q 211 719 191 741 q 231 665 231 697 q 211 612 231 634 q 153 591 191 591 q 95 612 115 591 q 75 665 75 634 m 218 149 l 218 48 q 186 -82 218 -14 q 99 -197 155 -151 l 28 -148 q 64 -87 50 -118 q 87 -23 79 -56 q 95 46 95 9 l 95 149 l 218 149 z "},"<":{"ha":706,"x_min":49,"x_max":604,"o":"m 135 456 l 604 266 l 604 133 l 49 390 l 49 468 l 135 456 m 604 612 l 136 419 l 49 410 l 49 488 l 604 745 l 604 612 z "},"=":{"ha":762,"x_min":103,"x_max":669,"o":"m 669 661 l 669 552 l 103 552 l 103 661 l 669 661 m 669 380 l 669 271 l 103 271 l 103 380 l 669 380 z "},">":{"ha":726,"x_min":92,"x_max":671,"o":"m 574 429 l 92 616 l 92 746 l 671 490 l 671 410 l 574 429 m 92 263 l 575 455 l 671 469 l 671 391 l 92 134 l 92 263 z "},"?":{"ha":656,"x_min":51,"x_max":602,"o":"m 368 278 l 242 278 q 254 385 243 343 q 291 461 265 427 q 359 540 317 496 q 417 600 391 572 q 459 661 443 628 q 475 740 475 694 q 459 821 475 787 q 410 873 442 854 q 330 891 378 891 q 256 877 291 891 q 199 833 220 863 q 176 756 177 804 l 51 756 q 89 888 52 833 q 189 972 126 943 q 330 1001 252 1001 q 477 970 416 1001 q 570 881 538 939 q 602 743 602 823 q 577 631 602 682 q 513 535 552 580 q 431 450 475 490 q 381 372 394 415 q 368 278 368 328 m 237 63 q 256 115 237 94 q 311 136 275 136 q 366 115 347 136 q 385 63 385 94 q 366 13 385 34 q 311 -8 347 -8 q 256 13 275 -8 q 237 63 237 34 z "},"@":{"ha":1247,"x_min":74,"x_max":1182,"o":"m 1177 341 q 1158 216 1175 279 q 1109 101 1142 153 q 1025 17 1077 49 q 900 -14 973 -14 q 818 2 853 -14 q 761 50 783 19 q 731 125 739 81 q 728 224 722 170 l 762 600 l 862 600 l 827 224 q 830 143 823 174 q 850 95 836 112 q 881 73 863 79 q 914 66 898 66 q 987 88 955 66 q 1041 147 1019 109 q 1075 234 1063 184 q 1090 341 1087 284 q 1081 527 1095 442 q 1034 677 1067 612 q 948 789 1001 743 q 822 858 895 834 q 654 882 749 882 q 497 856 569 882 q 367 781 425 829 q 269 663 310 732 q 204 509 228 595 q 177 324 181 423 q 188 137 172 222 q 238 -15 203 52 q 327 -128 273 -81 q 451 -198 380 -174 q 608 -222 522 -222 q 729 -208 668 -222 q 832 -170 791 -194 l 858 -247 q 740 -292 810 -277 q 606 -307 669 -307 q 417 -279 503 -307 q 267 -197 332 -251 q 158 -66 201 -143 q 94 109 115 11 q 79 324 74 208 q 112 534 83 435 q 191 712 141 632 q 311 850 241 792 q 468 939 380 908 q 657 970 555 970 q 846 942 762 970 q 995 860 931 913 q 1101 729 1059 806 q 1163 554 1143 652 q 1177 341 1182 456 m 481 283 q 481 199 476 236 q 499 136 486 161 q 535 97 513 110 q 587 83 557 83 q 628 93 606 83 q 671 124 650 103 q 710 179 692 145 q 741 260 728 213 l 785 212 q 745 114 770 156 q 690 43 720 72 q 625 0 659 15 q 555 -14 591 -14 q 469 7 506 -14 q 408 68 431 28 q 376 162 385 107 q 373 283 367 216 q 398 415 379 355 q 445 523 417 475 q 509 604 473 570 q 585 654 545 637 q 667 671 625 671 q 782 650 740 671 q 862 600 824 629 l 804 532 q 753 568 785 551 q 677 584 721 584 q 608 565 640 584 q 549 508 575 546 q 505 414 523 470 q 481 283 488 358 z "},"A":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 z "},"B":{"ha":865,"x_min":115,"x_max":787,"o":"m 467 462 l 216 462 l 215 567 l 442 567 q 541 586 498 567 q 606 641 583 605 q 629 726 629 676 q 609 814 629 780 q 546 864 588 848 q 438 880 503 880 l 245 880 l 245 0 l 115 0 l 115 987 l 438 987 q 574 972 514 987 q 675 925 633 957 q 739 843 717 892 q 760 724 760 793 q 729 614 760 663 q 643 534 698 565 q 513 494 587 503 l 467 462 m 460 0 l 165 0 l 239 106 l 460 106 q 567 128 523 106 q 633 190 610 150 q 656 283 656 229 q 637 378 656 338 q 575 440 617 418 q 467 462 533 462 l 280 462 l 281 567 l 536 567 l 564 529 q 685 489 635 523 q 761 401 734 454 q 787 285 787 349 q 746 129 787 193 q 633 33 706 66 q 460 0 559 0 z "},"C":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 z "},"D":{"ha":911,"x_min":115,"x_max":829,"o":"m 382 0 l 176 0 l 177 106 l 382 106 q 558 151 488 106 q 664 276 629 195 q 700 464 700 356 l 700 524 q 680 675 700 609 q 620 787 659 741 q 524 857 581 833 q 394 880 467 880 l 172 880 l 172 987 l 394 987 q 571 955 491 987 q 709 862 651 923 q 798 716 767 802 q 829 523 829 630 l 829 464 q 798 271 829 357 q 708 125 767 185 q 567 32 650 64 q 382 0 485 0 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 z "},"E":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 z "},"F":{"ha":768,"x_min":115,"x_max":726,"o":"m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 659 543 l 659 436 l 217 436 l 217 543 l 659 543 m 726 987 l 726 880 l 217 880 l 217 987 l 726 987 z "},"G":{"ha":946,"x_min":83,"x_max":844,"o":"m 844 492 l 844 130 q 786 70 826 103 q 676 11 746 36 q 495 -14 606 -14 q 329 18 405 -14 q 198 110 254 50 q 113 258 143 171 q 83 456 83 345 l 83 532 q 109 730 83 643 q 186 877 135 817 q 311 969 237 938 q 480 1001 385 1001 q 670 962 593 1001 q 789 854 746 923 q 844 699 832 786 l 713 699 q 679 796 705 752 q 604 867 652 840 q 480 894 556 894 q 361 869 412 894 q 279 797 311 844 q 230 684 246 750 q 214 534 214 617 l 214 456 q 234 303 214 370 q 292 189 254 236 q 381 117 329 142 q 496 93 433 93 q 609 105 566 93 q 677 133 652 117 q 714 165 701 150 l 714 386 l 486 386 l 486 492 l 844 492 z "},"H":{"ha":991,"x_min":115,"x_max":873,"o":"m 760 563 l 760 456 l 225 456 l 225 563 l 760 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 z "},"I":{"ha":378,"x_min":124,"x_max":255,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 z "},"J":{"ha":766,"x_min":36,"x_max":659,"o":"m 529 288 l 529 987 l 659 987 l 659 288 q 619 123 659 191 q 509 21 579 56 q 348 -14 439 -14 q 186 18 257 -14 q 76 113 116 49 q 36 273 36 176 l 167 273 q 190 171 167 211 q 254 112 213 131 q 348 93 295 93 q 440 115 399 93 q 505 181 481 137 q 529 288 529 224 z "},"K":{"ha":871,"x_min":115,"x_max":871,"o":"m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 842 987 l 431 527 l 201 288 l 179 427 l 353 618 l 684 987 l 842 987 m 715 0 l 350 481 l 428 585 l 871 0 l 715 0 z "},"L":{"ha":748,"x_min":115,"x_max":713,"o":"m 713 106 l 713 0 l 220 0 l 220 106 l 713 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 z "},"M":{"ha":1213,"x_min":115,"x_max":1097,"o":"m 156 987 l 283 987 l 606 182 l 929 987 l 1057 987 l 655 0 l 556 0 l 156 987 m 115 987 l 227 987 l 245 385 l 245 0 l 115 0 l 115 987 m 985 987 l 1097 987 l 1097 0 l 967 0 l 967 385 l 985 987 z "},"N":{"ha":991,"x_min":115,"x_max":874,"o":"m 874 987 l 874 0 l 743 0 l 245 762 l 245 0 l 115 0 l 115 987 l 245 987 l 745 224 l 745 987 l 874 987 z "},"O":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 z "},"P":{"ha":876,"x_min":115,"x_max":825,"o":"m 479 387 l 215 387 l 215 494 l 479 494 q 603 518 555 494 q 672 586 650 543 q 694 685 694 629 q 672 781 694 736 q 603 853 650 825 q 479 880 555 880 l 245 880 l 245 0 l 115 0 l 115 987 l 479 987 q 668 949 591 987 q 785 842 745 910 q 825 686 825 774 q 785 524 825 591 q 668 422 745 457 q 479 387 591 387 z "},"Q":{"ha":956,"x_min":75,"x_max":872,"o":"m 621 113 l 872 -85 l 784 -167 l 537 29 l 621 113 m 869 525 l 869 463 q 841 263 869 351 q 761 113 813 175 q 636 19 709 52 q 473 -14 563 -14 q 312 19 385 -14 q 186 113 239 52 q 104 263 133 175 q 75 463 75 351 l 75 525 q 103 724 75 636 q 185 874 132 812 q 311 968 238 936 q 471 1001 384 1001 q 635 968 562 1001 q 760 874 708 936 q 841 724 812 812 q 869 525 869 636 m 739 463 l 739 526 q 721 682 739 614 q 669 796 703 750 q 585 866 634 842 q 471 890 535 890 q 362 866 411 890 q 277 796 313 842 q 223 682 242 750 q 204 526 204 614 l 204 463 q 223 306 204 374 q 278 191 242 237 q 363 121 313 144 q 473 97 412 97 q 586 121 536 97 q 670 191 635 144 q 722 306 704 237 q 739 463 739 374 z "},"R":{"ha":856,"x_min":115,"x_max":831,"o":"m 115 987 l 441 987 q 630 954 553 987 q 747 853 707 920 q 787 691 787 787 q 760 567 787 623 q 681 472 732 511 q 559 414 630 433 l 522 400 l 215 400 l 214 507 l 446 507 q 563 531 516 507 q 633 598 610 556 q 657 691 657 640 q 635 791 657 748 q 565 857 612 833 q 441 880 517 880 l 245 880 l 245 0 l 115 0 l 115 987 m 692 0 l 452 448 l 588 448 l 831 8 l 831 0 l 692 0 z "},"S":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 z "},"T":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 z "},"U":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 z "},"V":{"ha":884,"x_min":20,"x_max":866,"o":"m 433 150 l 724 987 l 866 987 l 500 0 l 399 0 l 433 150 m 161 987 l 450 150 l 486 0 l 385 0 l 20 987 l 161 987 z "},"W":{"ha":1232,"x_min":41,"x_max":1202,"o":"m 374 298 l 570 987 l 665 987 l 610 720 l 399 0 l 305 0 l 374 298 m 172 987 l 328 312 l 374 0 l 281 0 l 41 987 l 172 987 m 919 313 l 1072 987 l 1202 987 l 964 0 l 870 0 l 919 313 m 680 987 l 870 298 l 939 0 l 845 0 l 642 720 l 586 987 l 680 987 z "},"X":{"ha":871,"x_min":39,"x_max":834,"o":"m 199 987 l 437 609 l 674 987 l 827 987 l 515 498 l 834 0 l 680 0 l 437 386 l 193 0 l 39 0 l 359 498 l 47 987 l 199 987 z "},"Y":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 z "},"Z":{"ha":832,"x_min":59,"x_max":777,"o":"m 777 106 l 777 0 l 109 0 l 109 106 l 777 106 m 755 892 l 140 0 l 59 0 l 59 98 l 674 987 l 755 987 l 755 892 m 700 987 l 700 880 l 68 880 l 68 987 l 700 987 z "},"[":{"ha":368,"x_min":100,"x_max":355,"o":"m 355 1128 l 355 1025 l 225 1025 l 225 -109 l 355 -109 l 355 -212 l 100 -212 l 100 1128 l 355 1128 z "},"\\\\":{"ha":570,"x_min":28,"x_max":559,"o":"m 440 -85 l 28 987 l 147 987 l 559 -85 l 440 -85 z "},"]":{"ha":368,"x_min":7,"x_max":263,"o":"m 7 1025 l 7 1128 l 263 1128 l 263 -212 l 7 -212 l 7 -109 l 137 -109 l 137 1025 l 7 1025 z "},"^":{"ha":581,"x_min":43,"x_max":535,"o":"m 298 842 l 160 494 l 43 494 l 246 987 l 322 987 l 298 842 m 418 494 l 281 842 l 256 987 l 333 987 l 535 494 l 418 494 z "},"_":{"ha":627,"x_min":3,"x_max":625,"o":"m 625 0 l 625 -103 l 3 -103 l 3 0 l 625 0 z "},"`":{"ha":429,"x_min":39,"x_max":321,"o":"m 191 1042 l 321 842 l 214 842 l 39 1042 l 191 1042 z "},"a":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 z "},"b":{"ha":780,"x_min":95,"x_max":717,"o":"m 95 1042 l 221 1042 l 221 142 l 210 0 l 95 0 l 95 1042 m 717 373 l 717 359 q 698 211 717 279 q 642 92 679 142 q 553 14 606 42 q 431 -14 500 -14 q 309 11 361 -14 q 220 80 256 35 q 163 190 184 125 q 134 335 142 254 l 134 397 q 163 543 142 479 q 220 653 184 608 q 309 723 256 699 q 430 747 361 747 q 553 721 499 747 q 643 644 606 694 q 698 526 679 595 q 717 373 717 457 m 591 359 l 591 373 q 581 476 591 428 q 548 562 570 525 q 489 620 526 599 q 399 642 452 642 q 316 625 351 642 q 257 582 281 609 q 217 519 233 554 q 195 447 202 484 l 195 283 q 230 192 205 236 q 297 121 255 149 q 400 93 338 93 q 487 114 451 93 q 546 171 524 134 q 580 256 569 208 q 591 359 591 304 z "},"c":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 z "},"d":{"ha":783,"x_min":64,"x_max":684,"o":"m 558 142 l 558 1042 l 684 1042 l 684 0 l 569 0 l 558 142 m 64 359 l 64 373 q 85 526 64 457 q 144 644 106 595 q 236 721 182 694 q 355 747 289 747 q 476 723 424 747 q 564 653 528 699 q 621 543 600 608 q 650 397 642 479 l 650 335 q 622 190 643 254 q 564 80 600 125 q 475 11 528 35 q 353 -14 423 -14 q 236 14 289 -14 q 144 92 182 42 q 85 211 106 142 q 64 359 64 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 213 208 q 297 114 260 134 q 385 93 334 93 q 487 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 582 484 q 527 582 551 554 q 468 625 503 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 213 525 q 191 373 191 428 z "},"e":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 z "},"f":{"ha":483,"x_min":41,"x_max":485,"o":"m 283 0 l 157 0 l 157 811 q 186 945 157 890 q 269 1028 215 1000 q 398 1056 323 1056 q 442 1053 420 1056 q 485 1045 464 1050 l 478 943 q 446 947 464 946 q 410 949 428 949 q 341 933 370 949 q 298 886 313 917 q 283 811 283 856 l 283 0 m 439 734 l 439 637 l 41 637 l 41 734 l 439 734 z "},"g":{"ha":780,"x_min":66,"x_max":685,"o":"m 571 734 l 685 734 l 685 16 q 646 -150 685 -81 q 536 -254 606 -218 q 374 -290 466 -290 q 285 -278 336 -290 q 185 -238 234 -266 q 102 -162 136 -210 l 168 -87 q 265 -165 214 -143 q 365 -186 315 -186 q 468 -164 425 -186 q 535 -98 511 -142 q 559 9 559 -54 l 559 572 l 571 734 m 66 359 l 66 373 q 86 526 66 457 q 143 644 106 595 q 235 721 181 694 q 355 747 288 747 q 476 723 425 747 q 565 653 528 699 q 622 543 601 608 q 651 397 643 479 l 651 335 q 622 190 644 254 q 565 80 601 125 q 476 11 528 35 q 354 -14 424 -14 q 235 14 288 -14 q 144 92 182 42 q 86 211 106 142 q 66 359 66 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 214 208 q 297 114 260 134 q 385 93 334 93 q 488 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 583 484 q 528 582 552 554 q 469 625 504 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 214 525 q 191 373 191 428 z "},"h":{"ha":765,"x_min":96,"x_max":673,"o":"m 221 1042 l 221 0 l 96 0 l 96 1042 l 221 1042 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 z "},"i":{"ha":338,"x_min":96,"x_max":245,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 96 928 q 115 980 96 959 q 170 1001 134 1001 q 225 980 206 1001 q 245 928 245 959 q 225 879 245 899 q 170 858 206 858 q 115 879 134 858 q 96 928 96 899 z "},"j":{"ha":332,"x_min":-45,"x_max":235,"o":"m 99 734 l 225 734 l 225 -87 q 204 -201 225 -155 q 140 -272 182 -248 q 33 -296 98 -296 q -6 -293 16 -296 q -45 -285 -29 -290 l -44 -184 q -15 -188 -31 -186 q 14 -190 1 -190 q 60 -180 41 -190 q 89 -147 79 -170 q 99 -87 99 -125 l 99 734 m 86 928 q 105 980 86 959 q 160 1001 124 1001 q 216 980 197 1001 q 235 928 235 959 q 216 879 235 899 q 160 858 197 858 q 105 879 124 858 q 86 928 86 899 z "},"k":{"ha":704,"x_min":96,"x_max":703,"o":"m 222 1042 l 222 0 l 96 0 l 96 1042 l 222 1042 m 670 734 l 350 391 l 171 205 l 161 339 l 289 492 l 517 734 l 670 734 m 555 0 l 294 350 l 359 462 l 703 0 l 555 0 z "},"l":{"ha":338,"x_min":106,"x_max":232,"o":"m 232 1042 l 232 0 l 106 0 l 106 1042 l 232 1042 z "},"m":{"ha":1218,"x_min":94,"x_max":1124,"o":"m 220 588 l 220 0 l 94 0 l 94 734 l 214 734 l 220 588 m 195 395 l 136 397 q 156 536 137 472 q 212 648 175 600 q 305 721 250 695 q 434 747 361 747 q 529 733 486 747 q 604 687 572 718 q 654 607 636 656 q 671 489 671 558 l 671 0 l 546 0 l 546 483 q 527 575 546 541 q 472 626 507 610 q 389 642 437 642 q 296 622 334 642 q 237 568 259 602 q 204 489 214 533 q 195 395 195 444 m 670 464 l 586 438 q 606 554 587 498 q 662 653 625 610 q 753 722 699 696 q 878 747 808 747 q 982 732 937 747 q 1060 684 1028 716 q 1107 602 1091 652 q 1124 482 1124 551 l 1124 0 l 998 0 l 998 484 q 978 579 998 545 q 924 628 959 614 q 841 642 889 642 q 768 627 800 642 q 714 588 736 613 q 681 532 692 564 q 670 464 670 500 z "},"n":{"ha":767,"x_min":96,"x_max":673,"o":"m 221 577 l 221 0 l 96 0 l 96 734 l 214 734 l 221 577 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 z "},"o":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 z "},"p":{"ha":780,"x_min":95,"x_max":715,"o":"m 221 593 l 221 -282 l 95 -282 l 95 734 l 210 734 l 221 593 m 715 373 l 715 359 q 696 211 715 279 q 641 92 677 142 q 552 14 605 42 q 431 -14 499 -14 q 307 9 361 -14 q 216 77 254 33 q 157 182 179 121 q 127 321 135 244 l 127 397 q 157 543 135 479 q 217 653 180 608 q 307 723 254 699 q 429 747 359 747 q 551 721 498 747 q 642 644 605 694 q 697 526 678 595 q 715 373 715 457 m 589 359 l 589 373 q 578 476 589 428 q 542 562 566 525 q 481 620 518 599 q 392 642 444 642 q 310 625 345 642 q 250 582 275 609 q 211 519 226 554 q 188 447 195 484 l 188 271 q 226 182 201 224 q 291 115 250 140 q 393 90 332 90 q 481 111 444 90 q 542 170 518 132 q 578 255 566 207 q 589 359 589 304 z "},"q":{"ha":789,"x_min":64,"x_max":684,"o":"m 557 -282 l 557 593 l 568 734 l 684 734 l 684 -282 l 557 -282 m 64 359 l 64 373 q 84 526 64 457 q 142 644 104 595 q 234 721 180 694 q 357 747 288 747 q 478 723 426 747 q 568 653 531 699 q 627 543 605 608 q 656 397 648 479 l 656 335 q 627 190 649 254 q 569 80 606 125 q 478 11 532 35 q 355 -14 425 -14 q 234 14 288 -14 q 142 92 180 42 q 84 211 104 142 q 64 359 64 279 m 191 373 l 191 359 q 202 255 191 304 q 238 170 214 207 q 299 111 262 132 q 387 90 336 90 q 491 117 449 90 q 557 188 532 144 q 596 283 583 233 l 596 447 q 573 519 589 484 q 532 583 557 555 q 471 628 507 611 q 388 644 435 644 q 299 623 336 644 q 238 563 262 601 q 202 477 214 526 q 191 373 191 428 z "},"r":{"ha":471,"x_min":96,"x_max":450,"o":"m 221 618 l 221 0 l 96 0 l 96 734 l 218 734 l 221 618 m 450 738 l 450 621 q 420 626 434 625 q 389 627 406 627 q 312 613 345 627 q 256 575 279 600 q 219 517 233 551 q 202 444 206 484 l 167 423 q 180 548 167 490 q 221 651 193 606 q 292 722 249 696 q 395 747 335 747 q 426 744 408 747 q 450 738 444 741 z "},"s":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 z "},"t":{"ha":454,"x_min":6,"x_max":406,"o":"m 403 734 l 403 637 l 6 637 l 6 734 l 403 734 m 140 912 l 266 912 l 266 182 q 277 125 266 144 q 307 100 289 106 q 347 94 326 94 q 379 97 362 94 q 406 102 397 100 l 406 0 q 367 -9 391 -5 q 309 -14 343 -14 q 224 5 263 -14 q 163 66 186 23 q 140 182 140 109 l 140 912 z "},"u":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 z "},"v":{"ha":673,"x_min":22,"x_max":648,"o":"m 319 113 l 519 734 l 648 734 l 384 0 l 300 0 l 319 113 m 151 734 l 358 110 l 372 0 l 288 0 l 22 734 l 151 734 z "},"w":{"ha":1044,"x_min":29,"x_max":1011,"o":"m 281 130 l 470 734 l 553 734 l 536 614 l 345 0 l 264 0 l 281 130 m 155 734 l 315 123 l 327 0 l 242 0 l 29 734 l 155 734 m 733 128 l 886 734 l 1011 734 l 798 0 l 714 0 l 733 128 m 571 734 l 755 140 l 777 0 l 696 0 l 499 615 l 483 734 l 571 734 z "},"x":{"ha":689,"x_min":28,"x_max":659,"o":"m 180 734 l 341 467 l 504 734 l 651 734 l 411 372 l 659 0 l 513 0 l 344 275 l 174 0 l 28 0 l 275 372 l 36 734 l 180 734 z "},"y":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 z "},"z":{"ha":689,"x_min":60,"x_max":642,"o":"m 642 103 l 642 0 l 109 0 l 109 103 l 642 103 m 623 645 l 137 0 l 60 0 l 60 92 l 543 734 l 623 734 l 623 645 m 567 734 l 567 630 l 66 630 l 66 734 l 567 734 z "},"{":{"ha":470,"x_min":43,"x_max":455,"o":"m 429 1083 l 455 1006 q 344 916 374 981 q 313 768 313 851 l 313 627 q 286 504 313 559 q 199 416 258 449 q 43 384 140 384 l 43 467 q 154 510 120 467 q 187 627 187 553 l 187 768 q 209 901 187 839 q 284 1010 231 963 q 429 1083 336 1057 m 455 -170 l 429 -248 q 284 -175 336 -222 q 209 -66 231 -128 q 187 67 187 -4 l 187 207 q 172 292 187 256 q 126 348 157 328 q 43 368 94 368 l 43 451 q 199 418 140 451 q 286 331 258 386 q 313 207 313 275 l 313 67 q 327 -36 313 12 q 371 -118 340 -83 q 455 -170 401 -153 z "},"|":{"ha":339,"x_min":119,"x_max":220,"o":"m 220 987 l 220 -183 l 119 -183 l 119 987 l 220 987 z "},"}":{"ha":470,"x_min":14,"x_max":425,"o":"m 14 1006 l 40 1083 q 185 1010 133 1057 q 260 901 238 963 q 281 768 281 839 l 281 627 q 296 542 281 578 q 343 486 311 506 q 425 467 374 467 l 425 390 q 270 421 330 390 q 183 506 210 452 q 155 627 155 559 l 155 768 q 142 871 155 823 q 99 954 130 919 q 14 1006 68 989 m 40 -248 l 14 -170 q 98 -118 67 -153 q 142 -36 129 -83 q 155 67 155 12 l 155 207 q 183 329 155 275 q 270 413 210 382 q 425 444 330 444 l 425 368 q 315 325 349 368 q 281 207 281 281 l 281 67 q 260 -66 281 -4 q 185 -175 238 -128 q 40 -248 133 -222 z "},"~":{"ha":945,"x_min":89,"x_max":857,"o":"m 753 527 l 857 528 q 841 429 857 475 q 795 348 825 383 q 725 293 766 313 q 637 273 685 273 q 533 297 578 273 q 435 367 488 321 q 371 416 400 399 q 308 434 342 434 q 249 417 273 434 q 211 370 224 401 q 198 297 198 340 l 89 296 q 105 394 89 349 q 150 473 121 439 q 219 526 179 507 q 308 545 260 545 q 414 519 368 545 q 510 450 460 494 q 575 400 547 416 q 637 383 604 383 q 698 401 672 383 q 739 452 724 420 q 753 527 753 485 z "},"¡":{"ha":339,"x_min":94,"x_max":243,"o":"m 106 -245 l 116 464 l 229 464 l 239 -245 l 106 -245 m 243 675 q 224 625 243 646 q 169 604 205 604 q 114 625 133 604 q 94 675 94 646 q 114 726 94 705 q 169 747 133 747 q 224 726 205 747 q 243 675 243 705 z "},"¢":{"ha":760,"x_min":71,"x_max":690,"o":"m 454 894 l 454 699 l 328 699 l 328 894 l 454 894 m 454 28 l 454 -166 l 328 -166 l 328 28 l 454 28 m 398 90 q 481 108 443 90 q 543 158 519 126 q 571 232 568 191 l 690 232 q 646 111 687 167 q 541 21 606 55 q 398 -14 476 -14 q 254 16 315 -14 q 152 96 192 45 q 91 213 111 146 q 71 353 71 279 l 71 381 q 91 521 71 455 q 152 638 111 587 q 254 718 193 689 q 398 747 315 747 q 549 712 484 747 q 650 617 613 677 q 690 481 687 557 l 571 481 q 546 564 568 527 q 486 622 524 600 q 398 644 448 644 q 301 622 340 644 q 240 561 262 599 q 207 476 217 522 q 197 381 197 429 l 197 353 q 207 258 197 304 q 239 173 216 211 q 301 112 262 135 q 398 90 340 90 z "},"£":{"ha":808,"x_min":62,"x_max":765,"o":"m 765 0 l 64 0 l 64 106 l 765 106 l 765 0 m 517 422 l 62 422 l 62 529 l 517 529 l 517 422 m 295 705 l 310 273 q 292 154 311 209 q 235 71 273 98 l 117 106 q 154 141 140 113 q 174 205 168 169 q 180 272 180 242 l 165 705 q 204 864 165 798 q 312 966 243 930 q 466 1001 380 1001 q 617 968 555 1001 q 713 875 680 935 q 746 737 746 816 l 616 737 q 593 829 616 794 q 534 879 570 863 q 455 895 497 895 q 374 872 410 895 q 316 808 338 850 q 295 705 295 766 z "},"¤":{"ha":991,"x_min":71,"x_max":930,"o":"m 212 412 q 234 292 212 349 q 296 194 256 236 q 387 127 335 151 q 498 103 439 103 q 610 127 558 103 q 701 194 662 151 q 763 292 741 236 q 785 412 785 349 q 763 532 785 477 q 701 630 741 588 q 610 696 662 673 q 498 720 558 720 q 387 696 439 720 q 296 630 335 673 q 234 532 256 588 q 212 412 212 477 m 95 412 q 126 580 95 503 q 213 715 158 657 q 342 805 269 772 q 498 837 415 837 q 655 805 582 837 q 784 715 728 772 q 871 580 840 657 q 902 412 902 503 q 871 245 902 322 q 784 110 840 168 q 655 19 728 52 q 498 -14 582 -14 q 342 19 415 -14 q 213 110 269 52 q 126 245 158 168 q 95 412 95 322 m 930 765 l 793 625 l 703 718 l 840 858 l 930 765 m 297 122 l 160 -18 l 71 75 l 208 214 l 297 122 m 840 -18 l 703 121 l 793 214 l 930 75 l 840 -18 m 208 625 l 71 765 l 160 857 l 297 718 l 208 625 z "},"¥":{"ha":730,"x_min":10,"x_max":719,"o":"m 648 500 l 648 415 l 81 415 l 81 500 l 648 500 m 648 302 l 648 218 l 81 218 l 81 302 l 648 302 m 326 452 l 574 987 l 719 987 l 425 410 l 342 410 l 326 452 m 157 987 l 408 447 l 388 410 l 305 410 l 10 987 l 157 987 m 427 525 l 427 0 l 297 0 l 297 525 l 427 525 z "},"¦":{"ha":334,"x_min":100,"x_max":226,"o":"m 226 -183 l 100 -183 l 100 354 l 226 354 l 226 -183 m 226 987 l 226 473 l 100 473 l 100 987 l 226 987 z "},"§":{"ha":852,"x_min":62,"x_max":777,"o":"m 474 73 l 474 153 q 570 171 530 153 q 630 220 609 189 q 651 290 651 251 q 639 346 651 322 q 600 390 627 370 q 525 429 572 410 q 409 469 478 448 q 277 512 335 489 q 179 568 219 536 q 117 645 138 600 q 96 753 96 690 q 120 856 96 810 q 186 934 143 901 q 291 984 230 966 q 428 1002 352 1002 q 606 968 532 1002 q 721 869 681 934 q 761 709 761 804 l 635 709 q 611 805 635 762 q 541 873 587 848 q 428 899 495 899 q 311 879 357 899 q 244 827 266 859 q 222 755 222 794 q 232 696 222 721 q 269 653 243 672 q 341 617 294 634 q 458 580 387 600 q 593 535 534 559 q 693 478 652 511 q 755 401 734 446 q 777 292 777 355 q 755 200 777 241 q 694 131 734 159 q 598 88 654 103 q 474 73 543 73 m 356 593 l 356 511 q 263 493 300 511 q 209 445 227 475 q 191 375 191 414 q 202 316 191 341 q 239 272 212 292 q 312 235 265 252 q 432 197 359 217 q 566 152 507 176 q 664 97 624 128 q 725 20 704 65 q 746 -87 746 -24 q 723 -193 746 -146 q 656 -271 699 -239 q 552 -319 612 -302 q 416 -336 491 -336 q 288 -321 351 -336 q 173 -272 224 -306 q 92 -182 122 -238 q 62 -43 62 -125 l 187 -42 q 208 -133 187 -96 q 261 -191 228 -170 q 335 -223 295 -213 q 416 -233 376 -233 q 527 -214 481 -233 q 596 -162 572 -195 q 621 -89 621 -130 q 609 -34 621 -57 q 570 9 597 -10 q 497 47 543 28 q 382 85 451 65 q 250 130 309 106 q 150 186 191 154 q 87 265 109 219 q 66 374 66 311 q 86 464 66 424 q 144 533 106 505 q 236 577 182 562 q 356 593 290 593 z "},"¨":{"ha":581,"x_min":68,"x_max":509,"o":"m 68 930 q 87 981 68 960 q 142 1002 106 1002 q 198 981 179 1002 q 217 930 217 960 q 198 880 217 901 q 142 859 179 859 q 87 880 106 859 q 68 930 68 901 m 361 928 q 379 980 361 959 q 435 1001 398 1001 q 490 980 471 1001 q 509 928 509 959 q 490 879 509 899 q 435 858 471 858 q 379 879 398 858 q 361 928 361 899 z "},"©":{"ha":1091,"x_min":62,"x_max":1025,"o":"m 661 406 l 760 406 q 699 246 760 299 q 534 193 638 193 q 410 226 463 193 q 329 318 357 259 q 300 455 300 377 l 300 533 q 329 670 300 611 q 410 762 357 729 q 534 795 463 795 q 699 743 638 795 q 760 583 760 690 l 661 583 q 629 680 661 650 q 534 709 597 709 q 459 686 490 709 q 413 624 429 664 q 397 534 397 585 l 397 455 q 413 364 397 404 q 459 302 429 324 q 534 279 490 279 q 629 309 597 279 q 661 406 661 338 m 140 494 q 172 326 140 404 q 258 190 203 248 q 387 99 314 132 q 544 66 460 66 q 700 99 627 66 q 828 190 773 132 q 915 326 884 248 q 946 494 946 404 q 915 663 946 585 q 828 798 884 740 q 700 888 773 856 q 544 920 627 920 q 387 888 460 920 q 258 798 314 856 q 172 663 203 740 q 140 494 140 585 m 62 494 q 100 694 62 602 q 203 856 137 787 q 357 963 270 924 q 544 1001 444 1001 q 731 963 644 1001 q 884 856 818 924 q 987 694 950 787 q 1025 494 1025 602 q 987 294 1025 387 q 884 133 950 202 q 731 24 818 63 q 544 -14 644 -14 q 357 24 444 -14 q 203 133 270 63 q 100 294 137 202 q 62 494 62 387 z "},"ª":{"ha":621,"x_min":100,"x_max":532,"o":"m 404 585 l 404 815 q 394 865 404 844 q 367 896 385 885 q 319 906 348 906 q 246 888 273 906 q 219 835 219 870 l 110 844 q 136 925 110 890 q 209 981 162 961 q 319 1002 256 1002 q 421 981 378 1002 q 490 918 465 960 q 514 814 514 877 l 514 602 q 518 538 514 568 q 532 479 522 509 l 420 479 q 404 585 404 530 m 431 779 l 431 704 l 330 704 q 263 693 290 704 q 223 665 236 682 q 210 625 210 647 q 231 579 210 596 q 295 562 252 562 q 354 575 324 562 q 403 608 383 589 q 422 644 422 627 l 435 568 q 403 523 425 546 q 348 485 382 500 q 269 469 315 469 q 143 511 187 469 q 100 623 100 553 q 125 708 100 673 q 202 761 151 743 q 330 779 253 779 l 431 779 z "},"«":{"ha":652,"x_min":68,"x_max":589,"o":"m 365 642 l 188 369 l 68 370 l 68 378 l 269 642 l 365 642 m 188 375 l 365 102 l 269 102 l 68 366 l 68 374 l 188 375 m 589 642 l 412 369 l 293 370 l 293 378 l 493 642 l 589 642 m 412 375 l 589 102 l 493 102 l 293 366 l 293 374 l 412 375 z "},"¬":{"ha":769,"x_min":86,"x_max":650,"o":"m 650 543 l 650 433 l 86 433 l 86 543 l 650 543 m 650 492 l 650 255 l 524 255 l 524 492 l 650 492 z "},"®":{"ha":1092,"x_min":62,"x_max":1024,"o":"m 561 444 l 413 444 l 412 531 l 549 531 q 603 541 578 532 q 643 569 627 551 q 658 613 658 587 q 646 667 658 647 q 608 695 635 686 q 535 704 581 704 l 443 704 l 443 215 l 347 215 l 347 790 l 535 790 q 651 771 602 790 q 726 714 700 752 q 753 617 753 675 q 736 551 753 581 q 686 501 719 522 q 607 467 654 480 q 603 463 605 467 q 598 458 600 458 q 584 449 587 452 q 577 445 581 446 q 561 444 574 444 m 554 444 l 568 505 q 711 461 673 505 q 749 349 749 416 l 749 312 q 752 264 749 287 q 761 226 755 241 l 761 215 l 663 215 q 655 265 656 233 q 654 313 654 298 l 654 348 q 631 421 654 397 q 554 444 608 444 m 140 494 q 171 326 140 404 q 258 190 202 248 q 387 99 313 132 q 543 66 460 66 q 700 99 627 66 q 828 190 772 132 q 914 326 883 248 q 945 494 945 404 q 914 663 945 585 q 828 798 883 740 q 700 888 772 856 q 543 920 627 920 q 387 888 460 920 q 258 798 313 856 q 171 663 202 740 q 140 494 140 585 m 62 494 q 99 694 62 602 q 203 856 136 787 q 356 963 269 924 q 543 1001 444 1001 q 730 963 643 1001 q 883 856 817 924 q 987 694 949 787 q 1024 494 1024 602 q 987 294 1024 387 q 883 133 949 202 q 730 24 817 63 q 543 -14 643 -14 q 356 24 444 -14 q 203 133 269 63 q 99 294 136 202 q 62 494 62 387 z "},"¯":{"ha":637,"x_min":97,"x_max":552,"o":"m 552 980 l 552 884 l 97 884 l 97 980 l 552 980 z "},"°":{"ha":519,"x_min":89,"x_max":432,"o":"m 89 825 q 113 913 89 873 q 176 978 136 954 q 262 1002 215 1002 q 347 978 309 1002 q 409 913 386 954 q 432 825 432 873 q 409 738 432 777 q 347 674 386 698 q 262 651 309 651 q 176 674 215 651 q 113 738 136 698 q 89 825 89 777 m 173 825 q 199 763 173 788 q 262 738 225 738 q 323 763 298 738 q 348 825 348 788 q 323 889 348 863 q 262 915 298 915 q 199 889 225 915 q 173 825 173 863 z "},"±":{"ha":743,"x_min":66,"x_max":687,"o":"m 687 580 l 687 477 l 66 477 l 66 580 l 687 580 m 441 859 l 441 196 l 328 196 l 328 859 l 441 859 m 659 103 l 659 1 l 92 1 l 92 103 l 659 103 z "},"²":{"ha":509,"x_min":45,"x_max":463,"o":"m 463 539 l 463 452 l 58 452 l 58 526 l 253 709 q 301 760 283 738 q 327 801 319 783 q 334 833 334 819 q 313 887 334 866 q 251 908 291 908 q 176 882 200 908 q 152 818 152 857 l 45 818 q 69 907 45 867 q 139 971 94 947 q 248 995 184 995 q 353 975 309 995 q 419 920 396 956 q 442 835 442 884 q 426 768 442 799 q 381 705 410 736 q 312 638 352 674 l 193 539 l 463 539 z "},"³":{"ha":509,"x_min":43,"x_max":452,"o":"m 180 764 l 237 764 q 292 773 271 764 q 325 799 314 783 q 336 838 336 816 q 315 888 336 867 q 246 908 293 908 q 182 891 208 908 q 157 845 157 874 l 50 845 q 76 925 50 891 q 146 977 102 958 q 244 995 190 995 q 348 978 303 995 q 418 926 393 960 q 443 843 443 892 q 421 777 443 807 q 357 729 399 747 q 256 711 315 711 l 180 711 l 180 764 m 180 686 l 180 739 l 256 739 q 367 722 323 739 q 431 675 410 706 q 452 602 452 645 q 425 517 452 552 q 351 463 398 481 q 245 445 304 445 q 148 461 194 445 q 72 513 101 478 q 43 604 43 549 l 149 604 q 176 552 149 573 q 248 532 203 532 q 320 553 296 532 q 345 607 345 574 q 332 653 345 635 q 295 678 319 670 q 237 686 271 686 l 180 686 z "},"´":{"ha":435,"x_min":83,"x_max":366,"o":"m 83 842 l 215 1042 l 366 1042 l 184 842 l 83 842 z "},"µ":{"ha":787,"x_min":105,"x_max":682,"o":"m 557 734 l 682 734 l 682 0 l 569 0 l 557 170 l 557 734 m 579 341 l 626 342 q 612 200 626 265 q 569 87 598 135 q 494 12 540 39 q 385 -14 449 -14 q 293 -1 334 -14 q 224 41 253 12 q 176 116 195 70 l 151 312 l 230 312 q 241 198 230 242 q 274 130 253 154 q 321 98 294 106 q 380 89 349 89 q 479 107 440 89 q 540 160 518 126 q 570 240 562 194 q 579 341 579 286 m 105 734 l 230 734 l 230 -282 l 105 -282 l 105 734 z "},"¶":{"ha":680,"x_min":46,"x_max":565,"o":"m 565 0 l 439 0 l 439 353 l 380 353 q 197 394 272 353 q 84 507 123 435 q 46 670 46 578 q 84 833 46 761 q 197 946 123 905 q 380 987 272 987 l 565 987 l 565 0 z "},"·":{"ha":363,"x_min":100,"x_max":256,"o":"m 100 494 q 120 548 100 526 q 178 570 140 570 q 236 548 216 570 q 256 494 256 526 q 236 442 256 463 q 178 420 216 420 q 120 442 140 420 q 100 494 100 463 z "},"¸":{"ha":345,"x_min":79,"x_max":289,"o":"m 103 0 l 193 0 l 185 -36 q 257 -68 224 -43 q 289 -153 289 -94 q 276 -211 289 -185 q 237 -256 262 -237 q 173 -285 211 -275 q 83 -295 134 -295 l 79 -222 q 135 -216 110 -222 q 176 -194 161 -209 q 191 -155 191 -179 q 180 -120 191 -133 q 144 -101 168 -107 q 82 -92 120 -94 l 103 0 z "},"¹":{"ha":509,"x_min":83,"x_max":336,"o":"m 336 987 l 336 452 l 230 452 l 230 860 l 83 821 l 83 909 l 323 987 l 336 987 z "},"º":{"ha":632,"x_min":83,"x_max":547,"o":"m 83 707 l 83 762 q 112 886 83 832 q 192 971 140 940 q 315 1002 244 1002 q 439 971 387 1002 q 519 886 491 940 q 547 762 547 832 l 547 707 q 519 584 547 637 q 439 499 491 530 q 317 469 388 469 q 193 499 245 469 q 112 584 140 530 q 83 707 83 637 m 194 762 l 194 707 q 207 633 194 666 q 248 582 220 601 q 317 563 275 563 q 384 582 357 563 q 424 633 411 601 q 437 707 437 666 l 437 762 q 424 836 437 803 q 384 887 410 868 q 315 906 357 906 q 248 887 275 906 q 207 836 220 868 q 194 762 194 803 z "},"»":{"ha":651,"x_min":70,"x_max":603,"o":"m 70 104 l 247 376 l 366 376 l 366 367 l 166 104 l 70 104 m 70 644 l 166 644 l 366 380 l 366 371 l 247 370 l 70 644 m 307 104 l 484 376 l 603 376 l 603 367 l 403 104 l 307 104 m 307 644 l 403 644 l 603 380 l 603 371 l 484 370 l 307 644 z "},"¼":{"ha":1017,"x_min":58,"x_max":967,"o":"m 310 985 l 310 450 l 204 450 l 204 858 l 58 819 l 58 907 l 298 985 l 310 985 m 783 852 l 301 81 l 231 125 l 713 897 l 783 852 m 967 203 l 967 115 l 534 115 l 529 184 l 785 535 l 869 535 l 777 380 l 636 203 l 967 203 m 894 535 l 894 0 l 787 0 l 787 535 l 894 535 z "},"½":{"ha":1078,"x_min":54,"x_max":1004,"o":"m 753 852 l 271 81 l 201 125 l 683 897 l 753 852 m 307 985 l 307 450 l 201 450 l 201 858 l 54 819 l 54 907 l 294 985 l 307 985 m 1004 87 l 1004 0 l 599 0 l 599 73 l 794 257 q 842 308 825 286 q 868 348 860 330 q 876 381 876 366 q 854 435 876 414 q 792 456 832 456 q 717 430 741 456 q 693 366 693 404 l 586 366 q 610 454 586 414 q 680 518 635 494 q 789 543 726 543 q 894 523 850 543 q 960 468 937 503 q 983 382 983 432 q 967 315 983 347 q 922 253 951 284 q 853 186 893 222 l 734 87 l 1004 87 z "},"¾":{"ha":1080,"x_min":76,"x_max":1029,"o":"m 869 852 l 387 81 l 317 125 l 799 897 l 869 852 m 1029 203 l 1029 115 l 596 115 l 591 184 l 848 535 l 932 535 l 839 380 l 699 203 l 1029 203 m 956 535 l 956 0 l 850 0 l 850 535 l 956 535 m 214 764 l 271 764 q 326 773 304 764 q 358 799 347 783 q 370 838 370 816 q 348 888 370 867 q 279 908 326 908 q 215 891 241 908 q 190 845 190 874 l 83 845 q 109 925 83 891 q 179 977 135 958 q 277 995 223 995 q 381 978 336 995 q 451 926 426 960 q 476 843 476 892 q 454 777 476 807 q 390 729 432 747 q 289 711 349 711 l 214 711 l 214 764 m 214 686 l 214 739 l 289 739 q 400 722 357 739 q 465 675 444 706 q 486 602 486 645 q 458 517 486 552 q 384 463 431 481 q 278 445 337 445 q 181 461 227 445 q 105 513 134 478 q 76 604 76 549 l 182 604 q 210 552 182 573 q 281 532 237 532 q 354 553 329 532 q 378 607 378 574 q 365 653 378 635 q 328 678 352 670 q 271 686 304 686 l 214 686 z "},"¿":{"ha":658,"x_min":46,"x_max":603,"o":"m 273 461 l 399 461 q 388 356 399 396 q 352 281 376 315 q 285 202 327 248 q 231 143 256 172 q 189 81 205 115 q 172 0 172 47 q 190 -83 172 -50 q 241 -135 208 -117 q 324 -152 275 -152 q 399 -137 364 -152 q 455 -91 433 -122 q 477 -14 477 -60 l 603 -14 q 565 -146 602 -90 q 466 -232 528 -202 q 324 -262 403 -262 q 174 -231 236 -262 q 79 -143 112 -201 q 46 -4 46 -85 q 71 110 46 58 q 134 208 96 163 q 212 292 172 253 q 250 342 237 316 q 268 398 263 368 q 273 461 273 428 m 405 676 q 386 625 405 646 q 331 604 367 604 q 275 625 294 604 q 256 676 256 646 q 275 727 256 706 q 331 747 294 747 q 386 727 367 747 q 405 676 405 706 z "},"Æ":{"ha":1298,"x_min":-10,"x_max":1275,"o":"m 658 886 l 144 0 l -10 0 l 587 987 l 668 987 l 658 886 m 756 358 l 756 239 l 252 239 l 252 358 l 756 358 m 1275 103 l 1275 0 l 778 0 l 778 103 l 1275 103 m 760 987 l 802 0 l 675 0 l 634 987 l 760 987 m 1178 566 l 1178 463 l 751 463 l 751 566 l 1178 566 m 1233 987 l 1233 884 l 736 884 l 736 987 l 1233 987 z "},"×":{"ha":741,"x_min":60,"x_max":671,"o":"m 141 140 l 60 223 l 589 762 l 669 678 l 141 140 m 591 140 l 62 678 l 143 762 l 671 223 l 591 140 z "},"Ø":{"ha":956,"x_min":81,"x_max":888,"o":"m 888 1028 l 208 -63 l 111 -63 l 793 1028 l 888 1028 m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 348 7 409 -14 q 238 69 287 28 q 153 167 189 109 q 99 299 118 225 q 81 463 81 374 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 611 980 549 1001 q 721 919 672 959 q 804 820 770 878 q 857 688 838 762 q 875 525 875 614 m 745 463 l 745 526 q 734 654 745 597 q 700 755 722 711 q 645 829 677 800 q 570 874 612 859 q 477 890 528 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 222 334 210 391 q 258 232 235 276 q 314 157 281 187 q 389 112 347 127 q 479 97 430 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 z "},"Þ":{"ha":821,"x_min":113,"x_max":758,"o":"m 113 987 l 239 987 l 239 0 l 113 0 l 113 987 m 176 789 l 427 789 q 608 751 534 789 q 720 649 682 714 q 758 500 758 584 q 720 353 758 418 q 608 250 682 288 q 427 213 534 213 l 211 213 l 211 315 l 427 315 q 546 342 500 315 q 611 411 591 369 q 632 499 632 453 q 611 589 632 547 q 546 659 591 632 q 427 686 500 686 l 237 686 l 176 789 z "},"ß":{"ha":826,"x_min":95,"x_max":766,"o":"m 220 754 l 220 0 l 95 0 l 95 754 q 114 885 95 829 q 169 978 134 941 q 253 1035 204 1016 q 361 1054 302 1054 q 493 1029 435 1054 q 583 955 550 1005 q 616 825 616 904 q 603 735 616 771 q 573 671 590 699 q 543 617 556 644 q 530 556 530 591 q 553 489 530 519 q 612 433 577 460 q 683 375 648 406 q 743 306 719 345 q 766 215 766 267 q 733 87 766 138 q 640 11 699 36 q 505 -14 581 -14 q 428 -6 469 -14 q 354 12 387 1 q 302 35 320 23 l 331 140 q 400 107 355 125 q 492 89 445 89 q 578 105 545 89 q 626 149 611 121 q 641 209 641 176 q 617 277 641 248 q 558 334 593 307 q 487 392 523 361 q 428 463 452 422 q 404 557 404 503 q 418 629 404 598 q 451 688 433 661 q 484 746 469 715 q 498 814 498 776 q 481 890 498 860 q 435 936 464 920 q 368 951 406 951 q 288 930 321 951 q 237 866 255 909 q 220 754 220 822 z "},"æ":{"ha":1173,"x_min":54,"x_max":1126,"o":"m 508 124 l 508 488 q 491 572 508 537 q 442 626 475 607 q 363 644 410 644 q 275 627 313 644 q 218 580 238 609 q 197 515 197 551 l 73 528 q 94 615 73 575 q 153 685 115 655 q 244 731 191 715 q 363 747 298 747 q 503 718 443 747 q 596 631 563 689 q 630 487 630 574 l 630 148 l 508 124 m 536 431 l 536 336 l 359 336 q 260 318 300 336 q 199 269 220 299 q 179 203 179 239 q 194 145 179 171 q 240 103 210 119 q 319 88 271 88 q 394 102 355 88 q 464 138 432 116 q 516 184 496 160 q 537 230 536 209 l 602 132 q 544 65 584 99 q 443 8 505 31 q 294 -14 380 -14 q 163 13 217 -14 q 81 90 109 40 q 54 206 54 140 q 73 301 54 260 q 131 372 92 343 q 226 416 169 401 q 357 431 283 431 l 536 431 m 857 -14 q 709 13 773 -14 q 602 89 646 40 q 536 205 559 138 q 514 353 514 273 l 514 382 q 537 530 514 463 q 603 646 561 597 q 703 721 646 694 q 827 747 760 748 q 956 725 900 747 q 1050 659 1012 702 q 1107 555 1088 616 q 1126 418 1126 494 l 1126 338 l 581 338 l 581 434 l 1000 434 l 1000 455 q 983 549 1000 507 q 928 618 966 592 q 827 644 890 644 q 744 624 780 644 q 683 568 708 604 q 646 484 659 532 q 633 382 633 437 l 633 353 q 646 250 633 298 q 686 166 659 202 q 755 109 713 130 q 857 89 798 89 q 987 114 937 89 q 1070 161 1036 138 l 1114 69 q 1066 38 1099 58 q 981 2 1034 18 q 857 -14 929 -14 z "},"ð":{"ha":814,"x_min":85,"x_max":726,"o":"m 173 964 l 212 1072 q 420 991 326 1046 q 583 853 515 935 q 689 664 652 770 q 726 429 726 557 l 726 363 q 702 210 726 279 q 636 91 679 141 q 535 14 593 41 q 408 -14 477 -14 q 278 12 337 -14 q 175 83 218 37 q 109 188 132 128 q 85 317 85 248 q 108 459 85 396 q 172 569 131 523 q 268 639 213 614 q 389 663 323 663 q 527 627 466 663 q 625 534 589 591 q 661 416 661 477 l 614 416 q 602 464 614 439 q 565 511 589 489 q 505 547 541 533 q 419 560 468 560 q 331 543 370 560 q 266 495 292 526 q 225 418 239 463 q 212 317 212 374 q 225 235 212 275 q 263 162 238 195 q 326 109 289 129 q 411 90 363 90 q 490 110 455 90 q 549 168 524 131 q 587 255 574 205 q 600 363 600 304 l 600 431 q 566 640 600 550 q 473 793 532 729 q 337 900 414 858 q 173 964 260 941 m 670 961 l 306 713 l 256 781 l 621 1028 l 670 961 z "},"÷":{"ha":793,"x_min":48,"x_max":725,"o":"m 725 532 l 725 407 l 48 407 l 48 532 l 725 532 m 313 745 q 333 799 313 777 q 391 821 353 821 q 449 799 429 821 q 469 745 469 777 q 449 692 469 713 q 391 671 429 671 q 333 692 353 671 q 313 745 313 713 m 313 191 q 333 245 313 223 q 391 267 353 267 q 449 245 429 267 q 469 191 469 223 q 449 138 469 160 q 391 117 429 117 q 333 138 353 117 q 313 191 313 160 z "},"ø":{"ha":787,"x_min":62,"x_max":730,"o":"m 667 820 l 217 -92 l 134 -92 l 583 820 l 667 820 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 z "},"þ":{"ha":800,"x_min":101,"x_max":722,"o":"m 227 1042 l 227 -282 l 101 -282 l 101 1042 l 227 1042 m 722 373 l 722 359 q 703 211 722 279 q 647 92 684 142 q 558 14 611 42 q 437 -14 505 -14 q 313 9 367 -14 q 222 77 260 33 q 163 182 185 121 q 133 321 141 244 l 133 397 q 163 543 141 479 q 223 653 186 608 q 313 723 260 699 q 435 747 366 747 q 557 721 504 747 q 648 644 611 694 q 703 526 684 595 q 722 373 722 457 m 595 359 l 595 373 q 584 476 595 428 q 548 562 572 525 q 487 620 524 599 q 398 642 450 642 q 316 625 351 642 q 256 582 281 609 q 217 519 232 554 q 194 447 201 484 l 194 271 q 220 203 204 235 q 260 145 236 170 q 318 104 284 119 q 399 90 353 90 q 487 111 450 90 q 548 170 524 132 q 584 255 572 207 q 595 359 595 304 z "},"đ":{"ha":830,"x_min":64,"x_max":812,"o":"m 558 142 l 558 1042 l 684 1042 l 684 0 l 569 0 l 558 142 m 64 359 l 64 373 q 85 526 64 457 q 144 644 106 595 q 236 721 182 694 q 355 747 289 747 q 476 723 424 747 q 564 653 528 699 q 621 543 600 608 q 650 397 642 479 l 650 335 q 622 190 643 254 q 564 80 600 125 q 475 11 528 35 q 353 -14 423 -14 q 236 14 289 -14 q 144 92 182 42 q 85 211 106 142 q 64 359 64 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 213 208 q 297 114 260 134 q 385 93 334 93 q 487 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 582 484 q 527 582 551 554 q 468 625 503 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 213 525 q 191 373 191 428 m 812 939 l 812 836 l 380 836 l 380 939 l 812 939 z "},"Ħ":{"ha":973,"x_min":20,"x_max":961,"o":"m 961 791 l 961 694 l 20 694 l 20 791 l 961 791 m 755 563 l 755 456 l 221 456 l 221 563 l 755 563 m 241 987 l 241 0 l 111 0 l 111 987 l 241 987 m 870 987 l 870 0 l 739 0 l 739 987 l 870 987 z "},"ı":{"ha":344,"x_min":106,"x_max":231,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 z "},"ĸ":{"ha":773,"x_min":105,"x_max":738,"o":"m 231 734 l 231 0 l 105 0 l 105 734 l 231 734 m 713 734 l 351 313 l 189 313 l 170 423 l 293 423 l 562 734 l 713 734 m 579 0 l 287 332 l 368 423 l 738 0 l 579 0 z "},"Ł":{"ha":748,"x_min":24,"x_max":713,"o":"m 423 629 l 423 545 l 24 418 l 24 503 l 423 629 m 713 106 l 713 0 l 219 0 l 219 106 l 713 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 z "},"ł":{"ha":376,"x_min":24,"x_max":355,"o":"m 355 631 l 355 548 l 24 421 l 24 504 l 355 631 m 247 1042 l 247 0 l 121 0 l 121 1042 l 247 1042 z "},"Ŋ":{"ha":962,"x_min":110,"x_max":858,"o":"m 110 987 l 241 987 l 241 0 l 110 0 l 110 987 m 149 910 l 241 987 l 819 77 l 727 0 l 149 910 m 727 987 l 858 987 l 858 -57 q 831 -188 858 -134 q 755 -269 804 -241 q 636 -296 705 -296 q 597 -294 615 -296 q 558 -285 578 -292 l 568 -180 q 602 -187 579 -184 q 634 -189 624 -189 q 685 -173 664 -189 q 716 -128 705 -157 q 727 -57 727 -98 l 727 987 z "},"ŋ":{"ha":787,"x_min":99,"x_max":684,"o":"m 224 577 l 224 0 l 99 0 l 99 734 l 212 734 l 224 577 m 186 391 l 157 389 q 176 533 157 467 q 231 646 195 598 q 319 721 267 694 q 436 747 371 747 q 539 731 493 747 q 617 681 585 715 q 667 592 650 646 q 684 463 684 538 l 684 -60 q 658 -189 684 -136 q 583 -269 632 -242 q 465 -296 534 -296 q 426 -294 444 -296 q 388 -285 408 -292 l 397 -178 q 432 -184 408 -182 q 465 -186 456 -186 q 516 -172 495 -186 q 548 -130 536 -158 q 559 -60 559 -102 l 559 460 q 548 546 559 511 q 517 602 538 581 q 467 632 496 623 q 399 642 437 642 q 302 622 342 642 q 236 568 262 602 q 198 488 210 533 q 186 391 186 442 z "},"Œ":{"ha":1324,"x_min":71,"x_max":1221,"o":"m 448 1002 q 551 997 500 1002 q 647 987 602 993 l 647 880 q 552 893 602 888 q 448 899 501 899 q 343 879 390 899 q 264 822 297 860 q 214 728 231 784 q 197 598 197 672 l 197 391 q 214 260 197 317 q 265 166 232 204 q 345 108 298 127 q 449 89 391 89 q 552 94 502 89 q 647 107 603 99 l 647 0 q 551 -9 602 -5 q 449 -14 501 -14 q 295 15 365 -14 q 176 99 226 45 q 98 227 125 153 q 71 391 71 301 l 71 597 q 98 761 71 686 q 175 889 125 835 q 294 972 225 943 q 448 1002 363 1002 m 1221 106 l 1221 0 l 699 0 l 699 106 l 1221 106 m 725 987 l 725 0 l 594 0 l 594 987 l 725 987 m 1152 563 l 1152 456 l 699 456 l 699 563 l 1152 563 m 1215 987 l 1215 880 l 699 880 l 699 987 l 1215 987 z "},"œ":{"ha":1261,"x_min":66,"x_max":1215,"o":"m 935 -14 q 798 13 859 -14 q 693 89 736 40 q 626 205 650 138 q 603 353 603 273 l 603 382 q 628 530 603 463 q 697 646 654 597 q 798 721 741 694 q 916 747 854 748 q 1048 723 992 747 q 1142 655 1105 699 q 1197 552 1179 612 q 1215 420 1215 492 l 1215 338 l 677 338 l 677 440 l 1090 440 l 1090 458 q 1072 550 1090 507 q 1015 618 1053 592 q 916 644 977 644 q 841 624 875 644 q 781 568 806 604 q 743 484 756 532 q 729 382 729 437 l 729 353 q 742 250 729 298 q 781 166 755 202 q 846 109 807 130 q 935 89 884 89 q 1060 110 1010 89 q 1145 162 1111 132 l 1194 77 q 1098 15 1161 44 q 935 -14 1035 -14 m 66 359 l 66 374 q 88 522 66 454 q 153 641 111 590 q 256 719 195 691 q 393 747 316 747 q 532 719 471 747 q 635 641 593 691 q 700 522 677 590 q 722 374 722 454 l 722 359 q 700 211 722 279 q 635 93 677 143 q 532 14 593 42 q 394 -14 471 -14 q 256 14 317 -14 q 153 93 195 42 q 88 211 111 143 q 66 359 66 279 m 192 374 l 192 359 q 204 255 192 304 q 241 169 216 207 q 304 110 266 132 q 394 89 342 89 q 484 110 446 89 q 547 169 522 132 q 584 255 572 207 q 596 359 596 304 l 596 374 q 584 477 596 429 q 547 563 572 526 q 483 623 522 601 q 393 644 445 644 q 303 623 341 644 q 240 563 265 601 q 204 477 216 526 q 192 374 192 429 z "},"ſ":{"ha":345,"x_min":109,"x_max":436,"o":"m 235 0 l 109 0 l 109 811 q 137 945 109 890 q 216 1028 165 1000 q 338 1056 267 1056 q 387 1052 363 1056 q 436 1042 411 1048 l 420 945 q 393 951 408 949 q 358 953 378 953 q 291 936 318 953 q 249 887 263 919 q 235 811 235 856 l 235 0 z "},"Ə":{"ha":960,"x_min":64,"x_max":880,"o":"m 473 -14 q 296 18 372 -14 q 168 108 219 49 q 90 250 116 167 q 64 436 64 333 l 64 520 l 800 520 l 800 419 l 195 419 l 195 396 q 209 278 195 333 q 256 182 224 223 q 342 118 289 141 q 473 94 395 94 q 591 123 539 94 q 678 202 642 151 q 732 319 713 252 q 750 461 750 385 l 750 525 q 732 668 750 602 q 676 785 714 734 q 578 864 638 836 q 435 892 519 892 q 287 873 347 892 q 187 836 227 854 l 155 932 q 208 960 172 943 q 300 988 243 976 q 435 1001 357 1001 q 626 966 543 1001 q 765 868 709 931 q 851 717 822 804 q 880 525 880 630 l 880 461 q 849 269 880 356 q 761 118 817 182 q 631 21 705 55 q 473 -14 557 -14 z "},"ƒ":{"ha":473,"x_min":-20,"x_max":475,"o":"m 412 734 l 412 637 l 275 637 l 275 -60 q 249 -189 275 -136 q 174 -269 222 -242 q 56 -296 125 -296 q 18 -294 35 -296 q -20 -285 0 -292 l -10 -184 q 23 -191 0 -189 q 56 -193 47 -193 q 106 -177 85 -193 q 138 -132 127 -161 q 149 -60 149 -102 l 149 637 l 33 637 l 33 734 l 149 734 l 149 811 q 177 945 149 890 q 256 1028 204 1000 q 378 1056 307 1056 q 427 1052 403 1056 q 475 1042 451 1048 l 460 943 q 430 948 448 946 q 393 949 413 949 q 327 933 353 949 q 288 887 300 918 q 275 811 275 856 l 275 734 l 412 734 z "},"Ơ":{"ha":954,"x_min":69,"x_max":975,"o":"m 861 1080 l 975 1080 q 946 930 975 992 q 860 837 918 869 q 717 804 803 804 l 717 896 q 802 918 770 896 q 847 981 833 939 q 861 1080 861 1022 m 863 525 l 863 463 q 836 263 863 351 q 755 113 808 175 q 630 19 703 52 q 467 -14 557 -14 q 336 7 397 -14 q 226 69 275 28 q 142 167 177 109 q 88 299 106 225 q 69 463 69 374 l 69 525 q 98 724 69 636 q 180 874 127 812 q 306 968 233 936 q 466 1001 378 1001 q 600 980 538 1001 q 710 919 661 959 q 793 820 758 878 q 845 688 827 762 q 863 525 863 614 m 734 463 l 734 526 q 722 654 734 597 q 688 755 711 711 q 633 829 666 800 q 559 874 601 859 q 466 890 517 890 q 356 866 406 890 q 272 796 307 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 211 334 199 391 q 247 232 223 276 q 303 157 270 187 q 377 112 336 127 q 467 97 419 97 q 581 121 531 97 q 664 191 630 144 q 716 306 699 237 q 734 463 734 374 z "},"ơ":{"ha":794,"x_min":62,"x_max":821,"o":"m 720 814 l 821 814 q 800 686 821 740 q 732 603 780 632 q 604 574 685 574 l 604 652 q 679 673 654 652 q 712 730 704 693 q 720 814 720 766 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 z "},"Ư":{"ha":966,"x_min":95,"x_max":1061,"o":"m 954 1043 l 1061 1043 q 1033 882 1061 947 q 943 784 1005 817 q 779 751 881 751 l 779 842 q 886 865 848 842 q 939 932 924 888 q 954 1043 954 977 m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 z "},"ư":{"ha":859,"x_min":93,"x_max":879,"o":"m 783 793 l 879 793 q 860 669 879 719 q 792 593 840 618 q 656 568 744 568 l 656 646 q 744 661 718 646 q 777 709 770 676 q 783 793 783 741 m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 z "},"ȷ":{"ha":350,"x_min":-52,"x_max":243,"o":"m 117 734 l 243 734 l 243 -60 q 217 -189 243 -136 q 142 -269 191 -242 q 24 -296 93 -296 q -14 -294 3 -296 q -52 -285 -32 -292 l -42 -184 q -8 -191 -32 -189 q 24 -193 15 -193 q 74 -177 54 -193 q 106 -132 95 -161 q 117 -60 117 -102 l 117 734 z "},"ə":{"ha":732,"x_min":67,"x_max":680,"o":"m 347 749 q 485 722 423 749 q 589 645 546 694 q 656 529 633 596 q 680 382 680 462 l 680 352 q 654 205 680 272 q 585 89 629 138 q 484 13 541 40 q 366 -13 428 -14 q 234 11 290 -13 q 141 79 178 35 q 85 182 104 123 q 67 314 67 242 l 67 397 l 605 397 l 605 294 l 193 294 l 193 277 q 211 185 193 228 q 268 116 229 142 q 366 90 307 90 q 441 110 407 90 q 500 166 475 130 q 539 250 526 202 q 553 352 553 298 l 553 382 q 540 484 553 436 q 501 568 527 532 q 437 625 475 604 q 347 646 398 646 q 222 624 273 646 q 138 572 172 603 l 88 658 q 185 720 122 690 q 347 749 248 749 z "},"ˆ":{"ha":654,"x_min":115,"x_max":526,"o":"m 357 1042 l 526 857 l 526 850 l 421 850 l 319 964 l 218 850 l 115 850 l 115 857 l 281 1042 l 357 1042 z "},"ˇ":{"ha":617,"x_min":96,"x_max":515,"o":"m 202 1041 l 304 926 l 407 1041 l 515 1041 l 515 1034 l 343 848 l 266 848 l 96 1034 l 96 1041 l 202 1041 z "},"ˉ":{"ha":637,"x_min":97,"x_max":552,"o":"m 552 980 l 552 884 l 97 884 l 97 980 l 552 980 z "},"˘":{"ha":593,"x_min":88,"x_max":494,"o":"m 392 1014 l 494 1014 q 469 920 494 961 q 399 856 445 879 q 292 833 354 833 q 143 883 197 833 q 88 1014 88 934 l 190 1014 q 213 943 190 974 q 292 913 236 913 q 369 943 346 913 q 392 1014 392 974 z "},"˙":{"ha":338,"x_min":96,"x_max":245,"o":"m 96 928 q 115 979 96 958 q 170 1000 134 1000 q 225 979 206 1000 q 245 928 245 958 q 225 877 245 898 q 170 857 206 857 q 115 877 134 857 q 96 928 96 898 z "},"˚":{"ha":465,"x_min":82,"x_max":374,"o":"m 82 956 q 101 1027 82 995 q 154 1078 121 1059 q 228 1097 186 1097 q 332 1055 290 1097 q 374 956 374 1014 q 354 885 374 916 q 302 835 335 853 q 228 817 269 817 q 124 857 166 817 q 82 956 82 896 m 149 956 q 171 902 149 926 q 228 878 193 878 q 284 901 262 878 q 307 956 307 924 q 284 1011 307 987 q 228 1036 262 1036 q 171 1011 193 1036 q 149 956 149 987 z "},"˛":{"ha":376,"x_min":34,"x_max":273,"o":"m 209 39 l 259 0 q 203 -45 230 -22 q 160 -95 177 -68 q 143 -151 143 -121 q 155 -186 143 -173 q 196 -200 167 -200 q 236 -194 218 -200 q 264 -182 254 -187 l 273 -264 q 230 -284 256 -275 q 164 -294 204 -294 q 72 -261 109 -294 q 34 -165 34 -229 q 52 -92 34 -128 q 109 -23 70 -56 q 209 39 147 10 z "},"˜":{"ha":655,"x_min":83,"x_max":564,"o":"m 479 1025 l 564 1018 q 544 931 564 968 q 491 873 524 894 q 417 853 458 853 q 360 863 382 853 q 320 885 338 873 q 283 908 302 898 q 235 918 264 918 q 188 896 207 918 q 168 842 168 874 l 83 846 q 103 933 83 896 q 155 992 122 971 q 229 1014 189 1014 q 280 1004 258 1014 q 322 982 302 994 q 363 959 342 969 q 411 949 384 949 q 459 971 439 949 q 479 1025 479 994 z "},"˝":{"ha":518,"x_min":64,"x_max":551,"o":"m 254 836 l 410 1041 l 551 1041 l 369 836 l 254 836 m 64 836 l 180 1041 l 314 1041 l 166 836 l 64 836 z "},"˳":{"ha":408,"x_min":86,"x_max":319,"o":"m 86 -165 q 121 -83 86 -115 q 204 -52 156 -52 q 285 -83 251 -52 q 319 -165 319 -115 q 285 -245 319 -214 q 204 -275 251 -275 q 121 -245 156 -275 q 86 -165 86 -214 m 145 -165 q 162 -204 145 -188 q 204 -221 180 -221 q 244 -205 227 -221 q 260 -165 260 -189 q 244 -123 260 -140 q 204 -106 227 -106 q 162 -123 180 -106 q 145 -165 145 -140 z "},"̀":{"ha":0,"x_min":-581,"x_max":-299,"o":"m -430 1042 l -299 842 l -406 842 l -581 1042 l -430 1042 z "},"́":{"ha":0,"x_min":-446,"x_max":-163,"o":"m -446 842 l -315 1042 l -163 1042 l -345 842 l -446 842 z "},"̃":{"ha":0,"x_min":-601,"x_max":-121,"o":"m -205 1025 l -121 1018 q -140 931 -121 968 q -193 873 -160 894 q -267 853 -226 853 q -324 863 -302 853 q -364 885 -347 873 q -401 908 -382 898 q -449 918 -420 918 q -497 896 -477 918 q -516 842 -516 874 l -601 846 q -582 933 -601 896 q -529 992 -562 971 q -455 1014 -496 1014 q -404 1004 -426 1014 q -362 982 -382 994 q -321 959 -342 969 q -273 949 -300 949 q -225 971 -245 949 q -205 1025 -205 994 z "},"̉":{"ha":0,"x_min":-458,"x_max":-248,"o":"m -353 842 l -443 842 l -444 945 q -387 952 -409 947 q -355 968 -366 958 q -345 996 -345 979 q -354 1020 -345 1010 q -378 1037 -363 1030 q -414 1046 -394 1043 q -458 1048 -435 1048 l -453 1120 q -365 1112 -403 1120 q -300 1086 -326 1103 q -261 1045 -274 1069 q -248 994 -248 1022 q -280 919 -248 942 q -352 890 -313 895 l -353 842 z "},"̏":{"ha":0,"x_min":-668,"x_max":-170,"o":"m -347 849 l -461 849 l -668 1029 l -515 1029 l -347 849 m -170 849 l -271 849 l -438 1029 l -298 1029 l -170 849 z "},"̣":{"ha":0,"x_min":-483,"x_max":-334,"o":"m -483 -167 q -464 -115 -483 -136 q -409 -94 -446 -94 q -354 -115 -373 -94 q -334 -167 -334 -136 q -354 -217 -334 -196 q -409 -237 -373 -237 q -464 -217 -446 -237 q -483 -167 -483 -196 z "},"΄":{"ha":357,"x_min":125,"x_max":279,"o":"m 125 857 l 161 1084 l 279 1084 l 201 857 l 125 857 z "},"΅":{"ha":703,"x_min":77,"x_max":610,"o":"m 294 956 l 326 1135 l 454 1135 l 386 956 l 294 956 m 77 930 q 96 981 77 960 q 151 1002 115 1002 q 207 981 187 1002 q 226 930 226 960 q 207 880 226 901 q 151 859 187 859 q 96 880 115 859 q 77 930 77 901 m 461 928 q 480 980 461 959 q 535 1001 499 1001 q 591 980 572 1001 q 610 928 610 959 q 591 879 610 899 q 535 858 572 858 q 480 879 499 858 q 461 928 461 899 z "},"·":{"ha":363,"x_min":100,"x_max":256,"o":"m 100 494 q 120 548 100 526 q 178 570 140 570 q 236 548 216 570 q 256 494 256 526 q 236 442 256 463 q 178 420 216 420 q 120 442 140 420 q 100 494 100 463 z "},"Γ":{"ha":772,"x_min":121,"x_max":727,"o":"m 727 987 l 727 880 l 251 880 l 251 0 l 121 0 l 121 987 l 727 987 z "},"Δ":{"ha":979,"x_min":22,"x_max":947,"o":"m 522 895 l 156 0 l 22 0 l 438 987 l 520 987 l 522 895 m 812 0 l 467 901 l 471 987 l 553 987 l 947 0 l 812 0 m 844 106 l 844 0 l 121 0 l 121 106 l 844 106 z "},"∆":{"ha":979,"x_min":22,"x_max":947,"o":"m 522 895 l 156 0 l 22 0 l 438 987 l 520 987 l 522 895 m 812 0 l 467 901 l 471 987 l 553 987 l 947 0 l 812 0 m 844 106 l 844 0 l 121 0 l 121 106 l 844 106 z "},"Θ":{"ha":945,"x_min":70,"x_max":864,"o":"m 651 550 l 651 448 l 301 448 l 301 550 l 651 550 m 864 525 l 864 463 q 836 263 864 351 q 756 113 808 175 q 631 19 704 52 q 468 -14 558 -14 q 337 7 398 -14 q 227 69 276 28 q 142 167 178 109 q 89 299 107 225 q 70 463 70 374 l 70 525 q 99 724 70 636 q 180 874 127 812 q 306 968 233 936 q 467 1001 379 1001 q 600 980 538 1001 q 710 919 662 959 q 793 820 759 878 q 846 688 828 762 q 864 525 864 614 m 734 463 l 734 526 q 723 654 734 597 q 689 755 711 711 q 634 829 667 800 q 559 874 602 859 q 467 890 517 890 q 357 866 406 890 q 273 796 308 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 212 334 199 391 q 247 232 224 276 q 303 157 271 187 q 378 112 336 127 q 468 97 420 97 q 581 121 532 97 q 665 191 631 144 q 717 306 699 237 q 734 463 734 374 z "},"Λ":{"ha":911,"x_min":34,"x_max":870,"o":"m 484 880 l 174 0 l 34 0 l 394 987 l 479 987 l 484 880 m 730 0 l 418 884 l 425 987 l 511 987 l 870 0 l 730 0 z "},"Ξ":{"ha":793,"x_min":81,"x_max":718,"o":"m 81 0 l 81 106 l 718 106 l 718 0 l 81 0 m 140 457 l 140 564 l 652 564 l 652 457 l 140 457 m 84 880 l 84 987 l 706 987 l 706 880 l 84 880 z "},"Π":{"ha":991,"x_min":121,"x_max":869,"o":"m 869 987 l 869 0 l 739 0 l 739 880 l 252 880 l 252 0 l 121 0 l 121 987 l 869 987 z "},"Σ":{"ha":793,"x_min":47,"x_max":741,"o":"m 741 107 l 741 0 l 98 0 l 98 107 l 741 107 m 708 987 l 708 880 l 79 880 l 79 987 l 708 987 m 512 503 l 512 487 l 126 0 l 47 0 l 47 97 l 374 495 l 47 890 l 47 987 l 126 987 l 512 503 z "},"Φ":{"ha":995,"x_min":53,"x_max":947,"o":"m 555 119 l 444 119 q 284 146 356 119 q 160 222 212 173 q 81 339 109 271 q 53 490 53 408 q 102 684 53 600 q 239 815 152 768 q 441 863 326 863 l 557 863 q 715 836 644 863 q 838 759 786 809 q 918 642 890 709 q 947 491 947 574 q 898 297 947 381 q 761 166 849 214 q 555 119 673 119 m 444 227 l 556 227 q 703 260 645 227 q 789 352 760 292 q 817 491 817 411 q 801 600 817 551 q 752 683 785 648 q 672 736 720 718 q 559 755 623 755 l 441 755 q 297 722 355 755 q 211 630 239 689 q 182 490 182 570 q 198 381 182 430 q 246 298 214 333 q 328 245 279 264 q 444 227 378 227 m 566 987 l 566 0 l 435 0 l 435 987 l 566 987 z "},"Ψ":{"ha":961,"x_min":61,"x_max":891,"o":"m 760 987 l 891 987 l 891 631 q 838 420 891 507 q 692 289 785 334 q 480 243 599 243 l 460 243 q 301 269 374 243 q 174 344 228 294 q 91 466 121 393 q 61 631 61 538 l 61 987 l 191 987 l 191 631 q 211 511 191 564 q 267 423 231 459 q 353 369 303 387 q 461 351 402 351 l 481 351 q 627 383 564 351 q 725 478 690 416 q 760 631 760 541 l 760 987 m 536 987 l 536 0 l 406 0 l 406 987 l 536 987 z "},"Ω":{"ha":924,"x_min":77,"x_max":833,"o":"m 701 492 l 701 571 q 684 711 701 650 q 634 812 667 771 q 556 874 602 853 q 454 895 511 895 q 352 874 397 895 q 275 812 307 853 q 227 711 243 771 q 210 571 210 650 l 210 492 q 224 338 210 406 q 266 223 239 271 q 331 148 293 176 q 414 111 368 119 l 414 15 q 279 67 340 24 q 173 177 218 110 q 102 325 127 243 q 77 492 77 406 l 77 570 q 104 745 77 666 q 182 881 132 824 q 301 970 232 939 q 454 1001 370 1001 q 608 970 538 1001 q 728 881 677 939 q 805 745 778 824 q 833 570 833 666 l 833 492 q 808 326 833 407 q 739 177 783 244 q 633 67 694 111 q 500 15 572 24 l 500 111 q 582 148 545 120 q 646 224 619 176 q 686 339 672 272 q 701 492 701 406 m 500 0 l 500 106 l 828 106 l 828 0 l 500 0 m 80 0 l 80 106 l 414 106 l 414 0 l 80 0 z "},"Ω":{"ha":924,"x_min":77,"x_max":833,"o":"m 701 492 l 701 571 q 684 711 701 650 q 634 812 667 771 q 556 874 602 853 q 454 895 511 895 q 352 874 397 895 q 275 812 307 853 q 227 711 243 771 q 210 571 210 650 l 210 492 q 224 338 210 406 q 266 223 239 271 q 331 148 293 176 q 414 111 368 119 l 414 15 q 279 67 340 24 q 173 177 218 110 q 102 325 127 243 q 77 492 77 406 l 77 570 q 104 745 77 666 q 182 881 132 824 q 301 970 232 939 q 454 1001 370 1001 q 608 970 538 1001 q 728 881 677 939 q 805 745 778 824 q 833 570 833 666 l 833 492 q 808 326 833 407 q 739 177 783 244 q 633 67 694 111 q 500 15 572 24 l 500 111 q 582 148 545 120 q 646 224 619 176 q 686 339 672 272 q 701 492 701 406 m 500 0 l 500 106 l 828 106 l 828 0 l 500 0 m 80 0 l 80 106 l 414 106 l 414 0 l 80 0 z "},"α":{"ha":785,"x_min":68,"x_max":776,"o":"m 68 340 l 68 354 q 87 513 68 441 q 142 637 106 585 q 232 719 178 690 q 355 747 286 747 q 450 732 408 747 q 525 686 492 716 q 581 613 557 656 q 618 515 604 570 q 638 394 632 460 l 638 338 q 610 192 631 256 q 555 81 590 127 q 471 10 521 35 q 353 -14 420 -14 q 232 12 286 -14 q 142 85 179 38 q 87 198 106 133 q 68 340 68 262 m 194 354 l 194 340 q 205 242 194 288 q 238 162 216 197 q 297 108 261 127 q 385 89 334 89 q 469 109 434 89 q 529 164 505 130 q 569 244 553 199 q 595 337 585 289 l 595 382 q 572 478 587 431 q 532 563 557 525 q 471 622 507 600 q 386 644 435 644 q 298 621 334 644 q 239 558 262 598 q 205 466 216 518 q 194 354 194 413 m 576 734 l 683 734 l 683 200 q 687 149 683 169 q 699 118 691 130 q 716 103 707 107 q 737 98 726 98 q 750 100 744 98 q 760 102 755 101 l 776 9 q 734 -10 755 -6 q 692 -14 714 -14 q 635 -2 661 -14 q 593 35 610 9 q 566 101 575 60 q 557 200 557 142 l 557 574 l 576 734 z "},"β":{"ha":823,"x_min":109,"x_max":747,"o":"m 351 559 l 450 559 q 611 523 545 559 q 712 427 677 488 q 747 288 747 366 q 708 124 747 192 q 598 22 668 57 q 439 -14 529 -14 q 335 1 387 -14 q 240 47 283 16 q 172 127 197 78 q 146 243 146 176 l 196 271 q 225 180 196 221 q 306 114 254 138 q 427 89 358 89 q 532 114 489 89 q 598 184 576 140 q 621 286 621 229 q 601 377 621 333 q 543 450 581 422 q 448 479 504 479 l 351 479 l 351 559 m 411 1001 q 564 967 499 1001 q 665 873 629 933 q 701 735 701 813 q 665 617 701 671 q 564 532 629 564 q 411 500 498 500 l 351 500 l 351 582 l 408 582 q 505 602 468 582 q 558 657 541 622 q 575 738 575 692 q 557 815 575 779 q 502 875 538 852 q 411 898 466 898 q 321 876 361 898 q 258 815 281 854 q 235 728 235 777 l 235 -260 l 109 -260 l 109 728 q 151 865 109 803 q 260 964 192 927 q 411 1001 329 1001 z "},"γ":{"ha":696,"x_min":32,"x_max":673,"o":"m 415 90 l 415 -283 l 290 -283 l 290 90 l 415 90 m 349 170 l 544 734 l 673 734 l 401 0 l 317 0 l 349 170 m 160 734 l 361 170 l 389 0 l 305 0 l 32 734 l 160 734 z "},"δ":{"ha":787,"x_min":66,"x_max":722,"o":"m 150 861 q 181 967 150 922 q 270 1037 212 1013 q 407 1061 327 1061 q 503 1052 460 1061 q 591 1023 546 1043 l 591 916 q 510 941 559 927 q 404 956 460 956 q 337 944 366 956 q 293 912 309 933 q 277 864 277 892 q 284 835 277 850 q 308 803 291 819 q 355 770 325 787 q 434 737 386 753 q 595 651 531 704 q 690 525 659 597 q 722 360 722 452 l 722 345 q 700 203 722 269 q 635 89 677 138 q 532 14 593 41 q 395 -14 471 -14 q 256 14 317 -14 q 152 89 195 41 q 88 203 110 138 q 66 345 66 269 l 66 360 q 97 507 66 441 q 179 616 128 572 q 290 675 231 661 l 290 678 q 214 723 245 696 q 166 785 182 750 q 150 861 150 821 m 192 360 l 192 345 q 204 247 192 293 q 241 165 216 201 q 304 109 266 130 q 395 89 342 89 q 484 109 446 89 q 546 165 522 130 q 583 247 571 201 q 595 345 595 293 l 595 360 q 581 446 595 404 q 540 524 566 488 q 477 584 513 559 q 396 618 441 609 q 306 597 345 618 q 242 541 267 576 q 204 458 217 505 q 192 360 192 412 z "},"ε":{"ha":749,"x_min":68,"x_max":681,"o":"m 356 398 l 505 398 l 505 325 l 366 325 q 272 312 310 325 q 214 274 233 300 q 194 206 194 248 q 206 161 194 182 q 241 123 218 140 q 298 98 264 107 q 374 88 332 88 q 470 106 429 88 q 533 154 511 125 q 556 217 556 184 l 681 217 q 654 114 681 157 q 584 42 628 70 q 485 0 540 14 q 374 -14 431 -14 q 252 1 308 -14 q 155 45 196 16 q 91 114 113 73 q 68 207 68 155 q 87 289 68 253 q 143 349 106 324 q 234 386 180 373 q 356 398 288 398 m 505 351 l 356 351 q 243 365 294 351 q 156 405 192 379 q 100 463 119 430 q 81 534 81 496 q 101 626 81 586 q 161 692 122 665 q 254 733 199 719 q 374 747 308 747 q 488 732 435 747 q 582 688 541 717 q 646 620 623 660 q 669 530 669 580 l 544 530 q 521 588 544 562 q 460 630 498 614 q 374 645 422 645 q 279 629 317 645 q 224 588 242 613 q 206 534 206 562 q 215 490 206 510 q 243 455 224 470 q 293 433 262 441 q 366 425 323 425 l 505 425 l 505 351 z "},"ζ":{"ha":720,"x_min":74,"x_max":654,"o":"m 597 987 l 654 987 l 654 906 l 416 617 q 327 500 363 555 q 272 388 291 445 q 254 262 254 331 q 260 205 254 229 q 279 164 266 182 q 312 136 292 147 q 361 116 333 124 l 450 90 q 539 63 500 76 q 602 23 579 50 q 625 -60 625 -4 q 605 -135 625 -96 q 557 -207 585 -174 q 505 -260 530 -241 l 439 -203 q 474 -159 460 -179 q 497 -119 489 -138 q 505 -79 505 -100 q 494 -51 505 -64 q 460 -27 483 -38 q 401 -7 437 -16 l 340 9 q 240 46 281 25 q 175 96 200 67 q 139 165 150 125 q 127 258 127 205 q 146 374 127 309 q 207 514 165 439 q 317 670 249 589 l 597 987 m 74 987 l 614 987 l 614 885 l 74 885 l 74 987 z "},"η":{"ha":787,"x_min":99,"x_max":684,"o":"m 224 577 l 224 0 l 99 0 l 99 734 l 212 734 l 224 577 m 199 391 l 146 389 q 165 533 146 467 q 223 646 185 598 q 314 721 260 694 q 436 747 368 747 q 539 734 493 747 q 617 688 585 720 q 667 603 650 656 q 684 471 684 550 l 684 -281 l 559 -281 l 559 469 q 548 553 559 519 q 517 607 538 587 q 467 635 496 627 q 399 644 437 644 q 307 624 345 644 q 245 569 269 604 q 210 488 221 534 q 199 391 199 442 z "},"θ":{"ha":791,"x_min":83,"x_max":707,"o":"m 395 1001 q 500 984 452 1001 q 587 933 549 968 q 652 847 625 899 q 693 723 679 794 q 707 559 707 651 l 707 434 q 693 271 707 342 q 652 145 679 199 q 588 56 626 92 q 502 4 550 21 q 396 -14 454 -14 q 291 4 339 -14 q 204 56 243 21 q 139 145 166 92 q 98 271 112 199 q 83 434 83 342 l 83 559 q 98 723 83 651 q 139 847 112 794 q 203 933 165 899 q 290 984 241 968 q 395 1001 338 1001 m 395 899 q 315 878 350 899 q 257 816 280 857 q 221 716 233 775 q 209 581 209 657 l 209 543 l 581 543 l 581 581 q 573 692 581 642 q 551 781 566 742 q 513 845 536 819 q 461 885 490 871 q 395 899 431 899 m 396 90 q 462 104 433 90 q 514 145 492 118 q 551 212 536 172 q 574 302 566 252 q 581 414 581 353 l 581 441 l 209 441 l 209 414 q 217 302 209 353 q 240 212 224 252 q 278 145 256 172 q 331 104 301 118 q 396 90 360 90 z "},"ι":{"ha":450,"x_min":132,"x_max":399,"o":"m 132 734 l 258 734 l 258 187 q 270 131 258 150 q 300 105 281 112 q 339 99 318 99 q 372 102 355 99 q 398 107 389 105 l 399 5 q 360 -4 384 1 q 302 -9 336 -9 q 217 10 256 -9 q 155 72 178 28 q 132 188 132 115 l 132 734 z "},"λ":{"ha":770,"x_min":26,"x_max":734,"o":"m 366 547 l 165 0 l 26 0 l 311 747 l 399 739 l 366 547 m 178 1029 q 243 1021 216 1029 q 291 998 271 1013 q 325 960 311 982 q 348 911 338 939 l 637 159 q 656 123 647 136 q 677 104 666 110 q 705 98 689 98 q 719 99 711 98 q 730 100 726 99 l 734 -3 q 712 -9 727 -6 q 682 -12 698 -12 q 611 -2 641 -12 q 559 38 582 8 q 515 126 537 67 l 307 663 l 227 858 q 206 899 217 884 q 180 920 195 913 q 145 926 165 926 q 130 926 140 926 q 113 925 119 926 l 113 1021 q 143 1027 123 1025 q 178 1029 163 1029 z "},"ξ":{"ha":681,"x_min":69,"x_max":636,"o":"m 616 975 l 599 874 q 548 886 574 881 q 497 895 523 892 q 444 899 471 899 q 327 881 372 899 q 260 834 281 863 q 239 771 239 805 q 251 710 239 738 q 290 663 264 683 q 359 633 317 644 q 460 623 401 623 l 555 623 l 555 544 l 457 544 q 316 561 379 544 q 208 609 253 578 q 138 680 162 640 q 113 768 113 721 q 136 867 113 824 q 203 940 159 910 q 307 985 246 970 q 442 1001 367 1001 q 506 998 474 1001 q 567 988 538 994 q 616 975 595 982 m 457 595 l 555 595 l 555 519 l 460 519 q 316 496 376 519 q 226 424 257 473 q 195 301 195 376 q 222 199 195 241 q 292 133 249 158 q 385 96 336 109 l 460 79 q 555 50 516 65 q 615 7 594 34 q 636 -68 636 -20 q 615 -143 635 -104 q 568 -214 595 -181 q 517 -267 541 -248 l 444 -210 q 481 -168 465 -186 q 507 -130 497 -149 q 516 -83 516 -110 q 506 -54 516 -66 q 472 -33 495 -42 q 412 -15 450 -24 l 372 -5 q 250 33 305 10 q 154 89 194 55 q 91 176 113 123 q 69 304 69 228 q 98 430 69 376 q 178 521 126 484 q 301 577 230 558 q 457 595 372 595 z "},"π":{"ha":828,"x_min":28,"x_max":806,"o":"m 771 734 l 771 630 l 28 630 l 28 734 l 771 734 m 269 734 l 269 0 l 142 0 l 142 734 l 269 734 m 540 734 l 666 734 l 666 187 q 677 131 666 150 q 707 105 689 112 q 747 99 726 99 q 780 102 762 99 q 806 107 797 105 l 806 5 q 767 -4 791 1 q 709 -9 743 -9 q 625 10 663 -9 q 563 72 586 28 q 540 188 540 115 l 540 734 z "},"ρ":{"ha":787,"x_min":99,"x_max":716,"o":"m 99 -282 l 99 393 q 123 546 99 480 q 189 657 146 612 q 285 725 231 702 q 401 747 340 747 q 539 719 480 747 q 637 637 597 690 q 696 513 677 585 q 716 354 716 441 l 716 340 q 698 198 716 262 q 644 85 680 133 q 555 12 608 38 q 435 -14 503 -14 q 311 9 364 -14 q 220 76 257 33 q 160 182 182 120 q 131 321 138 243 q 147 308 132 321 q 177 283 162 296 q 192 271 192 271 q 230 182 205 224 q 294 115 254 140 q 397 90 335 90 q 484 109 448 90 q 544 162 521 128 q 579 242 568 197 q 590 340 590 288 l 590 354 q 580 466 590 413 q 547 558 570 518 q 489 621 525 598 q 401 644 453 644 q 320 621 354 644 q 266 559 287 597 q 235 477 245 522 q 225 391 225 433 l 224 -282 l 99 -282 z "},"ς":{"ha":747,"x_min":68,"x_max":674,"o":"m 389 747 q 536 716 471 747 q 637 626 600 685 q 674 481 674 566 l 555 481 q 536 564 555 527 q 481 623 518 601 q 389 644 444 644 q 301 622 338 644 q 240 561 264 599 q 206 476 217 522 q 195 381 195 429 l 195 353 q 221 243 195 292 q 302 159 248 195 q 435 102 355 124 q 531 73 489 88 q 598 29 574 58 q 623 -56 623 0 q 603 -130 623 -91 q 556 -201 583 -168 q 505 -254 528 -234 l 438 -197 q 473 -155 459 -173 q 495 -117 488 -136 q 503 -72 503 -98 q 492 -39 503 -52 q 458 -17 481 -26 q 397 0 435 -8 q 218 70 291 24 q 106 187 144 117 q 68 353 68 258 l 68 381 q 90 521 68 455 q 152 638 111 587 q 253 718 193 689 q 389 747 313 747 z "},"σ":{"ha":787,"x_min":66,"x_max":779,"o":"m 66 359 l 66 374 q 88 516 66 451 q 152 631 110 582 q 255 707 195 680 q 393 734 316 734 q 431 719 414 732 q 469 691 448 707 q 525 667 490 676 q 631 590 587 637 q 699 482 675 543 q 722 349 722 421 l 722 334 q 700 203 722 266 q 635 92 677 141 q 532 15 593 43 q 394 -14 471 -14 q 256 15 317 -14 q 153 93 195 43 q 88 212 110 144 q 66 359 66 279 m 191 374 l 191 359 q 203 255 191 304 q 240 170 216 207 q 303 111 265 132 q 394 90 342 90 q 484 111 446 90 q 547 170 522 132 q 583 255 571 207 q 595 359 595 304 l 595 374 q 583 471 595 425 q 546 553 571 517 q 483 610 522 589 q 393 630 445 630 q 303 610 341 630 q 240 553 264 589 q 203 471 216 517 q 191 374 191 425 m 779 734 l 779 630 l 392 630 l 392 734 l 779 734 z "},"τ":{"ha":724,"x_min":55,"x_max":669,"o":"m 669 734 l 669 632 l 55 632 l 55 734 l 669 734 m 291 734 l 416 734 l 416 183 q 426 127 416 146 q 452 100 436 107 q 488 93 469 93 q 523 98 507 93 q 551 111 539 104 l 578 22 q 517 -7 547 -1 q 456 -14 488 -14 q 367 7 404 -14 q 311 72 330 27 q 291 190 291 117 l 291 734 z "},"υ":{"ha":758,"x_min":98,"x_max":688,"o":"m 98 734 l 223 734 l 223 289 q 233 196 223 235 q 262 134 243 158 q 306 100 281 111 q 360 89 331 89 q 448 114 410 89 q 511 182 486 140 q 549 277 536 225 q 562 381 562 329 q 537 562 561 473 q 479 734 513 650 l 611 734 q 649 639 631 692 q 677 522 667 586 q 688 382 688 458 q 669 232 688 304 q 610 105 650 161 q 509 18 570 50 q 366 -14 449 -14 q 255 4 304 -14 q 170 59 205 22 q 116 153 135 96 q 98 290 98 211 l 98 734 z "},"φ":{"ha":979,"x_min":60,"x_max":920,"o":"m 421 -324 l 421 580 q 443 662 421 627 q 502 715 464 696 q 591 734 541 734 q 718 707 659 734 q 823 630 777 680 q 894 514 868 581 q 920 369 920 448 q 896 225 920 294 q 820 102 872 156 q 685 17 768 48 q 484 -14 602 -14 q 287 18 368 -14 q 156 106 206 50 q 83 233 106 161 q 60 382 60 304 q 79 524 60 458 q 138 642 99 589 q 233 734 176 695 l 301 644 q 236 566 261 609 q 199 475 211 522 q 185 382 187 429 q 201 278 185 330 q 251 183 216 226 q 343 115 286 140 q 484 89 400 89 q 666 131 598 89 q 764 238 734 174 q 794 369 794 302 q 780 465 793 418 q 741 549 766 512 q 678 609 715 587 q 591 631 641 631 q 558 616 570 631 q 547 585 547 602 l 547 -324 l 421 -324 z "},"ψ":{"ha":972,"x_min":65,"x_max":913,"o":"m 65 734 l 191 734 l 191 403 q 212 257 191 317 q 273 160 234 197 q 364 106 312 123 q 477 89 416 89 q 624 115 564 89 q 720 184 684 140 q 772 280 755 227 q 788 385 788 332 q 762 564 786 476 q 702 734 738 651 l 834 734 q 873 640 855 692 q 902 524 891 587 q 913 385 913 460 q 891 234 913 306 q 818 106 868 162 q 685 18 768 50 q 484 -14 603 -14 q 311 10 388 -14 q 178 85 233 35 q 94 216 123 136 q 65 404 65 295 l 65 734 m 415 734 l 541 734 l 541 -321 l 415 -321 l 415 734 z "},"ω":{"ha":1144,"x_min":83,"x_max":1059,"o":"m 836 734 l 967 734 q 1013 638 991 691 q 1046 521 1034 585 q 1059 380 1059 457 q 1045 231 1059 302 q 999 105 1030 160 q 916 18 967 50 q 791 -14 864 -14 q 687 8 732 -14 q 610 73 642 30 q 562 178 578 115 q 546 321 546 240 l 546 522 l 634 522 l 634 319 q 645 213 634 256 q 677 141 656 169 q 725 101 697 114 q 784 89 752 89 q 853 112 825 89 q 899 175 882 135 q 925 268 917 216 q 933 380 933 321 q 904 561 931 473 q 836 734 876 650 m 175 734 l 307 734 q 238 561 266 650 q 209 380 211 473 q 214 290 209 333 q 230 210 219 246 q 258 146 241 174 q 300 104 275 119 q 357 89 325 89 q 417 101 390 89 q 465 141 445 114 q 497 213 486 169 q 508 319 508 256 l 508 522 l 596 522 l 596 321 q 580 178 596 240 q 532 73 564 115 q 455 8 500 30 q 351 -14 410 -14 q 248 6 292 -14 q 172 64 203 27 q 121 152 140 102 q 92 260 101 201 q 83 380 83 318 q 96 521 83 457 q 130 638 109 585 q 175 734 151 691 z "},"ϑ":{"ha":804,"x_min":83,"x_max":777,"o":"m 772 527 l 777 426 q 711 408 748 415 q 638 401 674 401 q 420 448 513 401 q 276 576 327 495 q 225 757 225 656 l 225 768 q 255 895 225 842 q 335 975 284 947 q 451 1003 386 1003 q 546 986 504 1003 q 618 937 589 970 q 664 858 648 905 q 680 750 680 810 l 680 296 q 643 126 680 195 q 541 21 606 57 q 387 -14 475 -14 q 263 7 319 -14 q 166 70 207 29 q 104 168 126 111 q 83 296 83 224 l 83 522 l 208 523 l 208 296 q 230 186 208 232 q 292 117 252 141 q 387 93 332 93 q 477 115 440 93 q 535 181 515 136 q 555 296 555 227 l 555 750 q 548 815 555 788 q 529 861 542 843 q 496 887 515 879 q 451 896 477 896 q 400 883 422 896 q 364 843 377 871 q 351 768 351 814 l 351 755 q 384 633 351 690 q 480 543 416 577 q 638 509 545 509 q 708 514 673 509 q 772 527 743 519 z "},"ϒ":{"ha":740,"x_min":-26,"x_max":770,"o":"m 437 466 l 437 0 l 307 0 l 307 466 l 437 466 m 368 516 l 524 869 q 570 946 547 919 q 622 985 593 974 q 685 996 650 996 q 729 992 709 996 q 770 978 749 988 l 745 875 q 731 879 742 878 q 710 881 721 881 q 683 876 696 881 q 659 860 670 871 q 638 827 648 848 l 427 368 l 336 369 l 368 516 m 222 869 l 378 511 l 407 369 l 316 368 l 106 827 q 85 860 96 848 q 61 876 73 871 q 34 881 48 881 q 12 879 23 881 q -2 875 1 878 l -26 977 q 15 992 -5 987 q 58 996 35 996 q 121 986 92 996 q 174 948 149 976 q 222 869 199 921 z "},"ϖ":{"ha":1090,"x_min":51,"x_max":1060,"o":"m 1060 734 l 1060 631 l 51 631 l 51 734 l 1060 734 m 787 734 l 920 734 q 965 638 944 691 q 998 521 985 585 q 1011 380 1011 457 q 1003 260 1011 318 q 977 152 994 201 q 930 64 959 102 q 861 6 901 27 q 768 -14 821 -14 q 664 8 709 -14 q 587 73 618 30 q 540 178 556 115 q 524 321 524 240 l 524 490 l 612 490 l 612 319 q 623 213 612 256 q 654 141 634 169 q 702 101 675 114 q 762 89 729 89 q 809 104 789 89 q 844 146 829 119 q 868 210 859 173 q 881 290 877 246 q 886 380 886 333 q 856 561 883 473 q 787 734 828 650 m 178 734 l 310 734 q 241 561 269 650 q 212 380 214 473 q 216 290 212 333 q 230 210 220 246 q 253 146 239 174 q 288 104 268 119 q 336 89 309 89 q 395 101 368 89 q 443 141 422 114 q 474 213 463 169 q 486 319 486 256 l 486 490 l 574 490 l 574 321 q 557 178 574 240 q 510 73 541 115 q 433 8 478 30 q 329 -14 387 -14 q 236 6 276 -14 q 167 64 195 27 q 120 152 138 102 q 94 260 102 201 q 85 380 85 318 q 98 521 85 457 q 133 638 111 585 q 178 734 154 691 z "},"Ђ":{"ha":1042,"x_min":29,"x_max":989,"o":"m 389 441 l 389 554 q 470 580 425 568 q 559 598 515 591 q 637 605 603 605 q 825 569 747 605 q 946 463 904 532 q 989 294 989 393 q 967 167 989 223 q 904 72 946 111 q 799 13 862 33 q 651 -8 735 -8 l 650 94 q 748 109 708 94 q 812 149 788 123 q 847 212 836 176 q 858 293 858 249 q 833 401 858 357 q 759 469 808 446 q 636 492 709 492 q 551 486 593 492 q 467 468 508 479 q 389 441 426 457 m 441 987 l 441 0 l 311 0 l 311 987 l 441 987 m 795 987 l 795 880 l 29 880 l 29 987 l 795 987 z "},"Є":{"ha":937,"x_min":83,"x_max":844,"o":"m 601 552 l 601 446 l 196 446 l 196 552 l 601 552 m 713 314 l 844 314 q 790 146 834 220 q 667 30 747 73 q 470 -14 588 -14 q 311 19 382 -14 q 189 112 240 52 q 111 256 138 172 q 83 444 83 340 l 83 542 q 111 730 83 646 q 190 876 138 815 q 316 968 242 936 q 481 1001 389 1001 q 670 959 593 1001 q 791 843 747 917 q 844 671 834 768 l 713 671 q 678 790 704 740 q 605 867 652 840 q 481 894 557 894 q 366 869 416 894 q 282 797 316 844 q 232 686 249 751 q 215 543 215 622 l 215 444 q 225 333 215 386 q 254 237 235 281 q 304 160 274 193 q 376 111 335 128 q 470 93 417 93 q 602 119 553 93 q 677 195 652 145 q 713 314 703 244 z "},"Љ":{"ha":1488,"x_min":34,"x_max":1429,"o":"m 254 987 l 385 987 l 362 504 q 346 318 357 399 q 315 176 335 236 q 262 77 294 116 q 182 19 229 38 q 69 0 135 0 l 34 0 l 34 106 l 61 109 q 126 126 99 111 q 173 170 154 140 q 205 248 193 200 q 224 364 217 295 q 235 525 231 433 l 254 987 m 744 987 l 744 880 l 299 880 l 299 987 l 744 987 m 825 605 l 1095 605 q 1277 566 1203 605 q 1390 458 1352 526 q 1429 302 1429 389 q 1407 182 1429 237 q 1343 86 1385 127 q 1238 22 1300 45 q 1095 0 1176 0 l 726 0 l 726 987 l 857 987 l 857 106 l 1095 106 q 1212 135 1167 106 q 1278 209 1257 163 q 1299 303 1299 254 q 1278 397 1299 353 q 1212 470 1257 441 q 1095 498 1167 498 l 825 498 l 825 605 z "},"Њ":{"ha":1501,"x_min":121,"x_max":1441,"o":"m 756 559 l 756 453 l 231 453 l 231 559 l 756 559 m 252 987 l 252 0 l 121 0 l 121 987 l 252 987 m 838 574 l 1107 574 q 1290 538 1215 574 q 1402 438 1364 502 q 1441 290 1441 374 q 1419 174 1441 227 q 1355 82 1398 121 q 1250 22 1312 43 q 1107 0 1188 0 l 738 0 l 738 987 l 869 987 l 869 113 l 1107 113 q 1224 138 1179 113 q 1291 204 1270 163 q 1312 292 1312 245 q 1291 378 1312 338 q 1224 443 1270 418 q 1107 468 1179 468 l 838 468 l 838 574 z "},"Ћ":{"ha":1131,"x_min":42,"x_max":1012,"o":"m 1012 0 l 882 0 l 882 309 q 859 429 882 386 q 791 490 836 472 q 677 507 745 507 q 598 504 636 507 q 523 494 559 500 q 451 480 486 488 q 380 460 415 471 l 380 568 q 447 587 414 578 q 514 602 479 595 q 589 611 549 608 q 677 614 629 614 q 857 584 782 614 q 972 487 932 554 q 1012 309 1012 420 l 1012 0 m 450 987 l 450 0 l 319 0 l 319 987 l 450 987 m 808 987 l 808 880 l 42 880 l 42 987 l 808 987 z "},"Џ":{"ha":990,"x_min":119,"x_max":868,"o":"m 119 0 l 119 987 l 251 987 l 251 106 l 737 106 l 737 987 l 868 987 l 868 0 l 119 0 m 564 94 l 564 -243 l 433 -243 l 433 94 l 564 94 z "},"Б":{"ha":876,"x_min":111,"x_max":814,"o":"m 717 987 l 717 880 l 241 880 l 241 0 l 111 0 l 111 987 l 717 987 m 210 585 l 479 585 q 663 549 588 585 q 776 448 737 513 q 814 295 814 382 q 793 176 814 230 q 728 82 771 122 q 623 21 686 43 q 479 0 561 0 l 111 0 l 111 987 l 241 987 l 241 106 l 479 106 q 597 133 552 106 q 663 203 642 160 q 684 296 684 247 q 663 387 684 346 q 597 453 642 429 q 479 478 552 478 l 210 478 l 210 585 z "},"Д":{"ha":1044,"x_min":35,"x_max":1005,"o":"m 891 106 l 891 0 l 144 0 l 144 106 l 891 106 m 165 106 l 165 -243 l 35 -243 l 35 106 l 165 106 m 1005 106 l 1004 -242 l 874 -242 l 874 106 l 1005 106 m 763 987 l 763 880 l 330 880 l 330 987 l 763 987 m 876 987 l 876 0 l 745 0 l 745 987 l 876 987 m 286 987 l 416 987 l 396 590 q 379 425 392 500 q 347 287 366 349 q 304 175 328 224 q 252 91 279 126 q 194 32 224 55 q 133 0 163 9 l 73 0 l 73 106 l 115 106 q 156 161 133 125 q 201 255 178 197 q 241 395 224 312 q 264 590 258 477 l 286 987 z "},"Ж":{"ha":1261,"x_min":18,"x_max":1252,"o":"m 397 451 l 45 987 l 198 987 l 460 559 l 646 559 l 625 451 l 397 451 m 468 461 l 181 0 l 18 0 l 385 574 l 468 461 m 703 987 l 703 0 l 573 0 l 573 987 l 703 987 m 1226 987 l 872 451 l 651 451 l 631 559 l 810 559 l 1072 987 l 1226 987 m 1089 0 l 803 461 l 886 574 l 1252 0 l 1089 0 z "},"З":{"ha":825,"x_min":54,"x_max":767,"o":"m 417 474 l 300 474 l 300 557 l 412 557 q 533 578 487 557 q 600 637 579 600 q 621 723 621 674 q 598 809 621 770 q 527 871 575 848 q 403 895 479 895 q 300 873 346 895 q 227 814 254 852 q 199 728 199 777 l 68 728 q 95 841 68 791 q 168 927 121 892 q 274 982 214 963 q 403 1001 335 1001 q 547 983 482 1001 q 657 930 611 965 q 728 842 703 895 q 752 721 752 790 q 728 625 752 670 q 661 547 705 581 q 555 493 616 513 q 417 474 493 474 m 300 532 l 417 532 q 566 515 500 532 q 675 465 631 498 q 744 385 720 433 q 767 275 767 337 q 740 153 767 206 q 665 62 713 99 q 549 5 616 24 q 403 -14 482 -14 q 277 3 339 -14 q 165 55 215 20 q 84 144 115 90 q 54 274 54 198 l 185 274 q 213 183 185 224 q 289 117 240 142 q 403 92 338 92 q 529 116 477 92 q 609 180 581 139 q 636 273 636 221 q 622 352 636 318 q 579 407 607 385 q 509 439 551 429 q 412 450 467 450 l 300 450 l 300 532 z "},"И":{"ha":991,"x_min":121,"x_max":868,"o":"m 251 227 l 737 987 l 868 987 l 868 0 l 737 0 l 737 762 l 251 0 l 121 0 l 121 987 l 251 987 l 251 227 z "},"Л":{"ha":983,"x_min":33,"x_max":862,"o":"m 749 987 l 749 880 l 298 880 l 298 987 l 749 987 m 862 987 l 862 0 l 731 0 l 731 987 l 862 987 m 253 987 l 383 987 l 361 504 q 345 318 356 399 q 313 176 334 236 q 260 77 293 116 q 181 19 228 38 q 68 0 134 0 l 33 0 l 33 106 l 60 109 q 125 126 98 111 q 172 170 153 140 q 203 248 191 200 q 223 364 216 295 q 234 525 230 433 l 253 987 z "},"У":{"ha":873,"x_min":52,"x_max":832,"o":"m 420 328 l 682 987 l 832 987 l 483 165 q 450 98 468 130 q 405 41 431 66 q 339 1 378 16 q 243 -14 300 -14 q 204 -13 227 -14 q 175 -9 182 -11 l 179 96 q 208 93 186 94 q 240 92 230 92 q 301 108 279 92 q 337 148 323 123 q 363 197 351 172 l 420 328 m 199 987 l 473 372 l 506 251 l 396 243 l 52 987 l 199 987 z "},"Ф":{"ha":1072,"x_min":57,"x_max":1022,"o":"m 457 889 l 621 889 q 779 860 706 889 q 906 779 852 831 q 991 653 961 726 q 1022 492 1022 580 q 991 330 1022 404 q 906 204 961 257 q 779 122 852 151 q 621 93 706 93 l 457 93 q 299 122 372 93 q 172 203 227 151 q 87 329 117 256 q 57 490 57 402 q 87 651 57 578 q 172 778 117 724 q 299 860 227 831 q 457 889 372 889 m 457 786 q 307 749 368 786 q 213 646 245 712 q 181 490 181 579 q 199 369 181 423 q 252 276 217 315 q 339 216 288 237 q 457 195 391 195 l 622 195 q 771 232 710 195 q 865 336 833 269 q 897 492 897 403 q 879 612 897 558 q 826 705 861 667 q 740 765 791 744 q 622 786 688 786 l 457 786 m 602 1028 l 602 -41 l 477 -41 l 477 1028 l 602 1028 z "},"Ц":{"ha":1016,"x_min":119,"x_max":971,"o":"m 971 110 l 959 -238 l 842 -238 l 842 0 l 745 0 l 745 110 l 971 110 m 119 0 l 119 987 l 250 987 l 250 106 l 736 106 l 736 987 l 867 987 l 867 0 l 119 0 z "},"Ч":{"ha":951,"x_min":102,"x_max":831,"o":"m 102 987 l 233 987 l 233 679 q 256 559 233 602 q 323 498 278 515 q 437 480 369 480 q 516 484 477 480 q 591 493 554 487 q 663 508 627 499 q 733 527 699 517 l 733 420 q 667 401 700 410 q 599 386 634 392 q 525 376 564 380 q 437 373 485 373 q 257 403 332 373 q 142 500 182 433 q 102 679 102 568 l 102 987 m 700 987 l 831 987 l 831 0 l 700 0 l 700 987 z "},"Ш":{"ha":1307,"x_min":119,"x_max":1188,"o":"m 119 987 l 251 987 l 251 106 l 590 106 l 590 987 l 720 987 l 720 106 l 1057 106 l 1057 987 l 1188 987 l 1188 0 l 119 0 l 119 987 z "},"Щ":{"ha":1345,"x_min":119,"x_max":1288,"o":"m 1288 103 l 1276 -238 l 1163 -238 l 1163 0 l 1067 0 l 1067 103 l 1288 103 m 119 987 l 251 987 l 251 106 l 590 106 l 590 987 l 720 987 l 720 106 l 1057 106 l 1057 987 l 1188 987 l 1188 0 l 119 0 l 119 987 z "},"Ъ":{"ha":1054,"x_min":12,"x_max":994,"o":"m 12 884 l 12 987 l 321 987 l 321 884 l 12 884 m 389 585 l 658 585 q 841 549 766 585 q 955 448 916 513 q 994 295 994 382 q 971 176 994 230 q 907 82 949 122 q 802 21 864 43 q 658 0 739 0 l 290 0 l 290 987 l 420 987 l 420 106 l 658 106 q 775 133 730 106 q 842 203 821 160 q 863 296 863 247 q 842 387 863 346 q 775 453 821 429 q 658 478 730 478 l 389 478 l 389 585 z "},"Ы":{"ha":1201,"x_min":121,"x_max":1075,"o":"m 220 585 l 490 585 q 673 549 598 585 q 786 448 747 513 q 825 295 825 382 q 803 176 825 230 q 739 82 781 122 q 633 21 696 43 q 490 0 571 0 l 121 0 l 121 987 l 252 987 l 252 106 l 490 106 q 607 133 562 106 q 673 203 652 160 q 694 296 694 247 q 673 387 694 346 q 607 453 652 429 q 490 478 562 478 l 220 478 l 220 585 m 1075 987 l 1075 0 l 944 0 l 944 987 l 1075 987 z "},"Ь":{"ha":871,"x_min":111,"x_max":814,"o":"m 210 585 l 479 585 q 663 549 588 585 q 776 448 737 513 q 814 295 814 382 q 793 176 814 230 q 728 82 771 122 q 623 21 686 43 q 479 0 561 0 l 111 0 l 111 987 l 241 987 l 241 106 l 479 106 q 597 133 552 106 q 663 203 642 160 q 684 296 684 247 q 663 387 684 346 q 597 453 642 429 q 479 478 552 478 l 210 478 l 210 585 z "},"Э":{"ha":937,"x_min":100,"x_max":860,"o":"m 746 546 l 746 439 l 341 439 l 341 546 l 746 546 m 100 314 l 231 314 q 267 195 241 244 q 342 119 292 145 q 475 93 391 93 q 589 120 541 93 q 668 196 637 148 q 714 308 699 244 q 730 444 730 372 l 730 543 q 719 660 730 606 q 686 757 708 714 q 632 831 665 800 q 558 878 600 861 q 463 894 515 894 q 339 867 387 894 q 266 790 292 840 q 231 671 241 740 l 100 671 q 154 843 111 768 q 274 959 197 917 q 463 1001 351 1001 q 628 968 555 1001 q 753 876 701 936 q 832 730 805 815 q 860 542 860 646 l 860 444 q 832 256 860 340 q 754 112 805 172 q 632 19 703 52 q 475 -14 562 -14 q 277 30 356 -14 q 154 146 197 73 q 100 314 111 220 z "},"Ю":{"ha":1242,"x_min":124,"x_max":1190,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 481 535 l 481 432 l 247 432 l 247 535 l 481 535 m 1190 525 l 1190 463 q 1162 263 1190 351 q 1082 113 1135 175 q 957 19 1030 52 q 794 -14 884 -14 q 634 19 707 -14 q 508 113 561 52 q 425 263 454 175 q 396 463 396 351 l 396 525 q 425 724 396 636 q 507 874 454 812 q 632 968 559 936 q 793 1001 705 1001 q 956 968 883 1001 q 1081 874 1029 936 q 1162 724 1134 812 q 1190 525 1190 636 m 1061 463 l 1061 526 q 1043 682 1061 614 q 990 796 1025 750 q 906 866 956 842 q 793 890 856 890 q 683 866 732 890 q 598 796 633 842 q 545 682 564 750 q 526 526 526 614 l 526 463 q 545 306 526 374 q 599 191 564 237 q 684 121 635 144 q 794 97 733 97 q 907 121 858 97 q 991 191 957 144 q 1043 306 1025 237 q 1061 463 1061 374 z "},"Я":{"ha":884,"x_min":61,"x_max":763,"o":"m 663 385 l 385 385 l 321 411 q 156 515 214 445 q 98 690 98 585 q 141 852 98 785 q 261 953 183 918 q 447 987 340 987 l 763 987 l 763 0 l 632 0 l 632 880 l 447 880 q 284 829 338 880 q 229 690 229 777 q 253 588 229 633 q 325 517 277 543 q 443 492 372 492 l 663 492 l 663 385 m 440 452 l 200 0 l 61 0 l 308 452 l 440 452 z "},"б":{"ha":768,"x_min":66,"x_max":722,"o":"m 566 1053 l 669 1053 q 649 948 669 987 q 594 888 629 909 q 515 856 559 867 q 425 835 471 845 q 316 797 366 823 q 231 723 267 770 q 179 600 195 675 q 170 412 162 524 l 170 349 l 66 349 l 66 412 q 91 631 66 537 q 159 789 115 724 q 263 891 203 853 q 397 943 324 929 q 488 965 450 954 q 546 998 526 977 q 566 1053 566 1018 m 418 692 q 546 667 490 692 q 642 597 602 642 q 702 491 681 552 q 722 359 722 431 l 722 345 q 700 202 722 268 q 636 89 678 137 q 533 13 593 40 q 395 -14 472 -14 q 257 13 317 -14 q 153 89 196 40 q 89 202 111 137 q 66 345 66 268 l 66 359 q 73 393 66 376 q 88 426 79 409 q 104 462 97 443 q 173 575 130 523 q 278 660 217 627 q 418 692 340 692 m 393 589 q 280 557 324 589 q 214 473 235 526 q 192 359 192 420 l 192 345 q 204 247 192 293 q 241 165 216 201 q 304 109 266 130 q 395 89 342 89 q 485 109 447 89 q 547 165 523 130 q 584 247 572 201 q 596 345 596 293 l 596 359 q 584 447 596 406 q 547 520 572 488 q 484 571 522 552 q 393 589 446 589 z "},"в":{"ha":794,"x_min":107,"x_max":722,"o":"m 440 323 l 199 323 l 198 423 l 395 423 q 492 435 453 423 q 551 469 531 446 q 570 526 570 492 q 559 573 570 553 q 526 606 548 593 q 470 626 503 619 q 393 632 437 632 l 233 632 l 233 0 l 107 0 l 107 734 l 393 734 q 519 722 463 734 q 615 685 575 709 q 675 622 654 660 q 696 532 696 584 q 683 469 696 499 q 643 416 669 439 q 578 379 616 393 q 489 360 539 364 l 440 323 m 440 0 l 154 0 l 216 102 l 440 102 q 527 115 492 102 q 579 153 562 128 q 596 212 596 178 q 579 272 596 247 q 527 310 562 296 q 440 323 492 323 l 250 323 l 251 423 l 489 423 l 534 385 q 637 355 595 380 q 701 292 679 330 q 722 209 722 254 q 703 118 722 157 q 647 53 684 79 q 558 13 610 26 q 440 0 506 0 z "},"г":{"ha":583,"x_min":105,"x_max":570,"o":"m 570 734 l 570 630 l 231 630 l 231 0 l 105 0 l 105 734 l 570 734 z "},"д":{"ha":838,"x_min":31,"x_max":795,"o":"m 228 734 l 353 734 l 342 459 q 319 279 338 355 q 269 150 299 203 q 200 60 238 96 q 123 0 163 24 l 60 0 l 64 102 l 90 103 q 133 158 112 130 q 172 225 154 186 q 201 320 189 264 q 216 459 213 377 l 228 734 m 259 734 l 701 734 l 701 0 l 575 0 l 575 618 l 259 618 l 259 734 m 32 103 l 795 103 l 795 -216 l 669 -216 l 669 0 l 157 0 l 157 -216 l 31 -216 l 32 103 z "},"ж":{"ha":1064,"x_min":15,"x_max":1044,"o":"m 318 319 l 40 734 l 191 734 l 381 430 l 528 430 l 509 319 l 318 319 m 387 332 l 174 0 l 15 0 l 307 423 l 387 332 m 592 734 l 592 0 l 467 0 l 467 734 l 592 734 m 1020 734 l 742 319 l 551 319 l 531 430 l 678 430 l 868 734 l 1020 734 m 886 0 l 672 332 l 753 423 l 1044 0 l 886 0 z "},"з":{"ha":705,"x_min":60,"x_max":638,"o":"m 370 351 l 235 351 l 235 428 l 359 428 q 442 441 412 428 q 486 478 473 454 q 498 534 498 502 q 484 588 498 562 q 437 629 469 613 q 352 645 406 645 q 273 630 309 645 q 217 588 238 614 q 197 530 197 562 l 71 530 q 110 645 71 597 q 212 720 148 694 q 352 747 276 747 q 466 733 416 747 q 552 692 517 719 q 606 626 587 665 q 625 534 625 586 q 607 463 625 496 q 556 405 589 430 q 476 365 523 379 q 370 351 429 351 m 235 398 l 370 398 q 486 386 435 398 q 570 349 536 373 q 621 289 604 324 q 638 207 638 253 q 617 114 638 155 q 559 45 597 73 q 468 1 521 16 q 352 -14 416 -14 q 214 11 281 -14 q 103 86 146 35 q 60 217 60 138 l 185 217 q 206 154 185 184 q 265 106 227 124 q 352 87 302 87 q 440 104 405 87 q 493 147 475 120 q 511 206 511 174 q 495 273 511 248 q 445 310 479 298 q 359 321 412 321 l 235 321 l 235 398 z "},"и":{"ha":802,"x_min":106,"x_max":696,"o":"m 231 199 l 570 734 l 696 734 l 696 0 l 570 0 l 570 535 l 231 0 l 106 0 l 106 734 l 231 734 l 231 199 z "},"к":{"ha":751,"x_min":106,"x_max":738,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 713 734 l 366 313 l 190 313 l 171 423 l 315 423 l 561 734 l 713 734 m 578 0 l 309 332 l 389 423 l 738 0 l 578 0 z "},"л":{"ha":803,"x_min":30,"x_max":696,"o":"m 586 734 l 586 630 l 231 630 l 231 734 l 586 734 m 696 734 l 696 0 l 571 0 l 571 734 l 696 734 m 201 734 l 327 734 l 308 380 q 293 235 303 298 q 264 127 282 172 q 219 55 246 83 q 155 13 193 26 q 69 0 118 0 l 30 0 l 30 111 l 57 113 q 107 126 86 115 q 142 160 127 138 q 165 219 156 183 q 179 304 174 255 q 187 420 184 354 l 201 734 z "},"м":{"ha":1030,"x_min":107,"x_max":924,"o":"m 517 167 l 767 734 l 888 734 l 561 0 l 474 0 l 149 734 l 269 734 l 517 167 m 233 734 l 233 0 l 107 0 l 107 734 l 233 734 m 798 0 l 798 734 l 924 734 l 924 0 l 798 0 z "},"н":{"ha":801,"x_min":106,"x_max":695,"o":"m 593 416 l 593 314 l 205 314 l 205 416 l 593 416 m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 695 734 l 695 0 l 569 0 l 569 734 l 695 734 z "},"п":{"ha":802,"x_min":106,"x_max":696,"o":"m 585 734 l 585 630 l 214 630 l 214 734 l 585 734 m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 696 734 l 696 0 l 570 0 l 570 734 l 696 734 z "},"т":{"ha":668,"x_min":27,"x_max":641,"o":"m 395 734 l 395 0 l 269 0 l 269 734 l 395 734 m 641 734 l 641 632 l 27 632 l 27 734 l 641 734 z "},"ф":{"ha":1008,"x_min":68,"x_max":939,"o":"m 939 354 l 939 340 q 922 198 939 262 q 872 85 905 133 q 789 12 838 38 q 674 -14 739 -14 q 580 0 621 -14 q 511 43 539 15 q 466 110 483 71 q 444 197 450 149 l 444 523 q 466 616 450 575 q 511 687 483 658 q 579 732 539 716 q 673 747 619 747 q 768 729 726 747 q 843 675 810 710 q 896 592 875 641 q 928 484 918 544 q 939 354 939 423 m 814 340 l 814 354 q 807 445 814 401 q 788 524 801 488 q 753 587 774 560 q 703 629 732 614 q 635 644 673 644 q 568 634 595 644 q 526 607 541 624 q 505 572 511 591 l 505 147 q 528 119 513 132 q 570 97 544 106 q 637 89 597 89 q 718 108 684 89 q 773 162 751 127 q 804 242 794 197 q 814 340 814 288 m 68 340 l 68 354 q 79 484 68 423 q 111 592 90 544 q 165 675 133 641 q 240 729 197 710 q 335 747 282 747 q 426 732 387 747 q 492 687 465 716 q 536 616 519 658 q 559 523 552 575 l 559 210 q 536 117 553 159 q 493 46 520 76 q 426 1 466 17 q 334 -14 387 -14 q 219 12 269 -14 q 136 85 170 38 q 85 198 102 133 q 68 340 68 262 m 194 354 l 194 340 q 203 242 194 288 q 232 162 212 197 q 285 108 252 127 q 365 89 317 89 q 432 99 406 89 q 474 125 458 109 q 498 159 490 142 l 498 572 q 476 607 491 591 q 434 634 460 624 q 366 644 408 644 q 286 621 319 644 q 232 558 252 598 q 203 466 212 518 q 194 354 194 413 m 435 -282 l 435 1042 l 562 1042 l 562 -282 l 435 -282 z "},"ц":{"ha":823,"x_min":106,"x_max":783,"o":"m 106 0 l 106 734 l 232 734 l 232 103 l 570 103 l 570 734 l 696 734 l 696 0 l 106 0 m 783 103 l 770 -218 l 659 -218 l 659 0 l 563 0 l 563 103 l 783 103 z "},"ч":{"ha":755,"x_min":71,"x_max":649,"o":"m 649 734 l 649 0 l 524 0 l 524 734 l 649 734 m 606 397 l 606 294 q 529 268 568 279 q 447 251 490 257 q 354 244 404 244 q 203 274 267 244 q 105 366 140 304 q 71 521 71 427 l 71 735 l 196 735 l 196 521 q 214 422 196 460 q 268 366 233 384 q 354 348 303 348 q 446 354 403 348 q 529 372 489 361 q 606 397 568 382 z "},"ш":{"ha":1124,"x_min":106,"x_max":1020,"o":"m 106 734 l 232 734 l 232 103 l 500 103 l 500 734 l 627 734 l 627 103 l 895 103 l 895 734 l 1020 734 l 1020 0 l 106 0 l 106 734 z "},"щ":{"ha":1149,"x_min":99,"x_max":1116,"o":"m 1116 103 l 1103 -218 l 991 -218 l 991 0 l 896 0 l 896 103 l 1116 103 m 99 734 l 224 734 l 224 103 l 493 103 l 493 734 l 619 734 l 619 103 l 887 103 l 887 734 l 1013 734 l 1013 0 l 99 0 l 99 734 z "},"ъ":{"ha":862,"x_min":20,"x_max":825,"o":"m 342 734 l 342 631 l 20 631 l 20 734 l 342 734 m 330 481 l 551 481 q 701 451 640 481 q 793 366 762 420 q 825 243 825 312 q 807 148 825 193 q 754 71 789 104 q 668 19 720 37 q 551 0 617 0 l 238 0 l 238 734 l 364 734 l 364 103 l 551 103 q 637 123 605 103 q 684 174 669 142 q 698 239 698 205 q 684 304 698 272 q 637 357 669 336 q 551 378 605 378 l 330 378 l 330 481 z "},"ы":{"ha":1078,"x_min":107,"x_max":954,"o":"m 199 481 l 419 481 q 569 451 508 481 q 662 366 630 420 q 693 243 693 312 q 675 148 693 193 q 623 71 658 104 q 537 19 588 37 q 419 0 486 0 l 107 0 l 107 734 l 233 734 l 233 103 l 419 103 q 506 123 473 103 q 553 174 538 142 q 567 239 567 205 q 553 304 567 272 q 506 357 538 336 q 419 378 473 378 l 199 378 l 199 481 m 954 734 l 954 0 l 829 0 l 829 734 l 954 734 z "},"ь":{"ha":754,"x_min":107,"x_max":693,"o":"m 199 481 l 419 481 q 569 451 508 481 q 662 366 630 420 q 693 243 693 312 q 675 148 693 193 q 623 71 658 104 q 537 19 588 37 q 419 0 486 0 l 107 0 l 107 734 l 233 734 l 233 103 l 419 103 q 506 123 473 103 q 553 174 538 142 q 567 239 567 205 q 553 304 567 272 q 506 357 538 336 q 419 378 473 378 l 199 378 l 199 481 z "},"э":{"ha":747,"x_min":68,"x_max":673,"o":"m 353 644 q 274 626 311 644 q 212 575 236 608 q 188 501 188 543 l 68 501 q 109 623 68 567 q 214 713 149 679 q 353 747 279 747 q 490 718 430 747 q 590 638 549 689 q 652 521 631 587 q 673 381 673 455 l 673 353 q 652 213 673 279 q 590 95 631 146 q 489 15 549 44 q 353 -14 430 -14 q 207 21 271 -14 q 105 116 142 56 q 68 252 68 176 l 188 252 q 210 169 188 206 q 269 111 232 132 q 353 89 307 89 q 441 112 404 89 q 502 173 478 135 q 537 258 526 211 q 548 353 548 305 l 548 381 q 537 476 548 429 q 502 561 526 523 q 442 622 479 599 q 353 644 405 644 m 609 425 l 609 323 l 271 323 l 271 425 l 609 425 z "},"ю":{"ha":1134,"x_min":107,"x_max":1074,"o":"m 513 422 l 513 320 l 123 320 l 123 422 l 513 422 m 233 734 l 233 0 l 107 0 l 107 734 l 233 734 m 406 359 l 406 374 q 429 522 406 454 q 496 641 452 590 q 601 719 540 691 q 739 747 663 747 q 879 719 817 747 q 984 641 941 691 q 1051 522 1028 590 q 1074 374 1074 454 l 1074 359 q 1051 212 1074 279 q 985 93 1028 144 q 880 15 941 43 q 741 -14 818 -14 q 602 15 663 -14 q 496 93 540 43 q 429 212 452 144 q 406 359 406 279 m 532 374 l 532 359 q 545 255 532 304 q 584 170 558 207 q 649 111 610 132 q 741 90 688 90 q 832 111 793 90 q 897 170 871 132 q 936 255 922 207 q 949 359 949 304 l 949 374 q 936 477 949 429 q 896 563 922 526 q 831 623 870 601 q 739 644 791 644 q 649 623 688 644 q 584 563 610 601 q 545 477 558 526 q 532 374 532 429 z "},"я":{"ha":762,"x_min":32,"x_max":656,"o":"m 244 350 l 380 350 l 168 0 l 32 0 l 244 350 m 349 734 l 656 734 l 656 0 l 530 0 l 530 632 l 349 632 q 262 614 296 632 q 212 568 228 596 q 197 509 197 539 q 211 451 197 479 q 256 406 225 424 q 334 389 286 389 l 564 389 l 564 286 l 334 286 q 222 302 271 286 q 140 350 174 319 q 88 421 106 380 q 71 510 71 462 q 89 599 71 558 q 143 670 108 640 q 231 717 179 701 q 349 734 283 734 z "},"ђ":{"ha":765,"x_min":-17,"x_max":673,"o":"m 547 308 l 673 308 l 673 -60 q 647 -189 673 -136 q 572 -269 621 -242 q 454 -296 523 -296 q 415 -294 433 -296 q 376 -285 397 -292 l 387 -184 q 420 -191 397 -189 q 454 -193 444 -193 q 504 -177 484 -193 q 536 -132 525 -161 q 547 -60 547 -102 l 547 308 m 221 1042 l 221 0 l 96 0 l 96 1042 l 221 1042 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 415 923 l 415 820 l -17 820 l -17 923 l 415 923 z "},"є":{"ha":747,"x_min":70,"x_max":688,"o":"m 471 418 l 471 315 l 96 315 l 96 418 l 471 418 m 397 90 q 479 108 441 90 q 542 158 517 126 q 570 232 566 191 l 688 232 q 645 111 685 167 q 539 21 604 55 q 397 -14 475 -14 q 252 16 314 -14 q 150 96 191 45 q 90 213 110 146 q 70 353 70 279 l 70 381 q 90 521 70 455 q 151 638 110 587 q 253 718 191 689 q 396 747 314 747 q 547 712 482 747 q 648 617 611 677 q 688 481 685 557 l 570 481 q 544 564 566 527 q 485 622 522 600 q 396 644 447 644 q 299 622 338 644 q 238 561 260 599 q 205 476 215 522 q 195 381 195 429 l 195 353 q 205 258 195 304 q 238 173 215 211 q 299 112 260 135 q 397 90 338 90 z "},"љ":{"ha":1178,"x_min":26,"x_max":1133,"o":"m 198 734 l 323 734 l 304 380 q 290 235 300 298 q 261 127 279 172 q 216 55 243 83 q 152 13 189 26 q 66 0 115 0 l 26 0 l 26 111 l 54 113 q 103 126 83 115 q 138 160 124 138 q 162 219 153 183 q 176 304 171 255 q 184 420 182 354 l 198 734 m 562 734 l 562 630 l 224 630 l 224 734 l 562 734 m 638 454 l 859 454 q 1009 425 948 454 q 1101 345 1070 396 q 1133 230 1133 294 q 1115 140 1133 182 q 1062 67 1097 98 q 977 18 1027 35 q 859 0 926 0 l 547 0 l 547 734 l 672 734 l 672 102 l 859 102 q 946 121 913 102 q 992 171 978 141 q 1006 231 1006 201 q 992 289 1006 261 q 946 334 978 317 q 859 352 913 352 l 638 352 l 638 454 z "},"њ":{"ha":1196,"x_min":106,"x_max":1156,"o":"m 593 456 l 593 355 l 205 355 l 205 456 l 593 456 m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 661 454 l 882 454 q 1031 425 970 454 q 1124 345 1093 396 q 1156 230 1156 294 q 1138 140 1156 182 q 1085 67 1120 98 q 999 18 1050 35 q 882 0 948 0 l 569 0 l 569 734 l 695 734 l 695 102 l 882 102 q 968 121 936 102 q 1015 171 1000 141 q 1029 231 1029 201 q 1015 289 1029 261 q 968 334 1000 317 q 882 352 936 352 l 661 352 l 661 454 z "},"ћ":{"ha":787,"x_min":-2,"x_max":673,"o":"m 221 1042 l 221 0 l 96 0 l 96 1042 l 221 1042 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 430 926 l 430 823 l -2 823 l -2 926 l 430 926 z "},"џ":{"ha":802,"x_min":106,"x_max":696,"o":"m 340 103 l 466 103 l 466 -241 l 340 -241 l 340 103 m 106 734 l 232 734 l 232 103 l 570 103 l 570 734 l 696 734 l 696 0 l 106 0 l 106 734 z "},"Ѡ":{"ha":1221,"x_min":106,"x_max":1122,"o":"m 547 987 l 652 987 l 652 270 q 632 145 652 199 q 575 56 612 92 q 489 3 538 21 q 380 -14 439 -14 q 271 3 321 -14 q 184 56 221 21 q 126 145 147 92 q 106 270 106 199 l 106 987 l 237 987 l 237 270 q 248 192 237 225 q 278 136 258 159 q 323 103 297 114 q 380 92 349 92 q 466 112 429 92 q 525 171 504 132 q 547 270 547 210 l 547 987 m 991 987 l 1122 987 l 1122 270 q 1084 112 1122 175 q 983 17 1047 48 q 836 -14 918 -14 q 733 3 781 -14 q 650 56 685 21 q 595 145 615 92 q 576 270 576 199 l 576 987 l 682 987 l 682 270 q 693 192 682 225 q 725 136 705 159 q 774 103 746 114 q 836 92 803 92 q 916 112 881 92 q 971 171 951 132 q 991 270 991 210 l 991 987 z "},"ѡ":{"ha":1072,"x_min":87,"x_max":986,"o":"m 473 734 l 575 734 l 575 240 q 557 129 575 176 q 506 49 539 81 q 429 1 473 17 q 332 -14 385 -14 q 234 1 279 -14 q 157 49 190 17 q 106 129 124 81 q 87 240 87 176 l 87 734 l 214 734 l 214 240 q 222 174 214 202 q 247 126 231 145 q 284 98 263 108 q 332 89 306 89 q 404 105 372 89 q 455 156 436 122 q 473 240 473 189 l 473 734 m 861 734 l 986 734 l 986 240 q 953 98 986 155 q 862 14 920 42 q 730 -14 804 -14 q 638 1 680 -14 q 564 49 595 17 q 516 129 533 81 q 498 240 498 176 l 498 734 l 600 734 l 600 240 q 610 174 600 202 q 637 126 619 145 q 678 98 654 108 q 730 89 702 89 q 782 98 758 89 q 823 126 806 108 q 851 174 841 145 q 861 240 861 202 l 861 734 z "},"ѣ":{"ha":753,"x_min":-25,"x_max":692,"o":"m 197 506 l 418 506 q 568 473 507 506 q 661 385 629 441 q 692 256 692 328 q 661 126 692 184 q 568 34 629 68 q 418 0 507 0 l 106 0 l 106 1057 l 231 1057 l 231 103 l 418 103 q 505 124 472 103 q 551 180 537 146 q 566 251 566 214 q 551 322 566 287 q 505 380 537 357 q 418 404 472 404 l 197 404 l 197 506 m 450 837 l 450 734 l -25 734 l -25 837 l 450 837 z "},"Ѥ":{"ha":1245,"x_min":125,"x_max":1151,"o":"m 888 565 l 888 462 l 205 462 l 205 565 l 888 565 m 1020 315 l 1151 315 q 1097 147 1141 221 q 974 30 1053 73 q 776 -13 895 -13 q 618 20 689 -13 q 496 112 547 52 q 418 257 446 172 q 391 445 391 341 l 391 543 q 418 731 391 647 q 497 876 446 816 q 623 969 549 937 q 787 1002 696 1002 q 977 960 899 1002 q 1097 843 1054 918 q 1151 671 1141 769 l 1020 671 q 985 790 1010 741 q 911 867 959 840 q 787 895 864 895 q 672 869 722 895 q 589 798 623 844 q 538 688 555 752 q 522 545 522 623 l 522 445 q 531 334 522 387 q 561 237 541 281 q 611 161 581 193 q 682 111 641 129 q 776 94 724 94 q 909 120 859 94 q 984 196 958 146 q 1020 315 1009 245 m 256 987 l 256 0 l 125 0 l 125 987 l 256 987 z "},"ѥ":{"ha":1037,"x_min":104,"x_max":977,"o":"m 783 418 l 783 315 l 185 315 l 185 418 l 783 418 m 686 90 q 768 108 730 90 q 831 158 806 126 q 859 232 855 191 l 977 232 q 933 111 974 167 q 828 21 893 55 q 686 -14 764 -14 q 541 16 603 -14 q 439 96 479 45 q 379 213 399 146 q 359 353 359 279 l 359 381 q 379 521 359 455 q 439 638 399 587 q 542 718 480 689 q 686 747 603 747 q 836 712 772 747 q 937 617 900 677 q 977 481 974 557 l 859 481 q 833 564 855 527 q 773 622 811 600 q 686 644 736 644 q 589 622 627 644 q 527 561 550 599 q 495 476 505 522 q 485 381 485 429 l 485 353 q 494 258 485 304 q 527 173 504 211 q 588 112 549 135 q 686 90 627 90 m 230 734 l 230 0 l 104 0 l 104 734 l 230 734 z "},"Ѧ":{"ha":838,"x_min":27,"x_max":850,"o":"m 468 882 l 161 0 l 27 0 l 383 987 l 467 987 l 468 882 m 715 0 l 414 887 l 417 987 l 500 987 l 850 0 l 715 0 m 677 408 l 677 298 l 198 298 l 198 408 l 677 408 m 499 374 l 499 0 l 371 0 l 371 374 l 499 374 z "},"ѧ":{"ha":743,"x_min":10,"x_max":720,"o":"m 347 519 l 139 0 l 10 0 l 311 734 l 406 734 l 347 519 m 591 0 l 379 519 l 322 734 l 418 734 l 720 0 l 591 0 m 570 304 l 570 201 l 167 201 l 167 304 l 570 304 m 429 279 l 429 0 l 304 0 l 304 279 l 429 279 z "},"Ѩ":{"ha":1223,"x_min":137,"x_max":1208,"o":"m 583 408 l 583 299 l 212 299 l 212 408 l 583 408 m 827 882 l 520 0 l 386 0 l 742 987 l 825 987 l 827 882 m 1074 0 l 772 887 l 776 987 l 859 987 l 1208 0 l 1074 0 m 1036 408 l 1036 298 l 557 298 l 557 408 l 1036 408 m 858 374 l 858 0 l 730 0 l 730 374 l 858 374 m 268 987 l 268 0 l 137 0 l 137 987 l 268 987 z "},"ѩ":{"ha":1050,"x_min":128,"x_max":1023,"o":"m 504 304 l 504 201 l 186 201 l 186 304 l 504 304 m 650 519 l 442 0 l 313 0 l 614 734 l 709 734 l 650 519 m 895 0 l 682 519 l 625 734 l 722 734 l 1023 0 l 895 0 m 873 304 l 873 201 l 470 201 l 470 304 l 873 304 m 732 279 l 732 0 l 607 0 l 607 279 l 732 279 m 254 734 l 254 0 l 128 0 l 128 734 l 254 734 z "},"Ѫ":{"ha":1184,"x_min":100,"x_max":1085,"o":"m 231 0 l 100 0 l 100 251 q 139 426 100 360 q 252 521 178 492 q 429 550 326 550 l 755 550 q 933 521 859 550 q 1046 426 1006 492 q 1085 251 1085 360 l 1085 0 l 954 0 l 954 251 q 932 367 954 326 q 867 426 911 409 q 755 443 823 443 l 429 443 q 280 403 329 443 q 231 251 231 363 l 231 0 m 871 987 l 871 880 l 329 880 l 329 987 l 871 987 m 554 467 l 857 987 l 1005 987 l 657 414 l 574 414 l 554 467 m 338 987 l 643 462 l 620 414 l 538 414 l 189 987 l 338 987 m 660 530 l 660 0 l 530 0 l 530 530 l 660 530 z "},"ѫ":{"ha":1021,"x_min":102,"x_max":919,"o":"m 228 0 l 102 0 l 102 111 q 138 286 102 220 q 242 380 174 351 q 404 410 310 410 l 617 410 q 779 380 711 410 q 883 286 846 351 q 919 111 919 220 l 919 0 l 793 0 l 793 111 q 774 230 793 188 q 716 290 755 273 q 617 307 677 307 l 404 307 q 306 290 345 307 q 247 230 267 273 q 228 111 228 188 l 228 0 m 760 734 l 760 631 l 292 631 l 292 734 l 760 734 m 478 339 l 699 734 l 840 734 l 572 287 l 496 287 l 478 339 m 331 734 l 554 336 l 534 287 l 458 287 l 190 734 l 331 734 m 576 394 l 576 0 l 450 0 l 450 394 l 576 394 z "},"Ѭ":{"ha":1566,"x_min":124,"x_max":1466,"o":"m 857 551 l 857 448 l 238 448 l 238 551 l 857 551 m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 612 0 l 481 0 l 481 251 q 521 426 481 360 q 634 521 560 492 q 810 550 707 550 l 1137 550 q 1315 521 1241 550 q 1427 426 1388 492 q 1466 251 1466 360 l 1466 0 l 1336 0 l 1336 251 q 1314 367 1336 326 q 1249 426 1293 409 q 1137 443 1204 443 l 810 443 q 662 403 711 443 q 612 251 612 363 l 612 0 m 1253 987 l 1253 880 l 711 880 l 711 987 l 1253 987 m 936 467 l 1238 987 l 1387 987 l 1038 414 l 956 414 l 936 467 m 720 987 l 1025 462 l 1002 414 l 920 414 l 571 987 l 720 987 m 1042 530 l 1042 0 l 911 0 l 911 530 l 1042 530 z "},"ѭ":{"ha":1357,"x_min":106,"x_max":1255,"o":"m 846 410 l 846 307 l 172 307 l 172 410 l 846 410 m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 564 0 l 439 0 l 439 111 q 475 286 439 220 q 578 380 511 351 q 741 410 646 410 l 954 410 q 1115 380 1048 410 q 1219 286 1183 351 q 1255 111 1255 220 l 1255 0 l 1130 0 l 1130 111 q 1111 230 1130 188 q 1052 290 1091 273 q 954 307 1013 307 l 741 307 q 642 290 681 307 q 584 230 603 273 q 564 111 564 188 l 564 0 m 1096 734 l 1096 631 l 628 631 l 628 734 l 1096 734 m 814 339 l 1035 734 l 1176 734 l 908 287 l 832 287 l 814 339 m 667 734 l 890 336 l 871 287 l 795 287 l 526 734 l 667 734 m 912 394 l 912 0 l 787 0 l 787 394 l 912 394 z "},"Ѯ":{"ha":719,"x_min":54,"x_max":636,"o":"m 90 987 l 297 987 q 427 969 368 987 q 530 917 486 951 q 597 833 573 882 q 621 721 621 783 q 597 626 621 670 q 530 550 574 583 q 424 498 486 517 q 286 480 362 480 l 188 480 l 188 558 l 283 558 q 406 579 359 558 q 474 637 452 600 q 495 724 495 675 q 474 804 495 768 q 409 863 453 841 q 297 884 366 884 l 90 884 l 90 987 m 188 532 l 286 532 q 435 515 370 532 q 545 465 500 498 q 613 385 590 433 q 636 275 636 337 q 612 153 636 206 q 544 62 587 99 q 440 6 500 25 q 311 -13 381 -13 l 275 -13 q 197 -34 220 -13 q 174 -90 174 -56 q 193 -150 174 -125 q 237 -191 212 -175 q 283 -216 263 -206 l 233 -300 q 151 -252 191 -282 q 82 -180 110 -222 q 54 -83 55 -138 q 82 15 54 -24 q 160 71 109 53 q 280 90 210 90 l 311 90 q 395 103 357 90 q 458 141 432 117 q 497 200 484 166 q 511 273 511 233 q 496 353 511 319 q 452 410 481 387 q 381 445 423 433 q 283 456 338 456 l 188 456 l 188 532 m 267 1306 l 369 1191 l 471 1306 l 580 1306 l 580 1299 l 408 1114 l 330 1114 l 160 1299 l 160 1306 l 267 1306 z "},"ѯ":{"ha":669,"x_min":52,"x_max":602,"o":"m 87 734 l 292 734 q 409 720 355 734 q 503 678 463 705 q 565 612 543 651 q 587 524 587 573 q 565 452 587 485 q 503 393 543 418 q 406 354 463 368 q 281 340 350 340 l 182 340 l 182 418 l 278 418 q 384 432 343 418 q 442 470 424 446 q 460 527 460 494 q 450 567 460 549 q 419 600 440 586 q 367 622 399 614 q 292 630 335 630 l 87 630 l 87 734 m 182 392 l 281 392 q 417 380 357 392 q 518 344 477 368 q 580 286 559 320 q 602 206 602 251 q 579 114 602 155 q 517 45 557 73 q 423 2 477 16 q 305 -13 369 -13 l 272 -13 q 194 -34 217 -13 q 171 -90 171 -56 q 190 -150 171 -125 q 235 -191 209 -175 q 281 -216 260 -206 l 230 -300 q 148 -252 189 -282 q 80 -180 107 -222 q 52 -83 52 -138 q 79 15 52 -24 q 157 71 106 53 q 277 90 208 90 l 305 90 q 377 98 345 90 q 430 122 408 106 q 464 158 452 137 q 475 203 475 178 q 463 253 475 232 q 425 288 450 274 q 363 309 399 302 q 278 316 326 316 l 182 316 l 182 392 m 212 1075 l 314 960 l 416 1075 l 525 1075 l 525 1067 l 353 882 l 275 882 l 105 1068 l 105 1075 l 212 1075 z "},"Ѳ":{"ha":945,"x_min":70,"x_max":864,"o":"m 467 1001 q 600 980 538 1001 q 710 919 662 959 q 793 820 759 878 q 846 688 828 762 q 864 525 864 614 l 864 463 q 836 263 864 351 q 756 113 808 175 q 631 19 704 52 q 468 -14 558 -14 q 337 7 398 -14 q 227 69 276 28 q 142 167 178 109 q 89 299 107 225 q 70 463 70 374 l 70 525 q 99 724 70 636 q 180 874 127 812 q 306 968 233 936 q 467 1001 379 1001 m 467 890 q 366 870 412 890 q 285 812 319 850 q 229 716 251 773 q 201 586 208 660 q 200 563 201 575 q 199 539 199 551 l 734 539 q 734 562 734 551 q 732 585 734 574 q 706 716 726 659 q 651 811 686 772 q 571 870 617 850 q 467 890 524 890 m 468 97 q 573 117 526 97 q 653 176 620 137 q 707 274 687 216 q 732 407 727 332 q 733 421 733 414 q 734 436 734 429 l 200 436 q 201 415 201 425 q 203 395 202 405 q 231 267 210 323 q 288 174 253 212 q 368 116 322 136 q 468 97 414 97 z "},"ѳ":{"ha":789,"x_min":62,"x_max":730,"o":"m 395 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 m 395 644 q 313 627 349 644 q 252 579 277 610 q 211 508 227 549 q 191 422 196 468 l 602 422 q 581 508 597 468 q 540 579 566 549 q 478 627 514 610 q 395 644 441 644 m 397 90 q 480 107 444 90 q 542 156 516 125 q 583 230 568 188 q 602 319 598 271 l 190 319 q 209 230 194 271 q 250 156 224 188 q 313 107 276 125 q 397 90 349 90 z "},"Ѵ":{"ha":876,"x_min":15,"x_max":844,"o":"m 439 254 l 614 802 q 663 917 636 873 q 727 980 690 960 q 813 1000 763 1000 l 844 1000 l 844 884 l 836 884 q 795 875 812 884 q 764 845 778 866 q 736 787 750 824 l 473 0 l 372 0 l 439 254 m 157 987 l 393 254 l 459 0 l 358 0 l 15 987 l 157 987 z "},"ѵ":{"ha":697,"x_min":32,"x_max":703,"o":"m 355 214 l 462 583 q 507 678 481 642 q 565 731 533 714 q 630 747 596 747 q 668 745 650 747 q 703 730 686 742 l 688 630 q 677 634 685 632 q 659 635 669 635 q 632 628 646 635 q 606 607 618 621 q 587 573 595 593 l 385 0 l 302 0 l 355 214 m 160 734 l 323 214 l 373 0 l 290 0 l 32 734 l 160 734 z "},"Ѻ":{"ha":945,"x_min":70,"x_max":864,"o":"m 536 1078 l 536 816 l 410 816 l 410 1078 l 536 1078 m 536 172 l 536 -96 l 410 -96 l 410 172 l 536 172 m 864 525 l 864 463 q 836 263 864 351 q 756 113 808 175 q 631 19 704 52 q 468 -14 558 -14 q 337 7 398 -14 q 227 69 276 28 q 142 167 178 109 q 89 299 107 225 q 70 463 70 374 l 70 525 q 99 724 70 636 q 180 874 127 812 q 306 968 233 936 q 467 1001 379 1001 q 600 980 538 1001 q 710 919 662 959 q 793 820 759 878 q 846 688 828 762 q 864 525 864 614 m 734 463 l 734 526 q 723 654 734 597 q 689 755 711 711 q 634 829 667 800 q 559 874 602 859 q 467 890 517 890 q 357 866 406 890 q 273 796 308 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 212 334 199 391 q 247 232 224 276 q 303 157 271 187 q 378 112 336 127 q 468 97 420 97 q 581 121 532 97 q 665 191 631 144 q 717 306 699 237 q 734 463 734 374 z "},"ѻ":{"ha":787,"x_min":62,"x_max":730,"o":"m 457 818 l 457 568 l 331 568 l 331 818 l 457 818 m 457 168 l 457 -81 l 331 -81 l 331 168 l 457 168 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 z "},"Ѽ":{"ha":1216,"x_min":106,"x_max":1117,"o":"m 886 1185 l 913 1185 l 913 1099 l 885 1099 q 780 1112 826 1099 q 697 1142 734 1125 q 628 1171 660 1158 q 566 1184 596 1184 q 510 1166 531 1184 q 489 1111 489 1148 l 489 1099 l 402 1099 l 402 1123 q 445 1234 402 1198 q 563 1271 488 1271 q 640 1258 604 1271 q 712 1228 675 1245 q 790 1198 748 1211 q 886 1185 833 1185 m 589 898 l 537 935 q 571 986 559 962 q 583 1037 583 1010 l 583 1101 l 690 1101 l 690 1032 q 674 980 690 1006 q 634 932 658 954 q 589 898 610 910 m 380 987 l 380 880 q 307 858 339 880 q 256 792 275 836 q 237 680 237 747 l 237 293 q 248 204 237 242 q 278 142 258 167 q 323 104 297 117 q 380 92 349 92 q 466 112 429 92 q 525 171 504 132 q 547 270 547 210 l 547 560 l 652 560 l 652 270 q 632 145 652 199 q 575 56 612 92 q 489 3 538 21 q 380 -14 439 -14 q 271 5 321 -14 q 184 62 221 24 q 126 158 147 100 q 106 293 106 216 l 106 680 q 142 851 106 783 q 240 953 178 919 q 380 987 302 987 m 843 880 l 843 987 q 952 968 902 987 q 1039 910 1002 949 q 1097 814 1076 872 q 1117 680 1117 757 l 1117 293 q 1097 158 1117 216 q 1039 62 1076 100 q 952 5 1002 24 q 843 -14 902 -14 q 735 3 785 -14 q 649 56 686 21 q 592 145 612 92 q 572 270 572 199 l 572 560 l 677 560 l 677 270 q 690 192 677 225 q 724 136 702 159 q 777 103 747 114 q 843 92 807 92 q 900 104 874 92 q 946 142 926 117 q 976 204 965 167 q 987 293 987 242 l 987 680 q 976 768 987 730 q 946 831 965 806 q 900 868 926 856 q 843 880 874 880 z "},"ѽ":{"ha":1066,"x_min":85,"x_max":983,"o":"m 827 946 l 855 946 l 855 860 l 825 860 q 720 873 766 860 q 637 903 674 886 q 569 932 600 920 q 507 945 537 945 q 451 927 472 945 q 429 871 429 909 l 429 859 l 342 859 l 342 884 q 386 995 342 958 q 504 1031 429 1031 q 580 1019 545 1031 q 652 989 616 1006 q 731 959 688 972 q 827 946 773 946 m 528 652 l 477 690 q 512 741 500 717 q 524 791 524 766 l 524 856 l 630 856 l 630 787 q 614 734 630 761 q 574 686 597 708 q 528 652 551 665 m 330 741 l 330 638 q 269 619 296 638 q 227 561 242 600 q 212 462 212 522 l 212 265 q 220 187 212 220 q 245 132 229 154 q 282 100 261 111 q 330 89 304 89 q 386 98 360 89 q 431 126 412 108 q 461 174 450 145 q 472 240 472 202 l 472 399 l 573 399 l 573 240 q 555 129 573 176 q 504 49 537 81 q 427 1 471 17 q 330 -14 382 -14 q 232 3 277 -14 q 155 55 188 20 q 104 143 122 90 q 85 265 85 195 l 85 462 q 117 617 85 555 q 204 710 149 680 q 330 741 259 741 m 739 638 l 739 741 q 837 723 792 741 q 915 671 882 706 q 965 585 947 637 q 983 462 983 532 l 983 265 q 965 143 983 195 q 915 55 947 90 q 837 3 882 20 q 739 -14 792 -14 q 643 1 687 -14 q 565 49 598 17 q 514 129 532 81 q 496 240 496 176 l 496 399 l 597 399 l 597 240 q 608 174 597 202 q 638 126 619 145 q 683 98 657 108 q 739 89 709 89 q 787 100 765 89 q 824 132 808 111 q 849 187 840 154 q 858 265 858 220 l 858 462 q 849 540 858 507 q 824 595 840 573 q 787 627 808 616 q 739 638 765 638 z "},"Ѿ":{"ha":1221,"x_min":106,"x_max":1122,"o":"m 554 1145 l 342 1145 l 342 1218 l 892 1218 l 892 1145 l 668 1145 l 668 1060 l 554 1060 l 554 1145 m 547 987 l 652 987 l 652 270 q 632 145 652 199 q 575 56 612 92 q 489 3 538 21 q 380 -14 439 -14 q 271 3 321 -14 q 184 56 221 21 q 126 145 147 92 q 106 270 106 199 l 106 987 l 237 987 l 237 270 q 248 192 237 225 q 278 136 258 159 q 323 103 297 114 q 380 92 349 92 q 466 112 429 92 q 525 171 504 132 q 547 270 547 210 l 547 987 m 991 987 l 1122 987 l 1122 270 q 1084 112 1122 175 q 983 17 1047 48 q 836 -14 918 -14 q 733 3 781 -14 q 650 56 685 21 q 595 145 615 92 q 576 270 576 199 l 576 987 l 682 987 l 682 270 q 693 192 682 225 q 725 136 705 159 q 774 103 746 114 q 836 92 803 92 q 916 112 881 92 q 971 171 951 132 q 991 270 991 210 l 991 987 z "},"ѿ":{"ha":1072,"x_min":87,"x_max":986,"o":"m 478 915 l 266 915 l 266 988 l 816 988 l 818 915 l 592 915 l 592 829 l 478 829 l 478 915 m 473 734 l 575 734 l 575 240 q 557 129 575 176 q 506 49 539 81 q 429 1 473 17 q 332 -14 385 -14 q 234 1 279 -14 q 157 49 190 17 q 106 129 124 81 q 87 240 87 176 l 87 734 l 214 734 l 214 240 q 222 174 214 202 q 247 126 231 145 q 284 98 263 108 q 332 89 306 89 q 404 105 372 89 q 455 156 436 122 q 473 240 473 189 l 473 734 m 861 734 l 986 734 l 986 240 q 953 98 986 155 q 862 14 920 42 q 730 -14 804 -14 q 638 1 680 -14 q 564 49 595 17 q 516 129 533 81 q 498 240 498 176 l 498 734 l 600 734 l 600 240 q 610 174 600 202 q 637 126 619 145 q 678 98 654 108 q 730 89 702 89 q 782 98 758 89 q 823 126 806 108 q 851 174 841 145 q 861 240 861 202 l 861 734 z "},"Ҁ":{"ha":902,"x_min":80,"x_max":822,"o":"m 457 92 l 457 -14 q 332 6 390 -14 q 228 64 274 26 q 148 155 181 102 q 98 271 115 207 q 80 409 80 336 l 80 578 q 107 747 80 670 q 185 881 134 824 q 305 970 235 939 q 458 1002 374 1002 q 651 962 570 1002 q 777 847 732 922 q 822 671 821 773 l 692 671 q 664 790 691 741 q 585 867 637 840 q 458 895 534 895 q 355 870 401 895 q 277 803 309 846 q 228 703 245 760 q 211 580 211 646 l 211 409 q 222 309 211 356 q 253 221 233 261 q 304 153 274 182 q 372 108 334 124 q 457 92 411 92 m 535 92 l 535 -258 l 405 -258 l 405 92 l 535 92 z "},"ҁ":{"ha":743,"x_min":68,"x_max":673,"o":"m 389 89 l 389 -14 q 252 15 312 -14 q 152 95 193 44 q 89 213 111 146 q 68 353 68 279 l 68 381 q 89 521 68 455 q 152 638 111 587 q 252 718 193 689 q 389 747 312 747 q 535 712 471 747 q 636 617 600 677 q 673 481 673 557 l 555 481 q 533 564 555 527 q 473 623 511 601 q 389 644 435 644 q 300 622 337 644 q 240 561 263 599 q 205 476 216 522 q 194 381 194 429 l 194 353 q 205 257 194 304 q 239 172 216 210 q 300 112 262 134 q 389 89 337 89 m 458 89 l 458 -259 l 332 -259 l 332 89 l 458 89 z "},"҂":{"ha":867,"x_min":79,"x_max":793,"o":"m 548 550 l 408 303 l 604 186 l 557 102 l 359 218 l 236 0 l 122 0 l 275 270 l 79 386 l 125 469 l 323 353 l 463 601 l 266 717 l 313 802 l 511 686 l 638 910 l 750 910 l 594 634 l 793 518 l 743 435 l 548 550 z "},"҃":{"ha":0,"x_min":-625,"x_max":-147,"o":"m -147 892 l -513 892 l -513 807 l -625 808 l -625 966 l -258 966 l -259 1039 l -147 1038 l -147 892 z "},"҄":{"ha":0,"x_min":-618,"x_max":-106,"o":"m -618 970 l -590 970 q -494 983 -536 970 q -415 1013 -452 996 q -343 1043 -379 1030 q -267 1056 -308 1056 q -149 1019 -192 1056 q -106 908 -106 983 l -106 884 l -193 884 l -193 896 q -214 951 -193 934 q -270 969 -235 969 q -332 956 -300 969 q -400 927 -363 943 q -484 897 -437 910 q -589 884 -530 884 l -618 884 l -618 970 z "},"҅":{"ha":0,"x_min":-452,"x_max":-290,"o":"m -343 884 l -452 1017 l -452 1101 l -330 1101 l -331 1006 l -290 928 l -343 884 z "},"҆":{"ha":0,"x_min":-410,"x_max":-248,"o":"m -248 1017 l -358 884 l -410 928 l -370 1006 l -371 1101 l -248 1101 l -248 1017 z "},"҈":{"ha":0,"x_min":-1024,"x_max":297,"o":"m -439 859 l -516 859 q -478 951 -516 916 q -374 987 -439 987 q -269 951 -307 987 q -231 859 -231 916 l -307 859 q -322 907 -307 886 q -374 928 -337 928 q -425 907 -410 928 q -439 859 -439 886 m -38 671 l -115 671 q -77 763 -115 728 q 27 799 -39 799 q 132 763 94 799 q 171 671 171 728 l 94 671 q 79 719 94 699 q 27 740 64 740 q -23 719 -8 740 q -38 671 -38 699 m 88 330 l 12 330 q 50 422 12 387 q 154 458 88 458 q 259 422 220 458 q 297 330 297 387 l 221 330 q 206 378 221 357 q 154 399 191 399 q 103 378 119 399 q 88 330 88 357 m -45 -22 l -122 -22 q -84 70 -122 35 q 20 106 -45 106 q 125 70 87 106 q 163 -22 163 35 l 87 -22 q 73 26 87 5 q 20 47 58 47 q -30 26 -15 47 q -45 -22 -45 5 m -436 -214 l -513 -214 q -474 -122 -513 -158 q -370 -87 -436 -87 q -266 -122 -304 -87 q -227 -214 -227 -158 l -303 -214 q -318 -166 -303 -187 q -370 -146 -334 -146 q -421 -166 -406 -146 q -436 -214 -436 -187 m -827 671 l -905 671 q -866 763 -905 728 q -762 799 -827 799 q -657 763 -695 799 q -618 671 -618 728 l -694 671 q -710 719 -694 699 q -762 740 -725 740 q -812 719 -798 740 q -827 671 -827 699 m -947 330 l -1024 330 q -986 422 -1024 387 q -882 458 -947 458 q -777 422 -815 458 q -739 330 -739 387 l -814 330 q -829 378 -814 357 q -882 399 -844 399 q -932 378 -917 399 q -947 330 -947 357 m -834 -22 l -911 -22 q -873 70 -911 35 q -769 106 -835 106 q -664 70 -703 106 q -625 -22 -625 35 l -702 -22 q -717 26 -702 5 q -769 47 -732 47 q -819 26 -804 47 q -834 -22 -834 5 z "},"҉":{"ha":0,"x_min":-1013,"x_max":246,"o":"m -409 -41 l -316 -41 l -309 -50 l -391 -280 l -456 -280 l -409 -41 m -356 764 l -448 764 l -456 773 l -374 1002 l -309 1002 l -356 764 m 12 334 l 12 428 l 20 436 l 246 352 l 246 286 l 12 334 m -778 388 l -778 294 l -787 286 l -1013 370 l -1013 436 l -778 388 m -85 612 l -151 680 l -150 690 l 68 794 l 114 748 l -85 612 m -681 81 l -615 14 l -616 3 l -833 -101 l -880 -54 l -681 81 m -644 650 l -710 583 l -722 585 l -822 806 l -778 852 l -644 650 m -123 42 l -58 109 l -46 108 l 55 -113 l 10 -161 l -123 42 z "},"Ҋ":{"ha":1048,"x_min":121,"x_max":990,"o":"m 251 227 l 737 987 l 868 987 l 868 0 l 737 0 l 737 762 l 251 0 l 121 0 l 121 987 l 251 987 l 251 227 m 599 1232 l 701 1232 q 676 1138 701 1179 q 606 1074 652 1097 q 498 1051 561 1051 q 350 1102 404 1051 q 295 1232 295 1152 l 397 1232 q 420 1162 397 1192 q 498 1131 443 1131 q 576 1162 553 1131 q 599 1232 599 1192 m 990 103 l 990 2 q 959 -129 990 -60 q 871 -243 928 -197 l 800 -194 q 837 -133 822 -164 q 860 -70 852 -102 q 867 0 867 -37 l 867 103 l 990 103 z "},"ҋ":{"ha":855,"x_min":106,"x_max":819,"o":"m 231 199 l 570 734 l 696 734 l 696 0 l 570 0 l 570 535 l 231 0 l 106 0 l 106 734 l 231 734 l 231 199 m 501 1000 l 603 1000 q 578 906 603 947 q 509 842 554 865 q 401 819 463 819 q 252 869 307 819 q 197 1000 197 920 l 299 1000 q 322 929 299 960 q 401 899 345 899 q 478 929 455 899 q 501 1000 501 960 m 819 103 l 819 2 q 787 -129 819 -60 q 700 -243 756 -197 l 629 -194 q 665 -133 650 -164 q 688 -70 680 -102 q 696 0 696 -37 l 696 103 l 819 103 z "},"ҍ":{"ha":753,"x_min":-25,"x_max":692,"o":"m 197 506 l 418 506 q 568 473 507 506 q 661 385 629 441 q 692 256 692 328 q 661 126 692 184 q 568 34 629 68 q 418 0 507 0 l 106 0 l 106 1119 l 231 1119 l 231 103 l 418 103 q 505 124 472 103 q 551 180 537 146 q 566 251 566 214 q 551 322 566 287 q 505 380 537 357 q 418 404 472 404 l 197 404 l 197 506 m 450 987 l 450 884 l -25 884 l -25 987 l 450 987 z "},"Ҏ":{"ha":886,"x_min":115,"x_max":841,"o":"m 591 665 l 841 390 l 766 321 l 517 595 l 591 665 m 479 387 l 215 387 l 215 494 l 479 494 q 603 518 555 494 q 672 586 650 543 q 694 685 694 629 q 672 781 694 736 q 603 853 650 825 q 479 880 555 880 l 245 880 l 245 0 l 115 0 l 115 987 l 479 987 q 668 949 591 987 q 785 842 745 910 q 825 686 825 774 q 785 524 825 591 q 668 422 745 457 q 479 387 591 387 z "},"ҏ":{"ha":788,"x_min":95,"x_max":718,"o":"m 494 264 l 718 10 l 644 -60 l 420 194 l 494 264 m 221 593 l 221 -282 l 95 -282 l 95 734 l 210 734 l 221 593 m 715 373 l 715 359 q 696 211 715 279 q 641 92 677 142 q 552 14 605 42 q 431 -14 499 -14 q 307 9 361 -14 q 216 77 254 33 q 157 182 179 121 q 127 321 135 244 l 127 397 q 157 543 135 479 q 217 653 180 608 q 307 723 254 699 q 429 747 359 747 q 551 721 498 747 q 642 644 605 694 q 697 526 678 595 q 715 373 715 457 m 589 359 l 589 373 q 578 476 589 428 q 542 562 566 525 q 481 620 518 599 q 392 642 444 642 q 310 625 345 642 q 250 582 275 609 q 211 519 226 554 q 188 447 195 484 l 188 271 q 214 203 198 235 q 254 145 230 170 q 312 104 278 119 q 393 90 347 90 q 481 111 444 90 q 542 170 518 132 q 578 255 566 207 q 589 359 589 304 z "},"Ґ":{"ha":762,"x_min":110,"x_max":719,"o":"m 719 1215 l 719 884 l 593 884 l 593 1215 l 719 1215 m 717 987 l 717 880 l 241 880 l 241 0 l 110 0 l 110 987 l 717 987 z "},"ґ":{"ha":619,"x_min":99,"x_max":566,"o":"m 566 949 l 566 630 l 440 630 l 440 949 l 566 949 m 564 734 l 564 630 l 224 630 l 224 0 l 99 0 l 99 734 l 564 734 z "},"Ҕ":{"ha":843,"x_min":121,"x_max":779,"o":"m 727 987 l 727 880 l 251 880 l 251 0 l 121 0 l 121 987 l 727 987 m 229 456 l 229 565 l 374 565 q 544 538 469 565 q 672 461 619 512 q 751 338 724 411 q 779 174 779 266 q 758 17 779 85 q 697 -100 738 -52 q 597 -172 657 -147 q 458 -197 537 -197 l 456 -97 q 549 -78 511 -97 q 610 -23 587 -58 q 643 63 633 13 q 653 174 653 113 q 635 295 652 242 q 583 383 617 347 q 496 437 548 419 q 374 456 444 456 l 229 456 z "},"ҕ":{"ha":699,"x_min":99,"x_max":650,"o":"m 124 328 l 124 438 l 303 438 q 482 400 404 438 q 605 290 560 361 q 650 115 650 218 q 636 31 650 78 q 591 -63 622 -17 q 511 -144 561 -109 q 389 -193 462 -179 l 356 -94 q 457 -46 420 -77 q 509 26 494 -16 q 524 115 525 68 q 496 232 524 184 q 418 304 467 279 q 303 328 368 328 l 124 328 m 564 734 l 564 630 l 224 630 l 224 0 l 99 0 l 99 734 l 564 734 z "},"Җ":{"ha":1325,"x_min":18,"x_max":1303,"o":"m 397 451 l 45 987 l 198 987 l 460 559 l 646 559 l 625 451 l 397 451 m 468 461 l 181 0 l 18 0 l 385 574 l 468 461 m 703 987 l 703 0 l 573 0 l 573 987 l 703 987 m 1226 987 l 872 451 l 651 451 l 631 559 l 810 559 l 1072 987 l 1226 987 m 1089 0 l 803 461 l 886 574 l 1252 0 l 1089 0 m 1303 104 l 1303 -243 l 1178 -243 l 1178 104 l 1303 104 z "},"җ":{"ha":1107,"x_min":15,"x_max":1083,"o":"m 318 319 l 40 734 l 191 734 l 381 430 l 528 430 l 509 319 l 318 319 m 387 332 l 174 0 l 15 0 l 307 423 l 387 332 m 592 734 l 592 0 l 467 0 l 467 734 l 592 734 m 1020 734 l 742 319 l 551 319 l 531 430 l 678 430 l 868 734 l 1020 734 m 886 0 l 672 332 l 753 423 l 1044 0 l 886 0 m 1083 104 l 1083 -243 l 958 -243 l 958 104 l 1083 104 z "},"Қ":{"ha":972,"x_min":121,"x_max":914,"o":"m 252 987 l 252 0 l 121 0 l 121 987 l 252 987 m 860 987 l 431 444 l 199 444 l 179 553 l 353 553 l 698 987 l 860 987 m 728 0 l 357 461 l 431 576 l 888 0 l 728 0 m 914 102 l 914 -245 l 789 -245 l 789 102 l 914 102 z "},"қ":{"ha":819,"x_min":106,"x_max":782,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 713 734 l 366 313 l 190 313 l 171 423 l 315 423 l 561 734 l 713 734 m 578 0 l 309 332 l 389 423 l 738 0 l 578 0 m 782 104 l 782 -243 l 656 -243 l 656 104 l 782 104 z "},"Ҝ":{"ha":875,"x_min":111,"x_max":867,"o":"m 111 987 l 241 987 l 241 0 l 111 0 l 111 987 m 312 727 l 413 727 l 413 279 l 312 279 l 312 727 m 684 987 l 838 987 l 522 444 l 189 444 l 170 553 l 465 553 l 684 987 m 458 461 l 535 574 l 867 0 l 704 0 l 458 461 z "},"ҝ":{"ha":780,"x_min":105,"x_max":781,"o":"m 105 734 l 231 734 l 231 0 l 105 0 l 105 734 m 299 568 l 400 568 l 400 181 l 299 181 l 299 568 m 604 734 l 756 734 l 479 313 l 189 313 l 170 423 l 429 423 l 604 734 m 422 332 l 503 423 l 781 0 l 622 0 l 422 332 z "},"Ҡ":{"ha":1137,"x_min":47,"x_max":1136,"o":"m 408 987 l 408 884 l 47 884 l 47 987 l 408 987 m 499 987 l 499 0 l 369 0 l 369 987 l 499 987 m 1108 987 l 679 444 l 447 444 l 427 553 l 601 553 l 945 987 l 1108 987 m 976 0 l 605 461 l 678 576 l 1136 0 l 976 0 z "},"ҡ":{"ha":958,"x_min":43,"x_max":953,"o":"m 387 734 l 387 631 l 43 631 l 43 734 l 387 734 m 448 734 l 448 0 l 321 0 l 321 734 l 448 734 m 928 734 l 581 313 l 405 313 l 386 423 l 530 423 l 776 734 l 928 734 m 793 0 l 524 332 l 604 423 l 953 0 l 793 0 z "},"Ң":{"ha":1041,"x_min":115,"x_max":983,"o":"m 760 563 l 760 456 l 225 456 l 225 563 l 760 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 m 983 104 l 983 -243 l 857 -243 l 857 104 l 983 104 z "},"ң":{"ha":842,"x_min":106,"x_max":804,"o":"m 593 416 l 593 314 l 205 314 l 205 416 l 593 416 m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 695 734 l 695 0 l 569 0 l 569 734 l 695 734 m 804 104 l 804 -243 l 679 -243 l 679 104 l 804 104 z "},"Ҥ":{"ha":1356,"x_min":115,"x_max":1305,"o":"m 1305 987 l 1305 884 l 864 884 l 784 987 l 1305 987 m 759 563 l 759 456 l 225 456 l 225 563 l 759 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 z "},"ҥ":{"ha":990,"x_min":99,"x_max":940,"o":"m 940 734 l 940 630 l 624 630 l 624 734 l 940 734 m 587 416 l 587 314 l 198 314 l 198 416 l 587 416 m 224 734 l 224 0 l 99 0 l 99 734 l 224 734 m 688 734 l 688 0 l 562 0 l 562 734 l 688 734 z "},"Ҧ":{"ha":1422,"x_min":119,"x_max":1354,"o":"m 867 987 l 867 0 l 737 0 l 737 880 l 250 880 l 250 0 l 119 0 l 119 987 l 867 987 m 804 456 l 804 565 l 949 565 q 1120 538 1045 565 q 1247 461 1195 512 q 1327 338 1300 411 q 1354 174 1354 266 q 1334 17 1354 85 q 1273 -100 1314 -52 q 1173 -172 1233 -147 q 1034 -197 1113 -197 l 1032 -97 q 1125 -78 1087 -97 q 1185 -23 1162 -58 q 1219 63 1208 13 q 1229 174 1229 113 q 1211 295 1228 242 q 1158 383 1193 347 q 1072 437 1124 419 q 949 456 1019 456 l 804 456 z "},"ҧ":{"ha":1207,"x_min":99,"x_max":1161,"o":"m 616 328 l 616 438 l 802 438 q 987 400 906 438 q 1115 290 1068 361 q 1161 115 1161 218 q 1147 31 1161 78 q 1103 -63 1133 -17 q 1022 -144 1072 -109 q 901 -193 972 -179 l 867 -94 q 968 -46 931 -77 q 1020 26 1004 -16 q 1036 115 1036 68 q 1005 232 1036 184 q 923 304 975 279 q 802 328 870 328 l 616 328 m 577 734 l 577 630 l 206 630 l 206 734 l 577 734 m 224 734 l 224 0 l 99 0 l 99 734 l 224 734 m 688 734 l 688 0 l 562 0 l 562 734 l 688 734 z "},"Ҩ":{"ha":1030,"x_min":77,"x_max":979,"o":"m 979 90 l 979 -19 q 748 17 852 -19 q 568 119 644 53 q 453 275 493 184 q 412 474 412 366 l 412 628 q 432 775 412 707 q 489 893 452 842 q 577 971 526 943 q 690 1000 628 1000 q 805 972 753 1000 q 893 895 856 945 q 950 776 930 844 q 970 625 970 707 l 970 460 q 937 273 970 359 q 840 122 903 186 q 691 22 778 58 q 498 -14 604 -14 q 325 22 403 -14 q 192 122 248 58 q 106 272 136 186 q 77 458 77 358 l 77 574 q 99 743 77 665 q 163 879 121 821 q 261 969 204 937 q 389 1002 319 1002 l 389 890 q 313 867 347 890 q 257 800 280 843 q 221 700 233 758 q 209 576 209 643 l 209 458 q 229 315 209 380 q 287 200 249 249 q 377 124 324 151 q 498 96 431 96 q 643 124 579 96 q 750 201 706 152 q 817 317 793 251 q 840 460 840 383 l 840 629 q 829 734 840 687 q 800 817 819 782 q 753 870 781 852 q 690 889 726 889 q 628 870 656 889 q 582 815 601 850 q 553 733 563 780 q 543 630 543 686 l 543 473 q 571 317 543 387 q 655 196 600 246 q 792 118 711 145 q 979 90 873 90 z "},"ҩ":{"ha":838,"x_min":75,"x_max":801,"o":"m 801 98 l 801 -8 q 609 22 694 -8 q 463 106 523 52 q 370 232 402 160 q 338 389 338 304 l 338 458 q 353 575 338 522 q 395 667 368 628 q 463 727 423 706 q 553 749 503 749 q 642 726 602 749 q 710 661 682 703 q 753 564 739 620 q 768 444 768 509 l 768 373 q 743 220 768 291 q 669 97 717 150 q 555 15 621 44 q 408 -14 489 -14 q 272 16 334 -14 q 167 101 211 47 q 99 229 123 156 q 75 387 75 302 l 75 425 q 92 553 75 494 q 141 655 109 612 q 216 723 172 699 q 313 747 260 747 l 313 641 q 267 625 288 641 q 231 580 246 609 q 208 512 216 551 q 200 427 200 473 l 200 387 q 214 271 200 324 q 256 177 229 217 q 321 115 283 137 q 408 93 359 93 q 506 114 463 93 q 580 174 549 136 q 626 262 610 212 q 642 373 642 313 l 642 446 q 636 523 642 487 q 619 585 631 558 q 591 627 608 612 q 553 642 574 642 q 514 629 531 642 q 486 591 497 616 q 469 533 475 567 q 463 460 463 500 l 463 387 q 486 270 463 323 q 552 179 509 217 q 658 119 595 140 q 801 98 721 98 z "},"Ҳ":{"ha":884,"x_min":39,"x_max":863,"o":"m 199 987 l 437 609 l 674 987 l 827 987 l 515 498 l 834 0 l 680 0 l 437 386 l 193 0 l 39 0 l 359 498 l 47 987 l 199 987 m 863 104 l 863 -243 l 737 -243 l 737 104 l 863 104 z "},"ҳ":{"ha":723,"x_min":28,"x_max":699,"o":"m 180 734 l 341 467 l 504 734 l 651 734 l 411 372 l 659 0 l 513 0 l 344 275 l 174 0 l 28 0 l 275 372 l 36 734 l 180 734 m 699 104 l 699 -243 l 573 -243 l 573 104 l 699 104 z "},"Ҵ":{"ha":1246,"x_min":35,"x_max":1142,"o":"m 682 987 l 682 884 l 35 884 l 35 987 l 682 987 m 1142 110 l 1130 -238 l 1013 -238 l 1013 0 l 916 0 l 916 110 l 1142 110 m 290 0 l 290 987 l 421 987 l 421 106 l 908 106 l 908 987 l 1038 987 l 1038 0 l 290 0 z "},"ҵ":{"ha":931,"x_min":21,"x_max":884,"o":"m 501 734 l 501 631 l 21 631 l 21 734 l 501 734 m 207 0 l 207 734 l 333 734 l 333 103 l 671 103 l 671 734 l 796 734 l 796 0 l 207 0 m 884 103 l 871 -218 l 759 -218 l 759 0 l 663 0 l 663 103 l 884 103 z "},"Ҷ":{"ha":996,"x_min":102,"x_max":938,"o":"m 102 987 l 233 987 l 233 679 q 256 559 233 602 q 323 498 278 515 q 437 480 369 480 q 516 484 477 480 q 591 493 554 487 q 663 508 627 499 q 733 527 699 517 l 733 420 q 667 401 700 410 q 599 386 634 392 q 525 376 564 380 q 437 373 485 373 q 257 403 332 373 q 142 500 182 433 q 102 679 102 568 l 102 987 m 700 987 l 831 987 l 831 0 l 700 0 l 700 987 m 938 104 l 938 -243 l 812 -243 l 812 104 l 938 104 z "},"ҷ":{"ha":796,"x_min":71,"x_max":759,"o":"m 649 734 l 649 0 l 524 0 l 524 734 l 649 734 m 606 397 l 606 294 q 529 268 568 279 q 447 251 490 257 q 354 244 404 244 q 203 274 267 244 q 105 366 140 304 q 71 521 71 427 l 71 735 l 196 735 l 196 521 q 214 422 196 460 q 268 366 233 384 q 354 348 303 348 q 446 354 403 348 q 529 372 489 361 q 606 397 568 382 m 759 104 l 759 -243 l 633 -243 l 633 104 l 759 104 z "},"Ҹ":{"ha":944,"x_min":102,"x_max":831,"o":"m 536 691 l 536 216 l 435 216 l 435 691 l 536 691 m 102 987 l 233 987 l 233 679 q 256 559 233 602 q 323 498 278 515 q 437 480 369 480 q 516 484 477 480 q 591 493 554 487 q 663 508 627 499 q 733 527 699 517 l 733 420 q 667 401 700 410 q 599 386 634 392 q 525 376 564 380 q 437 373 485 373 q 257 403 332 373 q 142 500 182 433 q 102 679 102 568 l 102 987 m 700 987 l 831 987 l 831 0 l 700 0 l 700 987 z "},"ҹ":{"ha":767,"x_min":90,"x_max":668,"o":"m 438 539 l 438 155 l 337 155 l 337 539 l 438 539 m 668 734 l 668 0 l 543 0 l 543 734 l 668 734 m 625 397 l 625 294 q 548 268 587 279 q 466 251 509 257 q 373 244 423 244 q 222 274 286 244 q 124 366 159 304 q 90 521 90 427 l 90 735 l 215 735 l 215 521 q 233 422 215 460 q 287 366 252 384 q 373 348 322 348 q 465 354 422 348 q 548 372 508 361 q 625 397 587 382 z "},"Һ":{"ha":944,"x_min":93,"x_max":821,"o":"m 821 0 l 690 0 l 690 309 q 668 429 690 386 q 601 490 646 472 q 487 507 555 507 q 408 504 446 507 q 333 494 370 500 q 261 479 296 488 q 191 460 225 471 l 191 568 q 257 587 224 578 q 325 602 290 595 q 399 611 359 608 q 487 614 439 614 q 667 584 592 614 q 781 487 741 554 q 821 309 821 420 l 821 0 m 224 0 l 93 0 l 93 987 l 224 987 l 224 0 z "},"Ҽ":{"ha":1074,"x_min":43,"x_max":997,"o":"m 43 733 l 146 733 q 163 647 146 684 q 218 589 181 610 q 314 568 256 568 l 314 473 q 164 505 225 473 q 73 596 104 537 q 43 733 43 654 m 679 -16 q 500 16 578 -16 q 368 104 422 47 q 287 238 315 161 q 260 409 260 316 l 260 578 q 288 748 260 671 q 367 883 317 826 q 485 970 418 939 q 629 1000 551 1001 q 788 969 720 1000 q 904 878 857 937 q 974 736 950 819 q 997 549 997 652 l 997 473 l 339 473 l 339 567 l 866 567 l 866 589 q 853 707 866 652 q 813 804 841 762 q 740 868 785 845 q 629 892 694 892 q 527 867 572 892 q 452 800 483 843 q 406 700 422 756 q 390 578 390 643 l 390 409 q 406 286 390 343 q 457 185 422 229 q 547 117 492 142 q 679 92 602 92 q 819 111 763 92 q 913 149 876 130 l 945 52 q 895 25 929 41 q 808 -3 861 9 q 679 -16 754 -16 z "},"ҽ":{"ha":823,"x_min":-24,"x_max":762,"o":"m -24 581 l 77 581 q 111 475 77 515 q 218 435 144 435 l 218 343 q 85 372 139 343 q 4 454 31 401 q -24 581 -24 508 m 476 -14 q 337 13 399 -14 q 231 86 275 39 q 163 199 186 134 q 139 341 139 264 l 139 370 q 165 529 139 459 q 237 648 192 600 q 340 722 283 697 q 460 747 398 747 q 596 720 539 747 q 690 645 653 693 q 745 531 727 596 q 762 388 762 465 l 762 332 l 214 332 l 214 434 l 636 434 l 636 444 q 624 516 634 480 q 594 581 614 551 q 541 627 574 610 q 460 644 508 644 q 381 626 417 644 q 319 573 345 608 q 279 487 294 538 q 265 370 265 436 l 265 341 q 280 243 265 289 q 322 163 294 197 q 391 109 351 128 q 483 89 431 89 q 595 116 549 89 q 676 189 642 143 l 753 128 q 692 60 729 92 q 602 7 655 27 q 476 -14 549 -14 z "},"Ӄ":{"ha":875,"x_min":111,"x_max":833,"o":"m 241 987 l 241 0 l 111 0 l 111 987 l 241 987 m 833 987 l 389 448 l 189 448 l 170 564 l 332 564 l 680 987 l 833 987 m 277 448 l 277 562 l 426 562 q 596 535 521 562 q 724 459 671 509 q 803 335 776 408 q 831 170 831 262 q 810 15 831 83 q 749 -103 790 -54 q 648 -177 709 -151 q 507 -202 587 -202 l 505 -99 q 597 -79 560 -99 q 658 -24 635 -60 q 691 61 681 12 q 701 169 701 110 q 683 289 700 237 q 631 377 665 341 q 545 430 596 412 q 426 448 494 448 l 277 448 z "},"ӄ":{"ha":755,"x_min":105,"x_max":712,"o":"m 231 734 l 231 0 l 105 0 l 105 734 l 231 734 m 712 734 l 345 313 l 189 313 l 170 423 l 293 423 l 559 734 l 712 734 m 159 313 l 159 422 l 347 422 q 532 389 451 422 q 660 289 613 356 q 706 119 706 221 q 691 38 705 83 q 647 -52 677 -7 q 567 -129 617 -96 q 446 -176 517 -163 l 412 -77 q 513 -32 476 -61 q 565 35 549 -3 q 581 119 581 74 q 550 231 581 189 q 468 294 520 274 q 347 313 416 313 l 159 313 z "},"Ӆ":{"ha":1040,"x_min":33,"x_max":983,"o":"m 749 987 l 749 880 l 298 880 l 298 987 l 749 987 m 862 987 l 862 0 l 731 0 l 731 987 l 862 987 m 253 987 l 383 987 l 361 504 q 345 318 356 399 q 313 176 334 236 q 260 77 293 116 q 181 19 228 38 q 68 0 134 0 l 33 0 l 33 106 l 60 109 q 125 126 98 111 q 172 170 153 140 q 203 248 191 200 q 223 364 216 295 q 234 525 230 433 l 253 987 m 983 103 l 983 2 q 951 -129 983 -60 q 864 -243 920 -197 l 793 -194 q 829 -133 814 -164 q 852 -70 844 -102 q 860 0 860 -37 l 860 103 l 983 103 z "},"ӆ":{"ha":857,"x_min":30,"x_max":819,"o":"m 586 734 l 586 630 l 231 630 l 231 734 l 586 734 m 696 734 l 696 0 l 571 0 l 571 734 l 696 734 m 201 734 l 327 734 l 308 380 q 293 235 303 298 q 264 127 282 172 q 219 55 246 83 q 155 13 193 26 q 69 0 118 0 l 30 0 l 30 111 l 57 113 q 107 126 86 115 q 142 160 127 138 q 165 219 156 183 q 179 304 174 255 q 187 420 184 354 l 201 734 m 819 103 l 819 2 q 788 -129 819 -60 q 701 -243 757 -197 l 629 -194 q 666 -133 651 -164 q 689 -70 681 -102 q 696 0 696 -37 l 696 103 l 819 103 z "},"Ӈ":{"ha":989,"x_min":121,"x_max":867,"o":"m 121 987 l 252 987 l 252 542 l 736 542 l 736 987 l 867 987 l 867 -57 q 841 -188 867 -134 q 764 -269 814 -241 q 646 -296 715 -296 q 607 -294 625 -296 q 568 -285 589 -292 l 578 -180 q 611 -187 589 -184 q 644 -189 634 -189 q 694 -173 673 -189 q 726 -128 715 -157 q 736 -57 736 -98 l 736 435 l 252 435 l 252 0 l 121 0 l 121 987 z "},"ӈ":{"ha":787,"x_min":99,"x_max":688,"o":"m 99 734 l 224 734 l 224 416 l 562 416 l 562 734 l 688 734 l 688 -60 q 662 -189 688 -136 q 586 -269 635 -242 q 469 -296 537 -296 q 430 -294 448 -296 q 393 -285 412 -292 l 403 -184 q 436 -191 413 -189 q 469 -193 460 -193 q 519 -177 498 -193 q 551 -132 540 -161 q 562 -60 562 -102 l 562 314 l 224 314 l 224 0 l 99 0 l 99 734 z "},"Ӊ":{"ha":1054,"x_min":115,"x_max":996,"o":"m 760 563 l 760 456 l 225 456 l 225 563 l 760 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 m 996 103 l 996 2 q 965 -129 996 -60 q 878 -243 934 -197 l 806 -194 q 843 -133 828 -164 q 866 -70 858 -102 q 873 0 873 -37 l 873 103 l 996 103 z "},"ӊ":{"ha":854,"x_min":106,"x_max":818,"o":"m 593 416 l 593 314 l 205 314 l 205 416 l 593 416 m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 695 734 l 695 0 l 569 0 l 569 734 l 695 734 m 818 103 l 818 2 q 787 -129 818 -60 q 699 -243 755 -197 l 628 -194 q 665 -133 650 -164 q 687 -70 680 -102 q 695 0 695 -37 l 695 103 l 818 103 z "},"Ӎ":{"ha":1269,"x_min":115,"x_max":1211,"o":"m 156 987 l 283 987 l 606 182 l 929 987 l 1057 987 l 655 0 l 556 0 l 156 987 m 115 987 l 227 987 l 245 385 l 245 0 l 115 0 l 115 987 m 985 987 l 1097 987 l 1097 0 l 967 0 l 967 385 l 985 987 m 1211 103 l 1211 2 q 1180 -129 1211 -60 q 1093 -243 1149 -197 l 1021 -194 q 1058 -133 1043 -164 q 1081 -70 1073 -102 q 1088 0 1088 -37 l 1088 103 l 1211 103 z "},"ӎ":{"ha":1084,"x_min":107,"x_max":1047,"o":"m 517 167 l 767 734 l 888 734 l 561 0 l 474 0 l 149 734 l 269 734 l 517 167 m 233 734 l 233 0 l 107 0 l 107 734 l 233 734 m 798 0 l 798 734 l 924 734 l 924 0 l 798 0 m 1047 103 l 1047 2 q 1016 -129 1047 -60 q 928 -243 985 -197 l 857 -194 q 894 -133 879 -164 q 917 -70 909 -102 q 924 0 924 -37 l 924 103 l 1047 103 z "},"Ә":{"ha":960,"x_min":64,"x_max":880,"o":"m 435 1001 q 626 966 543 1001 q 765 868 709 931 q 851 717 822 804 q 880 525 880 630 l 880 461 q 849 269 880 356 q 761 118 817 181 q 631 20 705 55 q 473 -14 557 -14 q 296 18 372 -14 q 168 108 219 49 q 90 250 116 167 q 64 436 64 333 l 64 520 l 800 520 l 800 419 l 195 419 l 195 396 q 209 278 195 333 q 256 182 224 223 q 342 118 289 141 q 473 94 395 94 q 591 123 539 94 q 678 202 642 151 q 732 319 713 252 q 750 461 750 385 l 750 525 q 732 668 750 602 q 676 785 714 734 q 578 864 638 836 q 435 892 519 892 q 287 873 347 892 q 187 836 227 854 l 155 932 q 208 960 172 943 q 300 988 243 976 q 435 1001 357 1001 z "},"Ӡ":{"ha":808,"x_min":71,"x_max":724,"o":"m 100 987 l 694 987 l 694 903 l 355 499 l 278 499 l 278 578 l 541 880 l 100 880 l 100 987 m 278 577 l 380 578 q 566 543 489 578 q 684 440 643 507 q 724 275 724 372 q 700 152 724 206 q 630 61 675 98 q 524 5 585 24 q 391 -14 463 -14 q 275 2 332 -14 q 172 54 218 19 q 98 143 125 89 q 71 274 71 198 l 201 274 q 225 183 201 224 q 291 117 249 142 q 391 92 334 92 q 500 116 455 92 q 570 180 546 139 q 594 273 594 221 q 569 389 594 344 q 495 455 544 434 q 374 476 446 476 l 278 476 l 278 577 z "},"ӡ":{"ha":808,"x_min":72,"x_max":722,"o":"m 100 734 l 690 734 l 691 654 l 361 245 l 277 245 l 277 323 l 529 630 l 100 630 l 100 734 m 277 320 l 376 320 q 563 286 485 320 q 681 184 640 251 q 722 21 722 117 q 697 -102 722 -48 q 628 -192 673 -155 q 523 -249 584 -229 q 390 -268 463 -268 q 275 -251 332 -268 q 173 -200 218 -235 q 99 -110 127 -165 q 72 20 72 -56 l 197 20 q 221 -73 197 -31 q 289 -140 245 -115 q 390 -165 332 -165 q 502 -141 456 -165 q 572 -76 547 -117 q 596 18 596 -35 q 570 135 596 90 q 495 200 545 180 q 373 221 445 221 l 277 221 l 277 320 z "},"Ӻ":{"ha":819,"x_min":39,"x_max":773,"o":"m 773 987 l 773 880 l 297 880 l 297 0 l 167 0 l 167 987 l 773 987 m 471 588 l 471 485 l 39 485 l 39 588 l 471 588 m 281 104 l 408 104 l 408 -60 q 381 -189 408 -136 q 307 -269 355 -242 q 189 -296 258 -296 q 151 -294 168 -296 q 113 -285 133 -292 l 123 -178 q 156 -184 133 -182 q 189 -186 180 -186 q 239 -172 218 -186 q 271 -130 260 -158 q 281 -60 281 -102 l 281 104 z "},"ӻ":{"ha":637,"x_min":39,"x_max":623,"o":"m 623 734 l 623 630 l 284 630 l 284 0 l 159 0 l 159 734 l 623 734 m 471 467 l 471 363 l 39 363 l 39 467 l 471 467 m 271 104 l 397 104 l 397 -60 q 371 -189 397 -136 q 296 -269 345 -242 q 178 -296 247 -296 q 140 -294 157 -296 q 102 -285 122 -292 l 112 -178 q 145 -184 122 -182 q 178 -186 169 -186 q 228 -172 208 -186 q 260 -130 249 -158 q 271 -60 271 -102 l 271 104 z "},"Ӽ":{"ha":899,"x_min":39,"x_max":878,"o":"m 199 987 l 437 609 l 674 987 l 827 987 l 515 498 l 834 0 l 680 0 l 437 386 l 193 0 l 39 0 l 359 498 l 47 987 l 199 987 m 752 104 l 878 104 l 878 -60 q 852 -189 878 -136 q 777 -269 826 -242 q 660 -296 728 -296 q 621 -294 639 -296 q 584 -285 604 -292 l 593 -178 q 627 -184 604 -182 q 660 -186 650 -186 q 710 -172 689 -186 q 741 -130 730 -158 q 752 -60 752 -102 l 752 104 z "},"ӽ":{"ha":738,"x_min":28,"x_max":714,"o":"m 180 734 l 341 467 l 504 734 l 651 734 l 411 372 l 659 0 l 513 0 l 344 275 l 174 0 l 28 0 l 275 372 l 36 734 l 180 734 m 588 104 l 714 104 l 714 -60 q 688 -189 714 -136 q 613 -269 662 -242 q 496 -296 564 -296 q 457 -294 475 -296 q 420 -285 439 -292 l 429 -178 q 463 -184 439 -182 q 496 -186 486 -186 q 546 -172 525 -186 q 577 -130 566 -158 q 588 -60 588 -102 l 588 104 z "},"Ԁ":{"ha":862,"x_min":59,"x_max":763,"o":"m 394 599 l 663 599 l 663 492 l 394 492 q 276 465 321 492 q 211 396 231 439 q 190 303 190 353 q 211 209 190 254 q 276 135 231 163 q 394 106 321 106 l 632 106 l 632 987 l 763 987 l 763 0 l 394 0 q 211 39 286 0 q 98 147 136 79 q 59 302 59 215 q 81 422 59 368 q 145 516 102 476 q 250 577 188 555 q 394 599 313 599 z "},"Ԃ":{"ha":1143,"x_min":61,"x_max":1112,"o":"m 396 599 l 665 599 l 665 492 l 396 492 q 279 465 323 492 q 213 396 234 439 q 193 303 193 353 q 213 209 193 254 q 279 135 234 163 q 396 106 323 106 l 635 106 l 635 987 l 765 987 l 765 0 l 396 0 q 213 39 288 0 q 100 147 138 79 q 61 302 61 215 q 83 422 61 368 q 147 516 104 476 q 252 577 190 555 q 396 599 315 599 m 825 0 l 730 0 l 730 106 l 825 106 q 909 130 876 107 q 960 194 943 153 q 979 290 978 235 q 977 344 980 316 q 969 401 975 372 q 957 459 964 431 q 939 513 949 487 l 1065 513 q 1087 440 1077 478 q 1105 365 1098 403 q 1110 290 1112 326 q 1069 129 1109 193 q 965 32 1029 64 q 825 0 901 0 z "},"ԃ":{"ha":1197,"x_min":68,"x_max":1117,"o":"m 68 340 l 68 354 q 87 513 68 441 q 142 637 106 585 q 232 719 178 690 q 355 747 286 747 q 450 732 408 747 q 525 686 492 716 q 581 614 557 656 q 618 517 604 571 q 638 397 632 463 l 638 335 q 610 190 631 254 q 555 80 590 125 q 471 10 521 34 q 353 -14 420 -14 q 232 12 286 -14 q 142 85 179 38 q 87 198 106 133 q 68 340 68 262 m 194 354 l 194 340 q 205 242 194 288 q 238 164 216 197 q 297 111 261 130 q 385 92 334 92 q 487 119 447 92 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 582 484 q 527 582 551 554 q 468 625 503 609 q 386 642 433 642 q 298 619 334 642 q 239 557 262 597 q 205 465 216 517 q 194 354 194 413 m 550 234 l 550 1058 l 676 1058 l 676 234 q 690 158 675 191 q 730 107 704 125 q 792 89 756 89 q 876 109 840 90 q 937 163 912 127 q 976 248 962 198 q 989 359 989 297 q 980 495 991 427 q 948 632 968 564 l 1070 632 q 1103 497 1088 566 q 1116 359 1117 429 q 1088 194 1114 264 q 1017 78 1062 124 q 914 9 972 32 q 792 -14 857 -14 q 667 9 720 -16 q 584 90 614 35 q 550 234 554 145 z "},"Ԅ":{"ha":1101,"x_min":37,"x_max":1012,"o":"m 305 429 l 173 429 l 173 536 l 271 536 q 395 556 348 536 q 464 614 442 575 q 486 710 486 652 q 474 780 486 749 q 438 834 463 811 q 374 868 413 857 q 280 880 335 880 l 37 880 l 37 987 l 280 987 q 424 969 361 987 q 529 916 487 951 q 594 829 572 881 q 616 709 616 777 q 606 637 616 671 q 576 576 595 604 q 527 526 556 548 q 460 487 498 504 q 376 460 422 471 q 371 455 374 460 q 367 447 369 451 q 362 442 364 443 q 327 434 335 435 q 305 429 319 433 m 477 207 l 477 208 l 477 252 q 456 345 477 305 q 397 407 435 385 q 305 429 359 429 l 317 503 q 457 485 401 503 q 546 433 513 467 q 593 354 579 399 q 608 254 608 308 l 608 207 q 620 148 608 174 q 654 107 631 122 q 708 92 677 92 q 781 112 749 93 q 834 166 812 131 q 868 250 856 201 q 880 359 880 299 q 870 495 882 427 q 838 632 859 564 l 965 632 q 997 497 983 566 q 1010 359 1012 429 q 984 195 1009 265 q 918 79 960 125 q 821 9 876 33 q 707 -14 767 -14 q 588 7 638 -16 q 509 78 537 29 q 477 207 481 127 z "},"ԅ":{"ha":898,"x_min":33,"x_max":852,"o":"m 252 300 l 92 300 l 91 401 l 218 401 q 311 415 275 401 q 362 454 346 429 q 379 512 379 479 q 362 574 379 547 q 309 617 345 601 q 215 633 273 633 l 37 633 l 33 734 l 215 734 q 373 708 308 734 q 471 633 437 682 q 505 516 505 585 q 493 454 505 482 q 456 405 480 427 q 395 367 431 383 q 312 339 359 351 q 309 332 311 338 q 306 318 307 325 q 302 310 304 311 q 273 304 279 305 q 252 300 268 303 m 504 144 l 504 145 q 517 102 503 119 q 568 85 530 85 q 634 99 606 85 q 683 139 663 113 q 714 201 703 165 q 726 284 725 238 q 716 392 727 336 q 683 500 705 448 l 805 500 q 838 393 823 448 q 851 284 852 338 q 826 151 850 208 q 763 57 803 94 q 673 0 724 19 q 568 -18 623 -18 q 488 -10 522 -19 q 429 18 453 -1 q 393 70 406 38 q 378 145 380 101 l 378 197 q 362 252 378 229 q 314 288 346 275 q 235 300 282 300 l 259 372 q 407 350 353 372 q 482 288 460 327 q 504 197 504 248 l 504 144 z "},"Ԇ":{"ha":745,"x_min":56,"x_max":688,"o":"m 269 429 l 119 429 l 119 532 l 229 532 q 358 553 310 532 q 428 612 406 573 q 450 708 450 652 q 429 802 450 762 q 362 863 408 841 q 243 884 317 884 l 56 884 l 56 987 l 243 987 q 425 956 351 987 q 537 861 498 924 q 575 707 575 799 q 565 636 575 669 q 536 575 555 603 q 488 525 517 547 q 421 486 459 503 q 338 458 384 469 q 333 454 336 458 q 328 447 330 450 q 323 442 326 443 q 297 436 306 438 q 283 433 289 434 q 269 429 277 432 m 268 429 l 279 503 q 456 471 392 503 q 546 382 519 439 q 572 252 572 325 l 572 159 q 577 105 572 132 q 591 56 581 79 q 618 17 602 34 l 618 0 l 490 0 q 460 50 469 19 q 449 112 451 81 q 447 161 447 143 l 447 250 q 425 344 447 304 q 363 407 404 385 q 268 429 323 429 m 688 144 l 688 43 q 656 -87 688 -18 q 569 -202 625 -156 l 498 -153 q 534 -92 519 -123 q 557 -28 549 -61 q 565 41 565 5 l 565 144 l 688 144 z "},"ԇ":{"ha":700,"x_min":82,"x_max":668,"o":"m 312 299 l 132 299 l 132 401 l 275 401 q 370 414 334 401 q 422 453 406 428 q 438 512 438 478 q 422 574 438 547 q 370 617 406 602 q 275 632 334 632 l 82 632 l 83 734 l 275 734 q 398 719 345 734 q 489 676 452 705 q 545 608 526 648 q 564 516 564 568 q 552 454 564 481 q 515 404 539 426 q 454 366 490 382 q 370 338 418 349 q 365 325 368 338 q 359 310 361 311 q 337 305 344 307 q 327 302 331 303 q 312 299 322 300 m 295 299 l 320 372 q 467 347 414 372 q 542 280 520 323 q 564 182 564 237 l 564 117 q 568 80 564 100 q 580 42 571 60 q 604 13 589 24 l 604 0 l 475 0 q 449 36 456 12 q 440 83 441 60 q 438 117 438 106 l 438 182 q 422 244 438 218 q 374 285 406 271 q 295 299 342 299 m 668 134 l 668 33 q 637 -98 668 -29 q 550 -213 606 -167 l 478 -163 q 515 -103 500 -134 q 537 -39 530 -72 q 545 31 545 -6 l 545 134 l 668 134 z "},"Ԉ":{"ha":1347,"x_min":47,"x_max":1292,"o":"m 267 987 l 397 987 l 375 504 q 359 318 370 399 q 328 176 348 236 q 275 77 307 116 q 195 19 242 38 q 82 0 148 0 l 47 0 l 47 106 l 74 109 q 139 126 112 111 q 186 170 167 140 q 218 248 205 200 q 237 364 230 295 q 248 525 244 433 l 267 987 m 747 987 l 747 880 l 314 880 l 314 987 l 747 987 m 722 235 l 722 987 l 852 987 l 852 235 q 860 177 852 203 q 883 132 868 151 q 919 102 898 113 q 966 92 940 92 q 1048 111 1013 92 q 1108 165 1084 130 q 1146 249 1133 200 q 1160 359 1159 298 q 1150 495 1161 427 q 1118 632 1139 564 l 1245 632 q 1278 497 1263 566 q 1291 359 1292 429 q 1263 194 1289 264 q 1192 78 1236 124 q 1089 9 1147 32 q 966 -14 1031 -14 q 838 11 892 -14 q 752 91 783 36 q 722 235 722 146 z "},"ԉ":{"ha":1122,"x_min":43,"x_max":1081,"o":"m 214 734 l 340 734 l 321 380 q 306 235 316 298 q 277 127 296 172 q 232 55 259 83 q 168 13 205 26 q 82 0 131 0 l 43 0 l 43 111 l 71 113 q 120 126 99 115 q 155 160 140 138 q 178 219 169 183 q 193 304 187 255 q 201 420 198 354 l 214 734 m 576 734 l 576 630 l 242 630 l 242 734 l 576 734 m 554 234 l 554 734 l 680 734 l 680 234 q 688 175 680 201 q 711 129 696 148 q 747 99 726 109 q 795 89 768 89 q 862 106 833 89 q 911 154 891 123 q 942 229 931 185 q 954 328 953 273 q 944 458 955 393 q 913 587 932 523 l 1034 587 q 1066 459 1052 524 q 1080 328 1081 394 q 1055 178 1078 242 q 992 71 1031 113 q 902 7 953 28 q 795 -14 851 -14 q 696 0 741 -14 q 621 43 652 14 q 571 120 589 73 q 554 234 554 168 z "},"Ԋ":{"ha":1385,"x_min":115,"x_max":1292,"o":"m 226 542 l 741 542 l 741 435 l 226 435 l 226 542 m 115 987 l 245 987 l 245 0 l 115 0 l 115 987 m 722 987 l 852 987 l 852 235 q 866 161 852 193 q 905 110 880 128 q 966 92 931 92 q 1048 112 1013 93 q 1108 165 1084 130 q 1146 249 1133 200 q 1160 359 1160 298 q 1150 495 1162 427 q 1118 632 1139 564 l 1244 632 q 1277 497 1263 566 q 1291 359 1292 429 q 1263 194 1289 264 q 1192 78 1236 124 q 1089 9 1147 32 q 966 -14 1031 -14 q 840 9 893 -16 q 756 90 786 35 q 722 235 726 146 l 722 987 z "},"ԋ":{"ha":1152,"x_min":98,"x_max":1094,"o":"m 584 415 l 584 313 l 197 313 l 197 415 l 584 415 m 224 734 l 224 0 l 98 0 l 98 734 l 224 734 m 566 234 l 566 734 l 692 734 l 692 234 q 700 175 692 201 q 723 129 708 148 q 759 99 738 110 q 807 89 781 89 q 874 106 845 90 q 924 154 904 123 q 955 229 944 185 q 966 328 966 273 q 956 458 968 393 q 925 587 945 523 l 1046 587 q 1079 459 1064 524 q 1093 328 1094 394 q 1068 178 1091 242 q 1005 71 1045 113 q 915 7 966 28 q 807 -14 864 -14 q 710 -1 753 -15 q 635 42 667 12 q 587 120 604 72 q 566 234 570 168 z "},"Ԍ":{"ha":862,"x_min":80,"x_max":804,"o":"m 473 -14 q 313 17 385 -14 q 189 105 241 49 q 108 238 136 162 q 80 405 80 315 l 80 583 q 108 749 80 673 q 189 882 136 825 q 313 970 241 939 q 473 1002 385 1002 q 610 987 551 1002 q 713 943 669 972 l 673 848 q 581 883 630 871 q 473 895 532 895 q 362 870 411 895 q 280 803 314 846 q 229 704 246 760 q 211 584 211 648 l 211 405 q 229 284 211 340 q 280 184 246 227 q 362 117 314 141 q 473 92 411 92 q 581 117 536 93 q 648 185 625 141 q 672 289 671 229 q 664 411 673 349 q 638 533 654 473 l 765 533 q 791 412 778 473 q 803 289 804 351 q 755 119 802 186 q 635 19 709 52 q 473 -14 560 -14 z "},"ԍ":{"ha":715,"x_min":69,"x_max":656,"o":"m 402 89 q 478 104 450 90 q 517 143 505 118 q 530 204 529 169 q 527 284 530 242 q 516 364 524 326 l 637 364 q 650 284 644 325 q 655 204 656 244 q 621 82 654 130 q 531 9 587 33 q 402 -14 474 -14 q 260 15 322 -14 q 155 96 198 45 q 91 213 113 147 q 69 353 69 279 l 69 381 q 90 520 69 454 q 152 637 111 587 q 252 718 193 688 q 388 747 311 747 q 501 736 453 747 q 578 703 549 724 l 549 606 q 476 634 517 624 q 388 644 435 644 q 300 621 336 644 q 240 560 263 598 q 205 475 216 522 q 195 381 195 428 l 195 353 q 207 258 195 305 q 243 173 218 212 q 308 112 268 135 q 402 89 347 89 z "},"Ԏ":{"ha":986,"x_min":24,"x_max":917,"o":"m 806 987 l 806 880 l 24 880 l 24 987 l 806 987 m 347 235 l 347 987 l 477 987 l 477 235 q 485 177 477 203 q 507 132 492 151 q 543 103 522 113 q 591 92 564 92 q 673 112 637 93 q 733 165 709 130 q 770 249 758 200 q 785 359 783 298 q 774 495 786 427 q 743 632 763 564 l 869 632 q 902 497 888 566 q 915 359 917 429 q 887 194 913 264 q 817 78 861 124 q 714 9 772 32 q 591 -14 656 -14 q 464 9 517 -16 q 381 90 411 35 q 347 235 351 146 z "},"ԏ":{"ha":890,"x_min":47,"x_max":819,"o":"m 663 734 l 663 632 l 47 632 l 47 734 l 663 734 m 291 234 l 291 734 l 416 734 l 416 234 q 430 158 416 191 q 471 107 444 125 q 533 89 497 89 q 600 103 571 90 q 650 143 629 117 q 681 207 670 170 q 692 290 692 243 q 682 400 694 343 q 651 510 671 456 l 772 510 q 804 401 789 456 q 818 290 819 345 q 793 156 817 213 q 730 61 770 98 q 640 4 691 23 q 533 -14 589 -14 q 435 -1 479 -15 q 361 42 392 12 q 312 120 330 72 q 291 234 294 168 z "},"Ԑ":{"ha":937,"x_min":102,"x_max":867,"o":"m 479 532 l 609 532 l 609 450 l 484 450 q 376 439 422 450 q 297 407 329 429 q 250 352 266 385 q 233 273 233 318 q 251 201 233 234 q 301 144 268 168 q 383 106 334 119 q 493 92 431 92 q 621 117 566 92 q 707 183 676 142 q 737 274 737 224 l 867 274 q 836 143 867 198 q 750 54 804 89 q 629 2 696 19 q 493 -14 562 -14 q 336 5 408 -14 q 213 61 265 24 q 131 152 160 98 q 102 275 102 206 q 127 385 102 337 q 201 465 153 433 q 319 515 249 498 q 479 532 389 532 m 609 474 l 479 474 q 331 493 397 474 q 217 547 264 513 q 143 625 169 581 q 117 721 117 670 q 144 842 117 790 q 220 930 170 895 q 338 984 269 966 q 493 1002 408 1002 q 673 968 591 1002 q 805 874 755 935 q 854 728 854 812 l 724 728 q 693 814 724 777 q 610 873 662 852 q 493 895 557 895 q 354 871 408 895 q 274 809 300 848 q 248 723 248 770 q 261 656 248 686 q 303 604 275 626 q 376 569 332 581 q 484 557 421 557 l 609 557 l 609 474 z "},"Ԓ":{"ha":1043,"x_min":33,"x_max":985,"o":"m 749 987 l 749 880 l 298 880 l 298 987 l 749 987 m 862 987 l 862 0 l 731 0 l 731 987 l 862 987 m 253 987 l 383 987 l 361 504 q 345 318 356 399 q 313 176 334 236 q 260 77 293 116 q 181 19 228 38 q 68 0 134 0 l 33 0 l 33 106 l 60 109 q 125 126 98 111 q 172 170 153 140 q 203 248 191 200 q 223 364 216 295 q 234 525 230 433 l 253 987 m 859 104 l 985 104 l 985 -60 q 959 -189 985 -136 q 884 -269 933 -242 q 767 -296 836 -296 q 728 -294 746 -296 q 691 -285 711 -292 l 701 -178 q 734 -184 711 -182 q 767 -186 758 -186 q 817 -172 796 -186 q 848 -130 838 -158 q 859 -60 859 -102 l 859 104 z "},"ԓ":{"ha":859,"x_min":30,"x_max":822,"o":"m 586 734 l 586 630 l 231 630 l 231 734 l 586 734 m 696 734 l 696 0 l 571 0 l 571 734 l 696 734 m 201 734 l 327 734 l 308 380 q 293 235 303 298 q 264 127 282 172 q 219 55 246 83 q 155 13 193 26 q 69 0 118 0 l 30 0 l 30 111 l 57 113 q 107 126 86 115 q 142 160 127 138 q 165 219 156 183 q 179 304 174 255 q 187 420 184 354 l 201 734 m 696 104 l 822 104 l 822 -60 q 796 -189 822 -136 q 721 -269 770 -242 q 604 -296 672 -296 q 565 -294 583 -296 q 528 -285 547 -292 l 537 -178 q 571 -184 547 -182 q 604 -186 594 -186 q 653 -172 633 -186 q 685 -130 674 -158 q 696 -60 696 -102 l 696 104 z "}," ":{"ha":708,"x_min":0,"x_max":0,"o":""}," ":{"ha":1417,"x_min":0,"x_max":0,"o":""}," ":{"ha":708,"x_min":0,"x_max":0,"o":""}," ":{"ha":1417,"x_min":0,"x_max":0,"o":""}," ":{"ha":473,"x_min":0,"x_max":0,"o":""}," ":{"ha":354,"x_min":0,"x_max":0,"o":""}," ":{"ha":236,"x_min":0,"x_max":0,"o":""}," ":{"ha":781,"x_min":0,"x_max":0,"o":""}," ":{"ha":380,"x_min":0,"x_max":0,"o":""}," ":{"ha":283,"x_min":0,"x_max":0,"o":""}," ":{"ha":142,"x_min":0,"x_max":0,"o":""},"​":{"ha":0,"x_min":0,"x_max":0,"o":""},"‐":{"ha":382,"x_min":26,"x_max":357,"o":"m 357 471 l 357 368 l 26 368 l 26 471 l 357 471 z "},"‑":{"ha":382,"x_min":26,"x_max":357,"o":"m 357 471 l 357 368 l 26 368 l 26 471 l 357 471 z "},"–":{"ha":911,"x_min":110,"x_max":789,"o":"m 789 545 l 789 441 l 110 441 l 110 545 l 789 545 z "},"—":{"ha":1084,"x_min":98,"x_max":1004,"o":"m 1004 545 l 1004 441 l 98 441 l 98 545 l 1004 545 z "},"‗":{"ha":633,"x_min":9,"x_max":630,"o":"m 630 -172 l 630 -275 l 9 -275 l 9 -172 l 630 -172 m 630 0 l 630 -103 l 9 -103 l 9 0 l 630 0 z "},"‘":{"ha":278,"x_min":66,"x_max":255,"o":"m 66 728 l 66 810 q 80 896 66 851 q 120 983 94 941 q 184 1055 146 1025 l 255 1006 q 207 914 224 961 q 190 812 190 867 l 190 728 l 66 728 z "},"’":{"ha":278,"x_min":33,"x_max":222,"o":"m 222 1042 l 222 955 q 209 869 222 914 q 168 782 195 824 q 104 709 142 741 l 33 759 q 81 851 64 804 q 98 953 98 898 l 98 1042 l 222 1042 z "},"‚":{"ha":277,"x_min":24,"x_max":214,"o":"m 214 123 l 214 54 q 200 -32 214 13 q 160 -119 186 -77 q 96 -192 134 -161 l 24 -143 q 73 -51 56 -98 q 89 52 89 -3 l 89 123 l 214 123 z "},"‛":{"ha":278,"x_min":54,"x_max":243,"o":"m 54 1042 l 178 1042 l 178 953 q 195 851 178 898 q 243 759 212 804 l 172 709 q 108 782 135 741 q 67 869 81 824 q 54 955 54 914 l 54 1042 z "},"“":{"ha":491,"x_min":71,"x_max":474,"o":"m 71 728 l 71 810 q 85 896 71 851 q 125 983 99 941 q 189 1055 152 1025 l 260 1006 q 212 914 229 961 q 195 812 195 867 l 195 728 l 71 728 m 285 728 l 285 810 q 299 896 285 851 q 339 983 313 941 q 403 1055 366 1025 l 474 1006 q 426 914 443 961 q 409 812 409 867 l 409 728 l 285 728 z "},"”":{"ha":496,"x_min":41,"x_max":439,"o":"m 231 1042 l 231 955 q 217 869 231 914 q 176 782 203 824 q 113 709 150 741 l 41 759 q 89 851 73 804 q 106 953 106 898 l 106 1042 l 231 1042 m 439 1042 l 439 955 q 425 869 439 914 q 385 782 411 824 q 321 709 358 741 l 249 759 q 297 851 281 804 q 314 953 314 898 l 314 1042 l 439 1042 z "},"„":{"ha":479,"x_min":24,"x_max":415,"o":"m 214 167 l 214 54 q 200 -37 214 10 q 160 -129 186 -85 q 96 -205 134 -172 l 24 -155 q 73 -57 56 -107 q 89 52 89 -7 l 89 167 l 214 167 m 415 167 l 415 54 q 401 -37 415 10 q 361 -129 387 -85 q 297 -205 334 -172 l 225 -155 q 273 -57 257 -107 q 290 52 290 -7 l 290 167 l 415 167 z "},"†":{"ha":766,"x_min":47,"x_max":719,"o":"m 445 987 l 445 0 l 319 0 l 319 987 l 445 987 m 719 734 l 719 630 l 47 630 l 47 734 l 719 734 z "},"‡":{"ha":792,"x_min":59,"x_max":730,"o":"m 454 987 l 454 -282 l 329 -282 l 329 987 l 454 987 m 730 734 l 730 630 l 59 630 l 59 734 l 730 734 m 730 103 l 730 0 l 59 0 l 59 103 l 730 103 z "},"•":{"ha":469,"x_min":94,"x_max":371,"o":"m 94 496 l 94 524 q 131 621 94 583 q 232 659 168 659 q 334 621 296 659 q 371 524 371 583 l 371 496 q 334 401 371 439 q 233 363 297 363 q 132 401 169 363 q 94 496 94 439 z "},"‥":{"ha":654,"x_min":100,"x_max":553,"o":"m 100 66 q 120 120 100 98 q 178 142 140 142 q 236 120 216 142 q 256 66 256 98 q 236 14 256 35 q 178 -8 216 -8 q 120 14 140 -8 q 100 66 100 35 m 397 66 q 417 120 397 98 q 475 142 437 142 q 533 120 513 142 q 553 66 553 98 q 533 14 553 35 q 475 -8 513 -8 q 417 14 437 -8 q 397 66 397 35 z "},"…":{"ha":929,"x_min":100,"x_max":834,"o":"m 100 66 q 120 120 100 98 q 178 142 140 142 q 236 120 216 142 q 256 66 256 98 q 236 14 256 35 q 178 -8 216 -8 q 120 14 140 -8 q 100 66 100 35 m 397 66 q 417 120 397 98 q 475 142 437 142 q 533 120 513 142 q 553 66 553 98 q 533 14 553 35 q 475 -8 513 -8 q 417 14 437 -8 q 397 66 397 35 m 678 66 q 698 120 678 98 q 756 142 718 142 q 814 120 794 142 q 834 66 834 98 q 814 14 834 35 q 756 -8 794 -8 q 698 14 718 -8 q 678 66 678 35 z "},"‧":{"ha":260,"x_min":56,"x_max":204,"o":"m 56 420 q 75 471 56 450 q 130 492 94 492 q 185 471 166 492 q 204 420 204 450 q 185 369 204 390 q 130 349 166 349 q 75 369 94 349 q 56 420 56 390 z "},"‰":{"ha":1331,"x_min":46,"x_max":1274,"o":"m 46 745 l 46 798 q 71 900 46 854 q 140 974 95 946 q 248 1002 186 1002 q 357 974 312 1002 q 427 900 403 946 q 451 798 451 854 l 451 745 q 427 644 451 690 q 358 570 403 598 q 250 543 313 543 q 141 570 186 543 q 71 644 96 598 q 46 745 46 690 m 140 798 l 140 745 q 152 686 140 714 q 189 641 164 659 q 250 624 213 624 q 310 641 286 624 q 346 686 334 659 q 357 745 357 714 l 357 798 q 346 858 357 829 q 310 903 334 886 q 248 920 286 920 q 188 903 212 920 q 152 858 164 886 q 140 798 140 829 m 558 189 l 558 242 q 583 344 558 298 q 652 418 607 390 q 760 446 698 446 q 862 418 820 446 q 927 344 905 390 q 950 242 950 298 l 950 189 q 927 87 950 134 q 863 14 905 41 q 762 -14 821 -14 q 653 14 699 -14 q 583 87 608 41 q 558 189 558 134 m 652 242 l 652 189 q 664 130 652 158 q 701 84 676 102 q 762 67 725 67 q 822 84 798 67 q 858 130 846 102 q 869 189 869 157 l 869 242 q 858 302 869 274 q 822 347 846 330 q 760 364 798 364 q 700 347 724 364 q 664 302 676 330 q 652 242 652 274 m 882 189 l 882 242 q 905 344 882 298 q 970 418 928 390 q 1072 446 1013 446 q 1180 418 1135 446 q 1250 344 1225 390 q 1274 242 1274 298 l 1274 189 q 1250 87 1274 134 q 1181 14 1226 41 q 1073 -14 1136 -14 q 971 14 1014 -14 q 905 87 928 41 q 882 189 882 134 m 963 242 l 963 189 q 975 130 963 158 q 1011 84 987 102 q 1072 67 1036 67 q 1133 84 1109 67 q 1168 130 1156 102 q 1180 189 1180 157 l 1180 242 q 1168 302 1180 274 q 1132 347 1156 330 q 1071 364 1108 364 q 1011 347 1035 364 q 975 302 987 330 q 963 242 963 274 m 774 847 l 292 75 l 220 120 l 703 892 l 774 847 z "},"‹":{"ha":417,"x_min":73,"x_max":370,"o":"m 370 644 l 193 371 l 73 372 l 73 380 l 273 644 l 370 644 m 193 377 l 370 104 l 273 104 l 73 368 l 73 376 l 193 377 z "},"›":{"ha":417,"x_min":61,"x_max":357,"o":"m 61 104 l 238 376 l 357 376 l 357 367 l 157 104 l 61 104 m 61 644 l 157 644 l 357 380 l 357 371 l 238 370 l 61 644 z "},"⁄":{"ha":631,"x_min":41,"x_max":593,"o":"m 593 847 l 111 75 l 41 120 l 523 892 l 593 847 z "},"⁰":{"ha":509,"x_min":55,"x_max":454,"o":"m 454 767 l 454 673 q 430 545 454 595 q 360 470 405 494 q 256 445 315 445 q 150 470 195 445 q 80 545 105 494 q 55 673 55 595 l 55 767 q 80 895 55 844 q 150 970 104 945 q 254 995 195 995 q 359 970 315 995 q 429 895 404 945 q 454 767 454 844 m 347 664 l 347 777 q 336 851 347 822 q 305 893 326 880 q 254 907 284 907 q 204 893 224 907 q 172 851 183 880 q 161 777 161 822 l 161 664 q 172 589 161 618 q 204 546 183 560 q 256 532 226 532 q 306 546 286 532 q 337 589 326 560 q 347 664 347 618 z "},"⁴":{"ha":509,"x_min":37,"x_max":475,"o":"m 475 656 l 475 568 l 41 568 l 37 637 l 293 987 l 377 987 l 284 832 l 144 656 l 475 656 m 401 987 l 401 452 l 295 452 l 295 987 l 401 987 z "},"⁵":{"ha":509,"x_min":62,"x_max":461,"o":"m 161 694 l 77 715 l 110 987 l 435 987 l 435 899 l 198 899 l 182 783 q 221 795 195 788 q 277 803 246 803 q 376 782 335 803 q 439 722 417 761 q 461 627 461 682 q 439 537 461 579 q 374 470 418 496 q 262 445 330 445 q 167 463 212 445 q 94 515 122 481 q 62 599 65 550 l 168 599 q 197 548 171 564 q 262 532 222 532 q 333 559 311 532 q 354 629 354 587 q 328 697 354 671 q 252 724 301 724 q 195 714 214 724 q 161 694 176 705 z "},"⁶":{"ha":509,"x_min":58,"x_max":464,"o":"m 360 994 l 375 994 l 375 905 l 368 905 q 256 886 301 905 q 188 827 210 867 q 165 726 165 787 l 165 647 q 178 583 165 609 q 213 545 191 557 q 264 532 235 532 q 313 545 292 532 q 346 579 334 557 q 357 628 357 601 q 333 695 357 670 q 263 721 309 721 q 210 710 234 721 q 172 681 186 699 q 157 644 158 663 l 128 676 q 150 735 130 705 q 207 787 170 766 q 292 808 243 808 q 388 784 349 808 q 445 720 426 760 q 464 629 464 679 q 440 535 464 576 q 371 469 416 493 q 266 445 327 445 q 156 471 202 445 q 84 545 109 497 q 58 658 58 593 l 58 695 q 78 821 58 766 q 135 915 97 876 q 230 974 174 954 q 360 994 286 994 z "},"⁷":{"ha":509,"x_min":40,"x_max":460,"o":"m 460 987 l 460 926 l 222 452 l 110 452 l 347 900 l 40 900 l 40 987 l 460 987 z "},"⁸":{"ha":509,"x_min":54,"x_max":455,"o":"m 455 599 q 429 514 455 548 q 357 462 403 479 q 255 445 312 445 q 153 462 198 445 q 80 514 107 479 q 54 599 54 548 q 80 678 54 645 q 151 730 106 711 q 254 748 197 748 q 357 730 312 748 q 429 678 403 711 q 455 599 455 645 m 349 607 q 337 647 349 631 q 303 673 325 664 q 254 682 282 682 q 205 673 226 682 q 172 647 184 664 q 161 607 161 631 q 172 567 161 584 q 205 541 184 550 q 255 532 227 532 q 304 541 283 532 q 337 567 326 550 q 349 607 349 584 m 442 846 q 418 772 442 804 q 352 723 394 741 q 255 706 310 706 q 158 723 200 706 q 91 772 115 741 q 67 846 67 804 q 91 927 67 894 q 158 978 115 960 q 254 995 200 995 q 351 978 309 995 q 418 927 393 960 q 442 846 442 894 m 335 839 q 325 875 335 860 q 297 899 315 890 q 254 908 279 908 q 195 890 217 908 q 174 839 174 871 q 183 803 174 819 q 212 779 193 787 q 255 770 230 770 q 314 789 292 770 q 335 839 335 808 z "},"⁹":{"ha":509,"x_min":50,"x_max":448,"o":"m 142 534 l 151 534 q 261 551 219 534 q 323 606 303 569 q 342 698 342 642 l 342 797 q 330 859 342 834 q 296 895 317 883 q 248 907 275 907 q 199 893 220 907 q 167 856 178 879 q 156 804 156 832 q 166 755 156 777 q 198 721 177 734 q 250 708 219 708 q 302 720 280 708 q 337 749 325 731 q 351 784 350 766 l 382 753 q 361 693 381 722 q 306 644 340 663 q 226 625 271 625 q 130 648 169 625 q 70 711 90 671 q 50 804 50 751 q 74 900 50 857 q 143 969 98 943 q 248 995 187 995 q 356 969 311 995 q 425 894 401 943 q 448 777 448 845 l 448 742 q 431 616 448 671 q 376 524 413 562 q 284 467 340 486 q 152 448 229 448 l 142 448 l 142 534 z "},"⁺":{"ha":559,"x_min":54,"x_max":505,"o":"m 505 727 l 505 639 l 54 639 l 54 727 l 505 727 m 324 922 l 324 444 l 235 444 l 235 922 l 324 922 z "},"⁻":{"ha":515,"x_min":54,"x_max":461,"o":"m 461 730 l 461 642 l 54 642 l 54 730 l 461 730 z "},"⁼":{"ha":515,"x_min":54,"x_max":461,"o":"m 461 646 l 461 557 l 54 557 l 54 646 l 461 646 m 461 806 l 461 718 l 54 718 l 54 806 l 461 806 z "},"⁽":{"ha":337,"x_min":57,"x_max":283,"o":"m 57 676 l 57 688 q 89 884 57 801 q 166 1020 121 967 q 248 1094 211 1073 l 283 1015 q 229 948 256 990 q 184 842 202 905 q 167 688 167 778 l 167 675 q 177 551 167 604 q 204 459 187 498 q 242 393 221 420 q 283 345 262 366 l 248 271 q 187 319 220 286 q 124 404 154 353 q 76 523 95 455 q 57 676 57 591 z "},"⁾":{"ha":337,"x_min":54,"x_max":280,"o":"m 280 688 l 280 676 q 248 479 280 563 q 171 344 216 396 q 89 271 126 292 l 54 345 q 109 413 82 372 q 153 516 135 453 q 170 675 170 580 l 170 688 q 160 808 170 755 q 133 900 150 861 q 95 968 116 939 q 54 1015 75 996 l 89 1094 q 150 1044 117 1078 q 212 960 182 1010 q 261 841 242 909 q 280 688 280 772 z "},"ⁿ":{"ha":587,"x_min":83,"x_max":516,"o":"m 198 868 l 198 441 l 83 441 l 83 984 l 170 984 l 198 868 m 182 731 l 151 730 q 164 836 151 787 q 202 919 177 884 q 261 975 227 955 q 340 994 296 994 q 433 973 393 994 q 494 905 473 951 q 516 786 516 859 l 516 441 l 401 441 l 401 764 q 389 843 401 814 q 354 884 376 871 q 302 897 332 897 q 234 874 261 897 q 195 815 208 852 q 182 731 182 778 z "},"₀":{"ha":509,"x_min":55,"x_max":454,"o":"m 454 65 l 454 -29 q 430 -157 454 -106 q 360 -232 405 -208 q 256 -257 315 -257 q 150 -232 195 -257 q 80 -157 105 -208 q 55 -29 55 -106 l 55 65 q 80 193 55 142 q 150 268 104 243 q 254 293 195 293 q 359 268 315 293 q 429 193 404 243 q 454 65 454 142 m 347 -38 l 347 75 q 336 149 347 120 q 305 192 326 178 q 254 205 284 205 q 204 192 224 205 q 172 149 183 178 q 161 75 161 120 l 161 -38 q 172 -113 161 -83 q 204 -156 183 -142 q 256 -170 226 -170 q 306 -156 286 -170 q 337 -113 326 -142 q 347 -38 347 -83 z "},"₁":{"ha":509,"x_min":83,"x_max":336,"o":"m 336 286 l 336 -249 l 230 -249 l 230 159 l 83 120 l 83 208 l 323 286 l 336 286 z "},"₂":{"ha":509,"x_min":45,"x_max":463,"o":"m 463 -162 l 463 -249 l 58 -249 l 58 -176 l 253 8 q 301 59 283 37 q 327 99 319 81 q 334 132 334 117 q 313 186 334 165 q 251 207 291 207 q 176 181 200 207 q 152 117 152 155 l 45 117 q 69 205 45 165 q 139 270 94 245 q 248 294 184 294 q 353 274 309 294 q 419 219 396 254 q 442 134 442 183 q 426 66 442 98 q 381 4 410 35 q 312 -63 352 -27 l 193 -162 l 463 -162 z "},"₃":{"ha":509,"x_min":43,"x_max":452,"o":"m 180 62 l 237 62 q 292 72 271 62 q 325 98 314 81 q 336 136 336 115 q 315 186 336 166 q 246 207 293 207 q 182 190 208 207 q 157 144 157 173 l 50 144 q 76 223 50 190 q 146 275 102 257 q 244 294 190 294 q 348 276 303 294 q 418 225 393 259 q 443 142 443 191 q 421 76 443 106 q 357 27 399 45 q 256 9 315 9 l 180 9 l 180 62 m 180 -16 l 180 37 l 256 37 q 367 21 323 37 q 431 -26 410 5 q 452 -100 452 -56 q 425 -184 452 -149 q 351 -238 398 -220 q 245 -256 304 -256 q 148 -240 194 -256 q 72 -188 101 -223 q 43 -98 43 -153 l 149 -98 q 176 -149 149 -128 q 248 -170 203 -170 q 320 -149 296 -170 q 345 -94 345 -127 q 332 -48 345 -66 q 295 -23 319 -31 q 237 -16 271 -16 l 180 -16 z "},"₄":{"ha":509,"x_min":37,"x_max":475,"o":"m 475 -45 l 475 -134 l 41 -134 l 37 -64 l 293 286 l 377 286 l 284 131 l 144 -45 l 475 -45 m 401 286 l 401 -249 l 295 -249 l 295 286 l 401 286 z "},"₅":{"ha":509,"x_min":62,"x_max":461,"o":"m 161 -7 l 77 14 l 110 286 l 435 286 l 435 197 l 198 197 l 182 81 q 221 94 195 87 q 277 102 246 102 q 376 81 335 102 q 439 20 417 60 q 461 -74 461 -19 q 439 -164 461 -122 q 374 -231 418 -205 q 262 -256 330 -256 q 167 -238 212 -256 q 94 -186 122 -220 q 62 -102 65 -151 l 168 -102 q 197 -153 171 -137 q 262 -170 222 -170 q 333 -142 311 -170 q 354 -73 354 -114 q 328 -4 354 -31 q 252 22 301 22 q 195 13 214 22 q 161 -7 176 3 z "},"₆":{"ha":509,"x_min":58,"x_max":464,"o":"m 360 293 l 375 293 l 375 204 l 368 204 q 256 185 301 204 q 188 125 210 165 q 165 24 165 85 l 165 -54 q 178 -118 165 -92 q 213 -157 191 -144 q 264 -170 235 -170 q 313 -157 292 -170 q 346 -122 334 -144 q 357 -73 357 -100 q 333 -6 357 -31 q 263 20 309 20 q 210 8 234 20 q 172 -20 186 -3 q 157 -57 158 -38 l 128 -25 q 150 34 130 4 q 207 85 170 64 q 292 106 243 106 q 388 83 349 106 q 445 18 426 59 q 464 -73 464 -22 q 440 -166 464 -125 q 371 -232 416 -208 q 266 -256 327 -256 q 156 -230 202 -256 q 84 -156 109 -204 q 58 -43 58 -109 l 58 -6 q 78 120 58 64 q 135 214 97 175 q 230 273 174 252 q 360 293 286 293 z "},"₇":{"ha":509,"x_min":40,"x_max":460,"o":"m 460 286 l 460 225 l 222 -249 l 110 -249 l 347 199 l 40 199 l 40 286 l 460 286 z "},"₈":{"ha":509,"x_min":54,"x_max":455,"o":"m 455 -102 q 429 -188 455 -153 q 357 -239 403 -222 q 255 -256 312 -256 q 153 -239 198 -256 q 80 -188 107 -222 q 54 -102 54 -153 q 80 -23 54 -56 q 151 28 106 10 q 254 47 197 47 q 357 28 312 47 q 429 -23 403 10 q 455 -102 455 -56 m 349 -94 q 337 -54 349 -71 q 303 -28 325 -37 q 254 -19 282 -19 q 205 -28 226 -19 q 172 -54 184 -37 q 161 -94 161 -71 q 172 -134 161 -117 q 205 -160 184 -151 q 255 -170 227 -170 q 304 -160 283 -170 q 337 -134 326 -151 q 349 -94 349 -117 m 442 144 q 418 71 442 102 q 352 22 394 39 q 255 5 310 5 q 158 22 200 5 q 91 71 115 39 q 67 144 67 102 q 91 226 67 193 q 158 276 115 259 q 254 294 200 294 q 351 276 309 294 q 418 226 393 259 q 442 144 442 193 m 335 138 q 325 174 335 159 q 297 198 315 189 q 254 207 279 207 q 195 189 217 207 q 174 138 174 170 q 183 102 174 117 q 212 77 193 86 q 255 68 230 68 q 314 87 292 68 q 335 138 335 106 z "},"₉":{"ha":509,"x_min":50,"x_max":448,"o":"m 142 -168 l 151 -168 q 261 -150 219 -168 q 323 -96 303 -132 q 342 -3 342 -59 l 342 96 q 330 157 342 133 q 296 194 317 182 q 248 206 275 206 q 199 192 220 206 q 167 154 178 178 q 156 103 156 131 q 166 54 156 76 q 198 20 177 33 q 250 7 219 7 q 302 18 280 7 q 337 47 325 30 q 351 83 350 65 l 382 52 q 361 -8 381 21 q 306 -57 340 -38 q 226 -76 271 -76 q 130 -53 169 -76 q 70 10 90 -31 q 50 103 50 50 q 74 198 50 155 q 143 268 98 241 q 248 294 187 294 q 356 268 311 294 q 425 193 401 241 q 448 75 448 144 l 448 41 q 431 -85 448 -31 q 376 -177 413 -140 q 284 -234 340 -215 q 152 -254 229 -254 l 142 -254 l 142 -168 z "},"₊":{"ha":559,"x_min":54,"x_max":505,"o":"m 505 50 l 505 -38 l 54 -38 l 54 50 l 505 50 m 324 245 l 324 -233 l 235 -233 l 235 245 l 324 245 z "},"₋":{"ha":515,"x_min":54,"x_max":461,"o":"m 461 53 l 461 -35 l 54 -35 l 54 53 l 461 53 z "},"₌":{"ha":515,"x_min":54,"x_max":461,"o":"m 461 -31 l 461 -119 l 54 -119 l 54 -31 l 461 -31 m 461 130 l 461 41 l 54 41 l 54 130 l 461 130 z "},"₍":{"ha":337,"x_min":57,"x_max":283,"o":"m 57 20 l 57 32 q 89 218 57 139 q 166 347 121 297 q 248 416 211 397 l 283 338 q 229 275 256 315 q 184 176 202 235 q 167 33 167 117 l 167 20 q 184 -129 167 -70 q 229 -225 202 -188 q 283 -289 256 -263 l 248 -364 q 187 -317 220 -349 q 124 -237 154 -286 q 76 -125 95 -189 q 57 20 57 -60 z "},"₎":{"ha":337,"x_min":54,"x_max":280,"o":"m 280 39 l 280 28 q 248 -162 280 -81 q 171 -293 216 -242 q 89 -363 126 -343 l 54 -288 q 109 -223 82 -262 q 153 -125 135 -185 q 170 27 170 -64 l 170 40 q 153 180 170 122 q 109 277 135 238 q 54 338 82 315 l 89 416 q 150 371 117 402 q 213 292 183 340 q 261 181 242 245 q 280 39 280 118 z "},"₤":{"ha":808,"x_min":62,"x_max":765,"o":"m 765 0 l 64 0 l 64 106 l 765 106 l 765 0 m 295 705 l 310 273 q 292 154 311 209 q 235 71 273 98 l 117 106 q 154 141 140 113 q 174 205 168 169 q 180 272 180 242 l 165 705 q 204 864 165 798 q 312 966 243 930 q 466 1001 380 1001 q 617 968 555 1001 q 713 875 680 935 q 746 737 746 816 l 616 737 q 593 829 616 794 q 534 879 570 863 q 455 895 497 895 q 374 872 410 895 q 316 808 338 850 q 295 705 295 766 m 536 581 l 536 496 l 62 496 l 62 581 l 536 581 m 536 404 l 536 319 l 62 319 l 62 404 l 536 404 z "},"₦":{"ha":1100,"x_min":21,"x_max":1079,"o":"m 1079 638 l 1079 535 l 21 535 l 21 638 l 1079 638 m 1079 435 l 1079 332 l 21 332 l 21 435 l 1079 435 m 927 987 l 927 0 l 796 0 l 299 762 l 299 0 l 168 0 l 168 987 l 299 987 l 798 224 l 798 987 l 927 987 z "},"₧":{"ha":1140,"x_min":113,"x_max":1044,"o":"m 370 383 l 211 383 l 211 486 l 370 486 q 489 515 448 486 q 543 589 529 543 q 557 684 557 634 q 543 781 557 735 q 489 856 529 827 q 370 884 448 884 l 239 884 l 239 0 l 113 0 l 113 987 l 370 987 q 551 948 481 987 q 652 841 620 909 q 684 686 684 772 q 652 530 684 599 q 551 422 620 462 q 370 383 481 383 m 1040 734 l 1040 637 l 644 637 l 644 734 l 1040 734 m 778 912 l 903 912 l 903 182 q 915 125 903 144 q 945 100 926 106 q 984 94 963 94 q 1017 97 1000 94 q 1043 102 1034 100 l 1044 0 q 1005 -9 1029 -5 q 947 -14 981 -14 q 863 5 901 -14 q 801 66 824 23 q 778 182 778 109 l 778 912 z "},"₨":{"ha":1469,"x_min":115,"x_max":1400,"o":"m 115 987 l 441 987 q 630 954 553 987 q 747 853 707 920 q 787 691 787 787 q 760 567 787 623 q 681 472 732 511 q 559 414 630 433 l 522 400 l 215 400 l 214 507 l 446 507 q 563 531 516 507 q 633 598 610 556 q 657 691 657 640 q 635 791 657 748 q 565 857 612 833 q 441 880 517 880 l 245 880 l 245 0 l 115 0 l 115 987 m 692 0 l 452 448 l 588 448 l 831 8 l 831 0 l 692 0 m 1275 195 q 1263 245 1275 222 q 1215 288 1251 269 q 1106 321 1179 307 q 996 352 1045 334 q 912 395 947 370 q 860 454 878 420 q 842 533 842 488 q 861 615 842 576 q 916 684 880 654 q 1002 730 951 713 q 1114 747 1052 747 q 1264 716 1202 747 q 1360 633 1326 685 q 1393 518 1393 581 l 1267 518 q 1250 577 1267 549 q 1197 625 1232 606 q 1114 644 1163 644 q 1029 628 1061 644 q 982 588 997 612 q 968 536 968 564 q 975 500 968 516 q 1000 471 982 484 q 1052 446 1019 458 q 1137 423 1085 435 q 1285 374 1227 403 q 1372 304 1343 346 q 1400 204 1400 263 q 1380 116 1400 156 q 1323 47 1360 76 q 1233 2 1285 18 q 1117 -14 1181 -14 q 953 21 1020 -14 q 851 111 886 56 q 817 227 817 165 l 943 227 q 972 145 945 175 q 1039 102 1000 115 q 1117 90 1078 90 q 1203 103 1168 90 q 1257 140 1238 117 q 1275 195 1275 164 z "},"₩":{"ha":1027,"x_min":21,"x_max":1006,"o":"m 1006 665 l 1006 562 l 21 562 l 21 665 l 1006 665 m 1006 430 l 1006 328 l 21 328 l 21 430 l 1006 430 m 289 0 l 334 320 l 454 987 l 543 987 l 498 667 l 376 0 l 289 0 m 172 987 l 298 323 l 334 0 l 251 0 l 41 987 l 172 987 m 694 0 l 730 323 l 853 987 l 984 987 l 774 0 l 694 0 m 576 987 l 696 322 l 740 0 l 649 0 l 531 669 l 488 987 l 576 987 z "},"₪":{"ha":1071,"x_min":95,"x_max":976,"o":"m 95 734 l 474 734 q 572 719 528 734 q 646 673 615 705 q 693 588 677 641 q 709 460 709 536 l 709 237 l 583 237 l 583 461 q 574 541 583 508 q 546 593 564 573 q 500 622 527 613 q 437 631 473 631 l 221 631 l 221 0 l 95 0 l 95 734 m 741 0 l 362 0 l 362 498 l 488 498 l 488 103 l 703 103 q 784 119 751 103 q 833 173 817 136 q 850 273 850 210 l 850 734 l 976 734 l 976 274 q 960 145 976 198 q 912 61 943 93 q 838 15 882 29 q 741 0 795 0 z "},"€":{"ha":781,"x_min":64,"x_max":714,"o":"m 553 92 q 629 98 592 92 q 701 115 667 104 l 714 7 q 635 -8 676 -3 q 551 -14 593 -14 q 404 11 471 -14 q 288 85 336 36 q 212 208 239 134 q 185 380 185 281 l 185 606 q 212 779 185 705 q 287 902 238 852 q 402 976 336 951 q 551 1001 469 1001 q 633 995 593 1001 q 714 980 673 989 l 701 871 q 629 888 667 882 q 552 895 591 895 q 454 877 498 895 q 379 824 410 859 q 332 734 349 789 q 316 607 316 680 l 316 380 q 333 252 316 307 q 380 163 349 198 q 455 110 412 127 q 553 92 499 92 m 576 629 l 576 544 l 64 544 l 64 629 l 576 629 m 576 452 l 576 368 l 64 368 l 64 452 l 576 452 z "},"₱":{"ha":1016,"x_min":21,"x_max":996,"o":"m 996 823 l 996 720 l 21 720 l 21 823 l 996 823 m 996 656 l 996 553 l 21 553 l 21 656 l 996 656 m 519 387 l 256 387 l 256 494 l 519 494 q 644 518 596 494 q 713 586 691 543 q 735 685 735 629 q 713 781 735 736 q 644 853 691 825 q 519 880 596 880 l 286 880 l 286 0 l 155 0 l 155 987 l 519 987 q 709 949 631 987 q 826 842 786 910 q 866 686 866 774 q 826 524 866 591 q 709 422 786 457 q 519 387 631 387 z "},"₹":{"ha":718,"x_min":29,"x_max":690,"o":"m 690 746 l 659 639 l 29 639 l 60 746 l 690 746 m 408 0 l 49 419 l 48 503 l 214 503 q 333 527 286 503 q 404 593 380 551 q 427 686 427 634 q 405 787 427 743 q 335 856 382 831 q 210 880 287 880 l 31 880 l 62 987 l 210 987 q 405 952 328 987 q 519 848 481 916 q 557 684 557 781 q 526 536 557 602 q 422 433 494 471 q 228 396 350 396 l 562 8 l 562 0 l 408 0 m 690 987 l 659 880 l 151 880 l 182 987 l 690 987 z "},"₺":{"ha":773,"x_min":22,"x_max":713,"o":"m 318 987 l 318 0 l 188 0 l 188 987 l 318 987 m 583 523 l 713 523 l 713 463 q 685 264 713 353 q 604 114 656 176 q 479 20 552 52 q 315 -13 406 -13 q 252 -9 283 -13 q 188 0 220 -5 l 315 98 q 430 122 380 98 q 514 191 480 145 q 566 306 548 237 q 583 463 583 374 l 583 523 m 488 892 l 488 771 l 22 558 l 22 679 l 488 892 m 488 667 l 488 547 l 22 334 l 22 454 l 488 667 z "},"₼":{"ha":917,"x_min":63,"x_max":854,"o":"m 854 0 l 728 0 l 728 127 q 717 257 728 199 q 683 358 705 315 q 627 432 660 402 q 552 477 594 462 q 458 492 509 492 q 347 468 397 492 q 262 399 298 445 q 208 285 227 353 q 189 127 189 217 l 189 0 l 63 0 l 63 126 q 92 326 63 237 q 173 475 121 414 q 298 570 226 537 q 458 602 370 602 q 591 581 530 602 q 701 520 652 560 q 784 421 749 479 q 836 289 818 363 q 854 126 854 215 l 854 0 m 521 734 l 521 0 l 395 0 l 395 734 l 521 734 z "},"₽":{"ha":922,"x_min":21,"x_max":871,"o":"m 526 387 l 21 387 l 21 494 l 526 494 q 648 517 600 494 q 718 585 695 541 q 741 687 741 628 q 719 779 741 735 q 651 852 698 823 q 526 880 604 880 l 292 880 l 292 0 l 161 0 l 161 987 l 526 987 q 715 949 638 987 q 831 843 791 911 q 871 688 871 776 q 831 526 871 593 q 715 423 791 458 q 526 387 638 387 m 518 294 l 518 187 l 21 187 l 21 294 l 518 294 z "},"℅":{"ha":1025,"x_min":83,"x_max":957,"o":"m 368 715 l 462 715 q 439 629 462 668 q 375 566 417 589 q 275 543 334 543 q 173 570 216 543 q 107 644 130 598 q 83 745 83 690 l 83 798 q 106 900 83 854 q 172 974 130 946 q 273 1002 215 1002 q 374 978 332 1002 q 439 915 416 954 q 462 828 462 876 l 368 828 q 345 892 368 864 q 273 920 321 920 q 220 903 241 920 q 188 858 199 886 q 178 798 178 829 l 178 745 q 189 686 178 714 q 221 641 199 659 q 275 624 243 624 q 345 653 323 624 q 368 715 368 683 m 552 189 l 552 242 q 576 344 552 298 q 646 418 601 390 q 754 446 692 446 q 863 418 818 446 q 932 344 908 390 q 957 242 957 298 l 957 189 q 933 87 957 134 q 864 14 909 41 q 755 -14 819 -14 q 647 14 692 -14 q 577 87 602 41 q 552 189 552 134 m 646 242 l 646 189 q 658 130 646 158 q 694 84 670 102 q 755 67 719 67 q 816 84 792 67 q 852 130 840 102 q 863 189 863 157 l 863 242 q 851 302 863 274 q 815 347 840 330 q 754 364 791 364 q 694 347 718 364 q 658 302 670 330 q 646 242 646 274 m 785 847 l 302 75 l 232 120 l 714 892 l 785 847 z "},"ℓ":{"ha":661,"x_min":71,"x_max":593,"o":"m 486 93 l 486 -14 q 365 7 416 -14 q 279 70 313 29 q 229 166 245 110 q 212 292 212 223 l 212 798 q 225 905 212 858 q 264 986 239 953 q 327 1037 290 1019 q 410 1055 363 1055 q 483 1040 450 1055 q 541 997 516 1025 q 580 930 566 969 q 593 840 593 890 l 593 812 q 571 669 593 743 q 505 527 549 595 q 398 404 462 458 q 253 317 335 349 q 71 285 171 285 l 71 404 q 250 444 175 404 q 373 546 326 484 q 444 680 421 609 q 467 811 467 750 l 467 840 q 463 888 467 868 q 451 922 459 909 q 433 941 444 935 q 410 947 422 947 q 378 938 391 947 q 356 910 365 929 q 342 863 347 891 q 338 798 338 836 l 338 292 q 345 209 338 245 q 370 146 353 172 q 415 106 387 120 q 486 93 444 93 z "},"№":{"ha":1428,"x_min":110,"x_max":1350,"o":"m 1327 376 l 1327 280 l 909 280 l 909 376 l 1327 376 m 886 698 l 886 765 q 914 887 886 835 q 995 969 943 940 q 1118 998 1046 998 q 1241 969 1190 998 q 1321 887 1293 940 q 1350 765 1350 835 l 1350 698 q 1322 576 1350 628 q 1242 494 1294 524 q 1119 465 1190 465 q 995 494 1047 465 q 914 576 943 524 q 886 698 886 628 m 996 765 l 996 698 q 1009 625 996 656 q 1050 577 1023 594 q 1119 559 1078 559 q 1186 577 1160 559 q 1226 625 1213 594 q 1240 698 1240 656 l 1240 765 q 1226 837 1240 806 q 1186 886 1213 868 q 1118 903 1159 903 q 1050 886 1077 903 q 1009 837 1023 868 q 996 765 996 806 m 777 987 l 777 0 l 638 0 l 236 769 l 236 0 l 110 0 l 110 987 l 248 987 l 652 216 l 652 987 l 777 987 z "},"™":{"ha":869,"x_min":71,"x_max":732,"o":"m 671 623 l 671 891 l 577 623 l 542 623 l 447 890 l 447 623 l 386 623 l 386 987 l 462 987 l 559 718 l 656 987 l 732 987 l 732 623 l 671 623 m 332 987 l 332 932 l 232 932 l 232 623 l 170 623 l 170 932 l 71 932 l 71 987 l 332 987 z "},"℮":{"ha":884,"x_min":103,"x_max":794,"o":"m 708 134 l 709 64 q 589 7 652 28 q 458 -14 525 -14 q 320 16 385 -14 q 207 98 256 46 q 131 220 158 151 q 103 367 103 289 q 133 514 103 446 q 214 635 163 583 q 329 718 265 688 q 458 747 392 747 q 589 720 528 747 q 696 643 650 692 q 768 527 742 593 q 794 380 794 460 q 794 372 794 378 q 794 349 794 366 l 273 349 l 273 126 q 358 72 311 92 q 458 52 406 52 q 585 72 522 52 q 708 134 648 92 m 458 684 q 360 661 408 684 q 273 601 312 639 l 273 413 l 640 413 l 640 607 q 557 663 604 642 q 458 684 511 684 z "},"⅛":{"ha":1067,"x_min":57,"x_max":989,"o":"m 309 973 l 309 438 l 203 438 l 203 846 l 57 807 l 57 895 l 297 973 l 309 973 m 749 847 l 267 75 l 197 120 l 679 892 l 749 847 m 989 146 q 963 61 989 96 q 892 10 937 27 q 789 -7 846 -7 q 687 10 732 -7 q 615 61 642 27 q 588 146 588 96 q 614 226 588 193 q 686 277 640 259 q 789 296 731 296 q 892 277 846 296 q 963 226 937 259 q 989 146 989 193 m 884 155 q 871 195 884 178 q 838 221 859 212 q 789 230 817 230 q 739 221 760 230 q 707 195 718 212 q 695 155 695 178 q 707 115 695 132 q 740 89 718 98 q 789 79 761 79 q 839 89 817 79 q 872 115 860 98 q 884 155 884 132 m 977 393 q 952 320 977 351 q 886 271 928 288 q 789 254 844 254 q 692 271 734 254 q 626 320 650 288 q 602 393 602 351 q 626 475 602 441 q 692 525 650 508 q 789 543 734 543 q 885 525 843 543 q 952 475 928 508 q 977 393 977 441 m 869 387 q 860 423 869 408 q 832 447 850 438 q 789 456 814 456 q 730 437 751 456 q 708 387 708 419 q 718 351 708 366 q 746 326 728 335 q 789 317 764 317 q 848 336 827 317 q 869 387 869 355 z "},"⅜":{"ha":1187,"x_min":68,"x_max":1098,"o":"m 206 759 l 263 759 q 318 768 296 759 q 351 794 340 778 q 362 833 362 811 q 340 883 362 863 q 272 903 319 903 q 208 886 233 903 q 182 840 182 869 l 76 840 q 102 920 76 886 q 172 972 127 954 q 270 990 216 990 q 374 973 329 990 q 444 922 418 956 q 469 838 469 888 q 447 772 469 802 q 383 724 425 742 q 281 706 341 706 l 206 706 l 206 759 m 206 681 l 206 734 l 281 734 q 393 718 349 734 q 457 671 436 701 q 478 597 478 640 q 451 512 478 547 q 377 458 424 477 q 271 440 330 440 q 173 457 220 440 q 98 509 127 473 q 68 599 68 544 l 175 599 q 202 548 175 568 q 274 527 229 527 q 346 548 321 527 q 371 602 371 569 q 358 648 371 631 q 320 673 345 665 q 263 681 296 681 l 206 681 m 879 847 l 397 75 l 326 120 l 808 892 l 879 847 m 1098 146 q 1072 61 1098 96 q 1000 10 1046 27 q 898 -7 955 -7 q 795 10 841 -7 q 723 61 750 27 q 696 146 696 96 q 723 226 696 193 q 794 277 749 259 q 897 296 840 296 q 1000 277 955 296 q 1072 226 1046 259 q 1098 146 1098 193 m 992 155 q 980 195 992 178 q 946 221 968 212 q 897 230 925 230 q 848 221 869 230 q 815 195 827 212 q 804 155 804 178 q 815 115 804 132 q 848 89 827 98 q 898 79 869 79 q 947 89 926 79 q 980 115 968 98 q 992 155 992 132 m 1085 393 q 1061 320 1085 351 q 995 271 1037 288 q 898 254 953 254 q 801 271 843 254 q 734 320 758 288 q 710 393 710 351 q 734 475 710 441 q 801 525 758 508 q 897 543 843 543 q 994 525 951 543 q 1061 475 1036 508 q 1085 393 1085 441 m 978 387 q 968 423 978 408 q 940 447 958 438 q 897 456 922 456 q 838 437 860 456 q 817 387 817 419 q 826 351 817 366 q 854 326 836 335 q 898 317 873 317 q 957 336 935 317 q 978 387 978 355 z "},"⅝":{"ha":1182,"x_min":68,"x_max":1091,"o":"m 167 686 l 82 707 l 115 979 l 440 979 l 440 890 l 203 890 l 188 774 q 226 787 201 780 q 283 795 252 795 q 381 774 340 795 q 445 713 422 753 q 467 619 467 674 q 445 529 467 571 q 379 462 423 488 q 267 437 335 437 q 172 455 217 437 q 99 507 127 473 q 68 591 71 542 l 173 591 q 202 540 176 556 q 267 524 228 524 q 338 551 317 524 q 359 621 359 579 q 333 689 359 663 q 257 715 307 715 q 201 706 220 715 q 167 686 182 696 m 856 847 l 374 75 l 303 120 l 785 892 l 856 847 m 1091 146 q 1065 61 1091 96 q 994 10 1039 27 q 891 -7 948 -7 q 789 10 834 -7 q 716 61 743 27 q 690 146 690 96 q 716 226 690 193 q 787 277 742 259 q 890 296 833 296 q 994 277 948 296 q 1065 226 1039 259 q 1091 146 1091 193 m 985 155 q 973 195 985 178 q 940 221 961 212 q 890 230 918 230 q 841 221 862 230 q 808 195 820 212 q 797 155 797 178 q 808 115 797 132 q 841 89 820 98 q 891 79 863 79 q 940 89 919 79 q 974 115 962 98 q 985 155 985 132 m 1078 393 q 1054 320 1078 351 q 988 271 1030 288 q 891 254 946 254 q 794 271 836 254 q 727 320 751 288 q 703 393 703 351 q 727 475 703 441 q 794 525 751 508 q 890 543 836 543 q 987 525 945 543 q 1054 475 1029 508 q 1078 393 1078 441 m 971 387 q 961 423 971 408 q 933 447 951 438 q 890 456 916 456 q 831 437 853 456 q 810 387 810 419 q 820 351 810 366 q 848 326 829 335 q 891 317 866 317 q 950 336 928 317 q 971 387 971 355 z "},"⅞":{"ha":1114,"x_min":61,"x_max":1040,"o":"m 481 979 l 481 918 l 243 444 l 131 444 l 368 892 l 61 892 l 61 979 l 481 979 m 789 847 l 307 75 l 236 120 l 718 892 l 789 847 m 1040 146 q 1014 61 1040 96 q 942 10 987 27 q 840 -7 897 -7 q 737 10 783 -7 q 665 61 692 27 q 638 146 638 96 q 664 226 638 193 q 736 277 690 259 q 839 296 781 296 q 942 277 897 296 q 1014 226 987 259 q 1040 146 1040 193 m 934 155 q 922 195 934 178 q 888 221 909 212 q 839 230 867 230 q 789 221 810 230 q 757 195 768 212 q 745 155 745 178 q 757 115 745 132 q 790 89 768 98 q 840 79 811 79 q 889 89 867 79 q 922 115 910 98 q 934 155 934 132 m 1027 393 q 1003 320 1027 351 q 937 271 979 288 q 840 254 895 254 q 742 271 785 254 q 676 320 700 288 q 652 393 652 351 q 676 475 652 441 q 742 525 700 508 q 839 543 785 543 q 936 525 893 543 q 1002 475 978 508 q 1027 393 1027 441 m 920 387 q 910 423 920 408 q 882 447 900 438 q 839 456 864 456 q 780 437 802 456 q 758 387 758 419 q 768 351 758 366 q 796 326 778 335 q 840 317 814 317 q 898 336 877 317 q 920 387 920 355 z "},"∂":{"ha":792,"x_min":72,"x_max":729,"o":"m 389 693 q 507 667 451 693 q 603 595 564 641 q 581 705 597 655 q 541 795 565 755 q 486 862 517 835 q 419 904 455 890 q 345 919 384 919 q 277 914 309 919 q 215 901 245 909 q 152 880 184 892 l 141 981 q 195 1003 166 993 q 263 1021 224 1014 q 356 1028 302 1028 q 490 1003 431 1028 q 595 929 550 977 q 669 811 640 880 q 714 656 699 743 q 729 467 729 569 l 729 427 q 715 285 729 352 q 673 164 701 218 q 605 69 645 109 q 513 7 565 29 q 399 -14 462 -14 q 261 13 322 -14 q 158 89 201 40 q 94 202 116 137 q 72 345 72 268 l 72 359 q 93 492 72 431 q 156 598 115 553 q 255 668 197 643 q 389 693 314 693 m 401 590 q 310 571 349 590 q 247 520 272 553 q 210 447 222 488 q 198 359 198 406 l 198 345 q 210 247 198 293 q 247 165 222 201 q 310 109 271 130 q 399 89 348 89 q 491 113 452 89 q 554 180 529 137 q 591 279 579 222 q 604 402 604 336 l 604 448 q 587 489 600 465 q 551 536 574 513 q 490 574 527 559 q 401 590 453 590 z "},"∏":{"ha":965,"x_min":115,"x_max":850,"o":"m 850 987 l 850 -144 l 724 -144 l 724 884 l 241 884 l 241 -144 l 115 -144 l 115 987 l 850 987 z "},"∑":{"ha":813,"x_min":47,"x_max":811,"o":"m 811 -80 l 811 -182 l 97 -182 l 97 -80 l 811 -80 m 759 987 l 759 885 l 74 885 l 74 987 l 759 987 m 593 408 l 593 391 l 114 -182 l 47 -182 l 47 -86 l 460 400 l 47 890 l 47 987 l 114 987 l 593 408 z "},"−":{"ha":794,"x_min":114,"x_max":680,"o":"m 680 545 l 680 441 l 114 441 l 114 545 l 680 545 z "},"√":{"ha":828,"x_min":43,"x_max":798,"o":"m 371 167 l 669 987 l 798 987 l 431 -1 l 347 -1 l 371 167 m 256 530 l 390 167 l 418 -1 l 335 -1 l 128 530 l 256 530 m 43 427 l 43 530 l 251 530 l 251 427 l 43 427 z "},"∞":{"ha":1428,"x_min":67,"x_max":1354,"o":"m 67 357 l 67 376 q 91 516 67 450 q 157 635 114 583 q 261 718 201 688 q 395 747 321 747 q 524 719 469 747 q 620 644 579 690 q 687 548 660 599 q 731 453 714 498 q 756 381 747 408 l 756 353 q 731 281 747 326 q 687 185 714 236 q 620 89 660 134 q 525 15 580 43 q 397 -14 469 -14 q 261 16 322 -14 q 157 98 201 45 q 91 217 114 150 q 67 357 67 283 m 193 376 l 193 357 q 206 254 193 302 q 245 168 219 205 q 309 110 271 131 q 397 89 347 89 q 483 110 445 89 q 549 165 520 132 q 596 235 577 198 q 627 303 616 271 q 643 353 639 335 l 643 381 q 627 430 639 398 q 596 498 616 461 q 549 568 577 534 q 482 623 520 602 q 395 644 444 644 q 309 623 347 644 q 245 564 271 602 q 206 478 219 527 q 193 376 193 430 m 1354 376 l 1354 357 q 1330 217 1354 283 q 1263 98 1306 150 q 1159 16 1219 45 q 1024 -14 1098 -14 q 896 15 951 -14 q 801 89 841 43 q 733 185 760 134 q 689 281 706 236 q 665 353 673 326 l 665 381 q 690 453 673 408 q 734 548 707 498 q 801 644 761 599 q 897 719 842 690 q 1025 747 952 747 q 1159 718 1099 747 q 1263 635 1219 688 q 1330 516 1307 583 q 1354 376 1354 450 m 1228 357 l 1228 376 q 1215 478 1228 430 q 1175 564 1201 527 q 1112 623 1149 602 q 1025 644 1074 644 q 939 623 977 644 q 872 568 901 602 q 824 498 844 534 q 793 430 804 461 q 777 381 781 398 l 777 353 q 793 303 781 335 q 824 235 804 271 q 872 165 844 198 q 938 110 900 132 q 1024 89 976 89 q 1111 110 1073 89 q 1175 168 1149 131 q 1215 254 1201 205 q 1228 357 1228 302 z "},"∫":{"ha":356,"x_min":-55,"x_max":444,"o":"m 243 -73 q 217 -198 243 -149 q 142 -272 191 -248 q 24 -296 93 -296 q -16 -293 3 -296 q -55 -283 -35 -290 l -42 -184 q -16 -190 -33 -187 q 12 -193 1 -193 q 68 -180 45 -193 q 104 -141 92 -168 q 117 -73 117 -114 l 117 812 q 144 946 117 892 q 224 1028 172 1000 q 347 1056 275 1056 q 395 1052 371 1056 q 444 1042 419 1048 l 428 945 q 401 951 416 949 q 366 953 386 953 q 298 936 326 953 q 257 888 271 920 q 243 812 243 857 l 243 -73 z "},"≈":{"ha":783,"x_min":68,"x_max":703,"o":"m 70 483 l 69 611 q 146 666 101 646 q 235 686 191 686 q 320 672 290 687 q 394 636 351 658 q 463 602 434 616 q 542 589 492 589 q 628 612 586 589 q 702 675 670 635 l 703 547 q 629 493 671 513 q 543 473 587 473 q 464 487 492 473 q 395 520 435 500 q 321 556 352 542 q 235 570 290 571 q 146 547 191 570 q 70 483 102 524 m 69 200 l 68 328 q 145 382 100 363 q 235 402 191 402 q 320 389 289 404 q 393 353 351 374 q 462 319 433 332 q 541 306 491 306 q 627 329 585 306 q 701 393 669 352 l 702 264 q 628 210 670 229 q 542 190 586 190 q 463 203 492 190 q 394 237 434 216 q 320 273 351 258 q 235 287 289 288 q 146 264 191 287 q 69 200 101 241 z "},"≠":{"ha":762,"x_min":103,"x_max":669,"o":"m 618 799 l 213 106 l 149 146 l 553 839 l 618 799 m 669 661 l 669 552 l 103 552 l 103 661 l 669 661 m 669 380 l 669 271 l 103 271 l 103 380 l 669 380 z "},"≤":{"ha":706,"x_min":41,"x_max":608,"o":"m 135 479 l 604 307 l 604 186 l 49 420 l 49 491 l 135 479 m 604 621 l 136 446 l 49 438 l 49 509 l 604 742 l 604 621 m 608 104 l 608 1 l 41 1 l 41 104 l 608 104 z "},"≥":{"ha":726,"x_min":90,"x_max":671,"o":"m 574 467 l 92 638 l 92 755 l 671 523 l 671 451 l 574 467 m 92 317 l 575 491 l 671 505 l 671 433 l 92 199 l 92 317 m 656 103 l 656 0 l 90 0 l 90 103 l 656 103 z "},"◊":{"ha":700,"x_min":30,"x_max":671,"o":"m 30 493 l 301 987 l 385 987 l 373 897 l 159 493 l 377 90 l 387 0 l 304 0 l 30 493 m 327 90 l 541 493 l 323 897 l 314 987 l 397 987 l 671 493 l 399 0 l 316 0 l 327 90 z "},"":{"ha":399,"x_min":123,"x_max":279,"o":"m 123 187 q 143 241 123 219 q 201 263 163 263 q 259 241 239 263 q 279 187 279 219 q 259 134 279 156 q 201 113 239 113 q 143 134 163 113 q 123 187 123 156 m 123 785 q 143 839 123 817 q 201 861 163 861 q 259 839 239 861 q 279 785 279 817 q 259 732 279 754 q 201 711 239 711 q 143 732 163 711 q 123 785 123 754 z "},"":{"ha":445,"x_min":75,"x_max":382,"o":"m 170 734 l 170 429 l 75 429 l 75 734 l 170 734 m 382 734 l 382 429 l 287 429 l 287 734 l 382 734 z "},"":{"ha":350,"x_min":63,"x_max":233,"o":"m 233 162 l 233 109 q 209 -7 233 55 q 134 -110 184 -68 l 63 -60 q 101 19 88 -22 q 113 107 113 60 l 113 162 l 233 162 z "},"ﬁ":{"ha":770,"x_min":22,"x_max":660,"o":"m 263 0 l 138 0 l 138 798 q 170 939 138 881 q 263 1026 203 996 q 406 1056 323 1056 q 502 1044 455 1056 q 598 1015 549 1032 l 577 909 q 505 932 546 921 q 415 943 464 943 q 299 907 334 943 q 263 798 263 871 l 263 0 m 413 734 l 413 637 l 22 637 l 22 734 l 413 734 m 660 734 l 660 0 l 534 0 l 534 734 l 660 734 z "},"ﬂ":{"ha":789,"x_min":41,"x_max":680,"o":"m 283 0 l 157 0 l 157 811 q 187 945 157 890 q 272 1028 216 1000 q 408 1056 328 1056 q 483 1050 438 1056 q 579 1034 528 1044 q 680 1015 631 1025 l 621 924 q 505 942 557 936 q 418 949 454 949 q 343 933 374 949 q 298 886 313 917 q 283 811 283 856 l 283 0 m 554 0 l 554 1015 l 680 1015 l 680 0 l 554 0 m 439 734 l 439 637 l 41 637 l 41 734 l 439 734 z "},"ﬃ":{"ha":1185,"x_min":41,"x_max":1076,"o":"m 283 0 l 157 0 l 157 811 q 186 945 157 890 q 269 1028 215 1000 q 398 1056 323 1056 q 442 1053 420 1056 q 485 1045 464 1050 l 478 943 q 446 947 464 946 q 410 949 428 949 q 341 933 370 949 q 298 886 313 917 q 283 811 283 856 l 283 0 m 446 734 l 446 637 l 41 637 l 41 734 l 446 734 m 680 0 l 554 0 l 554 798 q 586 939 554 881 q 679 1026 618 996 q 822 1056 739 1056 q 918 1044 871 1056 q 1015 1015 965 1032 l 993 909 q 921 932 962 921 q 831 943 880 943 q 715 907 751 943 q 680 798 680 871 l 680 0 m 829 734 l 829 637 l 438 637 l 438 734 l 829 734 m 1076 734 l 1076 0 l 951 0 l 951 734 l 1076 734 z "},"ﬄ":{"ha":1185,"x_min":41,"x_max":1076,"o":"m 283 0 l 157 0 l 157 811 q 186 945 157 890 q 269 1028 215 1000 q 398 1056 323 1056 q 442 1053 420 1056 q 485 1045 464 1050 l 478 943 q 446 947 464 946 q 410 949 428 949 q 341 933 370 949 q 298 886 313 917 q 283 811 283 856 l 283 0 m 446 734 l 446 637 l 41 637 l 41 734 l 446 734 m 680 0 l 554 0 l 554 811 q 584 945 554 890 q 669 1028 613 1000 q 805 1056 725 1056 q 880 1050 835 1056 q 976 1034 925 1044 q 1076 1015 1027 1025 l 1018 924 q 902 942 954 936 q 814 949 850 949 q 740 933 770 949 q 695 886 710 917 q 680 811 680 856 l 680 0 m 951 0 l 951 1015 l 1076 1015 l 1076 0 l 951 0 m 836 734 l 836 637 l 438 637 l 438 734 l 836 734 z "},"\uFEFF":{"ha":0,"x_min":0,"x_max":0,"o":""},"￼":{"ha":1424,"x_min":62,"x_max":1377,"o":"m 138 793 l 62 793 l 62 986 l 271 986 l 271 907 l 138 907 l 138 793 m 1301 907 l 1166 907 l 1166 986 l 1377 986 l 1377 793 l 1301 793 l 1301 907 m 271 -270 l 62 -270 l 62 -56 l 138 -56 l 138 -193 l 271 -193 l 271 -270 m 1377 -270 l 1166 -270 l 1166 -193 l 1301 -193 l 1301 -56 l 1377 -56 l 1377 -270 m 1084 -270 l 896 -270 l 896 -193 l 1084 -193 l 1084 -270 m 542 -270 l 355 -270 l 355 -193 l 542 -193 l 542 -270 m 542 907 l 355 907 l 355 986 l 542 986 l 542 907 m 1377 197 l 1377 28 l 1301 28 l 1301 197 l 1377 197 m 1377 708 l 1377 538 l 1301 538 l 1301 708 l 1377 708 m 813 -270 l 625 -270 l 625 -193 l 813 -193 l 813 -270 m 138 197 l 138 28 l 62 28 l 62 197 l 138 197 m 813 907 l 625 907 l 625 986 l 813 986 l 813 907 m 1084 907 l 896 907 l 896 986 l 1084 986 l 1084 907 m 138 453 l 138 282 l 62 282 l 62 453 l 138 453 m 138 708 l 138 538 l 62 538 l 62 708 l 138 708 m 1377 453 l 1377 282 l 1301 282 l 1301 453 l 1377 453 m 1144 288 l 1144 545 l 1206 545 l 1206 288 q 1170 203 1206 235 q 1080 172 1134 172 q 983 200 1020 172 q 946 283 946 227 l 1009 283 q 1028 237 1009 252 q 1080 222 1047 222 q 1126 240 1107 222 q 1144 288 1144 259 m 755 336 l 653 336 l 652 384 l 732 384 q 792 398 772 384 q 812 438 812 412 q 792 476 812 466 q 732 486 772 486 l 669 486 l 669 171 l 605 171 l 605 543 l 732 543 q 809 532 777 543 q 859 499 842 522 q 876 441 876 477 q 865 399 876 418 q 831 368 853 380 q 777 353 809 356 q 775 347 777 353 q 772 340 774 340 q 764 337 764 337 q 755 336 764 336 m 755 171 l 629 171 l 662 222 l 755 222 q 807 237 790 222 q 825 278 825 252 q 807 320 825 304 q 755 336 790 336 l 674 336 l 675 384 l 777 384 q 787 384 787 384 q 795 380 787 383 q 797 373 795 379 q 800 366 800 366 q 848 351 829 363 q 878 318 868 338 q 888 276 888 299 q 853 198 888 224 q 755 171 817 171 m 559 393 l 559 317 q 516 210 559 252 q 404 169 473 169 q 291 210 334 169 q 247 317 247 252 l 247 393 q 290 500 247 459 q 403 542 334 542 q 516 500 473 542 q 559 393 559 459 m 497 317 l 497 393 q 472 466 497 439 q 403 493 447 493 q 334 466 359 493 q 309 393 309 439 l 309 317 q 335 244 309 271 q 404 218 360 218 q 472 244 448 218 q 497 317 497 271 z "},"�":{"ha":1425,"x_min":62,"x_max":1361,"o":"m 62 436 l 711 1097 l 1361 436 l 711 -225 l 62 436 m 630 273 l 767 273 q 775 328 767 307 q 812 368 784 349 q 891 436 858 393 q 924 536 924 480 q 868 674 924 623 q 710 725 811 725 q 564 683 624 725 q 503 545 504 640 l 640 545 q 663 598 642 582 q 710 614 684 614 q 767 593 748 614 q 787 536 787 571 q 769 474 787 500 q 724 431 751 448 q 671 389 692 408 q 641 342 650 369 q 630 273 631 316 m 767 96 l 767 211 l 630 211 l 630 96 l 767 96 m 716 -376 l 716 -374 l 719 -374 l 719 -376 l 716 -376 m 715 1464 l 715 1467 l 718 1467 l 718 1464 l 715 1464 z "}," ":{"ha":345,"x_min":0,"x_max":0,"o":""},"­":{"ha":384,"x_min":26,"x_max":357,"o":"m 357 471 l 357 368 l 26 368 l 26 471 l 357 471 z "},"Đ":{"ha":932,"x_min":25,"x_max":850,"o":"m 402 0 l 196 0 l 197 106 l 402 106 q 578 151 508 106 q 685 276 649 195 q 720 464 720 356 l 720 524 q 700 675 720 609 q 640 787 680 741 q 544 857 601 833 q 414 880 488 880 l 192 880 l 192 987 l 414 987 q 591 955 511 987 q 729 862 671 923 q 819 716 787 802 q 850 523 850 630 l 850 464 q 819 271 850 357 q 729 125 787 185 q 588 32 670 64 q 402 0 505 0 m 266 987 l 266 0 l 135 0 l 135 987 l 266 987 m 457 554 l 457 451 l 25 451 l 25 554 l 457 554 z "},"Ð":{"ha":932,"x_min":25,"x_max":850,"o":"m 402 0 l 196 0 l 197 106 l 402 106 q 578 151 508 106 q 685 276 649 195 q 720 464 720 356 l 720 524 q 700 675 720 609 q 640 787 680 741 q 544 857 601 833 q 414 880 488 880 l 192 880 l 192 987 l 414 987 q 591 955 511 987 q 729 862 671 923 q 819 716 787 802 q 850 523 850 630 l 850 464 q 819 271 850 357 q 729 125 787 185 q 588 32 670 64 q 402 0 505 0 m 266 987 l 266 0 l 135 0 l 135 987 l 266 987 m 457 554 l 457 451 l 25 451 l 25 554 l 457 554 z "},"ħ":{"ha":785,"x_min":1,"x_max":693,"o":"m 241 1042 l 241 0 l 116 0 l 116 1042 l 241 1042 m 212 395 l 159 397 q 182 536 160 472 q 243 648 203 600 q 337 721 282 695 q 458 747 391 747 q 555 733 512 747 q 630 686 599 718 q 677 604 661 654 q 693 481 693 553 l 693 0 l 567 0 l 567 482 q 550 575 567 540 q 500 626 533 610 q 420 642 468 642 q 335 622 374 642 q 270 568 297 602 q 227 489 242 533 q 212 395 212 444 m 433 939 l 433 836 l 1 836 l 1 939 l 433 939 z "},"Ŧ":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 m 637 661 l 637 557 l 205 557 l 205 661 l 637 661 z "},"ŧ":{"ha":454,"x_min":-8,"x_max":424,"o":"m 403 734 l 403 637 l 6 637 l 6 734 l 403 734 m 140 912 l 266 912 l 266 182 q 277 125 266 144 q 307 100 289 106 q 347 94 326 94 q 379 97 362 94 q 406 102 397 100 l 406 0 q 367 -9 391 -5 q 309 -14 343 -14 q 224 5 263 -14 q 163 66 186 23 q 140 182 140 109 l 140 912 m 424 511 l 424 408 l -8 408 l -8 511 l 424 511 z "},"À":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 396 1253 l 527 1053 l 419 1053 l 244 1253 l 396 1253 z "},"Á":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 387 1053 l 518 1253 l 669 1253 l 488 1053 l 387 1053 z "},"Â":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 494 1253 l 662 1067 l 662 1061 l 557 1061 l 456 1175 l 355 1061 l 252 1061 l 252 1068 l 418 1253 l 494 1253 z "},"Ã":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 612 1239 l 696 1232 q 677 1145 696 1182 q 624 1087 657 1107 q 550 1067 591 1067 q 493 1077 515 1067 q 453 1099 471 1086 q 416 1121 435 1112 q 368 1131 397 1131 q 320 1109 340 1131 q 301 1056 301 1088 l 216 1060 q 236 1147 216 1109 q 288 1206 255 1185 q 362 1227 321 1227 q 413 1218 391 1227 q 455 1195 435 1208 q 496 1173 475 1183 q 544 1163 517 1163 q 592 1185 572 1163 q 612 1239 612 1207 z "},"Ä":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 237 1141 q 256 1192 237 1171 q 311 1213 275 1213 q 367 1192 348 1213 q 386 1141 386 1171 q 367 1091 386 1112 q 311 1070 348 1070 q 256 1091 275 1070 q 237 1141 237 1112 m 530 1139 q 548 1191 530 1170 q 604 1212 567 1212 q 659 1191 640 1212 q 678 1139 678 1170 q 659 1089 678 1110 q 604 1069 640 1069 q 548 1089 567 1069 q 530 1139 530 1110 z "},"Å":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 310 1174 q 329 1245 310 1213 q 381 1296 349 1277 q 456 1315 414 1315 q 559 1274 517 1315 q 602 1174 602 1232 q 582 1103 602 1135 q 530 1054 563 1072 q 456 1036 497 1036 q 352 1075 394 1036 q 310 1174 310 1114 m 377 1174 q 399 1120 377 1144 q 456 1096 421 1096 q 512 1119 490 1096 q 534 1174 534 1143 q 512 1230 534 1206 q 456 1254 490 1254 q 399 1230 421 1254 q 377 1174 377 1206 z "},"Ǻ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 429 1192 l 528 1316 l 656 1316 l 507 1192 l 429 1192 m 342 1045 q 376 1127 342 1095 q 458 1158 410 1158 q 538 1127 505 1158 q 572 1045 572 1095 q 538 965 572 996 q 458 935 505 935 q 376 965 410 935 q 342 1045 342 996 m 399 1045 q 416 1005 399 1021 q 458 988 434 988 q 498 1005 481 988 q 515 1045 515 1021 q 498 1088 515 1071 q 458 1105 481 1105 q 416 1088 434 1105 q 399 1045 399 1071 z "},"Ç":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 m 420 -7 l 510 -7 l 502 -43 q 573 -75 541 -50 q 606 -160 606 -101 q 592 -218 606 -192 q 553 -263 579 -244 q 489 -292 528 -281 q 400 -302 451 -302 l 395 -229 q 452 -222 427 -229 q 493 -201 477 -216 q 508 -162 508 -186 q 496 -127 508 -140 q 461 -107 485 -114 q 399 -98 437 -101 l 420 -7 z "},"È":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 360 1260 l 491 1061 l 383 1061 l 208 1260 l 360 1260 z "},"É":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 351 1061 l 482 1260 l 633 1260 l 452 1061 l 351 1061 z "},"Ê":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 458 1260 l 626 1075 l 626 1068 l 522 1068 l 420 1183 l 319 1068 l 216 1068 l 216 1076 l 382 1260 l 458 1260 z "},"Ë":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 201 1148 q 220 1200 201 1179 q 275 1221 239 1221 q 331 1200 312 1221 q 350 1148 350 1179 q 331 1098 350 1119 q 275 1078 312 1078 q 220 1098 239 1078 q 201 1148 201 1119 m 494 1147 q 512 1198 494 1177 q 568 1219 531 1219 q 623 1198 604 1219 q 642 1147 642 1177 q 623 1097 642 1118 q 568 1076 604 1076 q 512 1097 531 1076 q 494 1147 494 1118 z "},"Ì":{"ha":378,"x_min":-22,"x_max":260,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 130 1260 l 260 1061 l 153 1061 l -22 1260 l 130 1260 z "},"Í":{"ha":378,"x_min":120,"x_max":403,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 120 1061 l 252 1260 l 403 1260 l 221 1061 l 120 1061 z "},"Î":{"ha":378,"x_min":-15,"x_max":395,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 227 1260 l 395 1075 l 395 1068 l 291 1068 l 189 1183 l 88 1068 l -15 1068 l -15 1076 l 151 1260 l 227 1260 z "},"Ï":{"ha":378,"x_min":-29,"x_max":412,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m -29 1148 q -10 1200 -29 1179 q 45 1221 9 1221 q 100 1200 81 1221 q 119 1148 119 1179 q 100 1098 119 1119 q 45 1078 81 1078 q -10 1098 9 1078 q -29 1148 -29 1119 m 263 1147 q 282 1198 263 1177 q 337 1219 300 1219 q 392 1198 373 1219 q 412 1147 412 1177 q 392 1097 412 1118 q 337 1076 373 1076 q 282 1097 300 1076 q 263 1147 263 1118 z "},"Ñ":{"ha":991,"x_min":115,"x_max":874,"o":"m 874 987 l 874 0 l 743 0 l 245 762 l 245 0 l 115 0 l 115 987 l 245 987 l 745 224 l 745 987 l 874 987 m 648 1239 l 733 1232 q 713 1145 733 1182 q 661 1087 694 1107 q 587 1067 628 1067 q 530 1077 552 1067 q 490 1099 507 1086 q 453 1121 472 1112 q 405 1131 433 1131 q 357 1109 376 1131 q 338 1056 338 1088 l 253 1060 q 272 1147 253 1109 q 325 1206 292 1185 q 399 1227 358 1227 q 450 1218 428 1227 q 492 1195 472 1208 q 532 1173 511 1183 q 581 1163 553 1163 q 629 1185 609 1163 q 648 1239 648 1207 z "},"Ò":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 420 1254 l 551 1055 l 443 1055 l 268 1254 l 420 1254 z "},"Ó":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 410 1055 l 542 1254 l 693 1254 l 511 1055 l 410 1055 z "},"Ô":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 517 1254 l 686 1069 l 686 1062 l 581 1062 l 479 1177 l 378 1062 l 275 1062 l 275 1069 l 441 1254 l 517 1254 z "},"Õ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 635 1240 l 720 1233 q 701 1146 720 1183 q 648 1088 681 1109 q 574 1068 615 1068 q 517 1078 539 1068 q 477 1100 494 1088 q 440 1123 459 1113 q 392 1133 420 1133 q 344 1111 363 1133 q 325 1057 325 1089 l 240 1061 q 259 1148 240 1111 q 312 1207 279 1186 q 386 1229 345 1229 q 437 1219 415 1229 q 479 1197 459 1209 q 519 1174 498 1184 q 568 1164 541 1164 q 616 1186 596 1164 q 635 1240 635 1208 z "},"Ö":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 261 1142 q 280 1194 261 1173 q 335 1215 299 1215 q 391 1194 372 1215 q 410 1142 410 1173 q 391 1092 410 1113 q 335 1072 372 1072 q 280 1092 299 1072 q 261 1142 261 1113 m 553 1141 q 572 1192 553 1171 q 627 1213 591 1213 q 683 1192 663 1213 q 702 1141 702 1171 q 683 1091 702 1112 q 627 1070 663 1070 q 572 1091 591 1070 q 553 1141 553 1112 z "},"Ù":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 393 1253 l 524 1053 l 416 1053 l 241 1253 l 393 1253 z "},"Ú":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 383 1053 l 515 1253 l 666 1253 l 484 1053 l 383 1053 z "},"Û":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 490 1253 l 659 1067 l 659 1061 l 554 1061 l 452 1175 l 351 1061 l 248 1061 l 248 1068 l 414 1253 l 490 1253 z "},"Ü":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 234 1141 q 253 1192 234 1171 q 308 1213 272 1213 q 363 1192 345 1213 q 382 1141 382 1171 q 363 1091 382 1112 q 308 1070 345 1070 q 253 1091 272 1070 q 234 1141 234 1112 m 526 1139 q 545 1191 526 1170 q 600 1212 564 1212 q 655 1191 636 1212 q 675 1139 675 1170 q 655 1089 675 1110 q 600 1069 636 1069 q 545 1089 564 1069 q 526 1139 526 1110 z "},"Ý":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 350 1053 l 481 1252 l 633 1252 l 451 1053 l 350 1053 z "},"à":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 335 1042 l 466 842 l 358 842 l 183 1042 l 335 1042 z "},"á":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 326 842 l 457 1042 l 608 1042 l 427 842 l 326 842 z "},"â":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 433 1042 l 601 857 l 601 850 l 496 850 l 395 964 l 294 850 l 191 850 l 191 857 l 357 1042 l 433 1042 z "},"ã":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 551 1028 l 635 1021 q 616 934 635 971 q 563 876 596 897 q 489 856 530 856 q 432 866 454 856 q 392 888 410 876 q 355 910 374 901 q 307 920 336 920 q 259 899 279 920 q 240 845 240 877 l 155 849 q 175 936 155 899 q 227 995 194 974 q 301 1017 260 1017 q 352 1007 330 1017 q 394 984 374 997 q 435 962 414 972 q 483 952 456 952 q 531 974 511 952 q 551 1028 551 996 z "},"ä":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 176 930 q 195 981 176 960 q 250 1002 214 1002 q 306 981 287 1002 q 325 930 325 960 q 306 880 325 901 q 250 859 287 859 q 195 880 214 859 q 176 930 176 901 m 469 928 q 487 980 469 959 q 543 1001 506 1001 q 598 980 578 1001 q 617 928 617 959 q 598 879 617 899 q 543 858 578 858 q 487 879 506 858 q 469 928 469 899 z "},"å":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 249 963 q 268 1034 249 1002 q 320 1085 288 1066 q 395 1104 353 1104 q 498 1063 456 1104 q 541 963 541 1021 q 521 892 541 924 q 469 843 502 861 q 395 825 436 825 q 291 864 333 825 q 249 963 249 903 m 316 963 q 338 909 316 933 q 395 885 360 885 q 451 908 429 885 q 473 963 473 932 q 451 1019 473 995 q 395 1043 429 1043 q 338 1019 360 1043 q 316 963 316 995 z "},"ǻ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 368 981 l 467 1105 l 595 1105 l 446 981 l 368 981 m 281 834 q 315 916 281 884 q 397 947 349 947 q 477 916 444 947 q 511 834 511 884 q 477 754 511 785 q 397 724 444 724 q 315 754 349 724 q 281 834 281 785 m 338 834 q 355 794 338 810 q 397 777 373 777 q 437 794 420 777 q 454 834 454 810 q 437 877 454 860 q 397 894 420 894 q 355 877 373 894 q 338 834 338 860 z "},"ç":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 m 320 -7 l 410 -7 l 402 -43 q 474 -75 441 -50 q 506 -160 506 -101 q 493 -218 506 -192 q 454 -263 479 -244 q 390 -292 428 -281 q 300 -302 351 -302 l 296 -229 q 352 -222 327 -229 q 393 -201 378 -216 q 408 -162 408 -186 q 397 -127 408 -140 q 361 -107 385 -114 q 299 -98 337 -101 l 320 -7 z "},"è":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 323 1042 l 454 842 l 347 842 l 172 1042 l 323 1042 z "},"é":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 314 842 l 446 1042 l 597 1042 l 415 842 l 314 842 z "},"ê":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 421 1042 l 589 857 l 589 850 l 485 850 l 383 964 l 282 850 l 179 850 l 179 857 l 345 1042 l 421 1042 z "},"ë":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 165 930 q 184 981 165 960 q 239 1002 203 1002 q 294 981 275 1002 q 313 930 313 960 q 294 880 313 901 q 239 859 275 859 q 184 880 203 859 q 165 930 165 901 m 457 928 q 476 980 457 959 q 531 1001 494 1001 q 586 980 567 1001 q 606 928 606 959 q 586 879 606 899 q 531 858 567 858 q 476 879 494 858 q 457 928 457 899 z "},"ì":{"ha":344,"x_min":-41,"x_max":242,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 111 1040 l 242 841 l 134 841 l -41 1040 l 111 1040 z "},"í":{"ha":344,"x_min":102,"x_max":385,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 102 841 l 233 1040 l 385 1040 l 203 841 l 102 841 z "},"î":{"ha":344,"x_min":-33,"x_max":377,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 209 1040 l 377 855 l 377 848 l 273 848 l 171 963 l 70 848 l -33 848 l -33 856 l 133 1040 l 209 1040 z "},"ï":{"ha":344,"x_min":-47,"x_max":393,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m -47 928 q -28 980 -47 959 q 26 1001 -9 1001 q 82 980 63 1001 q 101 928 101 959 q 82 879 101 899 q 26 858 63 858 q -28 879 -9 858 q -47 928 -47 899 m 245 927 q 263 979 245 958 q 319 1000 282 1000 q 374 979 355 1000 q 393 927 393 958 q 374 877 393 898 q 319 857 355 857 q 263 877 282 857 q 245 927 245 898 z "},"ñ":{"ha":767,"x_min":96,"x_max":673,"o":"m 221 577 l 221 0 l 96 0 l 96 734 l 214 734 l 221 577 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 545 1028 l 629 1021 q 610 934 629 971 q 557 876 590 897 q 483 856 524 856 q 426 866 448 856 q 386 888 404 876 q 349 910 368 901 q 301 920 330 920 q 253 899 273 920 q 234 845 234 877 l 149 849 q 169 936 149 899 q 221 995 188 974 q 295 1017 254 1017 q 346 1007 324 1017 q 388 984 368 997 q 429 962 408 972 q 477 952 450 952 q 525 974 505 952 q 545 1028 545 996 z "},"ò":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 330 1042 l 461 842 l 353 842 l 178 1042 l 330 1042 z "},"ó":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 321 842 l 452 1042 l 604 1042 l 422 842 l 321 842 z "},"ô":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 428 1042 l 596 857 l 596 850 l 492 850 l 390 964 l 289 850 l 186 850 l 186 857 l 352 1042 l 428 1042 z "},"õ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 546 1028 l 631 1021 q 611 934 631 971 q 558 876 591 897 q 484 856 526 856 q 427 866 450 856 q 387 888 405 876 q 350 910 370 901 q 302 920 331 920 q 255 899 274 920 q 235 845 235 877 l 151 849 q 170 936 151 899 q 222 995 189 974 q 296 1017 256 1017 q 348 1007 326 1017 q 389 984 370 997 q 430 962 409 972 q 478 952 451 952 q 526 974 507 952 q 546 1028 546 996 z "},"ö":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 172 930 q 191 981 172 960 q 245 1002 210 1002 q 301 981 282 1002 q 320 930 320 960 q 301 880 320 901 q 245 859 282 859 q 191 880 210 859 q 172 930 172 901 m 464 928 q 483 980 464 959 q 538 1001 501 1001 q 593 980 574 1001 q 612 928 612 959 q 593 879 612 899 q 538 858 574 858 q 483 879 501 858 q 464 928 464 899 z "},"ù":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 325 1042 l 456 842 l 348 842 l 173 1042 l 325 1042 z "},"ú":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 315 842 l 447 1042 l 598 1042 l 416 842 l 315 842 z "},"û":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 422 1042 l 591 857 l 591 850 l 486 850 l 385 964 l 283 850 l 180 850 l 180 857 l 347 1042 l 422 1042 z "},"ü":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 166 930 q 185 981 166 960 q 240 1002 204 1002 q 296 981 277 1002 q 315 930 315 960 q 296 880 315 901 q 240 859 277 859 q 185 880 204 859 q 166 930 166 901 m 458 928 q 477 980 458 959 q 532 1001 496 1001 q 588 980 568 1001 q 607 928 607 959 q 588 879 607 899 q 532 858 568 858 q 477 879 496 858 q 458 928 458 899 z "},"ý":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 275 842 l 407 1042 l 558 1042 l 376 842 l 275 842 z "},"ÿ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 126 930 q 145 981 126 960 q 200 1002 164 1002 q 256 981 237 1002 q 275 930 275 960 q 256 880 275 901 q 200 859 237 859 q 145 880 164 859 q 126 930 126 901 m 418 928 q 437 980 418 959 q 492 1001 456 1001 q 548 980 528 1001 q 567 928 567 959 q 548 879 567 899 q 492 858 528 858 q 437 879 456 858 q 418 928 418 899 z "},"Ā":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 687 1196 l 687 1100 l 232 1100 l 232 1196 l 687 1196 z "},"ā":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 626 985 l 626 889 l 171 889 l 171 985 l 626 985 z "},"Ă":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 557 1225 l 659 1225 q 634 1131 659 1172 q 564 1067 610 1090 q 456 1044 519 1044 q 308 1094 362 1044 q 253 1225 253 1145 l 355 1225 q 378 1154 355 1185 q 456 1124 401 1124 q 534 1154 511 1124 q 557 1225 557 1185 z "},"ă":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 496 1014 l 597 1014 q 573 920 597 961 q 503 856 549 879 q 395 833 458 833 q 247 883 301 833 q 192 1014 192 934 l 294 1014 q 317 943 294 974 q 395 913 340 913 q 473 943 450 913 q 496 1014 496 974 z "},"Ą":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 812 39 l 863 0 q 807 -45 833 -22 q 764 -95 781 -68 q 747 -151 747 -121 q 759 -186 747 -173 q 800 -200 770 -200 q 840 -194 822 -200 q 867 -182 857 -187 l 877 -264 q 834 -284 860 -275 q 768 -294 808 -294 q 675 -261 713 -294 q 637 -165 637 -229 q 655 -92 637 -128 q 712 -23 673 -56 q 812 39 751 10 z "},"ą":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 608 39 l 658 0 q 602 -45 629 -22 q 559 -95 576 -68 q 542 -151 542 -121 q 554 -186 542 -173 q 595 -200 566 -200 q 635 -194 617 -200 q 663 -182 652 -187 l 672 -264 q 629 -284 655 -275 q 563 -294 603 -294 q 470 -261 508 -294 q 433 -165 433 -229 q 451 -92 433 -128 q 507 -23 469 -56 q 608 39 546 10 z "},"Ć":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 m 392 1075 l 524 1274 l 675 1274 l 493 1075 l 392 1075 z "},"ć":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 m 292 842 l 424 1042 l 575 1042 l 393 842 l 292 842 z "},"Ĉ":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 m 499 1274 l 667 1089 l 667 1082 l 563 1082 l 461 1197 l 360 1082 l 257 1082 l 257 1090 l 423 1274 l 499 1274 z "},"ĉ":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 m 399 1042 l 568 857 l 568 850 l 463 850 l 361 964 l 260 850 l 157 850 l 157 857 l 323 1042 l 399 1042 z "},"Ċ":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 m 387 1160 q 406 1211 387 1190 q 461 1232 425 1232 q 516 1211 497 1232 q 536 1160 536 1190 q 516 1110 536 1131 q 461 1089 497 1089 q 406 1110 425 1089 q 387 1160 387 1131 z "},"ċ":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 m 288 928 q 306 979 288 958 q 361 1000 325 1000 q 417 979 397 1000 q 436 928 436 958 q 417 877 436 898 q 361 857 397 857 q 306 877 325 857 q 288 928 288 898 z "},"Č":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 m 358 1274 l 460 1158 l 563 1274 l 671 1274 l 671 1267 l 499 1081 l 422 1081 l 252 1267 l 252 1274 l 358 1274 z "},"č":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 m 258 1041 l 361 926 l 463 1041 l 572 1041 l 572 1034 l 399 848 l 322 848 l 153 1034 l 153 1041 l 258 1041 z "},"Ď":{"ha":911,"x_min":115,"x_max":829,"o":"m 382 0 l 176 0 l 177 106 l 382 106 q 558 151 488 106 q 664 276 629 195 q 700 464 700 356 l 700 524 q 680 675 700 609 q 620 787 659 741 q 524 857 581 833 q 394 880 467 880 l 172 880 l 172 987 l 394 987 q 571 955 491 987 q 709 862 651 923 q 798 716 767 802 q 829 523 829 630 l 829 464 q 798 271 829 357 q 708 125 767 185 q 567 32 650 64 q 382 0 485 0 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 310 1259 l 412 1144 l 515 1259 l 623 1259 l 623 1253 l 451 1067 l 374 1067 l 204 1253 l 204 1259 l 310 1259 z "},"ď":{"ha":885,"x_min":64,"x_max":898,"o":"m 558 142 l 558 1042 l 684 1042 l 684 0 l 569 0 l 558 142 m 64 359 l 64 373 q 85 526 64 457 q 144 644 106 595 q 236 721 182 694 q 355 747 289 747 q 476 723 424 747 q 564 653 528 699 q 621 543 600 608 q 650 397 642 479 l 650 335 q 622 190 643 254 q 564 80 600 125 q 475 11 528 35 q 353 -14 423 -14 q 236 14 289 -14 q 144 92 182 42 q 85 211 106 142 q 64 359 64 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 213 208 q 297 114 260 134 q 385 93 334 93 q 487 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 582 484 q 527 582 551 554 q 468 625 503 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 213 525 q 191 373 191 428 m 898 1043 l 898 989 q 874 874 898 936 q 800 771 850 812 l 728 821 q 766 900 753 859 q 779 988 779 941 l 779 1043 l 898 1043 z "},"Ē":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 651 1204 l 651 1107 l 196 1107 l 196 1204 l 651 1204 z "},"ē":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 614 985 l 614 889 l 159 889 l 159 985 l 614 985 z "},"Ĕ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 521 1232 l 623 1232 q 598 1138 623 1179 q 528 1074 574 1097 q 420 1051 483 1051 q 272 1102 326 1051 q 217 1232 217 1152 l 319 1232 q 342 1162 319 1192 q 420 1131 365 1131 q 498 1162 475 1131 q 521 1232 521 1192 z "},"ĕ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 484 1014 l 586 1014 q 562 920 586 961 q 492 856 537 879 q 384 833 446 833 q 235 883 290 833 q 180 1014 180 934 l 282 1014 q 305 943 282 974 q 384 913 328 913 q 461 943 438 913 q 484 1014 484 974 z "},"Ė":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 346 1146 q 365 1197 346 1176 q 420 1218 383 1218 q 475 1197 456 1218 q 494 1146 494 1176 q 475 1096 494 1116 q 420 1075 456 1075 q 365 1096 383 1075 q 346 1146 346 1116 z "},"ė":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 309 928 q 328 979 309 958 q 383 1000 347 1000 q 438 979 419 1000 q 458 928 458 958 q 438 877 458 898 q 383 857 419 857 q 328 877 347 857 q 309 928 309 898 z "},"Ę":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 643 39 l 693 0 q 637 -45 664 -22 q 594 -95 611 -68 q 577 -151 577 -121 q 589 -186 577 -173 q 630 -200 601 -200 q 670 -194 652 -200 q 698 -182 688 -187 l 707 -264 q 664 -284 690 -275 q 598 -294 638 -294 q 506 -261 543 -294 q 468 -165 468 -229 q 486 -92 468 -128 q 543 -23 504 -56 q 643 39 581 10 z "},"ę":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 500 56 l 551 18 q 495 -27 522 -4 q 452 -77 469 -51 q 435 -133 435 -103 q 447 -169 435 -155 q 488 -182 458 -182 q 528 -176 510 -182 q 555 -164 545 -170 l 565 -247 q 522 -267 548 -257 q 456 -277 496 -277 q 363 -244 401 -277 q 326 -147 326 -211 q 343 -75 326 -111 q 400 -5 361 -39 q 500 56 439 28 z "},"Ě":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 317 1259 l 419 1144 l 522 1259 l 630 1259 l 630 1253 l 458 1067 l 380 1067 l 211 1253 l 211 1259 l 317 1259 z "},"ě":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 280 1041 l 382 926 l 485 1041 l 593 1041 l 593 1034 l 421 848 l 344 848 l 174 1034 l 174 1041 l 280 1041 z "},"Ĝ":{"ha":946,"x_min":83,"x_max":844,"o":"m 844 492 l 844 130 q 786 70 826 103 q 676 11 746 36 q 495 -14 606 -14 q 329 18 405 -14 q 198 110 254 50 q 113 258 143 171 q 83 456 83 345 l 83 532 q 109 730 83 643 q 186 877 135 817 q 311 969 237 938 q 480 1001 385 1001 q 670 962 593 1001 q 789 854 746 923 q 844 699 832 786 l 713 699 q 679 796 705 752 q 604 867 652 840 q 480 894 556 894 q 361 869 412 894 q 279 797 311 844 q 230 684 246 750 q 214 534 214 617 l 214 456 q 234 303 214 370 q 292 189 254 236 q 381 117 329 142 q 496 93 433 93 q 609 105 566 93 q 677 133 652 117 q 714 165 701 150 l 714 386 l 486 386 l 486 492 l 844 492 m 494 1274 l 662 1089 l 662 1082 l 557 1082 l 456 1197 l 355 1082 l 252 1082 l 252 1090 l 418 1274 l 494 1274 z "},"ĝ":{"ha":780,"x_min":66,"x_max":685,"o":"m 571 734 l 685 734 l 685 16 q 646 -150 685 -81 q 536 -254 606 -218 q 374 -290 466 -290 q 285 -278 336 -290 q 185 -238 234 -266 q 102 -162 136 -210 l 168 -87 q 265 -165 214 -143 q 365 -186 315 -186 q 468 -164 425 -186 q 535 -98 511 -142 q 559 9 559 -54 l 559 572 l 571 734 m 66 359 l 66 373 q 86 526 66 457 q 143 644 106 595 q 235 721 181 694 q 355 747 288 747 q 476 723 425 747 q 565 653 528 699 q 622 543 601 608 q 651 397 643 479 l 651 335 q 622 190 644 254 q 565 80 601 125 q 476 11 528 35 q 354 -14 424 -14 q 235 14 288 -14 q 144 92 182 42 q 86 211 106 142 q 66 359 66 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 214 208 q 297 114 260 134 q 385 93 334 93 q 488 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 583 484 q 528 582 552 554 q 469 625 504 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 214 525 q 191 373 191 428 m 415 1042 l 583 857 l 583 850 l 479 850 l 377 964 l 276 850 l 173 850 l 173 857 l 339 1042 l 415 1042 z "},"Ğ":{"ha":946,"x_min":83,"x_max":844,"o":"m 844 492 l 844 130 q 786 70 826 103 q 676 11 746 36 q 495 -14 606 -14 q 329 18 405 -14 q 198 110 254 50 q 113 258 143 171 q 83 456 83 345 l 83 532 q 109 730 83 643 q 186 877 135 817 q 311 969 237 938 q 480 1001 385 1001 q 670 962 593 1001 q 789 854 746 923 q 844 699 832 786 l 713 699 q 679 796 705 752 q 604 867 652 840 q 480 894 556 894 q 361 869 412 894 q 279 797 311 844 q 230 684 246 750 q 214 534 214 617 l 214 456 q 234 303 214 370 q 292 189 254 236 q 381 117 329 142 q 496 93 433 93 q 609 105 566 93 q 677 133 652 117 q 714 165 701 150 l 714 386 l 486 386 l 486 492 l 844 492 m 557 1246 l 659 1246 q 634 1153 659 1194 q 564 1088 610 1112 q 456 1065 519 1065 q 308 1116 362 1065 q 253 1246 253 1166 l 355 1246 q 378 1176 355 1206 q 456 1145 401 1145 q 534 1176 511 1145 q 557 1246 557 1206 z "},"ğ":{"ha":780,"x_min":66,"x_max":685,"o":"m 571 734 l 685 734 l 685 16 q 646 -150 685 -81 q 536 -254 606 -218 q 374 -290 466 -290 q 285 -278 336 -290 q 185 -238 234 -266 q 102 -162 136 -210 l 168 -87 q 265 -165 214 -143 q 365 -186 315 -186 q 468 -164 425 -186 q 535 -98 511 -142 q 559 9 559 -54 l 559 572 l 571 734 m 66 359 l 66 373 q 86 526 66 457 q 143 644 106 595 q 235 721 181 694 q 355 747 288 747 q 476 723 425 747 q 565 653 528 699 q 622 543 601 608 q 651 397 643 479 l 651 335 q 622 190 644 254 q 565 80 601 125 q 476 11 528 35 q 354 -14 424 -14 q 235 14 288 -14 q 144 92 182 42 q 86 211 106 142 q 66 359 66 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 214 208 q 297 114 260 134 q 385 93 334 93 q 488 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 583 484 q 528 582 552 554 q 469 625 504 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 214 525 q 191 373 191 428 m 478 1014 l 580 1014 q 555 920 580 961 q 486 856 531 879 q 378 833 440 833 q 229 883 283 833 q 174 1014 174 934 l 276 1014 q 299 943 276 974 q 378 913 322 913 q 455 943 432 913 q 478 1014 478 974 z "},"Ġ":{"ha":946,"x_min":83,"x_max":844,"o":"m 844 492 l 844 130 q 786 70 826 103 q 676 11 746 36 q 495 -14 606 -14 q 329 18 405 -14 q 198 110 254 50 q 113 258 143 171 q 83 456 83 345 l 83 532 q 109 730 83 643 q 186 877 135 817 q 311 969 237 938 q 480 1001 385 1001 q 670 962 593 1001 q 789 854 746 923 q 844 699 832 786 l 713 699 q 679 796 705 752 q 604 867 652 840 q 480 894 556 894 q 361 869 412 894 q 279 797 311 844 q 230 684 246 750 q 214 534 214 617 l 214 456 q 234 303 214 370 q 292 189 254 236 q 381 117 329 142 q 496 93 433 93 q 609 105 566 93 q 677 133 652 117 q 714 165 701 150 l 714 386 l 486 386 l 486 492 l 844 492 m 382 1160 q 400 1211 382 1190 q 456 1232 419 1232 q 511 1211 492 1232 q 530 1160 530 1190 q 511 1110 530 1131 q 456 1089 492 1089 q 400 1110 419 1089 q 382 1160 382 1131 z "},"ġ":{"ha":780,"x_min":66,"x_max":685,"o":"m 571 734 l 685 734 l 685 16 q 646 -150 685 -81 q 536 -254 606 -218 q 374 -290 466 -290 q 285 -278 336 -290 q 185 -238 234 -266 q 102 -162 136 -210 l 168 -87 q 265 -165 214 -143 q 365 -186 315 -186 q 468 -164 425 -186 q 535 -98 511 -142 q 559 9 559 -54 l 559 572 l 571 734 m 66 359 l 66 373 q 86 526 66 457 q 143 644 106 595 q 235 721 181 694 q 355 747 288 747 q 476 723 425 747 q 565 653 528 699 q 622 543 601 608 q 651 397 643 479 l 651 335 q 622 190 644 254 q 565 80 601 125 q 476 11 528 35 q 354 -14 424 -14 q 235 14 288 -14 q 144 92 182 42 q 86 211 106 142 q 66 359 66 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 214 208 q 297 114 260 134 q 385 93 334 93 q 488 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 583 484 q 528 582 552 554 q 469 625 504 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 214 525 q 191 373 191 428 m 303 928 q 322 979 303 958 q 377 1000 340 1000 q 432 979 413 1000 q 452 928 452 958 q 432 877 452 898 q 377 857 413 857 q 322 877 340 857 q 303 928 303 898 z "},"Ģ":{"ha":946,"x_min":83,"x_max":844,"o":"m 844 492 l 844 130 q 786 70 826 103 q 676 11 746 36 q 495 -14 606 -14 q 329 18 405 -14 q 198 110 254 50 q 113 258 143 171 q 83 456 83 345 l 83 532 q 109 730 83 643 q 186 877 135 817 q 311 969 237 938 q 480 1001 385 1001 q 670 962 593 1001 q 789 854 746 923 q 844 699 832 786 l 713 699 q 679 796 705 752 q 604 867 652 840 q 480 894 556 894 q 361 869 412 894 q 279 797 311 844 q 230 684 246 750 q 214 534 214 617 l 214 456 q 234 303 214 370 q 292 189 254 236 q 381 117 329 142 q 496 93 433 93 q 609 105 566 93 q 677 133 652 117 q 714 165 701 150 l 714 386 l 486 386 l 486 492 l 844 492 m 554 -84 l 554 -138 q 530 -253 554 -191 q 456 -356 506 -315 l 385 -307 q 422 -227 410 -268 q 435 -139 435 -186 l 435 -84 l 554 -84 z "},"ģ":{"ha":780,"x_min":66,"x_max":685,"o":"m 571 734 l 685 734 l 685 16 q 646 -150 685 -81 q 536 -254 606 -218 q 374 -290 466 -290 q 285 -278 336 -290 q 185 -238 234 -266 q 102 -162 136 -210 l 168 -87 q 265 -165 214 -143 q 365 -186 315 -186 q 468 -164 425 -186 q 535 -98 511 -142 q 559 9 559 -54 l 559 572 l 571 734 m 66 359 l 66 373 q 86 526 66 457 q 143 644 106 595 q 235 721 181 694 q 355 747 288 747 q 476 723 425 747 q 565 653 528 699 q 622 543 601 608 q 651 397 643 479 l 651 335 q 622 190 644 254 q 565 80 601 125 q 476 11 528 35 q 354 -14 424 -14 q 235 14 288 -14 q 144 92 182 42 q 86 211 106 142 q 66 359 66 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 214 208 q 297 114 260 134 q 385 93 334 93 q 488 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 583 484 q 528 582 552 554 q 469 625 504 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 214 525 q 191 373 191 428 m 311 850 l 311 938 q 326 1018 311 978 q 362 1090 340 1057 q 406 1141 385 1122 l 478 1085 q 446 1009 455 1044 q 437 932 437 974 l 437 850 l 311 850 z "},"Ĥ":{"ha":991,"x_min":115,"x_max":873,"o":"m 760 563 l 760 456 l 225 456 l 225 563 l 760 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 m 521 1260 l 689 1075 l 689 1068 l 585 1068 l 483 1183 l 382 1068 l 279 1068 l 279 1076 l 445 1260 l 521 1260 z "},"ĥ":{"ha":765,"x_min":96,"x_max":673,"o":"m 221 1042 l 221 0 l 96 0 l 96 1042 l 221 1042 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 378 1259 l 546 1074 l 546 1067 l 441 1067 l 340 1182 l 239 1067 l 136 1067 l 136 1075 l 302 1259 l 378 1259 z "},"Ĩ":{"ha":378,"x_min":-50,"x_max":430,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 345 1246 l 430 1239 q 410 1152 430 1190 q 358 1095 391 1115 q 283 1074 325 1074 q 227 1084 249 1074 q 186 1106 204 1094 q 150 1129 169 1119 q 102 1139 130 1139 q 54 1117 73 1139 q 35 1063 35 1095 l -50 1067 q -31 1155 -50 1117 q 22 1214 -12 1192 q 96 1235 55 1235 q 147 1225 125 1235 q 189 1203 169 1215 q 229 1180 208 1190 q 277 1171 250 1171 q 326 1193 306 1171 q 345 1246 345 1215 z "},"ĩ":{"ha":344,"x_min":-68,"x_max":412,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 327 1027 l 412 1019 q 392 932 412 970 q 339 875 372 895 q 265 854 307 854 q 208 864 231 854 q 168 887 186 874 q 131 909 151 899 q 83 919 112 919 q 36 897 55 919 q 16 844 16 876 l -68 848 q -49 935 -68 897 q 3 994 -30 972 q 77 1015 37 1015 q 129 1005 106 1015 q 170 983 151 996 q 211 961 190 970 q 259 951 232 951 q 307 973 288 951 q 327 1027 327 995 z "},"Ī":{"ha":378,"x_min":-35,"x_max":420,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 420 1204 l 420 1107 l -35 1107 l -35 1204 l 420 1204 z "},"ī":{"ha":344,"x_min":-53,"x_max":402,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 402 984 l 402 888 l -53 888 l -53 984 l 402 984 z "},"Ĭ":{"ha":378,"x_min":-14,"x_max":392,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 290 1232 l 392 1232 q 368 1138 392 1179 q 298 1074 343 1097 q 190 1051 252 1051 q 41 1102 96 1051 q -14 1232 -14 1152 l 88 1232 q 111 1162 88 1192 q 190 1131 134 1131 q 267 1162 244 1131 q 290 1232 290 1192 z "},"ĭ":{"ha":344,"x_min":-32,"x_max":374,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 272 1013 l 374 1013 q 349 919 374 960 q 279 854 325 878 q 172 831 234 831 q 23 882 77 831 q -32 1013 -32 932 l 70 1013 q 93 942 70 972 q 172 911 116 911 q 249 942 226 911 q 272 1013 272 972 z "},"Į":{"ha":378,"x_min":16,"x_max":255,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 191 45 l 241 6 q 185 -39 212 -16 q 142 -89 159 -62 q 125 -144 125 -115 q 137 -180 125 -167 q 178 -194 149 -194 q 218 -188 200 -194 q 245 -176 235 -181 l 255 -258 q 212 -278 238 -269 q 146 -288 186 -288 q 53 -255 91 -288 q 16 -159 16 -222 q 34 -86 16 -122 q 90 -17 52 -50 q 191 45 129 16 z "},"į":{"ha":338,"x_min":-4,"x_max":245,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 96 928 q 115 980 96 959 q 170 1001 134 1001 q 225 980 206 1001 q 245 928 245 959 q 225 879 245 899 q 170 858 206 858 q 115 879 134 858 q 96 928 96 899 m 171 39 l 221 0 q 165 -45 192 -22 q 122 -95 139 -68 q 105 -151 105 -121 q 117 -186 105 -173 q 158 -200 129 -200 q 198 -194 180 -200 q 226 -182 216 -187 l 235 -264 q 192 -284 218 -275 q 126 -294 166 -294 q 34 -261 71 -294 q -4 -165 -4 -229 q 14 -92 -4 -128 q 71 -23 32 -56 q 171 39 109 10 z "},"İ":{"ha":378,"x_min":115,"x_max":264,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 115 1146 q 134 1197 115 1176 q 189 1218 153 1218 q 244 1197 225 1218 q 264 1146 264 1176 q 244 1096 264 1116 q 189 1075 225 1075 q 134 1096 153 1075 q 115 1146 115 1116 z "},"Ĳ":{"ha":1144,"x_min":124,"x_max":1037,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 907 288 l 907 987 l 1037 987 l 1037 288 q 997 123 1037 191 q 887 21 957 56 q 726 -14 817 -14 q 564 18 635 -14 q 454 113 494 49 q 414 273 414 176 l 545 273 q 568 171 545 211 q 632 112 591 131 q 726 93 673 93 q 818 115 777 93 q 883 181 859 137 q 907 288 907 224 z "},"ĳ":{"ha":670,"x_min":96,"x_max":572,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 96 928 q 115 980 96 959 q 170 1001 134 1001 q 225 980 206 1001 q 245 928 245 959 q 225 879 245 899 q 170 858 206 858 q 115 879 134 858 q 96 928 96 899 m 437 734 l 563 734 l 563 -87 q 542 -201 563 -155 q 478 -272 520 -248 q 371 -296 435 -296 q 331 -293 354 -296 q 293 -285 309 -290 l 294 -184 q 323 -188 307 -186 q 351 -190 339 -190 q 398 -180 379 -190 q 427 -147 417 -170 q 437 -87 437 -125 l 437 734 m 424 928 q 443 980 424 959 q 498 1001 462 1001 q 553 980 534 1001 q 572 928 572 959 q 553 879 572 899 q 498 858 534 858 q 443 879 462 858 q 424 928 424 899 z "},"Ĵ":{"ha":766,"x_min":36,"x_max":784,"o":"m 529 288 l 529 987 l 659 987 l 659 288 q 619 123 659 191 q 509 21 579 56 q 348 -14 439 -14 q 186 18 257 -14 q 76 113 116 49 q 36 273 36 176 l 167 273 q 190 171 167 211 q 254 112 213 131 q 348 93 295 93 q 440 115 399 93 q 505 181 481 137 q 529 288 529 224 m 616 1251 l 784 1066 l 784 1059 l 680 1059 l 578 1174 l 477 1059 l 374 1059 l 374 1067 l 540 1251 l 616 1251 z "},"ĵ":{"ha":350,"x_min":-52,"x_max":387,"o":"m 117 734 l 243 734 l 243 -60 q 217 -189 243 -136 q 142 -269 191 -242 q 24 -296 93 -296 q -14 -294 3 -296 q -52 -285 -32 -292 l -42 -184 q -8 -191 -32 -189 q 24 -193 15 -193 q 74 -177 54 -193 q 106 -132 95 -161 q 117 -60 117 -102 l 117 734 m 218 1014 l 387 829 l 387 822 l 282 822 l 180 937 l 79 822 l -24 822 l -24 829 l 142 1014 l 218 1014 z "},"Ķ":{"ha":871,"x_min":115,"x_max":871,"o":"m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 842 987 l 431 527 l 201 288 l 179 427 l 353 618 l 684 987 l 842 987 m 715 0 l 350 481 l 428 585 l 871 0 l 715 0 m 507 -17 l 507 -71 q 483 -186 507 -124 q 408 -289 458 -248 l 337 -239 q 375 -160 362 -201 q 387 -72 387 -119 l 387 -17 l 507 -17 z "},"ķ":{"ha":704,"x_min":96,"x_max":703,"o":"m 222 1042 l 222 0 l 96 0 l 96 1042 l 222 1042 m 670 734 l 350 391 l 171 205 l 161 339 l 289 492 l 517 734 l 670 734 m 555 0 l 294 350 l 359 462 l 703 0 l 555 0 m 418 -30 l 418 -83 q 394 -199 418 -137 q 319 -302 370 -260 l 248 -252 q 286 -173 273 -214 q 298 -85 298 -132 l 298 -30 l 418 -30 z "},"Ĺ":{"ha":748,"x_min":110,"x_max":713,"o":"m 713 106 l 713 0 l 220 0 l 220 106 l 713 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 110 1050 l 241 1249 l 393 1249 l 211 1050 l 110 1050 z "},"ĺ":{"ha":338,"x_min":100,"x_max":382,"o":"m 232 1042 l 232 0 l 106 0 l 106 1042 l 232 1042 m 100 1118 l 231 1318 l 382 1318 l 201 1118 l 100 1118 z "},"Ļ":{"ha":748,"x_min":115,"x_max":713,"o":"m 713 106 l 713 0 l 220 0 l 220 106 l 713 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 479 -71 l 479 -125 q 455 -240 479 -178 q 381 -343 431 -302 l 310 -294 q 348 -214 335 -255 q 360 -126 360 -174 l 360 -71 l 479 -71 z "},"ļ":{"ha":338,"x_min":58,"x_max":232,"o":"m 232 1042 l 232 0 l 106 0 l 106 1042 l 232 1042 m 228 -71 l 228 -125 q 204 -240 228 -178 q 130 -343 180 -302 l 58 -294 q 96 -214 83 -255 q 109 -126 109 -174 l 109 -71 l 228 -71 z "},"Ľ":{"ha":748,"x_min":115,"x_max":713,"o":"m 713 106 l 713 0 l 220 0 l 220 106 l 713 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 551 988 l 551 935 q 527 819 551 881 q 453 716 503 758 l 382 766 q 419 845 407 804 q 432 933 432 886 l 432 988 l 551 988 z "},"ľ":{"ha":439,"x_min":106,"x_max":465,"o":"m 232 1042 l 232 0 l 106 0 l 106 1042 l 232 1042 m 465 1043 l 465 989 q 440 874 465 936 q 366 771 416 812 l 295 821 q 333 900 320 859 q 345 988 345 941 l 345 1043 l 465 1043 z "},"Ŀ":{"ha":748,"x_min":115,"x_max":713,"o":"m 713 106 l 713 0 l 220 0 l 220 106 l 713 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 397 540 q 416 591 397 570 q 471 612 435 612 q 527 591 507 612 q 546 540 546 570 q 527 489 546 510 q 471 469 507 469 q 416 489 435 469 q 397 540 397 510 z "},"ŀ":{"ha":487,"x_min":106,"x_max":457,"o":"m 232 1042 l 232 0 l 106 0 l 106 1042 l 232 1042 m 309 530 q 327 581 309 559 q 382 602 346 602 q 438 581 418 602 q 457 530 457 559 q 438 479 457 500 q 382 458 418 458 q 327 479 346 458 q 309 530 309 500 z "},"Ń":{"ha":991,"x_min":115,"x_max":874,"o":"m 874 987 l 874 0 l 743 0 l 245 762 l 245 0 l 115 0 l 115 987 l 245 987 l 745 224 l 745 987 l 874 987 m 423 1053 l 555 1253 l 706 1253 l 524 1053 l 423 1053 z "},"ń":{"ha":767,"x_min":96,"x_max":673,"o":"m 221 577 l 221 0 l 96 0 l 96 734 l 214 734 l 221 577 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 319 842 l 451 1042 l 602 1042 l 420 842 l 319 842 z "},"Ņ":{"ha":991,"x_min":115,"x_max":874,"o":"m 874 987 l 874 0 l 743 0 l 245 762 l 245 0 l 115 0 l 115 987 l 245 987 l 745 224 l 745 987 l 874 987 m 547 -71 l 547 -125 q 523 -240 547 -178 q 449 -343 499 -302 l 378 -294 q 415 -214 403 -255 q 428 -126 428 -174 l 428 -71 l 547 -71 z "},"ņ":{"ha":767,"x_min":96,"x_max":673,"o":"m 221 577 l 221 0 l 96 0 l 96 734 l 214 734 l 221 577 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 441 -71 l 441 -125 q 417 -240 441 -178 q 342 -343 393 -302 l 271 -294 q 309 -214 296 -255 q 321 -126 321 -174 l 321 -71 l 441 -71 z "},"Ň":{"ha":991,"x_min":115,"x_max":874,"o":"m 874 987 l 874 0 l 743 0 l 245 762 l 245 0 l 115 0 l 115 987 l 245 987 l 745 224 l 745 987 l 874 987 m 389 1252 l 492 1137 l 594 1252 l 703 1252 l 703 1245 l 530 1059 l 453 1059 l 283 1245 l 283 1252 l 389 1252 z "},"ň":{"ha":767,"x_min":96,"x_max":673,"o":"m 221 577 l 221 0 l 96 0 l 96 734 l 214 734 l 221 577 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 286 1041 l 388 926 l 490 1041 l 599 1041 l 599 1034 l 427 848 l 349 848 l 180 1034 l 180 1041 l 286 1041 z "},"ŉ":{"ha":767,"x_min":-47,"x_max":673,"o":"m 221 577 l 221 0 l 96 0 l 96 734 l 214 734 l 221 577 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 m 123 1045 l 123 991 q 99 876 123 938 q 24 773 75 814 l -47 823 q -9 902 -22 861 q 3 990 3 943 l 3 1045 l 123 1045 z "},"Ō":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 711 1198 l 711 1101 l 256 1101 l 256 1198 l 711 1198 z "},"ō":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 621 985 l 621 889 l 166 889 l 166 985 l 621 985 z "},"Ŏ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 581 1226 l 682 1226 q 658 1132 682 1173 q 588 1068 633 1091 q 480 1045 543 1045 q 331 1096 386 1045 q 277 1226 277 1146 l 378 1226 q 401 1156 378 1186 q 480 1125 425 1125 q 557 1156 534 1125 q 581 1226 581 1186 z "},"ŏ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 491 1014 l 593 1014 q 568 920 593 961 q 498 856 544 879 q 391 833 453 833 q 242 883 296 833 q 187 1014 187 934 l 289 1014 q 312 943 289 974 q 391 913 335 913 q 468 943 445 913 q 491 1014 491 974 z "},"Ő":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 500 1048 l 656 1253 l 797 1253 l 615 1048 l 500 1048 m 311 1048 l 426 1253 l 560 1253 l 412 1048 l 311 1048 z "},"ő":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 411 836 l 567 1041 l 707 1041 l 526 836 l 411 836 m 221 836 l 336 1041 l 471 1041 l 323 836 l 221 836 z "},"Ŕ":{"ha":856,"x_min":115,"x_max":831,"o":"m 115 987 l 441 987 q 630 954 553 987 q 747 853 707 920 q 787 691 787 787 q 760 567 787 623 q 681 472 732 511 q 559 414 630 433 l 522 400 l 215 400 l 214 507 l 446 507 q 563 531 516 507 q 633 598 610 556 q 657 691 657 640 q 635 791 657 748 q 565 857 612 833 q 441 880 517 880 l 245 880 l 245 0 l 115 0 l 115 987 m 692 0 l 452 448 l 588 448 l 831 8 l 831 0 l 692 0 m 345 1053 l 476 1253 l 627 1253 l 446 1053 l 345 1053 z "},"ŕ":{"ha":471,"x_min":96,"x_max":490,"o":"m 221 618 l 221 0 l 96 0 l 96 734 l 218 734 l 221 618 m 450 738 l 450 621 q 420 626 434 625 q 389 627 406 627 q 312 613 345 627 q 256 575 279 600 q 219 517 233 551 q 202 444 206 484 l 167 423 q 180 548 167 490 q 221 651 193 606 q 292 722 249 696 q 395 747 335 747 q 426 744 408 747 q 450 738 444 741 m 208 842 l 339 1042 l 490 1042 l 309 842 l 208 842 z "},"Ŗ":{"ha":856,"x_min":115,"x_max":831,"o":"m 115 987 l 441 987 q 630 954 553 987 q 747 853 707 920 q 787 691 787 787 q 760 567 787 623 q 681 472 732 511 q 559 414 630 433 l 522 400 l 215 400 l 214 507 l 446 507 q 563 531 516 507 q 633 598 610 556 q 657 691 657 640 q 635 791 657 748 q 565 857 612 833 q 441 880 517 880 l 245 880 l 245 0 l 115 0 l 115 987 m 692 0 l 452 448 l 588 448 l 831 8 l 831 0 l 692 0 m 473 -71 l 473 -125 q 449 -240 473 -178 q 375 -343 425 -302 l 304 -294 q 341 -214 329 -255 q 354 -126 354 -174 l 354 -71 l 473 -71 z "},"ŗ":{"ha":471,"x_min":56,"x_max":450,"o":"m 221 618 l 221 0 l 96 0 l 96 734 l 218 734 l 221 618 m 450 738 l 450 621 q 420 626 434 625 q 389 627 406 627 q 312 613 345 627 q 256 575 279 600 q 219 517 233 551 q 202 444 206 484 l 167 423 q 180 548 167 490 q 221 651 193 606 q 292 722 249 696 q 395 747 335 747 q 426 744 408 747 q 450 738 444 741 m 226 -71 l 226 -124 q 202 -239 226 -178 q 127 -342 178 -301 l 56 -293 q 94 -214 81 -254 q 106 -125 106 -173 l 106 -71 l 226 -71 z "},"Ř":{"ha":856,"x_min":115,"x_max":831,"o":"m 115 987 l 441 987 q 630 954 553 987 q 747 853 707 920 q 787 691 787 787 q 760 567 787 623 q 681 472 732 511 q 559 414 630 433 l 522 400 l 215 400 l 214 507 l 446 507 q 563 531 516 507 q 633 598 610 556 q 657 691 657 640 q 635 791 657 748 q 565 857 612 833 q 441 880 517 880 l 245 880 l 245 0 l 115 0 l 115 987 m 692 0 l 452 448 l 588 448 l 831 8 l 831 0 l 692 0 m 311 1252 l 413 1137 l 515 1252 l 624 1252 l 624 1245 l 452 1059 l 374 1059 l 205 1245 l 205 1252 l 311 1252 z "},"ř":{"ha":471,"x_min":68,"x_max":487,"o":"m 221 618 l 221 0 l 96 0 l 96 734 l 218 734 l 221 618 m 450 738 l 450 621 q 420 626 434 625 q 389 627 406 627 q 312 613 345 627 q 256 575 279 600 q 219 517 233 551 q 202 444 206 484 l 167 423 q 180 548 167 490 q 221 651 193 606 q 292 722 249 696 q 395 747 335 747 q 426 744 408 747 q 450 738 444 741 m 174 1041 l 276 926 l 378 1041 l 487 1041 l 487 1034 l 315 848 l 237 848 l 68 1034 l 68 1041 l 174 1041 z "},"Ś":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 m 353 1055 l 484 1254 l 635 1254 l 454 1055 l 353 1055 z "},"ś":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 m 312 842 l 444 1042 l 595 1042 l 413 842 l 312 842 z "},"Ŝ":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 m 460 1254 l 628 1069 l 628 1062 l 524 1062 l 422 1177 l 321 1062 l 218 1062 l 218 1069 l 384 1254 l 460 1254 z "},"ŝ":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 m 419 1042 l 587 857 l 587 850 l 483 850 l 381 964 l 280 850 l 177 850 l 177 857 l 343 1042 l 419 1042 z "},"Ş":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 m 385 -1 l 475 -1 l 467 -37 q 538 -69 506 -43 q 570 -154 570 -95 q 557 -212 570 -186 q 518 -257 544 -238 q 454 -286 492 -275 q 365 -296 416 -296 l 360 -223 q 417 -216 391 -223 q 457 -195 442 -210 q 473 -156 473 -180 q 461 -121 473 -134 q 426 -101 450 -108 q 363 -92 401 -95 l 385 -1 z "},"ş":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 m 340 -7 l 430 -7 l 422 -43 q 493 -75 461 -50 q 526 -160 526 -101 q 512 -218 526 -192 q 473 -263 499 -244 q 409 -292 448 -281 q 320 -302 371 -302 l 315 -229 q 372 -222 347 -229 q 413 -201 397 -216 q 428 -162 428 -186 q 416 -127 428 -140 q 381 -107 405 -114 q 319 -98 357 -101 l 340 -7 z "},"Ș":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 m 485 -79 l 485 -132 q 461 -248 485 -186 q 387 -351 437 -309 l 315 -301 q 353 -222 340 -262 q 366 -134 366 -181 l 366 -79 l 485 -79 z "},"ș":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 m 440 -85 l 440 -138 q 416 -254 440 -192 q 342 -357 392 -315 l 271 -307 q 308 -228 296 -269 q 321 -140 321 -187 l 321 -85 l 440 -85 z "},"Š":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 m 319 1253 l 421 1138 l 524 1253 l 632 1253 l 632 1246 l 460 1061 l 382 1061 l 213 1246 l 213 1253 l 319 1253 z "},"š":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 m 278 1041 l 380 926 l 483 1041 l 591 1041 l 591 1034 l 419 848 l 342 848 l 172 1034 l 172 1041 l 278 1041 z "},"Ț":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 m 475 -78 l 475 -132 q 451 -247 475 -185 q 377 -350 427 -309 l 306 -300 q 343 -221 331 -262 q 356 -133 356 -180 l 356 -78 l 475 -78 z "},"ț":{"ha":454,"x_min":6,"x_max":406,"o":"m 403 734 l 403 637 l 6 637 l 6 734 l 403 734 m 140 912 l 266 912 l 266 182 q 277 125 266 144 q 307 100 289 106 q 347 94 326 94 q 379 97 362 94 q 406 102 397 100 l 406 0 q 367 -9 391 -5 q 309 -14 343 -14 q 224 5 263 -14 q 163 66 186 23 q 140 182 140 109 l 140 912 m 366 -78 l 366 -132 q 342 -247 366 -185 q 268 -350 318 -309 l 197 -300 q 234 -221 222 -262 q 247 -133 247 -180 l 247 -78 l 366 -78 z "},"Ţ":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 m 375 0 l 465 0 l 457 -36 q 529 -68 496 -43 q 561 -153 561 -94 q 548 -211 561 -185 q 509 -256 534 -237 q 445 -285 483 -275 q 355 -295 406 -295 l 351 -222 q 407 -216 382 -222 q 448 -194 433 -209 q 463 -155 463 -179 q 452 -120 463 -133 q 416 -101 440 -107 q 354 -92 392 -94 l 375 0 z "},"ţ":{"ha":454,"x_min":6,"x_max":452,"o":"m 403 734 l 403 637 l 6 637 l 6 734 l 403 734 m 140 912 l 266 912 l 266 182 q 277 125 266 144 q 307 100 289 106 q 347 94 326 94 q 379 97 362 94 q 406 102 397 100 l 406 0 q 367 -9 391 -5 q 309 -14 343 -14 q 224 5 263 -14 q 163 66 186 23 q 140 182 140 109 l 140 912 m 266 0 l 356 0 l 348 -36 q 419 -68 387 -43 q 452 -153 452 -94 q 438 -211 452 -185 q 399 -256 425 -237 q 335 -285 374 -275 q 246 -295 297 -295 l 241 -222 q 298 -216 273 -222 q 339 -194 323 -209 q 354 -155 354 -179 q 342 -120 354 -133 q 307 -101 331 -107 q 245 -92 283 -94 l 266 0 z "},"Ť":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 m 312 1251 l 414 1136 l 517 1251 l 625 1251 l 625 1244 l 453 1059 l 376 1059 l 206 1244 l 206 1251 l 312 1251 z "},"ť":{"ha":481,"x_min":6,"x_max":507,"o":"m 403 734 l 403 637 l 6 637 l 6 734 l 403 734 m 140 912 l 266 912 l 266 182 q 277 125 266 144 q 307 100 289 106 q 347 94 326 94 q 379 97 362 94 q 406 102 397 100 l 406 0 q 367 -9 391 -5 q 309 -14 343 -14 q 224 5 263 -14 q 163 66 186 23 q 140 182 140 109 l 140 912 m 507 1124 l 507 1071 q 483 956 507 1017 q 409 852 459 894 l 338 902 q 375 981 363 941 q 388 1069 388 1022 l 388 1124 l 507 1124 z "},"Ũ":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 608 1239 l 693 1232 q 673 1145 693 1182 q 621 1087 654 1107 q 547 1067 588 1067 q 490 1077 512 1067 q 450 1099 467 1086 q 413 1121 432 1112 q 365 1131 393 1131 q 317 1109 336 1131 q 298 1056 298 1088 l 213 1060 q 232 1147 213 1109 q 285 1206 252 1185 q 359 1227 318 1227 q 410 1218 388 1227 q 452 1195 432 1208 q 492 1173 471 1183 q 541 1163 513 1163 q 589 1185 569 1163 q 608 1239 608 1207 z "},"ũ":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 541 1028 l 625 1021 q 606 934 625 971 q 553 876 586 897 q 479 856 520 856 q 422 866 444 856 q 382 888 399 876 q 345 910 364 901 q 297 920 326 920 q 249 899 269 920 q 230 845 230 877 l 145 849 q 164 936 145 899 q 217 995 184 974 q 291 1017 250 1017 q 342 1007 320 1017 q 384 984 364 997 q 425 962 404 972 q 473 952 446 952 q 521 974 501 952 q 541 1028 541 996 z "},"Ū":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 684 1196 l 684 1100 l 229 1100 l 229 1196 l 684 1196 z "},"ū":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 616 985 l 616 889 l 161 889 l 161 985 l 616 985 z "},"Ŭ":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 553 1225 l 655 1225 q 631 1131 655 1172 q 561 1067 606 1090 q 453 1044 515 1044 q 304 1094 359 1044 q 250 1225 250 1145 l 351 1225 q 374 1154 351 1185 q 453 1124 397 1124 q 530 1154 507 1124 q 553 1225 553 1185 z "},"ŭ":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 486 1014 l 587 1014 q 563 920 587 961 q 493 856 538 879 q 385 833 448 833 q 236 883 291 833 q 182 1014 182 934 l 283 1014 q 307 943 283 974 q 385 913 330 913 q 463 943 439 913 q 486 1014 486 974 z "},"Ů":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 307 1174 q 326 1245 307 1213 q 378 1296 345 1277 q 452 1315 411 1315 q 556 1274 514 1315 q 598 1174 598 1232 q 579 1103 598 1135 q 527 1054 559 1072 q 452 1036 494 1036 q 349 1075 391 1036 q 307 1174 307 1114 m 374 1174 q 396 1120 374 1144 q 452 1096 418 1096 q 509 1119 487 1096 q 531 1174 531 1143 q 509 1230 531 1206 q 452 1254 487 1254 q 396 1230 418 1254 q 374 1174 374 1206 z "},"ů":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 239 963 q 258 1034 239 1002 q 310 1085 277 1066 q 385 1104 343 1104 q 488 1063 446 1104 q 530 963 530 1021 q 511 892 530 924 q 459 843 492 861 q 385 825 426 825 q 281 864 323 825 q 239 963 239 903 m 306 963 q 328 909 306 933 q 385 885 350 885 q 441 908 419 885 q 463 963 463 932 q 441 1019 463 995 q 385 1043 419 1043 q 328 1019 350 1043 q 306 963 306 995 z "},"Ű":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 473 1046 l 629 1252 l 770 1252 l 588 1046 l 473 1046 m 283 1046 l 399 1252 l 533 1252 l 385 1046 l 283 1046 z "},"ű":{"ha":766,"x_min":93,"x_max":702,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 406 836 l 562 1041 l 702 1041 l 520 836 l 406 836 m 216 836 l 331 1041 l 465 1041 l 317 836 l 216 836 z "},"Ų":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 588 68 l 638 30 q 583 -15 609 8 q 539 -65 556 -39 q 522 -121 522 -91 q 534 -157 522 -143 q 575 -170 546 -170 q 615 -164 597 -170 q 643 -152 633 -157 l 652 -235 q 609 -255 635 -245 q 543 -264 583 -264 q 451 -232 488 -264 q 413 -135 413 -199 q 431 -62 413 -98 q 488 7 449 -26 q 588 68 526 40 z "},"ų":{"ha":766,"x_min":93,"x_max":678,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 614 39 l 664 0 q 608 -45 635 -22 q 565 -95 582 -68 q 548 -151 548 -121 q 560 -186 548 -173 q 601 -200 572 -200 q 641 -194 623 -200 q 669 -182 659 -187 l 678 -264 q 635 -284 661 -275 q 569 -294 609 -294 q 476 -261 514 -294 q 439 -165 439 -229 q 457 -92 439 -128 q 513 -23 475 -56 q 614 39 552 10 z "},"Ŵ":{"ha":1232,"x_min":41,"x_max":1202,"o":"m 374 298 l 570 987 l 665 987 l 610 720 l 399 0 l 305 0 l 374 298 m 172 987 l 328 312 l 374 0 l 281 0 l 41 987 l 172 987 m 919 313 l 1072 987 l 1202 987 l 964 0 l 870 0 l 919 313 m 680 987 l 870 298 l 939 0 l 845 0 l 642 720 l 586 987 l 680 987 m 665 1253 l 833 1067 l 833 1061 l 728 1061 l 627 1175 l 526 1061 l 422 1061 l 422 1068 l 589 1253 l 665 1253 z "},"ŵ":{"ha":1044,"x_min":29,"x_max":1011,"o":"m 281 130 l 470 734 l 553 734 l 536 614 l 345 0 l 264 0 l 281 130 m 155 734 l 315 123 l 327 0 l 242 0 l 29 734 l 155 734 m 733 128 l 886 734 l 1011 734 l 798 0 l 714 0 l 733 128 m 571 734 l 755 140 l 777 0 l 696 0 l 499 615 l 483 734 l 571 734 m 555 1042 l 724 857 l 724 850 l 619 850 l 517 964 l 416 850 l 313 850 l 313 857 l 479 1042 l 555 1042 z "},"Ŷ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 457 1252 l 625 1067 l 625 1060 l 521 1060 l 419 1175 l 318 1060 l 215 1060 l 215 1067 l 381 1252 l 457 1252 z "},"ŷ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 382 1042 l 551 857 l 551 850 l 446 850 l 345 964 l 243 850 l 140 850 l 140 857 l 307 1042 l 382 1042 z "},"Ÿ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 201 1140 q 220 1192 201 1171 q 275 1213 239 1213 q 330 1192 311 1213 q 349 1140 349 1171 q 330 1090 349 1111 q 275 1069 311 1069 q 220 1090 239 1069 q 201 1140 201 1111 m 493 1139 q 512 1190 493 1169 q 567 1211 530 1211 q 622 1190 603 1211 q 642 1139 642 1169 q 622 1089 642 1109 q 567 1068 603 1068 q 512 1089 530 1068 q 493 1139 493 1109 z "},"Ź":{"ha":832,"x_min":59,"x_max":777,"o":"m 777 106 l 777 0 l 109 0 l 109 106 l 777 106 m 755 892 l 140 0 l 59 0 l 59 98 l 674 987 l 755 987 l 755 892 m 700 987 l 700 880 l 68 880 l 68 987 l 700 987 m 349 1053 l 480 1253 l 631 1253 l 450 1053 l 349 1053 z "},"ź":{"ha":689,"x_min":60,"x_max":642,"o":"m 642 103 l 642 0 l 109 0 l 109 103 l 642 103 m 623 645 l 137 0 l 60 0 l 60 92 l 543 734 l 623 734 l 623 645 m 567 734 l 567 630 l 66 630 l 66 734 l 567 734 m 280 842 l 412 1042 l 563 1042 l 381 842 l 280 842 z "},"Ż":{"ha":832,"x_min":59,"x_max":777,"o":"m 777 106 l 777 0 l 109 0 l 109 106 l 777 106 m 755 892 l 140 0 l 59 0 l 59 98 l 674 987 l 755 987 l 755 892 m 700 987 l 700 880 l 68 880 l 68 987 l 700 987 m 344 1139 q 362 1190 344 1168 q 418 1211 381 1211 q 473 1190 454 1211 q 492 1139 492 1168 q 473 1088 492 1109 q 418 1067 454 1067 q 362 1088 381 1067 q 344 1139 344 1109 z "},"ż":{"ha":689,"x_min":60,"x_max":642,"o":"m 642 103 l 642 0 l 109 0 l 109 103 l 642 103 m 623 645 l 137 0 l 60 0 l 60 92 l 543 734 l 623 734 l 623 645 m 567 734 l 567 630 l 66 630 l 66 734 l 567 734 m 275 928 q 294 979 275 958 q 349 1000 313 1000 q 405 979 385 1000 q 424 928 424 958 q 405 877 424 898 q 349 857 385 857 q 294 877 313 857 q 275 928 275 898 z "},"Ž":{"ha":832,"x_min":59,"x_max":777,"o":"m 777 106 l 777 0 l 109 0 l 109 106 l 777 106 m 755 892 l 140 0 l 59 0 l 59 98 l 674 987 l 755 987 l 755 892 m 700 987 l 700 880 l 68 880 l 68 987 l 700 987 m 315 1252 l 417 1137 l 519 1252 l 628 1252 l 628 1245 l 456 1059 l 378 1059 l 209 1245 l 209 1252 l 315 1252 z "},"ž":{"ha":689,"x_min":60,"x_max":642,"o":"m 642 103 l 642 0 l 109 0 l 109 103 l 642 103 m 623 645 l 137 0 l 60 0 l 60 92 l 543 734 l 623 734 l 623 645 m 567 734 l 567 630 l 66 630 l 66 734 l 567 734 m 246 1041 l 349 926 l 451 1041 l 559 1041 l 559 1034 l 387 848 l 310 848 l 140 1034 l 140 1041 l 246 1041 z "},"Ǽ":{"ha":1298,"x_min":-10,"x_max":1275,"o":"m 658 886 l 144 0 l -10 0 l 587 987 l 668 987 l 658 886 m 756 358 l 756 239 l 252 239 l 252 358 l 756 358 m 1275 103 l 1275 0 l 778 0 l 778 103 l 1275 103 m 760 987 l 802 0 l 675 0 l 634 987 l 760 987 m 1178 566 l 1178 463 l 751 463 l 751 566 l 1178 566 m 1233 987 l 1233 884 l 736 884 l 736 987 l 1233 987 m 568 1061 l 699 1260 l 850 1260 l 669 1061 l 568 1061 z "},"ǽ":{"ha":1173,"x_min":54,"x_max":1126,"o":"m 508 124 l 508 488 q 491 572 508 537 q 442 626 475 607 q 363 644 410 644 q 275 627 313 644 q 218 580 238 609 q 197 515 197 551 l 73 528 q 94 615 73 575 q 153 685 115 655 q 244 731 191 715 q 363 747 298 747 q 503 718 443 747 q 596 631 563 689 q 630 487 630 574 l 630 148 l 508 124 m 536 431 l 536 336 l 359 336 q 260 318 300 336 q 199 269 220 299 q 179 203 179 239 q 194 145 179 171 q 240 103 210 119 q 319 88 271 88 q 394 102 355 88 q 464 138 432 116 q 516 184 496 160 q 537 230 536 209 l 602 132 q 544 65 584 99 q 443 8 505 31 q 294 -14 380 -14 q 163 13 217 -14 q 81 90 109 40 q 54 206 54 140 q 73 301 54 260 q 131 372 92 343 q 226 416 169 401 q 357 431 283 431 l 536 431 m 857 -14 q 709 13 773 -14 q 602 89 646 40 q 536 205 559 138 q 514 353 514 273 l 514 382 q 537 530 514 463 q 603 646 561 597 q 703 721 646 694 q 827 747 760 748 q 956 725 900 747 q 1050 659 1012 702 q 1107 555 1088 616 q 1126 418 1126 494 l 1126 338 l 581 338 l 581 434 l 1000 434 l 1000 455 q 983 549 1000 507 q 928 618 966 592 q 827 644 890 644 q 744 624 780 644 q 683 568 708 604 q 646 484 659 532 q 633 382 633 437 l 633 353 q 646 250 633 298 q 686 166 659 202 q 755 109 713 130 q 857 89 798 89 q 987 114 937 89 q 1070 161 1036 138 l 1114 69 q 1066 38 1099 58 q 981 2 1034 18 q 857 -14 929 -14 m 513 843 l 645 1042 l 796 1042 l 614 843 l 513 843 z "},"Ǿ":{"ha":956,"x_min":81,"x_max":888,"o":"m 888 1028 l 208 -63 l 111 -63 l 793 1028 l 888 1028 m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 348 7 409 -14 q 238 69 287 28 q 153 167 189 109 q 99 299 118 225 q 81 463 81 374 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 611 980 549 1001 q 721 919 672 959 q 804 820 770 878 q 857 688 838 762 q 875 525 875 614 m 745 463 l 745 526 q 734 654 745 597 q 700 755 722 711 q 645 829 677 800 q 570 874 612 859 q 477 890 528 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 222 334 210 391 q 258 232 235 276 q 314 157 281 187 q 389 112 347 127 q 479 97 430 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 416 1103 l 547 1302 l 699 1302 l 517 1103 l 416 1103 z "},"ǿ":{"ha":787,"x_min":62,"x_max":730,"o":"m 667 820 l 217 -92 l 134 -92 l 583 820 l 667 820 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 295 842 l 427 1041 l 578 1041 l 396 842 l 295 842 z "},"Ά":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 127 856 l 163 1084 l 281 1084 l 203 856 l 127 856 z "},"Έ":{"ha":857,"x_min":-79,"x_max":810,"o":"m 810 106 l 810 0 l 287 0 l 287 106 l 810 106 m 313 987 l 313 0 l 182 0 l 182 987 l 313 987 m 741 563 l 741 456 l 287 456 l 287 563 l 741 563 m 803 987 l 803 880 l 287 880 l 287 987 l 803 987 m -79 857 l -42 1084 l 76 1084 l -3 857 l -79 857 z "},"Ή":{"ha":1059,"x_min":-69,"x_max":941,"o":"m 827 563 l 827 456 l 293 456 l 293 563 l 827 563 m 313 987 l 313 0 l 182 0 l 182 987 l 313 987 m 941 987 l 941 0 l 811 0 l 811 987 l 941 987 m -69 858 l -33 1086 l 85 1086 l 7 858 l -69 858 z "},"Ί":{"ha":446,"x_min":-65,"x_max":323,"o":"m 323 987 l 323 0 l 192 0 l 192 987 l 323 987 m -65 858 l -28 1086 l 90 1086 l 11 858 l -65 858 z "},"Ό":{"ha":969,"x_min":-4,"x_max":888,"o":"m 888 525 l 888 463 q 861 263 888 351 q 781 113 833 175 q 655 19 728 52 q 492 -14 583 -14 q 332 19 405 -14 q 206 113 259 52 q 123 263 153 175 q 94 463 94 351 l 94 525 q 123 724 94 636 q 205 874 152 812 q 331 968 258 936 q 491 1001 404 1001 q 654 968 581 1001 q 780 874 727 936 q 860 724 832 812 q 888 525 888 636 m 759 463 l 759 526 q 741 682 759 614 q 688 796 723 750 q 604 866 654 842 q 491 890 554 890 q 381 866 430 890 q 297 796 332 842 q 243 682 262 750 q 224 526 224 614 l 224 463 q 243 306 224 374 q 297 191 262 237 q 382 121 333 144 q 492 97 431 97 q 606 121 556 97 q 689 191 655 144 q 741 306 724 237 q 759 463 759 374 m -4 856 l 33 1084 l 151 1084 l 72 856 l -4 856 z "},"Ύ":{"ha":902,"x_min":-94,"x_max":890,"o":"m 228 987 l 484 492 l 741 987 l 890 987 l 549 369 l 549 0 l 418 0 l 418 369 l 78 987 l 228 987 m -94 856 l -57 1084 l 61 1084 l -18 856 l -94 856 z "},"Ώ":{"ha":937,"x_min":-3,"x_max":846,"o":"m 714 492 l 714 571 q 697 711 714 650 q 648 812 680 771 q 570 874 615 853 q 467 895 524 895 q 366 874 411 895 q 289 812 321 853 q 240 711 257 771 q 223 571 223 650 l 223 492 q 238 338 223 406 q 279 223 252 271 q 344 148 307 176 q 427 111 382 119 l 427 15 q 293 67 354 24 q 186 177 231 110 q 116 325 141 243 q 91 492 91 406 l 91 570 q 118 745 91 666 q 195 881 145 824 q 314 970 245 939 q 467 1001 383 1001 q 622 970 552 1001 q 741 881 691 939 q 819 745 791 824 q 846 570 846 666 l 846 492 q 822 326 846 407 q 752 177 797 244 q 647 67 707 111 q 514 15 586 24 l 514 111 q 596 148 559 120 q 659 224 633 176 q 700 339 686 272 q 714 492 714 406 m 514 0 l 514 106 l 842 106 l 842 0 l 514 0 m 94 0 l 94 106 l 427 106 l 427 0 l 94 0 m -3 856 l 34 1084 l 152 1084 l 73 856 l -3 856 z "},"ΐ":{"ha":450,"x_min":-68,"x_max":464,"o":"m 132 734 l 258 734 l 258 187 q 270 131 258 150 q 300 105 281 112 q 339 99 318 99 q 372 102 355 99 q 398 107 389 105 l 399 5 q 360 -4 384 1 q 302 -9 336 -9 q 217 10 256 -9 q 155 72 178 28 q 132 188 132 115 l 132 734 m 148 941 l 180 1120 l 308 1120 l 240 941 l 148 941 m -68 916 q -50 967 -68 946 q 5 988 -31 988 q 61 967 41 988 q 80 916 80 946 q 61 866 80 886 q 5 845 41 845 q -50 866 -31 845 q -68 916 -68 886 m 315 914 q 334 966 315 945 q 389 987 353 987 q 445 966 426 987 q 464 914 464 945 q 445 864 464 885 q 389 844 426 844 q 334 864 353 844 q 315 914 315 885 z "},"Α":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 z "},"Β":{"ha":865,"x_min":115,"x_max":787,"o":"m 467 462 l 216 462 l 215 567 l 442 567 q 541 586 498 567 q 606 641 583 605 q 629 726 629 676 q 609 814 629 780 q 546 864 588 848 q 438 880 503 880 l 245 880 l 245 0 l 115 0 l 115 987 l 438 987 q 574 972 514 987 q 675 925 633 957 q 739 843 717 892 q 760 724 760 793 q 729 614 760 663 q 643 534 698 565 q 513 494 587 503 l 467 462 m 460 0 l 165 0 l 239 106 l 460 106 q 567 128 523 106 q 633 190 610 150 q 656 283 656 229 q 637 378 656 338 q 575 440 617 418 q 467 462 533 462 l 280 462 l 281 567 l 536 567 l 564 529 q 685 489 635 523 q 761 401 734 454 q 787 285 787 349 q 746 129 787 193 q 633 33 706 66 q 460 0 559 0 z "},"Ε":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 z "},"Ζ":{"ha":832,"x_min":59,"x_max":777,"o":"m 777 106 l 777 0 l 109 0 l 109 106 l 777 106 m 755 892 l 140 0 l 59 0 l 59 98 l 674 987 l 755 987 l 755 892 m 700 987 l 700 880 l 68 880 l 68 987 l 700 987 z "},"Η":{"ha":991,"x_min":115,"x_max":873,"o":"m 760 563 l 760 456 l 225 456 l 225 563 l 760 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 z "},"Ι":{"ha":378,"x_min":124,"x_max":255,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 z "},"Κ":{"ha":871,"x_min":115,"x_max":871,"o":"m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 842 987 l 431 527 l 201 288 l 179 427 l 353 618 l 684 987 l 842 987 m 715 0 l 350 481 l 428 585 l 871 0 l 715 0 z "},"Μ":{"ha":1213,"x_min":115,"x_max":1097,"o":"m 156 987 l 283 987 l 606 182 l 929 987 l 1057 987 l 655 0 l 556 0 l 156 987 m 115 987 l 227 987 l 245 385 l 245 0 l 115 0 l 115 987 m 985 987 l 1097 987 l 1097 0 l 967 0 l 967 385 l 985 987 z "},"Ν":{"ha":991,"x_min":115,"x_max":874,"o":"m 874 987 l 874 0 l 743 0 l 245 762 l 245 0 l 115 0 l 115 987 l 245 987 l 745 224 l 745 987 l 874 987 z "},"Ο":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 z "},"Ρ":{"ha":876,"x_min":115,"x_max":825,"o":"m 479 387 l 215 387 l 215 494 l 479 494 q 603 518 555 494 q 672 586 650 543 q 694 685 694 629 q 672 781 694 736 q 603 853 650 825 q 479 880 555 880 l 245 880 l 245 0 l 115 0 l 115 987 l 479 987 q 668 949 591 987 q 785 842 745 910 q 825 686 825 774 q 785 524 825 591 q 668 422 745 457 q 479 387 591 387 z "},"Τ":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 z "},"Υ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 z "},"Χ":{"ha":871,"x_min":39,"x_max":834,"o":"m 199 987 l 437 609 l 674 987 l 827 987 l 515 498 l 834 0 l 680 0 l 437 386 l 193 0 l 39 0 l 359 498 l 47 987 l 199 987 z "},"Ϊ":{"ha":378,"x_min":-29,"x_max":412,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m -29 1148 q -10 1200 -29 1179 q 45 1221 9 1221 q 100 1200 81 1221 q 119 1148 119 1179 q 100 1098 119 1119 q 45 1078 81 1078 q -10 1098 9 1078 q -29 1148 -29 1119 m 263 1147 q 282 1198 263 1177 q 337 1219 300 1219 q 392 1198 373 1219 q 412 1147 412 1177 q 392 1097 412 1118 q 337 1076 373 1076 q 282 1097 300 1076 q 263 1147 263 1118 z "},"Ϋ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 201 1140 q 220 1192 201 1171 q 275 1213 239 1213 q 330 1192 311 1213 q 349 1140 349 1171 q 330 1090 349 1111 q 275 1069 311 1069 q 220 1090 239 1069 q 201 1140 201 1111 m 493 1139 q 512 1190 493 1169 q 567 1211 530 1211 q 622 1190 603 1211 q 642 1139 642 1169 q 622 1089 642 1109 q 567 1068 603 1068 q 512 1089 530 1068 q 493 1139 493 1109 z "},"ά":{"ha":785,"x_min":68,"x_max":776,"o":"m 68 340 l 68 354 q 87 513 68 441 q 142 637 106 585 q 232 719 178 690 q 355 747 286 747 q 450 732 408 747 q 525 686 492 716 q 581 613 557 656 q 618 515 604 570 q 638 394 632 460 l 638 338 q 610 192 631 256 q 555 81 590 127 q 471 10 521 35 q 353 -14 420 -14 q 232 12 286 -14 q 142 85 179 38 q 87 198 106 133 q 68 340 68 262 m 194 354 l 194 340 q 205 242 194 288 q 238 162 216 197 q 297 108 261 127 q 385 89 334 89 q 469 109 434 89 q 529 164 505 130 q 569 244 553 199 q 595 337 585 289 l 595 382 q 572 478 587 431 q 532 563 557 525 q 471 622 507 600 q 386 644 435 644 q 298 621 334 644 q 239 558 262 598 q 205 466 216 518 q 194 354 194 413 m 576 734 l 683 734 l 683 200 q 687 149 683 169 q 699 118 691 130 q 716 103 707 107 q 737 98 726 98 q 750 100 744 98 q 760 102 755 101 l 776 9 q 734 -10 755 -6 q 692 -14 714 -14 q 635 -2 661 -14 q 593 35 610 9 q 566 101 575 60 q 557 200 557 142 l 557 574 l 576 734 m 378 852 l 414 1080 l 532 1080 l 454 852 l 378 852 z "},"έ":{"ha":749,"x_min":68,"x_max":681,"o":"m 356 398 l 505 398 l 505 325 l 366 325 q 272 312 310 325 q 214 274 233 300 q 194 206 194 248 q 206 161 194 182 q 241 123 218 140 q 298 98 264 107 q 374 88 332 88 q 470 106 429 88 q 533 154 511 125 q 556 217 556 184 l 681 217 q 654 114 681 157 q 584 42 628 70 q 485 0 540 14 q 374 -14 431 -14 q 252 1 308 -14 q 155 45 196 16 q 91 114 113 73 q 68 207 68 155 q 87 289 68 253 q 143 349 106 324 q 234 386 180 373 q 356 398 288 398 m 505 351 l 356 351 q 243 365 294 351 q 156 405 192 379 q 100 463 119 430 q 81 534 81 496 q 101 626 81 586 q 161 692 122 665 q 254 733 199 719 q 374 747 308 747 q 488 732 435 747 q 582 688 541 717 q 646 620 623 660 q 669 530 669 580 l 544 530 q 521 588 544 562 q 460 630 498 614 q 374 645 422 645 q 279 629 317 645 q 224 588 242 613 q 206 534 206 562 q 215 490 206 510 q 243 455 224 470 q 293 433 262 441 q 366 425 323 425 l 505 425 l 505 351 m 328 851 l 364 1079 l 482 1079 l 404 851 l 328 851 z "},"ή":{"ha":787,"x_min":99,"x_max":684,"o":"m 224 577 l 224 0 l 99 0 l 99 734 l 212 734 l 224 577 m 199 391 l 146 389 q 165 533 146 467 q 223 646 185 598 q 314 721 260 694 q 436 747 368 747 q 539 734 493 747 q 617 688 585 720 q 667 603 650 656 q 684 471 684 550 l 684 -281 l 559 -281 l 559 469 q 548 553 559 519 q 517 607 538 587 q 467 635 496 627 q 399 644 437 644 q 307 624 345 644 q 245 569 269 604 q 210 488 221 534 q 199 391 199 442 m 346 852 l 382 1080 l 500 1080 l 422 852 l 346 852 z "},"ί":{"ha":450,"x_min":132,"x_max":399,"o":"m 132 734 l 258 734 l 258 187 q 270 131 258 150 q 300 105 281 112 q 339 99 318 99 q 372 102 355 99 q 398 107 389 105 l 399 5 q 360 -4 384 1 q 302 -9 336 -9 q 217 10 256 -9 q 155 72 178 28 q 132 188 132 115 l 132 734 m 153 838 l 190 1065 l 308 1065 l 229 838 l 153 838 z "},"ΰ":{"ha":758,"x_min":98,"x_max":688,"o":"m 98 734 l 223 734 l 223 289 q 233 196 223 235 q 262 134 243 158 q 306 100 281 111 q 360 89 331 89 q 448 114 410 89 q 511 182 486 140 q 549 277 536 225 q 562 381 562 329 q 537 562 561 473 q 479 734 513 650 l 611 734 q 649 639 631 692 q 677 522 667 586 q 688 382 688 458 q 669 232 688 304 q 610 105 650 161 q 509 18 570 50 q 366 -14 449 -14 q 255 4 304 -14 q 170 59 205 22 q 116 153 135 96 q 98 290 98 211 l 98 734 m 317 941 l 349 1120 l 477 1120 l 409 941 l 317 941 m 100 916 q 119 967 100 946 q 174 988 138 988 q 230 967 210 988 q 249 916 249 946 q 230 866 249 886 q 174 845 210 845 q 119 866 138 845 q 100 916 100 886 m 484 914 q 503 966 484 945 q 558 987 522 987 q 614 966 595 987 q 633 914 633 945 q 614 864 633 885 q 558 844 595 844 q 503 864 522 844 q 484 914 484 885 z "},"κ":{"ha":773,"x_min":105,"x_max":738,"o":"m 231 734 l 231 0 l 105 0 l 105 734 l 231 734 m 713 734 l 351 313 l 189 313 l 170 423 l 293 423 l 562 734 l 713 734 m 579 0 l 287 332 l 368 423 l 738 0 l 579 0 z "},"ο":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 z "},"μ":{"ha":787,"x_min":105,"x_max":682,"o":"m 557 734 l 682 734 l 682 0 l 569 0 l 557 170 l 557 734 m 579 341 l 626 342 q 612 200 626 265 q 569 87 598 135 q 494 12 540 39 q 385 -14 449 -14 q 293 -1 334 -14 q 224 41 253 12 q 176 116 195 70 l 151 312 l 230 312 q 241 198 230 242 q 274 130 253 154 q 321 98 294 106 q 380 89 349 89 q 479 107 440 89 q 540 160 518 126 q 570 240 562 194 q 579 341 579 286 m 105 734 l 230 734 l 230 -282 l 105 -282 l 105 734 z "},"ν":{"ha":673,"x_min":22,"x_max":648,"o":"m 319 113 l 519 734 l 648 734 l 384 0 l 300 0 l 319 113 m 151 734 l 358 110 l 372 0 l 288 0 l 22 734 l 151 734 z "},"χ":{"ha":770,"x_min":61,"x_max":774,"o":"m 710 734 l 215 -282 l 81 -282 l 583 734 l 710 734 m 132 744 q 214 726 181 744 q 270 680 248 708 q 307 621 292 652 q 333 563 321 589 l 614 -80 q 642 -132 627 -109 q 673 -169 656 -155 q 711 -182 690 -182 q 742 -181 722 -182 q 774 -178 763 -180 l 741 -286 q 722 -293 734 -291 q 700 -296 709 -296 q 632 -284 661 -296 q 581 -249 603 -272 q 541 -192 559 -226 q 503 -113 522 -157 l 230 513 q 200 573 217 545 q 161 619 184 602 q 108 637 139 637 q 85 635 100 637 q 62 633 71 634 l 61 734 q 94 741 73 738 q 132 744 115 744 z "},"ϊ":{"ha":450,"x_min":-19,"x_max":422,"o":"m 132 734 l 258 734 l 258 187 q 270 131 258 150 q 300 105 281 112 q 339 99 318 99 q 372 102 355 99 q 398 107 389 105 l 399 5 q 360 -4 384 1 q 302 -9 336 -9 q 217 10 256 -9 q 155 72 178 28 q 132 188 132 115 l 132 734 m -19 916 q 0 967 -19 946 q 55 988 19 988 q 111 967 92 988 q 130 916 130 946 q 111 866 130 886 q 55 845 92 845 q 0 866 19 845 q -19 916 -19 886 m 273 914 q 292 966 273 945 q 347 987 311 987 q 402 966 383 987 q 422 914 422 945 q 402 864 422 885 q 347 844 383 844 q 292 864 311 844 q 273 914 273 885 z "},"ϋ":{"ha":758,"x_min":98,"x_max":688,"o":"m 98 734 l 223 734 l 223 289 q 233 196 223 235 q 262 134 243 158 q 306 100 281 111 q 360 89 331 89 q 448 114 410 89 q 511 182 486 140 q 549 277 536 225 q 562 381 562 329 q 537 562 561 473 q 479 734 513 650 l 611 734 q 649 639 631 692 q 677 522 667 586 q 688 382 688 458 q 669 232 688 304 q 610 105 650 161 q 509 18 570 50 q 366 -14 449 -14 q 255 4 304 -14 q 170 59 205 22 q 116 153 135 96 q 98 290 98 211 l 98 734 m 150 916 q 169 967 150 946 q 224 988 188 988 q 279 967 260 988 q 298 916 298 946 q 279 866 298 886 q 224 845 260 845 q 169 866 188 845 q 150 916 150 886 m 442 914 q 461 966 442 945 q 516 987 479 987 q 571 966 552 987 q 591 914 591 945 q 571 864 591 885 q 516 844 552 844 q 461 864 479 844 q 442 914 442 885 z "},"ό":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 344 852 l 380 1080 l 498 1080 l 420 852 l 344 852 z "},"ύ":{"ha":758,"x_min":98,"x_max":688,"o":"m 98 734 l 223 734 l 223 289 q 233 196 223 235 q 262 134 243 158 q 306 100 281 111 q 360 89 331 89 q 448 114 410 89 q 511 182 486 140 q 549 277 536 225 q 562 381 562 329 q 537 562 561 473 q 479 734 513 650 l 611 734 q 649 639 631 692 q 677 522 667 586 q 688 382 688 458 q 669 232 688 304 q 610 105 650 161 q 509 18 570 50 q 366 -14 449 -14 q 255 4 304 -14 q 170 59 205 22 q 116 153 135 96 q 98 290 98 211 l 98 734 m 322 838 l 359 1065 l 477 1065 l 398 838 l 322 838 z "},"ώ":{"ha":1144,"x_min":83,"x_max":1059,"o":"m 836 734 l 967 734 q 1013 638 991 691 q 1046 521 1034 585 q 1059 380 1059 457 q 1045 231 1059 302 q 999 105 1030 160 q 916 18 967 50 q 791 -14 864 -14 q 687 8 732 -14 q 610 73 642 30 q 562 178 578 115 q 546 321 546 240 l 546 522 l 634 522 l 634 319 q 645 213 634 256 q 677 141 656 169 q 725 101 697 114 q 784 89 752 89 q 853 112 825 89 q 899 175 882 135 q 925 268 917 216 q 933 380 933 321 q 904 561 931 473 q 836 734 876 650 m 175 734 l 307 734 q 238 561 266 650 q 209 380 211 473 q 214 290 209 333 q 230 210 219 246 q 258 146 241 174 q 300 104 275 119 q 357 89 325 89 q 417 101 390 89 q 465 141 445 114 q 497 213 486 169 q 508 319 508 256 l 508 522 l 596 522 l 596 321 q 580 178 596 240 q 532 73 564 115 q 455 8 500 30 q 351 -14 410 -14 q 248 6 292 -14 q 172 64 203 27 q 121 152 140 102 q 92 260 101 201 q 83 380 83 318 q 96 521 83 457 q 130 638 109 585 q 175 734 151 691 m 529 836 l 566 1063 l 684 1063 l 605 836 l 529 836 z "},"Ё":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 201 1148 q 220 1200 201 1179 q 275 1221 239 1221 q 331 1200 312 1221 q 350 1148 350 1179 q 331 1098 350 1119 q 275 1078 312 1078 q 220 1098 239 1078 q 201 1148 201 1119 m 494 1147 q 512 1198 494 1177 q 568 1219 531 1219 q 623 1198 604 1219 q 642 1147 642 1177 q 623 1097 642 1118 q 568 1076 604 1076 q 512 1097 531 1076 q 494 1147 494 1118 z "},"Ѓ":{"ha":772,"x_min":121,"x_max":727,"o":"m 727 987 l 727 880 l 251 880 l 251 0 l 121 0 l 121 987 l 727 987 m 355 1061 l 486 1260 l 637 1260 l 456 1061 l 355 1061 z "},"Ѕ":{"ha":825,"x_min":55,"x_max":772,"o":"m 641 250 q 630 311 641 284 q 594 359 620 338 q 522 401 568 381 q 406 441 476 420 q 274 489 333 463 q 173 551 215 516 q 109 630 131 585 q 86 732 86 675 q 110 839 86 790 q 178 924 134 888 q 284 981 222 960 q 422 1001 346 1001 q 611 959 533 1001 q 729 848 688 916 q 770 703 770 780 l 640 703 q 616 801 640 758 q 544 869 592 844 q 422 894 496 894 q 307 873 352 894 q 239 816 261 852 q 217 734 217 780 q 230 677 217 703 q 272 630 243 652 q 343 590 300 608 q 448 555 387 572 q 593 502 532 531 q 694 436 654 473 q 753 354 734 400 q 772 251 772 309 q 748 142 772 191 q 678 58 724 93 q 569 5 633 24 q 428 -14 506 -14 q 293 5 359 -14 q 173 62 227 24 q 87 156 119 100 q 55 286 55 212 l 185 286 q 205 199 185 235 q 259 139 224 163 q 337 104 293 115 q 428 93 380 93 q 544 112 496 93 q 616 166 591 131 q 641 250 641 201 z "},"І":{"ha":378,"x_min":124,"x_max":255,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 z "},"Ї":{"ha":378,"x_min":-29,"x_max":412,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m -29 1148 q -10 1200 -29 1179 q 45 1221 9 1221 q 100 1200 81 1221 q 119 1148 119 1179 q 100 1098 119 1119 q 45 1078 81 1078 q -10 1098 9 1078 q -29 1148 -29 1119 m 263 1147 q 282 1198 263 1177 q 337 1219 300 1219 q 392 1198 373 1219 q 412 1147 412 1177 q 392 1097 412 1118 q 337 1076 373 1076 q 282 1097 300 1076 q 263 1147 263 1118 z "},"Ј":{"ha":766,"x_min":36,"x_max":659,"o":"m 529 288 l 529 987 l 659 987 l 659 288 q 619 123 659 191 q 509 21 579 56 q 348 -14 439 -14 q 186 18 257 -14 q 76 113 116 49 q 36 273 36 176 l 167 273 q 190 171 167 211 q 254 112 213 131 q 348 93 295 93 q 440 115 399 93 q 505 181 481 137 q 529 288 529 224 z "},"К":{"ha":892,"x_min":121,"x_max":888,"o":"m 252 987 l 252 0 l 121 0 l 121 987 l 252 987 m 860 987 l 431 444 l 199 444 l 179 553 l 353 553 l 698 987 l 860 987 m 728 0 l 357 461 l 431 576 l 888 0 l 728 0 z "},"Ќ":{"ha":871,"x_min":115,"x_max":871,"o":"m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 842 987 l 431 527 l 201 288 l 179 427 l 353 618 l 684 987 l 842 987 m 715 0 l 350 481 l 428 585 l 871 0 l 715 0 m 341 1049 l 473 1249 l 624 1249 l 442 1049 l 341 1049 z "},"Ў":{"ha":873,"x_min":52,"x_max":832,"o":"m 420 328 l 682 987 l 832 987 l 483 165 q 450 98 468 130 q 405 41 431 66 q 339 1 378 16 q 243 -14 300 -14 q 204 -13 227 -14 q 175 -9 182 -11 l 179 96 q 208 93 186 94 q 240 92 230 92 q 301 108 279 92 q 337 148 323 123 q 363 197 351 172 l 420 328 m 199 987 l 473 372 l 506 251 l 396 243 l 52 987 l 199 987 m 539 1232 l 641 1232 q 616 1138 641 1179 q 547 1074 592 1097 q 439 1051 501 1051 q 290 1102 345 1051 q 235 1232 235 1152 l 337 1232 q 360 1162 337 1192 q 439 1131 383 1131 q 516 1162 493 1131 q 539 1232 539 1192 z "},"А":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 z "},"В":{"ha":865,"x_min":115,"x_max":787,"o":"m 467 462 l 216 462 l 215 567 l 442 567 q 541 586 498 567 q 606 641 583 605 q 629 726 629 676 q 609 814 629 780 q 546 864 588 848 q 438 880 503 880 l 245 880 l 245 0 l 115 0 l 115 987 l 438 987 q 574 972 514 987 q 675 925 633 957 q 739 843 717 892 q 760 724 760 793 q 729 614 760 663 q 643 534 698 565 q 513 494 587 503 l 467 462 m 460 0 l 165 0 l 239 106 l 460 106 q 567 128 523 106 q 633 190 610 150 q 656 283 656 229 q 637 378 656 338 q 575 440 617 418 q 467 462 533 462 l 280 462 l 281 567 l 536 567 l 564 529 q 685 489 635 523 q 761 401 734 454 q 787 285 787 349 q 746 129 787 193 q 633 33 706 66 q 460 0 559 0 z "},"Г":{"ha":772,"x_min":121,"x_max":727,"o":"m 727 987 l 727 880 l 251 880 l 251 0 l 121 0 l 121 987 l 727 987 z "},"Е":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 z "},"Й":{"ha":991,"x_min":121,"x_max":868,"o":"m 251 227 l 737 987 l 868 987 l 868 0 l 737 0 l 737 762 l 251 0 l 121 0 l 121 987 l 251 987 l 251 227 m 598 1232 l 700 1232 q 675 1138 700 1179 q 606 1074 651 1097 q 498 1051 560 1051 q 349 1102 404 1051 q 294 1232 294 1152 l 396 1232 q 419 1162 396 1192 q 498 1131 442 1131 q 575 1162 552 1131 q 598 1232 598 1192 z "},"М":{"ha":1213,"x_min":115,"x_max":1097,"o":"m 156 987 l 283 987 l 606 182 l 929 987 l 1057 987 l 655 0 l 556 0 l 156 987 m 115 987 l 227 987 l 245 385 l 245 0 l 115 0 l 115 987 m 985 987 l 1097 987 l 1097 0 l 967 0 l 967 385 l 985 987 z "},"Н":{"ha":991,"x_min":115,"x_max":873,"o":"m 760 563 l 760 456 l 225 456 l 225 563 l 760 563 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 873 987 l 873 0 l 743 0 l 743 987 l 873 987 z "},"О":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 z "},"П":{"ha":991,"x_min":121,"x_max":869,"o":"m 869 987 l 869 0 l 739 0 l 739 880 l 252 880 l 252 0 l 121 0 l 121 987 l 869 987 z "},"Р":{"ha":876,"x_min":115,"x_max":825,"o":"m 479 387 l 215 387 l 215 494 l 479 494 q 603 518 555 494 q 672 586 650 543 q 694 685 694 629 q 672 781 694 736 q 603 853 650 825 q 479 880 555 880 l 245 880 l 245 0 l 115 0 l 115 987 l 479 987 q 668 949 591 987 q 785 842 745 910 q 825 686 825 774 q 785 524 825 591 q 668 422 745 457 q 479 387 591 387 z "},"С":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 z "},"Т":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 z "},"Х":{"ha":871,"x_min":39,"x_max":834,"o":"m 199 987 l 437 609 l 674 987 l 827 987 l 515 498 l 834 0 l 680 0 l 437 386 l 193 0 l 39 0 l 359 498 l 47 987 l 199 987 z "},"а":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 z "},"е":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 z "},"й":{"ha":802,"x_min":106,"x_max":696,"o":"m 231 199 l 570 734 l 696 734 l 696 0 l 570 0 l 570 535 l 231 0 l 106 0 l 106 734 l 231 734 l 231 199 m 501 1000 l 603 1000 q 578 906 603 947 q 509 842 554 865 q 401 819 463 819 q 252 869 307 819 q 197 1000 197 920 l 299 1000 q 322 929 299 960 q 401 899 345 899 q 478 929 455 899 q 501 1000 501 960 z "},"о":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 z "},"р":{"ha":780,"x_min":95,"x_max":715,"o":"m 221 593 l 221 -282 l 95 -282 l 95 734 l 210 734 l 221 593 m 715 373 l 715 359 q 696 211 715 279 q 641 92 677 142 q 552 14 605 42 q 431 -14 499 -14 q 307 9 361 -14 q 216 77 254 33 q 157 182 179 121 q 127 321 135 244 l 127 397 q 157 543 135 479 q 217 653 180 608 q 307 723 254 699 q 429 747 359 747 q 551 721 498 747 q 642 644 605 694 q 697 526 678 595 q 715 373 715 457 m 589 359 l 589 373 q 578 476 589 428 q 542 562 566 525 q 481 620 518 599 q 392 642 444 642 q 310 625 345 642 q 250 582 275 609 q 211 519 226 554 q 188 447 195 484 l 188 271 q 226 182 201 224 q 291 115 250 140 q 393 90 332 90 q 481 111 444 90 q 542 170 518 132 q 578 255 566 207 q 589 359 589 304 z "},"с":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 z "},"у":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 z "},"х":{"ha":689,"x_min":28,"x_max":659,"o":"m 180 734 l 341 467 l 504 734 l 651 734 l 411 372 l 659 0 l 513 0 l 344 275 l 174 0 l 28 0 l 275 372 l 36 734 l 180 734 z "},"ё":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 165 930 q 184 981 165 960 q 239 1002 203 1002 q 294 981 275 1002 q 313 930 313 960 q 294 880 313 901 q 239 859 275 859 q 184 880 203 859 q 165 930 165 901 m 457 928 q 476 980 457 959 q 531 1001 494 1001 q 586 980 567 1001 q 606 928 606 959 q 586 879 606 899 q 531 858 567 858 q 476 879 494 858 q 457 928 457 899 z "},"ѓ":{"ha":583,"x_min":105,"x_max":570,"o":"m 570 734 l 570 630 l 231 630 l 231 0 l 105 0 l 105 734 l 570 734 m 223 828 l 355 1027 l 506 1027 l 324 828 l 223 828 z "},"ѕ":{"ha":717,"x_min":64,"x_max":648,"o":"m 523 195 q 511 245 523 222 q 463 288 499 269 q 354 321 427 307 q 244 352 293 334 q 160 395 195 370 q 108 454 126 420 q 90 533 90 488 q 109 615 90 576 q 164 684 128 654 q 250 730 199 713 q 361 747 300 747 q 512 716 450 747 q 608 633 574 685 q 641 518 641 581 l 515 518 q 497 577 515 549 q 445 625 479 606 q 361 644 411 644 q 277 628 309 644 q 230 588 245 612 q 216 536 216 564 q 223 500 216 516 q 248 471 230 484 q 300 446 267 458 q 385 423 333 435 q 533 374 475 403 q 620 304 591 346 q 648 204 648 263 q 628 116 648 156 q 571 47 608 76 q 481 2 533 18 q 365 -14 429 -14 q 201 21 268 -14 q 99 111 134 56 q 64 227 64 165 l 191 227 q 220 145 193 175 q 287 102 248 115 q 365 90 326 90 q 451 103 416 90 q 505 140 486 117 q 523 195 523 164 z "},"і":{"ha":338,"x_min":96,"x_max":245,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 96 928 q 115 980 96 959 q 170 1001 134 1001 q 225 980 206 1001 q 245 928 245 959 q 225 879 245 899 q 170 858 206 858 q 115 879 134 858 q 96 928 96 899 z "},"ї":{"ha":344,"x_min":-47,"x_max":393,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m -47 928 q -28 980 -47 959 q 26 1001 -9 1001 q 82 980 63 1001 q 101 928 101 959 q 82 879 101 899 q 26 858 63 858 q -28 879 -9 858 q -47 928 -47 899 m 245 927 q 263 979 245 958 q 319 1000 282 1000 q 374 979 355 1000 q 393 927 393 958 q 374 877 393 898 q 319 857 355 857 q 263 877 282 857 q 245 927 245 898 z "},"ј":{"ha":332,"x_min":-45,"x_max":235,"o":"m 99 734 l 225 734 l 225 -87 q 204 -201 225 -155 q 140 -272 182 -248 q 33 -296 98 -296 q -6 -293 16 -296 q -45 -285 -29 -290 l -44 -184 q -15 -188 -31 -186 q 14 -190 1 -190 q 60 -180 41 -190 q 89 -147 79 -170 q 99 -87 99 -125 l 99 734 m 86 928 q 105 980 86 959 q 160 1001 124 1001 q 216 980 197 1001 q 235 928 235 959 q 216 879 235 899 q 160 858 197 858 q 105 879 124 858 q 86 928 86 899 z "},"ќ":{"ha":751,"x_min":106,"x_max":738,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 713 734 l 366 313 l 190 313 l 171 423 l 315 423 l 561 734 l 713 734 m 578 0 l 309 332 l 389 423 l 738 0 l 578 0 m 298 827 l 429 1027 l 581 1027 l 399 827 l 298 827 z "},"ў":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 446 1014 l 547 1014 q 523 920 547 961 q 453 856 498 879 q 345 833 408 833 q 196 883 251 833 q 142 1014 142 934 l 243 1014 q 267 943 243 974 q 345 913 290 913 q 422 943 399 913 q 446 1014 446 974 z "},"Ẁ":{"ha":1232,"x_min":41,"x_max":1202,"o":"m 374 298 l 570 987 l 665 987 l 610 720 l 399 0 l 305 0 l 374 298 m 172 987 l 328 312 l 374 0 l 281 0 l 41 987 l 172 987 m 919 313 l 1072 987 l 1202 987 l 964 0 l 870 0 l 919 313 m 680 987 l 870 298 l 939 0 l 845 0 l 642 720 l 586 987 l 680 987 m 567 1253 l 698 1053 l 590 1053 l 415 1253 l 567 1253 z "},"ẁ":{"ha":1044,"x_min":29,"x_max":1011,"o":"m 281 130 l 470 734 l 553 734 l 536 614 l 345 0 l 264 0 l 281 130 m 155 734 l 315 123 l 327 0 l 242 0 l 29 734 l 155 734 m 733 128 l 886 734 l 1011 734 l 798 0 l 714 0 l 733 128 m 571 734 l 755 140 l 777 0 l 696 0 l 499 615 l 483 734 l 571 734 m 458 1042 l 589 842 l 481 842 l 306 1042 l 458 1042 z "},"Ẃ":{"ha":1232,"x_min":41,"x_max":1202,"o":"m 374 298 l 570 987 l 665 987 l 610 720 l 399 0 l 305 0 l 374 298 m 172 987 l 328 312 l 374 0 l 281 0 l 41 987 l 172 987 m 919 313 l 1072 987 l 1202 987 l 964 0 l 870 0 l 919 313 m 680 987 l 870 298 l 939 0 l 845 0 l 642 720 l 586 987 l 680 987 m 557 1053 l 689 1253 l 840 1253 l 659 1053 l 557 1053 z "},"ẃ":{"ha":1044,"x_min":29,"x_max":1011,"o":"m 281 130 l 470 734 l 553 734 l 536 614 l 345 0 l 264 0 l 281 130 m 155 734 l 315 123 l 327 0 l 242 0 l 29 734 l 155 734 m 733 128 l 886 734 l 1011 734 l 798 0 l 714 0 l 733 128 m 571 734 l 755 140 l 777 0 l 696 0 l 499 615 l 483 734 l 571 734 m 448 842 l 580 1042 l 731 1042 l 549 842 l 448 842 z "},"Ẅ":{"ha":1232,"x_min":41,"x_max":1202,"o":"m 374 298 l 570 987 l 665 987 l 610 720 l 399 0 l 305 0 l 374 298 m 172 987 l 328 312 l 374 0 l 281 0 l 41 987 l 172 987 m 919 313 l 1072 987 l 1202 987 l 964 0 l 870 0 l 919 313 m 680 987 l 870 298 l 939 0 l 845 0 l 642 720 l 586 987 l 680 987 m 408 1141 q 427 1192 408 1171 q 482 1213 446 1213 q 538 1192 519 1213 q 557 1141 557 1171 q 538 1091 557 1112 q 482 1070 519 1070 q 427 1091 446 1070 q 408 1141 408 1112 m 701 1139 q 719 1191 701 1170 q 774 1212 738 1212 q 830 1191 810 1212 q 849 1139 849 1170 q 830 1089 849 1110 q 774 1069 810 1069 q 719 1089 738 1069 q 701 1139 701 1110 z "},"ẅ":{"ha":1044,"x_min":29,"x_max":1011,"o":"m 281 130 l 470 734 l 553 734 l 536 614 l 345 0 l 264 0 l 281 130 m 155 734 l 315 123 l 327 0 l 242 0 l 29 734 l 155 734 m 733 128 l 886 734 l 1011 734 l 798 0 l 714 0 l 733 128 m 571 734 l 755 140 l 777 0 l 696 0 l 499 615 l 483 734 l 571 734 m 299 930 q 318 981 299 960 q 373 1002 337 1002 q 429 981 410 1002 q 448 930 448 960 q 429 880 448 901 q 373 859 410 859 q 318 880 337 859 q 299 930 299 901 m 591 928 q 610 980 591 959 q 665 1001 629 1001 q 721 980 701 1001 q 740 928 740 959 q 721 879 740 899 q 665 858 701 858 q 610 879 629 858 q 591 928 591 899 z "},"Ỳ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 359 1252 l 490 1053 l 382 1053 l 208 1252 l 359 1252 z "},"ỳ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 285 1042 l 416 842 l 308 842 l 133 1042 l 285 1042 z "},"′":{"ha":243,"x_min":71,"x_max":172,"o":"m 172 1042 l 172 967 l 158 718 l 71 718 l 71 956 l 71 1042 l 172 1042 z "},"″":{"ha":445,"x_min":93,"x_max":372,"o":"m 189 1042 l 189 949 l 168 707 l 93 707 l 93 943 l 93 1042 l 189 1042 m 372 1042 l 372 949 l 351 707 l 276 707 l 276 948 l 276 1042 l 372 1042 z "},"‼":{"ha":716,"x_min":109,"x_max":616,"o":"m 245 987 l 236 279 l 123 279 l 113 987 l 245 987 m 109 63 q 128 115 109 94 q 183 136 146 136 q 238 115 219 136 q 258 63 258 94 q 238 13 258 34 q 183 -8 219 -8 q 128 13 146 -8 q 109 63 109 34 m 603 987 l 594 279 l 481 279 l 471 987 l 603 987 m 467 63 q 486 115 467 94 q 541 136 505 136 q 596 115 577 136 q 616 63 616 94 q 596 13 616 34 q 541 -8 577 -8 q 486 13 505 -8 q 467 63 467 34 z "},"ǰ":{"ha":350,"x_min":-52,"x_max":391,"o":"m 117 734 l 243 734 l 243 -60 q 217 -189 243 -136 q 142 -269 191 -242 q 24 -296 93 -296 q -14 -294 3 -296 q -52 -285 -32 -292 l -42 -184 q -8 -191 -32 -189 q 24 -193 15 -193 q 74 -177 54 -193 q 106 -132 95 -161 q 117 -60 117 -102 l 117 734 m 77 1013 l 180 898 l 282 1013 l 391 1013 l 391 1006 l 218 821 l 141 821 l -28 1006 l -28 1013 l 77 1013 z "},"ʼ":{"ha":278,"x_min":33,"x_max":222,"o":"m 222 1042 l 222 955 q 209 869 222 914 q 168 782 195 824 q 104 709 142 741 l 33 759 q 81 851 64 804 q 98 953 98 898 l 98 1042 l 222 1042 z "},"Ḿ":{"ha":1213,"x_min":115,"x_max":1097,"o":"m 156 987 l 283 987 l 606 182 l 929 987 l 1057 987 l 655 0 l 556 0 l 156 987 m 115 987 l 227 987 l 245 385 l 245 0 l 115 0 l 115 987 m 985 987 l 1097 987 l 1097 0 l 967 0 l 967 385 l 985 987 m 534 1053 l 666 1253 l 817 1253 l 635 1053 l 534 1053 z "},"ḿ":{"ha":1218,"x_min":94,"x_max":1124,"o":"m 220 588 l 220 0 l 94 0 l 94 734 l 214 734 l 220 588 m 195 395 l 136 397 q 156 536 137 472 q 212 648 175 600 q 305 721 250 695 q 434 747 361 747 q 529 733 486 747 q 604 687 572 718 q 654 607 636 656 q 671 489 671 558 l 671 0 l 546 0 l 546 483 q 527 575 546 541 q 472 626 507 610 q 389 642 437 642 q 296 622 334 642 q 237 568 259 602 q 204 489 214 533 q 195 395 195 444 m 670 464 l 586 438 q 606 554 587 498 q 662 653 625 610 q 753 722 699 696 q 878 747 808 747 q 982 732 937 747 q 1060 684 1028 716 q 1107 602 1091 652 q 1124 482 1124 551 l 1124 0 l 998 0 l 998 484 q 978 579 998 545 q 924 628 959 614 q 841 642 889 642 q 768 627 800 642 q 714 588 736 613 q 681 532 692 564 q 670 464 670 500 m 549 842 l 680 1042 l 831 1042 l 650 842 l 549 842 z "},"Ḁ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 347 -164 q 381 -83 347 -115 q 465 -51 416 -51 q 545 -83 511 -51 q 579 -164 579 -115 q 545 -244 579 -214 q 465 -275 511 -275 q 381 -244 416 -275 q 347 -164 347 -214 m 406 -164 q 423 -204 406 -187 q 465 -220 440 -220 q 504 -204 488 -220 q 521 -164 521 -188 q 504 -122 521 -139 q 465 -105 488 -105 q 423 -122 440 -105 q 406 -164 406 -139 z "},"ḁ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 222 -164 q 257 -83 222 -115 q 340 -51 292 -51 q 420 -83 387 -51 q 454 -164 454 -115 q 420 -244 454 -214 q 340 -275 387 -275 q 257 -244 292 -275 q 222 -164 222 -214 m 281 -164 q 298 -204 281 -187 q 340 -220 315 -220 q 379 -204 363 -220 q 396 -164 396 -188 q 379 -122 396 -139 q 340 -105 363 -105 q 298 -122 315 -105 q 281 -164 281 -139 z "},"Ѐ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 360 1260 l 491 1061 l 383 1061 l 208 1260 l 360 1260 z "},"Ѝ":{"ha":991,"x_min":121,"x_max":868,"o":"m 251 227 l 737 987 l 868 987 l 868 0 l 737 0 l 737 762 l 251 0 l 121 0 l 121 987 l 251 987 l 251 227 m 437 1260 l 568 1061 l 460 1061 l 286 1260 l 437 1260 z "},"ѐ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 323 1042 l 454 842 l 347 842 l 172 1042 l 323 1042 z "},"ѝ":{"ha":802,"x_min":106,"x_max":696,"o":"m 231 199 l 570 734 l 696 734 l 696 0 l 570 0 l 570 535 l 231 0 l 106 0 l 106 734 l 231 734 l 231 199 m 340 1027 l 471 828 l 363 828 l 189 1027 l 340 1027 z "},"Ѱ":{"ha":961,"x_min":61,"x_max":891,"o":"m 760 987 l 891 987 l 891 631 q 838 420 891 507 q 692 289 785 334 q 480 243 599 243 l 460 243 q 301 269 374 243 q 174 344 228 294 q 91 466 121 393 q 61 631 61 538 l 61 987 l 191 987 l 191 631 q 211 511 191 564 q 267 423 231 459 q 353 369 303 387 q 461 351 402 351 l 481 351 q 627 383 564 351 q 725 478 690 416 q 760 631 760 541 l 760 987 m 536 987 l 536 0 l 406 0 l 406 987 l 536 987 z "},"ѱ":{"ha":972,"x_min":65,"x_max":913,"o":"m 65 734 l 191 734 l 191 403 q 212 257 191 317 q 273 160 234 197 q 364 106 312 123 q 477 89 416 89 q 624 115 564 89 q 720 184 684 140 q 772 280 755 227 q 788 385 788 332 q 762 564 786 476 q 702 734 738 651 l 834 734 q 873 640 855 692 q 902 524 891 587 q 913 385 913 460 q 891 234 913 306 q 818 106 868 162 q 685 18 768 50 q 484 -14 603 -14 q 311 10 388 -14 q 178 85 233 35 q 94 216 123 136 q 65 404 65 295 l 65 734 m 415 734 l 541 734 l 541 -321 l 415 -321 l 415 734 z "},"Ѷ":{"ha":876,"x_min":15,"x_max":844,"o":"m 439 254 l 614 802 q 663 917 636 873 q 727 980 690 960 q 813 1000 763 1000 l 844 1000 l 844 884 l 836 884 q 795 875 812 884 q 764 845 778 866 q 736 787 750 824 l 473 0 l 372 0 l 439 254 m 157 987 l 393 254 l 459 0 l 358 0 l 15 987 l 157 987 m 387 1018 l 273 1018 l 66 1198 l 218 1198 l 387 1018 m 564 1018 l 463 1018 l 296 1198 l 436 1198 l 564 1018 z "},"ѷ":{"ha":697,"x_min":-3,"x_max":703,"o":"m 355 214 l 462 583 q 507 678 481 642 q 565 731 533 714 q 630 747 596 747 q 668 745 650 747 q 703 730 686 742 l 688 630 q 677 634 685 632 q 659 635 669 635 q 632 628 646 635 q 606 607 618 621 q 587 573 595 593 l 385 0 l 302 0 l 355 214 m 160 734 l 323 214 l 373 0 l 290 0 l 32 734 l 160 734 m 318 817 l 203 817 l -3 998 l 149 998 l 318 817 m 495 817 l 393 817 l 227 998 l 367 998 l 495 817 z "},"ѹ":{"ha":1449,"x_min":62,"x_max":1432,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 1094 76 l 1298 734 l 1432 734 l 1138 -113 q 1111 -172 1128 -140 q 1069 -232 1095 -203 q 1007 -278 1043 -260 q 920 -296 970 -296 q 882 -292 905 -296 q 850 -286 859 -288 l 849 -184 q 866 -185 854 -184 q 883 -186 878 -186 q 956 -175 926 -186 q 1006 -138 985 -164 q 1042 -66 1027 -112 l 1094 76 m 944 734 l 1135 164 l 1167 32 l 1077 -14 l 807 734 l 944 734 z "},"Ѹ":{"ha":1613,"x_min":81,"x_max":1596,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 1257 76 l 1461 734 l 1596 734 l 1301 -113 q 1275 -172 1291 -140 q 1232 -232 1258 -203 q 1170 -278 1206 -260 q 1084 -296 1134 -296 q 1046 -292 1069 -296 q 1013 -286 1023 -288 l 1013 -184 q 1030 -185 1018 -184 q 1046 -186 1042 -186 q 1119 -175 1089 -186 q 1170 -138 1149 -164 q 1205 -66 1190 -112 l 1257 76 m 1107 734 l 1298 164 l 1331 32 l 1240 -14 l 970 734 l 1107 734 z "},"Ҙ":{"ha":825,"x_min":54,"x_max":767,"o":"m 417 474 l 300 474 l 300 557 l 412 557 q 533 578 487 557 q 600 637 579 600 q 621 723 621 674 q 598 809 621 770 q 527 871 575 848 q 403 895 479 895 q 300 873 346 895 q 227 814 254 852 q 199 728 199 777 l 68 728 q 95 841 68 791 q 168 927 121 892 q 274 982 214 963 q 403 1001 335 1001 q 547 983 482 1001 q 657 930 611 965 q 728 842 703 895 q 752 721 752 790 q 728 625 752 670 q 661 547 705 581 q 555 493 616 513 q 417 474 493 474 m 300 532 l 417 532 q 566 515 500 532 q 675 465 631 498 q 744 385 720 433 q 767 275 767 337 q 740 153 767 206 q 665 62 713 99 q 549 5 616 24 q 403 -14 482 -14 q 277 3 339 -14 q 165 55 215 20 q 84 144 115 90 q 54 274 54 198 l 185 274 q 213 183 185 224 q 289 117 240 142 q 403 92 338 92 q 529 116 477 92 q 609 180 581 139 q 636 273 636 221 q 622 352 636 318 q 579 407 607 385 q 509 439 551 429 q 412 450 467 450 l 300 450 l 300 532 m 475 54 l 475 -294 l 349 -294 l 349 54 l 475 54 z "},"ҙ":{"ha":705,"x_min":60,"x_max":638,"o":"m 370 351 l 235 351 l 235 428 l 359 428 q 442 441 412 428 q 486 478 473 454 q 498 534 498 502 q 484 588 498 562 q 437 629 469 613 q 352 645 406 645 q 273 630 309 645 q 217 588 238 614 q 197 530 197 562 l 71 530 q 110 645 71 597 q 212 720 148 694 q 352 747 276 747 q 466 733 416 747 q 552 692 517 719 q 606 626 587 665 q 625 534 625 586 q 607 463 625 496 q 556 405 589 430 q 476 365 523 379 q 370 351 429 351 m 235 398 l 370 398 q 486 386 435 398 q 570 349 536 373 q 621 289 604 324 q 638 207 638 253 q 617 114 638 155 q 559 45 597 73 q 468 1 521 16 q 352 -14 416 -14 q 214 11 281 -14 q 103 86 146 35 q 60 217 60 138 l 185 217 q 206 154 185 184 q 265 106 227 124 q 352 87 302 87 q 440 104 405 87 q 493 147 475 120 q 511 206 511 174 q 495 273 511 248 q 445 310 479 298 q 359 321 412 321 l 235 321 l 235 398 m 415 55 l 415 -293 l 290 -293 l 290 55 l 415 55 z "},"Ҫ":{"ha":904,"x_min":81,"x_max":841,"o":"m 711 314 l 841 314 q 787 146 831 220 q 665 30 744 73 q 467 -14 585 -14 q 309 19 380 -14 q 187 112 238 52 q 109 256 136 172 q 81 444 81 340 l 81 543 q 109 731 81 646 q 188 876 136 815 q 313 968 240 936 q 478 1001 387 1001 q 667 959 590 1001 q 788 843 745 917 q 841 671 831 768 l 711 671 q 675 790 701 740 q 602 867 650 840 q 478 894 555 894 q 362 869 412 894 q 279 798 313 844 q 229 687 245 751 q 212 544 212 623 l 212 444 q 227 308 212 372 q 273 196 242 244 q 353 120 304 148 q 467 93 401 93 q 600 119 550 93 q 674 195 649 146 q 711 314 700 245 m 525 54 l 525 -294 l 399 -294 l 399 54 l 525 54 z "},"ҫ":{"ha":727,"x_min":63,"x_max":682,"o":"m 389 90 q 472 108 434 90 q 534 158 510 126 q 562 232 559 191 l 682 232 q 638 111 678 167 q 532 21 597 55 q 389 -14 467 -14 q 245 16 307 -14 q 143 96 184 45 q 83 213 103 146 q 63 353 63 279 l 63 381 q 83 521 63 455 q 143 638 103 587 q 245 718 184 689 q 389 747 307 747 q 540 712 475 747 q 641 617 604 677 q 682 481 678 557 l 562 481 q 537 564 559 527 q 477 622 515 600 q 389 644 439 644 q 293 622 332 644 q 231 561 254 599 q 198 476 208 522 q 189 381 189 429 l 189 353 q 198 258 189 304 q 230 173 208 211 q 292 112 253 135 q 389 90 331 90 m 425 54 l 425 -294 l 300 -294 l 300 54 l 425 54 z "},"Ү":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 z "},"ү":{"ha":696,"x_min":32,"x_max":673,"o":"m 415 90 l 415 -283 l 290 -283 l 290 90 l 415 90 m 349 170 l 544 734 l 673 734 l 401 0 l 317 0 l 349 170 m 160 734 l 361 170 l 389 0 l 305 0 l 32 734 l 160 734 z "},"Ӏ":{"ha":378,"x_min":124,"x_max":255,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 z "},"Ӂ":{"ha":1261,"x_min":18,"x_max":1252,"o":"m 397 451 l 45 987 l 198 987 l 460 559 l 646 559 l 625 451 l 397 451 m 468 461 l 181 0 l 18 0 l 385 574 l 468 461 m 703 987 l 703 0 l 573 0 l 573 987 l 703 987 m 1226 987 l 872 451 l 651 451 l 631 559 l 810 559 l 1072 987 l 1226 987 m 1089 0 l 803 461 l 886 574 l 1252 0 l 1089 0 m 734 1232 l 836 1232 q 811 1138 836 1179 q 741 1074 787 1097 q 633 1051 696 1051 q 485 1102 539 1051 q 430 1232 430 1152 l 532 1232 q 555 1162 532 1192 q 633 1131 578 1131 q 711 1162 688 1131 q 734 1232 734 1192 z "},"ӂ":{"ha":1064,"x_min":15,"x_max":1044,"o":"m 318 319 l 40 734 l 191 734 l 381 430 l 528 430 l 509 319 l 318 319 m 387 332 l 174 0 l 15 0 l 307 423 l 387 332 m 592 734 l 592 0 l 467 0 l 467 734 l 592 734 m 1020 734 l 742 319 l 551 319 l 531 430 l 678 430 l 868 734 l 1020 734 m 886 0 l 672 332 l 753 423 l 1044 0 l 886 0 m 630 1000 l 732 1000 q 707 906 732 947 q 637 842 683 865 q 530 819 592 819 q 381 869 435 819 q 326 1000 326 920 l 428 1000 q 451 929 428 960 q 530 899 474 899 q 607 929 584 899 q 630 1000 630 960 z "},"ӏ":{"ha":378,"x_min":124,"x_max":255,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 z "},"Ӑ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 557 1225 l 659 1225 q 634 1131 659 1172 q 564 1067 610 1090 q 456 1044 519 1044 q 308 1094 362 1044 q 253 1225 253 1145 l 355 1225 q 378 1154 355 1185 q 456 1124 401 1124 q 534 1154 511 1124 q 557 1225 557 1185 z "},"ӑ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 496 1014 l 597 1014 q 573 920 597 961 q 503 856 549 879 q 395 833 458 833 q 247 883 301 833 q 192 1014 192 934 l 294 1014 q 317 943 294 974 q 395 913 340 913 q 473 943 450 913 q 496 1014 496 974 z "},"Ӓ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 237 1141 q 256 1192 237 1171 q 311 1213 275 1213 q 367 1192 348 1213 q 386 1141 386 1171 q 367 1091 386 1112 q 311 1070 348 1070 q 256 1091 275 1070 q 237 1141 237 1112 m 530 1139 q 548 1191 530 1170 q 604 1212 567 1212 q 659 1191 640 1212 q 678 1139 678 1170 q 659 1089 678 1110 q 604 1069 640 1069 q 548 1089 567 1069 q 530 1139 530 1110 z "},"ӓ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 176 930 q 195 981 176 960 q 250 1002 214 1002 q 306 981 287 1002 q 325 930 325 960 q 306 880 325 901 q 250 859 287 859 q 195 880 214 859 q 176 930 176 901 m 469 928 q 487 980 469 959 q 543 1001 506 1001 q 598 980 578 1001 q 617 928 617 959 q 598 879 617 899 q 543 858 578 858 q 487 879 506 858 q 469 928 469 899 z "},"Ӕ":{"ha":1298,"x_min":-10,"x_max":1275,"o":"m 658 886 l 144 0 l -10 0 l 587 987 l 668 987 l 658 886 m 756 358 l 756 239 l 252 239 l 252 358 l 756 358 m 1275 103 l 1275 0 l 778 0 l 778 103 l 1275 103 m 760 987 l 802 0 l 675 0 l 634 987 l 760 987 m 1178 566 l 1178 463 l 751 463 l 751 566 l 1178 566 m 1233 987 l 1233 884 l 736 884 l 736 987 l 1233 987 z "},"ӕ":{"ha":1173,"x_min":54,"x_max":1126,"o":"m 508 124 l 508 488 q 491 572 508 537 q 442 626 475 607 q 363 644 410 644 q 275 627 313 644 q 218 580 238 609 q 197 515 197 551 l 73 528 q 94 615 73 575 q 153 685 115 655 q 244 731 191 715 q 363 747 298 747 q 503 718 443 747 q 596 631 563 689 q 630 487 630 574 l 630 148 l 508 124 m 536 431 l 536 336 l 359 336 q 260 318 300 336 q 199 269 220 299 q 179 203 179 239 q 194 145 179 171 q 240 103 210 119 q 319 88 271 88 q 394 102 355 88 q 464 138 432 116 q 516 184 496 160 q 537 230 536 209 l 602 132 q 544 65 584 99 q 443 8 505 31 q 294 -14 380 -14 q 163 13 217 -14 q 81 90 109 40 q 54 206 54 140 q 73 301 54 260 q 131 372 92 343 q 226 416 169 401 q 357 431 283 431 l 536 431 m 857 -14 q 709 13 773 -14 q 602 89 646 40 q 536 205 559 138 q 514 353 514 273 l 514 382 q 537 530 514 463 q 603 646 561 597 q 703 721 646 694 q 827 747 760 748 q 956 725 900 747 q 1050 659 1012 702 q 1107 555 1088 616 q 1126 418 1126 494 l 1126 338 l 581 338 l 581 434 l 1000 434 l 1000 455 q 983 549 1000 507 q 928 618 966 592 q 827 644 890 644 q 744 624 780 644 q 683 568 708 604 q 646 484 659 532 q 633 382 633 437 l 633 353 q 646 250 633 298 q 686 166 659 202 q 755 109 713 130 q 857 89 798 89 q 987 114 937 89 q 1070 161 1036 138 l 1114 69 q 1066 38 1099 58 q 981 2 1034 18 q 857 -14 929 -14 z "},"Ӗ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 521 1232 l 623 1232 q 598 1138 623 1179 q 528 1074 574 1097 q 420 1051 483 1051 q 272 1102 326 1051 q 217 1232 217 1152 l 319 1232 q 342 1162 319 1192 q 420 1131 365 1131 q 498 1162 475 1131 q 521 1232 521 1192 z "},"ӗ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 484 1014 l 586 1014 q 562 920 586 961 q 492 856 537 879 q 384 833 446 833 q 235 883 290 833 q 180 1014 180 934 l 282 1014 q 305 943 282 974 q 384 913 328 913 q 461 943 438 913 q 484 1014 484 974 z "},"Ӛ":{"ha":960,"x_min":64,"x_max":880,"o":"m 435 1001 q 626 966 543 1001 q 765 868 709 931 q 851 717 822 804 q 880 525 880 630 l 880 461 q 849 269 880 356 q 761 118 817 181 q 631 20 705 55 q 473 -14 557 -14 q 296 18 372 -14 q 168 108 219 49 q 90 250 116 167 q 64 436 64 333 l 64 520 l 800 520 l 800 419 l 195 419 l 195 396 q 209 278 195 333 q 256 182 224 223 q 342 118 289 141 q 473 94 395 94 q 591 123 539 94 q 678 202 642 151 q 732 319 713 252 q 750 461 750 385 l 750 525 q 732 668 750 602 q 676 785 714 734 q 578 864 638 836 q 435 892 519 892 q 287 873 347 892 q 187 836 227 854 l 155 932 q 208 960 172 943 q 300 988 243 976 q 435 1001 357 1001 m 212 1117 q 231 1168 212 1147 q 286 1190 250 1190 q 342 1168 323 1190 q 361 1117 361 1147 q 342 1067 361 1088 q 286 1046 323 1046 q 231 1067 250 1046 q 212 1117 212 1088 m 505 1116 q 523 1167 505 1146 q 578 1188 542 1188 q 634 1167 614 1188 q 653 1116 653 1146 q 634 1066 653 1086 q 578 1045 614 1045 q 523 1066 542 1045 q 505 1116 505 1086 z "},"ә":{"ha":732,"x_min":67,"x_max":680,"o":"m 347 749 q 485 722 423 749 q 589 645 546 694 q 656 529 633 596 q 680 382 680 462 l 680 352 q 654 205 680 272 q 585 89 629 138 q 484 13 541 40 q 366 -13 428 -14 q 234 11 290 -13 q 141 79 178 35 q 85 182 104 123 q 67 314 67 242 l 67 397 l 605 397 l 605 294 l 193 294 l 193 277 q 211 185 193 228 q 268 116 229 142 q 366 90 307 90 q 441 110 407 90 q 500 166 475 130 q 539 250 526 202 q 553 352 553 298 l 553 382 q 540 484 553 436 q 501 568 527 532 q 437 625 475 604 q 347 646 398 646 q 222 624 273 646 q 138 572 172 603 l 88 658 q 185 720 122 690 q 347 749 248 749 z "},"ӛ":{"ha":732,"x_min":67,"x_max":680,"o":"m 347 749 q 485 722 423 749 q 589 645 546 694 q 656 529 633 596 q 680 382 680 462 l 680 352 q 654 205 680 272 q 585 89 629 138 q 484 13 541 40 q 366 -13 428 -14 q 234 11 290 -13 q 141 79 178 35 q 85 182 104 123 q 67 314 67 242 l 67 397 l 605 397 l 605 294 l 193 294 l 193 277 q 211 185 193 228 q 268 116 229 142 q 366 90 307 90 q 441 110 407 90 q 500 166 475 130 q 539 250 526 202 q 553 352 553 298 l 553 382 q 540 484 553 436 q 501 568 527 532 q 437 625 475 604 q 347 646 398 646 q 222 624 273 646 q 138 572 172 603 l 88 658 q 185 720 122 690 q 347 749 248 749 m 161 930 q 180 982 161 961 q 235 1003 199 1003 q 290 982 271 1003 q 309 930 309 961 q 290 881 309 901 q 235 860 271 860 q 180 881 199 860 q 161 930 161 901 m 453 929 q 472 981 453 960 q 527 1002 490 1002 q 582 981 563 1002 q 602 929 602 960 q 582 879 602 900 q 527 859 563 859 q 472 879 490 859 q 453 929 453 900 z "},"Ӝ":{"ha":1261,"x_min":18,"x_max":1252,"o":"m 397 451 l 45 987 l 198 987 l 460 559 l 646 559 l 625 451 l 397 451 m 468 461 l 181 0 l 18 0 l 385 574 l 468 461 m 703 987 l 703 0 l 573 0 l 573 987 l 703 987 m 1226 987 l 872 451 l 651 451 l 631 559 l 810 559 l 1072 987 l 1226 987 m 1089 0 l 803 461 l 886 574 l 1252 0 l 1089 0 m 414 1148 q 433 1200 414 1179 q 488 1221 452 1221 q 544 1200 525 1221 q 563 1148 563 1179 q 544 1098 563 1119 q 488 1078 525 1078 q 433 1098 452 1078 q 414 1148 414 1119 m 707 1147 q 725 1198 707 1177 q 781 1219 744 1219 q 836 1198 817 1219 q 855 1147 855 1177 q 836 1097 855 1118 q 781 1076 817 1076 q 725 1097 744 1076 q 707 1147 707 1118 z "},"ӝ":{"ha":1064,"x_min":15,"x_max":1044,"o":"m 318 319 l 40 734 l 191 734 l 381 430 l 528 430 l 509 319 l 318 319 m 387 332 l 174 0 l 15 0 l 307 423 l 387 332 m 592 734 l 592 0 l 467 0 l 467 734 l 592 734 m 1020 734 l 742 319 l 551 319 l 531 430 l 678 430 l 868 734 l 1020 734 m 886 0 l 672 332 l 753 423 l 1044 0 l 886 0 m 311 916 q 330 967 311 946 q 385 988 349 988 q 440 967 421 988 q 459 916 459 946 q 440 866 459 886 q 385 845 421 845 q 330 866 349 845 q 311 916 311 886 m 603 914 q 622 966 603 945 q 677 987 640 987 q 732 966 713 987 q 751 914 751 945 q 732 864 751 885 q 677 844 713 844 q 622 864 640 844 q 603 914 603 885 z "},"Ӟ":{"ha":825,"x_min":54,"x_max":767,"o":"m 417 474 l 300 474 l 300 557 l 412 557 q 533 578 487 557 q 600 637 579 600 q 621 723 621 674 q 598 809 621 770 q 527 871 575 848 q 403 895 479 895 q 300 873 346 895 q 227 814 254 852 q 199 728 199 777 l 68 728 q 95 841 68 791 q 168 927 121 892 q 274 982 214 963 q 403 1001 335 1001 q 547 983 482 1001 q 657 930 611 965 q 728 842 703 895 q 752 721 752 790 q 728 625 752 670 q 661 547 705 581 q 555 493 616 513 q 417 474 493 474 m 300 532 l 417 532 q 566 515 500 532 q 675 465 631 498 q 744 385 720 433 q 767 275 767 337 q 740 153 767 206 q 665 62 713 99 q 549 5 616 24 q 403 -14 482 -14 q 277 3 339 -14 q 165 55 215 20 q 84 144 115 90 q 54 274 54 198 l 185 274 q 213 183 185 224 q 289 117 240 142 q 403 92 338 92 q 529 116 477 92 q 609 180 581 139 q 636 273 636 221 q 622 352 636 318 q 579 407 607 385 q 509 439 551 429 q 412 450 467 450 l 300 450 l 300 532 m 193 1162 q 212 1214 193 1193 q 267 1235 231 1235 q 322 1214 303 1235 q 341 1162 341 1193 q 322 1113 341 1133 q 267 1092 303 1092 q 212 1113 231 1092 q 193 1162 193 1133 m 485 1161 q 504 1213 485 1192 q 559 1234 522 1234 q 614 1213 595 1234 q 633 1161 633 1192 q 614 1111 633 1132 q 559 1090 595 1090 q 504 1111 522 1090 q 485 1161 485 1132 z "},"ӟ":{"ha":705,"x_min":60,"x_max":638,"o":"m 370 351 l 235 351 l 235 428 l 359 428 q 442 441 412 428 q 486 478 473 454 q 498 534 498 502 q 484 588 498 562 q 437 629 469 613 q 352 645 406 645 q 273 630 309 645 q 217 588 238 614 q 197 530 197 562 l 71 530 q 110 645 71 597 q 212 720 148 694 q 352 747 276 747 q 466 733 416 747 q 552 692 517 719 q 606 626 587 665 q 625 534 625 586 q 607 463 625 496 q 556 405 589 430 q 476 365 523 379 q 370 351 429 351 m 235 398 l 370 398 q 486 386 435 398 q 570 349 536 373 q 621 289 604 324 q 638 207 638 253 q 617 114 638 155 q 559 45 597 73 q 468 1 521 16 q 352 -14 416 -14 q 214 11 281 -14 q 103 86 146 35 q 60 217 60 138 l 185 217 q 206 154 185 184 q 265 106 227 124 q 352 87 302 87 q 440 104 405 87 q 493 147 475 120 q 511 206 511 174 q 495 273 511 248 q 445 310 479 298 q 359 321 412 321 l 235 321 l 235 398 m 133 929 q 152 981 133 960 q 207 1002 171 1002 q 262 981 243 1002 q 281 929 281 960 q 262 879 281 900 q 207 859 243 859 q 152 879 171 859 q 133 929 133 900 m 425 928 q 444 979 425 958 q 499 1000 463 1000 q 554 979 535 1000 q 574 928 574 958 q 554 878 574 899 q 499 857 535 857 q 444 878 463 857 q 425 928 425 899 z "},"Ӣ":{"ha":991,"x_min":121,"x_max":868,"o":"m 251 227 l 737 987 l 868 987 l 868 0 l 737 0 l 737 762 l 251 0 l 121 0 l 121 987 l 251 987 l 251 227 m 728 1204 l 728 1107 l 273 1107 l 273 1204 l 728 1204 z "},"ӣ":{"ha":802,"x_min":106,"x_max":696,"o":"m 231 199 l 570 734 l 696 734 l 696 0 l 570 0 l 570 535 l 231 0 l 106 0 l 106 734 l 231 734 l 231 199 m 631 971 l 631 875 l 176 875 l 176 971 l 631 971 z "},"Ӥ":{"ha":991,"x_min":121,"x_max":868,"o":"m 251 227 l 737 987 l 868 987 l 868 0 l 737 0 l 737 762 l 251 0 l 121 0 l 121 987 l 251 987 l 251 227 m 279 1148 q 298 1200 279 1179 q 353 1221 317 1221 q 408 1200 389 1221 q 427 1148 427 1179 q 408 1098 427 1119 q 353 1078 389 1078 q 298 1098 317 1078 q 279 1148 279 1119 m 571 1147 q 590 1198 571 1177 q 645 1219 608 1219 q 700 1198 681 1219 q 720 1147 720 1177 q 700 1097 720 1118 q 645 1076 681 1076 q 590 1097 608 1076 q 571 1147 571 1118 z "},"ӥ":{"ha":802,"x_min":106,"x_max":696,"o":"m 231 199 l 570 734 l 696 734 l 696 0 l 570 0 l 570 535 l 231 0 l 106 0 l 106 734 l 231 734 l 231 199 m 182 916 q 201 967 182 946 q 256 988 220 988 q 311 967 292 988 q 330 916 330 946 q 311 866 330 886 q 256 845 292 845 q 201 866 220 845 q 182 916 182 886 m 474 914 q 493 966 474 945 q 548 987 511 987 q 603 966 584 987 q 623 914 623 945 q 603 864 623 885 q 548 844 584 844 q 493 864 511 844 q 474 914 474 885 z "},"Ӧ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 261 1142 q 280 1194 261 1173 q 335 1215 299 1215 q 391 1194 372 1215 q 410 1142 410 1173 q 391 1092 410 1113 q 335 1072 372 1072 q 280 1092 299 1072 q 261 1142 261 1113 m 553 1141 q 572 1192 553 1171 q 627 1213 591 1213 q 683 1192 663 1213 q 702 1141 702 1171 q 683 1091 702 1112 q 627 1070 663 1070 q 572 1091 591 1070 q 553 1141 553 1112 z "},"ӧ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 172 930 q 191 981 172 960 q 245 1002 210 1002 q 301 981 282 1002 q 320 930 320 960 q 301 880 320 901 q 245 859 282 859 q 191 880 210 859 q 172 930 172 901 m 464 928 q 483 980 464 959 q 538 1001 501 1001 q 593 980 574 1001 q 612 928 612 959 q 593 879 612 899 q 538 858 574 858 q 483 879 501 858 q 464 928 464 899 z "},"Ө":{"ha":945,"x_min":70,"x_max":864,"o":"m 467 1001 q 600 980 538 1001 q 710 919 662 959 q 793 820 759 878 q 846 688 828 762 q 864 525 864 614 l 864 463 q 836 263 864 351 q 756 113 808 175 q 631 19 704 52 q 468 -14 558 -14 q 337 7 398 -14 q 227 69 276 28 q 142 167 178 109 q 89 299 107 225 q 70 463 70 374 l 70 525 q 99 724 70 636 q 180 874 127 812 q 306 968 233 936 q 467 1001 379 1001 m 467 890 q 366 870 412 890 q 285 812 319 850 q 229 716 251 773 q 201 586 208 660 q 200 563 201 575 q 199 539 199 551 l 734 539 q 734 562 734 551 q 732 585 734 574 q 706 716 726 659 q 651 811 686 772 q 571 870 617 850 q 467 890 524 890 m 468 97 q 573 117 526 97 q 653 176 620 137 q 707 274 687 216 q 732 407 727 332 q 733 421 733 414 q 734 436 734 429 l 200 436 q 201 415 201 425 q 203 395 202 405 q 231 267 210 323 q 288 174 253 212 q 368 116 322 136 q 468 97 414 97 z "},"ө":{"ha":789,"x_min":62,"x_max":730,"o":"m 395 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 m 395 644 q 313 627 349 644 q 252 579 277 610 q 211 508 227 549 q 191 422 196 468 l 602 422 q 581 508 597 468 q 540 579 566 549 q 478 627 514 610 q 395 644 441 644 m 397 90 q 480 107 444 90 q 542 156 516 125 q 583 230 568 188 q 602 319 598 271 l 190 319 q 209 230 194 271 q 250 156 224 188 q 313 107 276 125 q 397 90 349 90 z "},"Ӫ":{"ha":945,"x_min":70,"x_max":864,"o":"m 467 1001 q 600 980 538 1001 q 710 919 662 959 q 793 820 759 878 q 846 688 828 762 q 864 525 864 614 l 864 463 q 836 263 864 351 q 756 113 808 175 q 631 19 704 52 q 468 -14 558 -14 q 337 7 398 -14 q 227 69 276 28 q 142 167 178 109 q 89 299 107 225 q 70 463 70 374 l 70 525 q 99 724 70 636 q 180 874 127 812 q 306 968 233 936 q 467 1001 379 1001 m 467 890 q 366 870 412 890 q 285 812 319 850 q 229 716 251 773 q 201 586 208 660 q 200 563 201 575 q 199 539 199 551 l 734 539 q 734 562 734 551 q 732 585 734 574 q 706 716 726 659 q 651 811 686 772 q 571 870 617 850 q 467 890 524 890 m 468 97 q 573 117 526 97 q 653 176 620 137 q 707 274 687 216 q 732 407 727 332 q 733 421 733 414 q 734 436 734 429 l 200 436 q 201 415 201 425 q 203 395 202 405 q 231 267 210 323 q 288 174 253 212 q 368 116 322 136 q 468 97 414 97 m 269 1145 q 288 1196 269 1175 q 343 1217 307 1217 q 399 1196 380 1217 q 418 1145 418 1175 q 399 1095 418 1116 q 343 1074 380 1074 q 288 1095 307 1074 q 269 1145 269 1116 m 562 1143 q 580 1195 562 1174 q 635 1216 599 1216 q 691 1195 671 1216 q 710 1143 710 1174 q 691 1094 710 1114 q 635 1073 671 1073 q 580 1094 599 1073 q 562 1143 562 1114 z "},"ӫ":{"ha":789,"x_min":62,"x_max":730,"o":"m 395 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 m 395 644 q 313 627 349 644 q 252 579 277 610 q 211 508 227 549 q 191 422 196 468 l 602 422 q 581 508 597 468 q 540 579 566 549 q 478 627 514 610 q 395 644 441 644 m 397 90 q 480 107 444 90 q 542 156 516 125 q 583 230 568 188 q 602 319 598 271 l 190 319 q 209 230 194 271 q 250 156 224 188 q 313 107 276 125 q 397 90 349 90 m 161 931 q 180 983 161 962 q 235 1004 199 1004 q 290 983 271 1004 q 309 931 309 962 q 290 881 309 902 q 235 861 271 861 q 180 881 199 861 q 161 931 161 902 m 453 930 q 472 981 453 960 q 527 1002 490 1002 q 582 981 563 1002 q 602 930 602 960 q 582 880 602 901 q 527 859 563 859 q 472 880 490 859 q 453 930 453 901 z "},"Ӭ":{"ha":937,"x_min":100,"x_max":860,"o":"m 746 546 l 746 439 l 341 439 l 341 546 l 746 546 m 100 314 l 231 314 q 267 195 241 244 q 342 119 292 145 q 475 93 391 93 q 589 120 541 93 q 668 196 637 148 q 714 308 699 244 q 730 444 730 372 l 730 543 q 719 660 730 606 q 686 757 708 714 q 632 831 665 800 q 558 878 600 861 q 463 894 515 894 q 339 867 387 894 q 266 790 292 840 q 231 671 241 740 l 100 671 q 154 843 111 768 q 274 959 197 917 q 463 1001 351 1001 q 628 968 555 1001 q 753 876 701 936 q 832 730 805 815 q 860 542 860 646 l 860 444 q 832 256 860 340 q 754 112 805 172 q 632 19 703 52 q 475 -14 562 -14 q 277 30 356 -14 q 154 146 197 73 q 100 314 111 220 m 251 1163 q 270 1215 251 1194 q 325 1236 289 1236 q 380 1215 361 1236 q 399 1163 399 1194 q 380 1113 399 1134 q 325 1093 361 1093 q 270 1113 289 1093 q 251 1163 251 1134 m 543 1162 q 562 1213 543 1192 q 617 1234 581 1234 q 672 1213 653 1234 q 692 1162 692 1192 q 672 1112 692 1133 q 617 1091 653 1091 q 562 1112 581 1091 q 543 1162 543 1133 z "},"ӭ":{"ha":747,"x_min":68,"x_max":673,"o":"m 353 644 q 274 626 311 644 q 212 575 236 608 q 188 501 188 543 l 68 501 q 109 623 68 567 q 214 713 149 679 q 353 747 279 747 q 490 718 430 747 q 590 638 549 689 q 652 521 631 587 q 673 381 673 455 l 673 353 q 652 213 673 279 q 590 95 631 146 q 489 15 549 44 q 353 -14 430 -14 q 207 21 271 -14 q 105 116 142 56 q 68 252 68 176 l 188 252 q 210 169 188 206 q 269 111 232 132 q 353 89 307 89 q 441 112 404 89 q 502 173 478 135 q 537 258 526 211 q 548 353 548 305 l 548 381 q 537 476 548 429 q 502 561 526 523 q 442 622 479 599 q 353 644 405 644 m 609 425 l 609 323 l 271 323 l 271 425 l 609 425 m 153 930 q 172 981 153 960 q 227 1002 191 1002 q 282 981 263 1002 q 301 930 301 960 q 282 880 301 901 q 227 859 263 859 q 172 880 191 859 q 153 930 153 901 m 445 928 q 464 980 445 959 q 519 1001 482 1001 q 574 980 555 1001 q 593 928 593 959 q 574 879 593 899 q 519 858 555 858 q 464 879 482 858 q 445 928 445 899 z "},"Ӯ":{"ha":873,"x_min":52,"x_max":832,"o":"m 420 328 l 682 987 l 832 987 l 483 165 q 450 98 468 130 q 405 41 431 66 q 339 1 378 16 q 243 -14 300 -14 q 204 -13 227 -14 q 175 -9 182 -11 l 179 96 q 208 93 186 94 q 240 92 230 92 q 301 108 279 92 q 337 148 323 123 q 363 197 351 172 l 420 328 m 199 987 l 473 372 l 506 251 l 396 243 l 52 987 l 199 987 m 669 1204 l 669 1107 l 214 1107 l 214 1204 l 669 1204 z "},"ӯ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 576 985 l 576 889 l 121 889 l 121 985 l 576 985 z "},"Ӱ":{"ha":873,"x_min":52,"x_max":832,"o":"m 420 328 l 682 987 l 832 987 l 483 165 q 450 98 468 130 q 405 41 431 66 q 339 1 378 16 q 243 -14 300 -14 q 204 -13 227 -14 q 175 -9 182 -11 l 179 96 q 208 93 186 94 q 240 92 230 92 q 301 108 279 92 q 337 148 323 123 q 363 197 351 172 l 420 328 m 199 987 l 473 372 l 506 251 l 396 243 l 52 987 l 199 987 m 220 1148 q 239 1200 220 1179 q 294 1221 258 1221 q 349 1200 330 1221 q 368 1148 368 1179 q 349 1098 368 1119 q 294 1078 330 1078 q 239 1098 258 1078 q 220 1148 220 1119 m 512 1147 q 531 1198 512 1177 q 586 1219 549 1219 q 641 1198 622 1219 q 661 1147 661 1177 q 641 1097 661 1118 q 586 1076 622 1076 q 531 1097 549 1076 q 512 1147 512 1118 z "},"ӱ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 126 930 q 145 981 126 960 q 200 1002 164 1002 q 256 981 237 1002 q 275 930 275 960 q 256 880 275 901 q 200 859 237 859 q 145 880 164 859 q 126 930 126 901 m 418 928 q 437 980 418 959 q 492 1001 456 1001 q 548 980 528 1001 q 567 928 567 959 q 548 879 567 899 q 492 858 528 858 q 437 879 456 858 q 418 928 418 899 z "},"Ӳ":{"ha":873,"x_min":52,"x_max":832,"o":"m 420 328 l 682 987 l 832 987 l 483 165 q 450 98 468 130 q 405 41 431 66 q 339 1 378 16 q 243 -14 300 -14 q 204 -13 227 -14 q 175 -9 182 -11 l 179 96 q 208 93 186 94 q 240 92 230 92 q 301 108 279 92 q 337 148 323 123 q 363 197 351 172 l 420 328 m 199 987 l 473 372 l 506 251 l 396 243 l 52 987 l 199 987 m 459 1054 l 615 1259 l 755 1259 l 574 1054 l 459 1054 m 269 1054 l 385 1259 l 519 1259 l 371 1054 l 269 1054 z "},"ӳ":{"ha":657,"x_min":15,"x_max":662,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 366 836 l 522 1041 l 662 1041 l 480 836 l 366 836 m 176 836 l 291 1041 l 425 1041 l 277 836 l 176 836 z "},"Ӵ":{"ha":951,"x_min":102,"x_max":831,"o":"m 102 987 l 233 987 l 233 679 q 256 559 233 602 q 323 498 278 515 q 437 480 369 480 q 516 484 477 480 q 591 493 554 487 q 663 508 627 499 q 733 527 699 517 l 733 420 q 667 401 700 410 q 599 386 634 392 q 525 376 564 380 q 437 373 485 373 q 257 403 332 373 q 142 500 182 433 q 102 679 102 568 l 102 987 m 700 987 l 831 987 l 831 0 l 700 0 l 700 987 m 248 1148 q 267 1200 248 1179 q 322 1221 286 1221 q 378 1200 359 1221 q 397 1148 397 1179 q 378 1098 397 1119 q 322 1078 359 1078 q 267 1098 286 1078 q 248 1148 248 1119 m 541 1147 q 559 1198 541 1177 q 614 1219 578 1219 q 670 1198 650 1219 q 689 1147 689 1177 q 670 1097 689 1118 q 614 1076 650 1076 q 559 1097 578 1076 q 541 1147 541 1118 z "},"ӵ":{"ha":755,"x_min":71,"x_max":649,"o":"m 649 734 l 649 0 l 524 0 l 524 734 l 649 734 m 606 397 l 606 294 q 529 268 568 279 q 447 251 490 257 q 354 244 404 244 q 203 274 267 244 q 105 366 140 304 q 71 521 71 427 l 71 735 l 196 735 l 196 521 q 214 422 196 460 q 268 366 233 384 q 354 348 303 348 q 446 354 403 348 q 529 372 489 361 q 606 397 568 382 m 137 916 q 156 967 137 946 q 211 988 175 988 q 267 967 248 988 q 286 916 286 946 q 267 866 286 886 q 211 845 248 845 q 156 866 175 845 q 137 916 137 886 m 429 914 q 448 966 429 945 q 503 987 467 987 q 558 966 539 987 q 578 914 578 945 q 558 864 578 885 q 503 844 539 844 q 448 864 467 844 q 429 914 429 885 z "},"Ӹ":{"ha":1201,"x_min":121,"x_max":1075,"o":"m 220 585 l 490 585 q 673 549 598 585 q 786 448 747 513 q 825 295 825 382 q 803 176 825 230 q 739 82 781 122 q 633 21 696 43 q 490 0 571 0 l 121 0 l 121 987 l 252 987 l 252 106 l 490 106 q 607 133 562 106 q 673 203 652 160 q 694 296 694 247 q 673 387 694 346 q 607 453 652 429 q 490 478 562 478 l 220 478 l 220 585 m 1075 987 l 1075 0 l 944 0 l 944 987 l 1075 987 m 385 1148 q 404 1200 385 1179 q 459 1221 423 1221 q 515 1200 496 1221 q 534 1148 534 1179 q 515 1098 534 1119 q 459 1078 496 1078 q 404 1098 423 1078 q 385 1148 385 1119 m 677 1147 q 696 1198 677 1177 q 751 1219 715 1219 q 807 1198 787 1219 q 826 1147 826 1177 q 807 1097 826 1118 q 751 1076 787 1076 q 696 1097 715 1076 q 677 1147 677 1118 z "},"ӹ":{"ha":1078,"x_min":107,"x_max":954,"o":"m 199 481 l 419 481 q 569 451 508 481 q 662 366 630 420 q 693 243 693 312 q 675 148 693 193 q 623 71 658 104 q 537 19 588 37 q 419 0 486 0 l 107 0 l 107 734 l 233 734 l 233 103 l 419 103 q 506 123 473 103 q 553 174 538 142 q 567 239 567 205 q 553 304 567 272 q 506 357 538 336 q 419 378 473 378 l 199 378 l 199 481 m 954 734 l 954 0 l 829 0 l 829 734 l 954 734 m 316 916 q 335 967 316 946 q 390 988 354 988 q 446 967 427 988 q 465 916 465 946 q 446 866 465 886 q 390 845 427 845 q 335 866 354 845 q 316 916 316 886 m 608 914 q 627 966 608 945 q 682 987 646 987 q 738 966 718 987 q 757 914 757 945 q 738 864 757 885 q 682 844 718 844 q 627 864 646 844 q 608 914 608 885 z "},"ԁ":{"ha":783,"x_min":64,"x_max":684,"o":"m 558 142 l 558 1042 l 684 1042 l 684 0 l 569 0 l 558 142 m 64 359 l 64 373 q 85 526 64 457 q 144 644 106 595 q 236 721 182 694 q 355 747 289 747 q 476 723 424 747 q 564 653 528 699 q 621 543 600 608 q 650 397 642 479 l 650 335 q 622 190 643 254 q 564 80 600 125 q 475 11 528 35 q 353 -14 423 -14 q 236 14 289 -14 q 144 92 182 42 q 85 211 106 142 q 64 359 64 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 213 208 q 297 114 260 134 q 385 93 334 93 q 487 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 582 484 q 527 582 551 554 q 468 625 503 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 213 525 q 191 373 191 428 z "},"Ạ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 387 -167 q 406 -115 387 -136 q 461 -94 425 -94 q 516 -115 497 -94 q 536 -167 536 -136 q 516 -217 536 -196 q 461 -237 497 -237 q 406 -217 425 -237 q 387 -167 387 -196 z "},"ạ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 262 -167 q 281 -115 262 -136 q 336 -94 300 -94 q 392 -115 372 -94 q 411 -167 411 -136 q 392 -217 411 -196 q 336 -237 372 -237 q 281 -217 300 -237 q 262 -167 262 -196 z "},"Ả":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 503 1064 l 413 1064 l 412 1167 q 469 1174 447 1169 q 500 1190 490 1179 q 511 1218 511 1200 q 502 1242 511 1232 q 477 1258 493 1252 q 441 1267 462 1265 q 398 1270 421 1270 l 403 1342 q 491 1333 453 1342 q 556 1308 530 1324 q 595 1267 582 1291 q 608 1215 608 1244 q 576 1140 608 1164 q 504 1112 543 1117 l 503 1064 z "},"ả":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 442 853 l 352 853 l 351 956 q 408 963 386 958 q 439 979 429 968 q 450 1007 450 989 q 441 1031 450 1021 q 416 1047 432 1041 q 380 1057 401 1054 q 337 1059 360 1059 l 342 1131 q 430 1122 392 1131 q 495 1097 469 1114 q 534 1056 521 1080 q 547 1004 547 1033 q 515 929 547 953 q 443 901 482 906 l 442 853 z "},"Ấ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 207 1053 l 404 1231 l 507 1231 l 705 1053 l 571 1053 l 456 1160 l 340 1053 l 207 1053 m 654 1173 l 750 1348 l 886 1348 l 749 1173 l 654 1173 z "},"ấ":{"ha":755,"x_min":74,"x_max":825,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 146 842 l 343 1020 l 446 1020 l 644 842 l 510 842 l 395 949 l 279 842 l 146 842 m 593 962 l 689 1137 l 825 1137 l 688 962 l 593 962 z "},"Ầ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 505 1228 l 703 1050 l 569 1050 l 454 1158 l 339 1050 l 205 1050 l 402 1228 l 505 1228 m 159 1345 l 256 1171 l 160 1171 l 24 1345 l 159 1345 z "},"ầ":{"ha":755,"x_min":-37,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 444 1017 l 642 839 l 508 839 l 393 947 l 278 839 l 144 839 l 341 1017 l 444 1017 m 98 1135 l 195 960 l 99 960 l -37 1135 l 98 1135 z "},"Ẩ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 518 1220 l 704 1042 l 588 1042 l 454 1168 l 321 1042 l 206 1042 l 391 1220 l 518 1220 m 725 1135 l 647 1135 l 646 1225 q 694 1231 676 1227 q 722 1243 713 1235 q 730 1267 730 1252 q 718 1294 730 1284 q 683 1308 705 1303 q 635 1312 661 1312 l 639 1375 q 715 1368 682 1375 q 771 1345 748 1360 q 805 1311 793 1331 q 817 1265 817 1291 q 788 1201 817 1221 q 726 1177 760 1181 l 725 1135 z "},"ẩ":{"ha":755,"x_min":74,"x_max":755,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 457 1009 l 643 831 l 527 831 l 393 957 l 260 831 l 145 831 l 330 1009 l 457 1009 m 664 924 l 586 924 l 585 1014 q 633 1020 615 1016 q 661 1033 652 1024 q 669 1056 669 1041 q 656 1083 669 1073 q 622 1097 644 1093 q 574 1101 600 1101 l 578 1164 q 654 1157 621 1164 q 710 1134 687 1149 q 744 1100 732 1120 q 755 1055 755 1080 q 727 990 755 1010 q 665 966 699 970 l 664 924 z "},"Ẫ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 499 1192 l 704 1027 l 588 1027 l 454 1134 l 321 1027 l 206 1027 l 410 1192 l 499 1192 m 579 1363 l 631 1348 q 617 1297 631 1321 q 578 1257 602 1272 q 523 1242 553 1242 q 469 1254 489 1242 q 430 1278 448 1266 q 385 1291 412 1291 q 346 1275 363 1291 q 328 1240 328 1259 l 276 1253 q 291 1304 276 1280 q 330 1345 305 1329 q 385 1361 355 1361 q 434 1349 413 1361 q 476 1325 455 1337 q 523 1314 496 1314 q 562 1329 544 1314 q 579 1363 579 1344 z "},"ẫ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 438 981 l 643 816 l 527 816 l 393 923 l 260 816 l 145 816 l 349 981 l 438 981 m 518 1152 l 570 1137 q 556 1086 570 1110 q 517 1046 541 1061 q 462 1031 492 1031 q 408 1043 428 1031 q 369 1067 387 1055 q 323 1080 351 1080 q 285 1064 302 1080 q 267 1029 267 1048 l 215 1042 q 230 1094 215 1069 q 269 1134 244 1118 q 323 1150 294 1150 q 373 1138 352 1150 q 415 1115 394 1126 q 462 1103 435 1103 q 500 1118 483 1103 q 518 1152 518 1133 z "},"Ậ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 494 1253 l 662 1067 l 662 1061 l 557 1061 l 456 1175 l 355 1061 l 252 1061 l 252 1068 l 418 1253 l 494 1253 m 387 -167 q 406 -115 387 -136 q 461 -94 425 -94 q 516 -115 497 -94 q 536 -167 536 -136 q 516 -217 536 -196 q 461 -237 497 -237 q 406 -217 425 -237 q 387 -167 387 -196 z "},"ậ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 433 1042 l 601 857 l 601 850 l 496 850 l 395 964 l 294 850 l 191 850 l 191 857 l 357 1042 l 433 1042 m 262 -167 q 281 -115 262 -136 q 336 -94 300 -94 q 392 -115 372 -94 q 411 -167 411 -136 q 392 -217 411 -196 q 336 -237 372 -237 q 281 -217 300 -237 q 262 -167 262 -196 z "},"Ắ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 554 1192 l 658 1192 q 633 1118 658 1150 q 562 1068 608 1086 q 453 1050 516 1050 q 343 1068 389 1050 q 272 1118 297 1086 q 247 1192 247 1150 l 350 1192 q 373 1137 350 1160 q 453 1114 396 1114 q 531 1137 507 1114 q 554 1192 554 1160 m 413 1205 l 490 1340 l 593 1340 l 482 1205 l 413 1205 z "},"ắ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 493 981 l 597 981 q 572 907 597 939 q 501 857 547 876 q 392 839 455 839 q 282 857 328 839 q 211 907 236 876 q 186 981 186 939 l 289 981 q 312 926 289 949 q 392 903 335 903 q 470 926 446 903 q 493 981 493 949 m 352 994 l 429 1129 l 532 1129 l 421 994 l 352 994 z "},"Ằ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 554 1192 l 658 1192 q 633 1118 658 1150 q 562 1068 608 1086 q 453 1050 516 1050 q 343 1068 389 1050 q 272 1118 297 1086 q 247 1192 247 1150 l 350 1192 q 373 1137 350 1160 q 453 1114 396 1114 q 531 1137 507 1114 q 554 1192 554 1160 m 431 1205 l 320 1340 l 424 1340 l 500 1205 l 431 1205 z "},"ằ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 493 981 l 597 981 q 572 907 597 939 q 501 857 547 876 q 392 839 455 839 q 282 857 328 839 q 211 907 236 876 q 186 981 186 939 l 289 981 q 312 926 289 949 q 392 903 335 903 q 470 926 446 903 q 493 981 493 949 m 370 994 l 259 1129 l 363 1129 l 439 994 l 370 994 z "},"Ẳ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 547 1203 l 646 1203 q 622 1130 646 1162 q 554 1080 598 1098 q 448 1062 510 1062 q 342 1080 387 1062 q 274 1130 298 1098 q 250 1203 250 1162 l 349 1203 q 372 1148 349 1172 q 448 1125 395 1125 q 524 1148 501 1125 q 547 1203 547 1172 m 497 1215 l 410 1215 l 410 1299 q 464 1305 443 1301 q 494 1317 484 1309 q 505 1338 505 1324 q 496 1357 505 1349 q 473 1369 488 1364 q 438 1376 458 1374 q 395 1378 418 1378 l 400 1434 q 486 1427 449 1434 q 548 1407 524 1419 q 586 1376 573 1394 q 599 1336 599 1358 q 584 1293 599 1310 q 547 1269 570 1277 q 498 1257 524 1261 l 497 1215 z "},"ẳ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 486 992 l 585 992 q 561 919 585 951 q 493 869 537 887 q 387 851 449 851 q 281 869 326 851 q 213 919 237 887 q 189 992 189 951 l 288 992 q 311 938 288 961 q 387 914 334 914 q 463 938 440 914 q 486 992 486 961 m 436 1004 l 349 1004 l 349 1088 q 402 1094 382 1090 q 433 1106 423 1098 q 444 1127 444 1114 q 435 1146 444 1138 q 412 1158 427 1154 q 377 1165 397 1163 q 334 1167 357 1167 l 339 1223 q 425 1216 388 1223 q 487 1196 463 1208 q 525 1165 512 1183 q 538 1125 538 1147 q 523 1082 538 1099 q 486 1058 509 1066 q 437 1046 463 1050 l 436 1004 z "},"Ẵ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 550 1207 l 652 1207 q 627 1132 652 1165 q 558 1081 603 1099 q 451 1063 513 1063 q 345 1081 389 1063 q 275 1132 300 1099 q 251 1207 251 1165 l 352 1207 q 374 1152 352 1176 q 451 1127 397 1127 q 528 1152 505 1127 q 550 1207 550 1176 m 589 1404 l 646 1388 q 631 1327 646 1355 q 591 1283 616 1299 q 533 1266 566 1266 q 474 1279 496 1266 q 433 1305 452 1292 q 383 1318 413 1318 q 344 1300 360 1318 q 328 1257 328 1283 l 271 1272 q 285 1332 271 1304 q 325 1378 299 1360 q 383 1395 350 1395 q 437 1382 414 1395 q 482 1357 460 1369 q 533 1344 504 1344 q 572 1361 555 1344 q 589 1404 589 1379 z "},"ẵ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 489 996 l 591 996 q 566 921 591 954 q 497 870 542 888 q 390 852 452 852 q 283 870 328 852 q 214 921 239 888 q 190 996 190 954 l 291 996 q 313 941 291 965 q 390 916 336 916 q 467 941 444 916 q 489 996 489 965 m 528 1193 l 585 1177 q 570 1116 585 1144 q 530 1072 555 1088 q 472 1055 505 1055 q 413 1068 435 1055 q 372 1094 391 1081 q 322 1107 352 1107 q 283 1089 299 1107 q 267 1046 267 1072 l 210 1061 q 224 1121 210 1093 q 263 1167 238 1149 q 322 1184 289 1184 q 376 1171 353 1184 q 421 1146 399 1158 q 472 1133 443 1133 q 511 1151 494 1133 q 528 1193 528 1168 z "},"Ặ":{"ha":906,"x_min":20,"x_max":888,"o":"m 480 900 l 153 0 l 20 0 l 396 987 l 482 987 l 480 900 m 754 0 l 427 900 l 425 987 l 511 987 l 888 0 l 754 0 m 737 366 l 737 258 l 182 258 l 182 366 l 737 366 m 557 1225 l 659 1225 q 634 1131 659 1172 q 564 1067 610 1090 q 456 1044 519 1044 q 308 1094 362 1044 q 253 1225 253 1145 l 355 1225 q 378 1154 355 1185 q 456 1124 401 1124 q 534 1154 511 1124 q 557 1225 557 1185 m 387 -167 q 406 -115 387 -136 q 461 -94 425 -94 q 516 -115 497 -94 q 536 -167 536 -136 q 516 -217 536 -196 q 461 -237 497 -237 q 406 -217 425 -237 q 387 -167 387 -196 z "},"ặ":{"ha":755,"x_min":74,"x_max":680,"o":"m 528 125 l 528 503 q 511 579 528 547 q 459 629 494 611 q 374 646 425 646 q 291 630 326 646 q 235 587 255 614 q 215 530 215 561 l 90 530 q 110 608 90 570 q 169 679 130 647 q 261 729 207 710 q 381 747 315 747 q 523 720 461 747 q 619 638 584 693 q 654 502 654 584 l 654 160 q 660 82 654 123 q 680 11 667 41 l 680 0 l 549 0 q 534 58 539 22 q 528 125 528 94 m 550 445 l 551 357 l 425 357 q 329 348 371 357 q 258 323 287 340 q 215 280 230 306 q 200 221 200 255 q 216 158 200 186 q 263 113 231 130 q 340 96 294 96 q 442 121 398 96 q 512 180 486 145 q 541 249 538 216 l 594 189 q 568 125 589 160 q 512 59 547 91 q 430 7 477 28 q 322 -14 382 -14 q 192 16 248 -14 q 105 94 136 45 q 74 204 74 143 q 97 308 74 263 q 163 384 120 353 q 268 429 207 414 q 404 445 329 445 l 550 445 m 496 1014 l 597 1014 q 573 920 597 961 q 503 856 549 879 q 395 833 458 833 q 247 883 301 833 q 192 1014 192 934 l 294 1014 q 317 943 294 974 q 395 913 340 913 q 473 943 450 913 q 496 1014 496 974 m 262 -167 q 281 -115 262 -136 q 336 -94 300 -94 q 392 -115 372 -94 q 411 -167 411 -136 q 392 -217 411 -196 q 336 -237 372 -237 q 281 -217 300 -237 q 262 -167 262 -196 z "},"Ẹ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 342 -160 q 360 -109 342 -130 q 416 -87 379 -87 q 471 -109 452 -87 q 490 -160 490 -130 q 471 -210 490 -189 q 416 -231 452 -231 q 360 -210 379 -231 q 342 -160 342 -189 z "},"ẹ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 307 -167 q 326 -115 307 -136 q 381 -94 345 -94 q 436 -115 417 -94 q 456 -167 456 -136 q 436 -217 456 -196 q 381 -237 417 -237 q 326 -217 345 -237 q 307 -167 307 -196 z "},"Ẻ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 467 1072 l 377 1072 l 376 1175 q 433 1182 411 1177 q 465 1197 454 1187 q 475 1225 475 1208 q 466 1250 475 1240 q 441 1266 457 1259 q 406 1275 426 1272 q 362 1278 385 1278 l 367 1350 q 455 1341 417 1350 q 520 1315 494 1332 q 559 1275 546 1298 q 572 1223 572 1251 q 540 1148 572 1171 q 468 1119 507 1124 l 467 1072 z "},"ẻ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 431 853 l 340 853 l 340 956 q 396 963 374 958 q 428 979 418 968 q 438 1007 438 989 q 429 1031 438 1021 q 405 1047 420 1041 q 369 1057 389 1054 q 326 1059 349 1059 l 330 1131 q 419 1122 380 1131 q 483 1097 457 1114 q 523 1056 509 1080 q 536 1004 536 1033 q 503 929 536 953 q 431 901 471 906 l 431 853 z "},"Ẽ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 576 1246 l 661 1239 q 641 1152 661 1190 q 588 1095 621 1115 q 514 1074 555 1074 q 457 1084 479 1074 q 417 1106 435 1094 q 380 1129 399 1119 q 332 1139 361 1139 q 284 1117 304 1139 q 265 1063 265 1095 l 180 1067 q 200 1155 180 1117 q 252 1214 219 1192 q 326 1235 286 1235 q 377 1225 355 1235 q 419 1203 399 1215 q 460 1180 439 1190 q 508 1171 481 1171 q 556 1193 536 1171 q 576 1246 576 1215 z "},"ẽ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 539 1028 l 624 1021 q 604 934 624 971 q 552 876 585 897 q 477 856 519 856 q 420 866 443 856 q 380 888 398 876 q 343 910 363 901 q 296 920 324 920 q 248 899 267 920 q 229 845 229 877 l 144 849 q 163 936 144 899 q 216 995 182 974 q 290 1017 249 1017 q 341 1007 319 1017 q 382 984 363 997 q 423 962 402 972 q 471 952 444 952 q 519 974 500 952 q 539 1028 539 996 z "},"Ế":{"ha":789,"x_min":115,"x_max":850,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 171 1061 l 368 1238 l 471 1238 l 669 1061 l 535 1061 l 420 1168 l 304 1061 l 171 1061 m 618 1181 l 714 1356 l 850 1356 l 713 1181 l 618 1181 z "},"ế":{"ha":736,"x_min":63,"x_max":813,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 134 842 l 332 1020 l 435 1020 l 632 842 l 498 842 l 383 949 l 268 842 l 134 842 m 582 962 l 677 1137 l 813 1137 l 677 962 l 582 962 z "},"Ề":{"ha":789,"x_min":-12,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 469 1236 l 667 1057 l 533 1057 l 418 1165 l 303 1057 l 170 1057 l 366 1236 l 469 1236 m 123 1353 l 220 1178 l 124 1178 l -12 1353 l 123 1353 z "},"ề":{"ha":736,"x_min":-49,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 433 1017 l 631 839 l 496 839 l 381 947 l 267 839 l 133 839 l 330 1017 l 433 1017 m 87 1135 l 183 960 l 87 960 l -49 1135 l 87 1135 z "},"Ể":{"ha":789,"x_min":115,"x_max":781,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 482 1227 l 668 1049 l 552 1049 l 418 1175 l 286 1049 l 170 1049 l 355 1227 l 482 1227 m 689 1143 l 611 1143 l 610 1232 q 659 1238 640 1234 q 686 1251 677 1242 q 694 1274 694 1259 q 682 1301 694 1291 q 647 1315 669 1311 q 599 1320 625 1320 l 603 1383 q 679 1375 646 1383 q 735 1353 712 1367 q 769 1318 758 1338 q 781 1273 781 1298 q 752 1209 781 1229 q 690 1184 724 1189 l 689 1143 z "},"ể":{"ha":736,"x_min":63,"x_max":744,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 446 1009 l 631 831 l 515 831 l 382 957 l 249 831 l 134 831 l 318 1009 l 446 1009 m 652 924 l 574 924 l 574 1014 q 622 1020 604 1016 q 649 1033 640 1024 q 658 1056 658 1041 q 645 1083 658 1073 q 610 1097 632 1093 q 562 1101 589 1101 l 566 1164 q 643 1157 610 1164 q 698 1134 675 1149 q 732 1100 721 1120 q 744 1055 744 1080 q 716 990 744 1010 q 653 966 688 970 l 652 924 z "},"Ễ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 463 1200 l 668 1034 l 552 1034 l 418 1141 l 286 1034 l 170 1034 l 374 1200 l 463 1200 m 543 1371 l 595 1356 q 581 1304 595 1329 q 542 1264 566 1280 q 487 1249 517 1249 q 433 1261 453 1249 q 394 1286 412 1274 q 349 1298 376 1298 q 310 1282 328 1298 q 292 1247 292 1266 l 240 1260 q 255 1312 240 1287 q 294 1353 269 1337 q 349 1369 319 1369 q 398 1357 377 1369 q 440 1333 419 1345 q 487 1321 460 1321 q 526 1336 508 1321 q 543 1371 543 1352 z "},"ễ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 427 981 l 631 816 l 515 816 l 382 923 l 249 816 l 134 816 l 338 981 l 427 981 m 507 1152 l 559 1137 q 544 1086 559 1110 q 505 1046 530 1061 q 450 1031 481 1031 q 396 1043 416 1031 q 358 1067 376 1055 q 312 1080 340 1080 q 273 1064 291 1080 q 256 1029 256 1048 l 203 1042 q 218 1094 203 1069 q 257 1134 233 1118 q 312 1150 282 1150 q 361 1138 340 1150 q 403 1115 382 1126 q 450 1103 424 1103 q 489 1118 471 1103 q 507 1152 507 1133 z "},"Ệ":{"ha":789,"x_min":115,"x_max":742,"o":"m 742 106 l 742 0 l 219 0 l 219 106 l 742 106 m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 673 563 l 673 456 l 219 456 l 219 563 l 673 563 m 735 987 l 735 880 l 219 880 l 219 987 l 735 987 m 458 1260 l 626 1075 l 626 1068 l 522 1068 l 420 1183 l 319 1068 l 216 1068 l 216 1076 l 382 1260 l 458 1260 m 342 -160 q 360 -109 342 -130 q 416 -87 379 -87 q 471 -109 452 -87 q 490 -160 490 -130 q 471 -210 490 -189 q 416 -231 452 -231 q 360 -210 379 -231 q 342 -160 342 -189 z "},"ệ":{"ha":736,"x_min":63,"x_max":686,"o":"m 400 -14 q 261 13 323 -14 q 155 86 199 39 q 87 199 111 134 q 63 341 63 264 l 63 370 q 90 529 63 459 q 161 648 116 600 q 264 722 207 697 q 384 747 322 747 q 520 720 463 747 q 614 645 577 693 q 668 531 650 596 q 686 388 686 465 l 686 332 l 138 332 l 138 434 l 560 434 l 560 444 q 540 538 557 492 q 486 614 523 585 q 384 644 448 644 q 305 626 341 644 q 243 573 269 608 q 203 487 218 538 q 189 370 189 436 l 189 341 q 204 243 189 289 q 247 163 218 197 q 315 109 275 128 q 407 89 355 89 q 519 116 473 89 q 600 189 566 143 l 676 128 q 616 60 652 92 q 526 7 579 27 q 400 -14 473 -14 m 421 1042 l 589 857 l 589 850 l 485 850 l 383 964 l 282 850 l 179 850 l 179 857 l 345 1042 l 421 1042 m 307 -167 q 326 -115 307 -136 q 381 -94 345 -94 q 436 -115 417 -94 q 456 -167 456 -136 q 436 -217 456 -196 q 381 -237 417 -237 q 326 -217 345 -237 q 307 -167 307 -196 z "},"Ỉ":{"ha":378,"x_min":124,"x_max":342,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 237 1072 l 146 1072 l 146 1175 q 202 1182 180 1177 q 234 1197 224 1187 q 244 1225 244 1208 q 235 1250 244 1240 q 211 1266 227 1259 q 175 1275 195 1272 q 132 1278 155 1278 l 136 1350 q 225 1341 186 1350 q 289 1315 263 1332 q 329 1275 315 1298 q 342 1223 342 1251 q 309 1148 342 1171 q 237 1119 277 1124 l 237 1072 z "},"ỉ":{"ha":344,"x_min":106,"x_max":323,"o":"m 231 734 l 231 0 l 106 0 l 106 734 l 231 734 m 218 852 l 128 852 l 127 955 q 184 962 162 957 q 216 978 205 967 q 226 1006 226 988 q 217 1030 226 1020 q 193 1046 208 1040 q 157 1055 177 1053 q 113 1058 136 1058 l 118 1130 q 207 1121 168 1130 q 271 1095 245 1112 q 310 1055 297 1078 q 323 1003 323 1031 q 291 928 323 951 q 219 899 258 905 l 218 852 z "},"Ị":{"ha":378,"x_min":111,"x_max":260,"o":"m 255 987 l 255 0 l 124 0 l 124 987 l 255 987 m 111 -161 q 130 -109 111 -130 q 185 -88 149 -88 q 240 -109 221 -88 q 260 -161 260 -130 q 240 -211 260 -190 q 185 -231 221 -231 q 130 -211 149 -231 q 111 -161 111 -190 z "},"ị":{"ha":338,"x_min":91,"x_max":245,"o":"m 232 734 l 232 0 l 106 0 l 106 734 l 232 734 m 96 928 q 115 980 96 959 q 170 1001 134 1001 q 225 980 206 1001 q 245 928 245 959 q 225 879 245 899 q 170 858 206 858 q 115 879 134 858 q 96 928 96 899 m 91 -160 q 110 -109 91 -130 q 165 -87 128 -87 q 220 -109 201 -87 q 239 -160 239 -130 q 220 -210 239 -189 q 165 -231 201 -231 q 110 -210 128 -231 q 91 -160 91 -189 z "},"Ọ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 401 -167 q 420 -115 401 -136 q 475 -94 439 -94 q 531 -115 511 -94 q 550 -167 550 -136 q 531 -217 550 -196 q 475 -237 511 -237 q 420 -217 439 -237 q 401 -167 401 -196 z "},"ọ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 318 -168 q 337 -116 318 -137 q 392 -95 355 -95 q 447 -116 428 -95 q 467 -168 467 -137 q 447 -217 467 -197 q 392 -238 428 -238 q 337 -217 355 -238 q 318 -168 318 -197 z "},"Ỏ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 527 1065 l 437 1065 l 436 1168 q 492 1176 471 1171 q 524 1191 514 1181 q 534 1219 534 1202 q 526 1243 534 1234 q 501 1260 517 1253 q 465 1269 486 1266 q 422 1272 445 1272 l 427 1343 q 515 1335 477 1343 q 579 1309 553 1326 q 619 1269 606 1292 q 632 1217 632 1245 q 600 1142 632 1165 q 528 1113 567 1118 l 527 1065 z "},"ỏ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 437 853 l 347 853 l 347 956 q 403 963 381 958 q 435 979 425 968 q 445 1007 445 989 q 436 1031 445 1021 q 412 1047 427 1041 q 376 1057 396 1054 q 332 1059 355 1059 l 337 1131 q 426 1122 387 1131 q 490 1097 464 1114 q 529 1056 516 1080 q 543 1004 543 1033 q 510 929 543 953 q 438 901 477 906 l 437 853 z "},"Ố":{"ha":956,"x_min":81,"x_max":909,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 231 1055 l 428 1232 l 531 1232 l 728 1055 l 595 1055 l 479 1162 l 364 1055 l 231 1055 m 678 1175 l 774 1350 l 909 1350 l 773 1175 l 678 1175 z "},"ố":{"ha":792,"x_min":62,"x_max":820,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 141 842 l 338 1020 l 441 1020 l 639 842 l 505 842 l 390 949 l 275 842 l 141 842 m 589 962 l 684 1137 l 820 1137 l 684 962 l 589 962 z "},"Ồ":{"ha":956,"x_min":47,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 529 1230 l 727 1051 l 593 1051 l 477 1159 l 363 1051 l 229 1051 l 426 1230 l 529 1230 m 183 1347 l 279 1172 l 184 1172 l 47 1347 l 183 1347 z "},"ồ":{"ha":792,"x_min":-42,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 439 1017 l 637 839 l 503 839 l 388 947 l 273 839 l 140 839 l 336 1017 l 439 1017 m 94 1135 l 190 960 l 94 960 l -42 1135 l 94 1135 z "},"Ổ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 542 1221 l 728 1043 l 612 1043 l 478 1169 l 345 1043 l 230 1043 l 414 1221 l 542 1221 m 749 1137 l 671 1137 l 670 1226 q 718 1232 700 1228 q 745 1245 736 1236 q 754 1268 754 1253 q 741 1295 754 1285 q 707 1309 728 1305 q 659 1314 685 1314 l 663 1377 q 739 1369 706 1377 q 794 1347 772 1361 q 829 1312 817 1332 q 840 1267 840 1292 q 812 1203 840 1223 q 749 1178 784 1183 l 749 1137 z "},"ổ":{"ha":792,"x_min":62,"x_max":751,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 452 1009 l 638 831 l 522 831 l 389 957 l 256 831 l 140 831 l 325 1009 l 452 1009 m 659 924 l 581 924 l 581 1014 q 629 1020 610 1016 q 656 1033 647 1024 q 665 1056 665 1041 q 652 1083 665 1073 q 617 1097 639 1093 q 569 1101 595 1101 l 573 1164 q 649 1157 616 1164 q 705 1134 682 1149 q 739 1100 728 1120 q 751 1055 751 1080 q 723 990 751 1010 q 660 966 694 970 l 659 924 z "},"Ỗ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 523 1194 l 728 1028 l 612 1028 l 478 1135 l 345 1028 l 230 1028 l 434 1194 l 523 1194 m 603 1364 l 655 1350 q 641 1298 655 1322 q 602 1258 626 1274 q 547 1243 577 1243 q 492 1255 513 1243 q 454 1280 472 1267 q 408 1292 436 1292 q 370 1276 387 1292 q 352 1241 352 1260 l 300 1254 q 314 1306 300 1281 q 354 1347 329 1331 q 408 1362 378 1362 q 458 1351 437 1362 q 499 1327 479 1339 q 547 1315 520 1315 q 585 1330 568 1315 q 603 1364 603 1345 z "},"ỗ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 433 981 l 638 816 l 522 816 l 389 923 l 256 816 l 140 816 l 345 981 l 433 981 m 513 1152 l 566 1137 q 551 1086 566 1110 q 512 1046 536 1061 q 457 1031 488 1031 q 403 1043 423 1031 q 365 1067 382 1055 q 319 1080 347 1080 q 280 1064 298 1080 q 262 1029 262 1048 l 210 1042 q 225 1094 210 1069 q 264 1134 239 1118 q 319 1150 289 1150 q 368 1138 347 1150 q 410 1115 389 1126 q 457 1103 431 1103 q 496 1118 478 1103 q 513 1152 513 1133 z "},"Ộ":{"ha":956,"x_min":81,"x_max":875,"o":"m 875 525 l 875 463 q 847 263 875 351 q 767 113 819 175 q 642 19 715 52 q 479 -14 569 -14 q 318 19 391 -14 q 192 113 245 52 q 110 263 139 175 q 81 463 81 351 l 81 525 q 110 724 81 636 q 191 874 138 812 q 317 968 244 936 q 477 1001 390 1001 q 641 968 568 1001 q 766 874 713 936 q 847 724 819 812 q 875 525 875 636 m 745 463 l 745 526 q 727 682 745 614 q 675 796 709 750 q 590 866 640 842 q 477 890 541 890 q 367 866 416 890 q 283 796 318 842 q 229 682 248 750 q 210 526 210 614 l 210 463 q 229 306 210 374 q 284 191 248 237 q 369 121 319 144 q 479 97 418 97 q 592 121 543 97 q 676 191 642 144 q 728 306 710 237 q 745 463 745 374 m 517 1254 l 686 1069 l 686 1062 l 581 1062 l 479 1177 l 378 1062 l 275 1062 l 275 1069 l 441 1254 l 517 1254 m 401 -167 q 420 -115 401 -136 q 475 -94 439 -94 q 531 -115 511 -94 q 550 -167 550 -136 q 531 -217 550 -196 q 475 -237 511 -237 q 420 -217 439 -237 q 401 -167 401 -196 z "},"ộ":{"ha":792,"x_min":62,"x_max":730,"o":"m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 641 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 641 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 428 1042 l 596 857 l 596 850 l 492 850 l 390 964 l 289 850 l 186 850 l 186 857 l 352 1042 l 428 1042 m 318 -168 q 337 -116 318 -137 q 392 -95 355 -95 q 447 -116 428 -95 q 467 -168 467 -137 q 447 -217 467 -197 q 392 -238 428 -238 q 337 -217 355 -238 q 318 -168 318 -197 z "},"Ớ":{"ha":954,"x_min":69,"x_max":975,"o":"m 861 1080 l 975 1080 q 946 930 975 992 q 860 837 918 869 q 717 804 803 804 l 717 896 q 802 918 770 896 q 847 981 833 939 q 861 1080 861 1022 m 863 525 l 863 463 q 836 263 863 351 q 755 113 808 175 q 630 19 703 52 q 467 -14 557 -14 q 336 7 397 -14 q 226 69 275 28 q 142 167 177 109 q 88 299 106 225 q 69 463 69 374 l 69 525 q 98 724 69 636 q 180 874 127 812 q 306 968 233 936 q 466 1001 378 1001 q 600 980 538 1001 q 710 919 661 959 q 793 820 758 878 q 845 688 827 762 q 863 525 863 614 m 734 463 l 734 526 q 722 654 734 597 q 688 755 711 711 q 633 829 666 800 q 559 874 601 859 q 466 890 517 890 q 356 866 406 890 q 272 796 307 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 211 334 199 391 q 247 232 223 276 q 303 157 270 187 q 377 112 336 127 q 467 97 419 97 q 581 121 531 97 q 664 191 630 144 q 716 306 699 237 q 734 463 734 374 m 408 1049 l 539 1249 l 690 1249 l 509 1049 l 408 1049 z "},"ớ":{"ha":794,"x_min":62,"x_max":821,"o":"m 720 814 l 821 814 q 800 686 821 740 q 732 603 780 632 q 604 574 685 574 l 604 652 q 679 673 654 652 q 712 730 704 693 q 720 814 720 766 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 326 842 l 457 1042 l 608 1042 l 427 842 l 326 842 z "},"Ờ":{"ha":954,"x_min":69,"x_max":975,"o":"m 861 1080 l 975 1080 q 946 930 975 992 q 860 837 918 869 q 717 804 803 804 l 717 896 q 802 918 770 896 q 847 981 833 939 q 861 1080 861 1022 m 863 525 l 863 463 q 836 263 863 351 q 755 113 808 175 q 630 19 703 52 q 467 -14 557 -14 q 336 7 397 -14 q 226 69 275 28 q 142 167 177 109 q 88 299 106 225 q 69 463 69 374 l 69 525 q 98 724 69 636 q 180 874 127 812 q 306 968 233 936 q 466 1001 378 1001 q 600 980 538 1001 q 710 919 661 959 q 793 820 758 878 q 845 688 827 762 q 863 525 863 614 m 734 463 l 734 526 q 722 654 734 597 q 688 755 711 711 q 633 829 666 800 q 559 874 601 859 q 466 890 517 890 q 356 866 406 890 q 272 796 307 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 211 334 199 391 q 247 232 223 276 q 303 157 270 187 q 377 112 336 127 q 467 97 419 97 q 581 121 531 97 q 664 191 630 144 q 716 306 699 237 q 734 463 734 374 m 417 1249 l 548 1049 l 440 1049 l 265 1249 l 417 1249 z "},"ờ":{"ha":794,"x_min":62,"x_max":821,"o":"m 720 814 l 821 814 q 800 686 821 740 q 732 603 780 632 q 604 574 685 574 l 604 652 q 679 673 654 652 q 712 730 704 693 q 720 814 720 766 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 335 1042 l 466 842 l 358 842 l 183 1042 l 335 1042 z "},"Ở":{"ha":954,"x_min":69,"x_max":975,"o":"m 861 1080 l 975 1080 q 946 930 975 992 q 860 837 918 869 q 717 804 803 804 l 717 896 q 802 918 770 896 q 847 981 833 939 q 861 1080 861 1022 m 863 525 l 863 463 q 836 263 863 351 q 755 113 808 175 q 630 19 703 52 q 467 -14 557 -14 q 336 7 397 -14 q 226 69 275 28 q 142 167 177 109 q 88 299 106 225 q 69 463 69 374 l 69 525 q 98 724 69 636 q 180 874 127 812 q 306 968 233 936 q 466 1001 378 1001 q 600 980 538 1001 q 710 919 661 959 q 793 820 758 878 q 845 688 827 762 q 863 525 863 614 m 734 463 l 734 526 q 722 654 734 597 q 688 755 711 711 q 633 829 666 800 q 559 874 601 859 q 466 890 517 890 q 356 866 406 890 q 272 796 307 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 211 334 199 391 q 247 232 223 276 q 303 157 270 187 q 377 112 336 127 q 467 97 419 97 q 581 121 531 97 q 664 191 630 144 q 716 306 699 237 q 734 463 734 374 m 524 1060 l 434 1060 l 433 1163 q 490 1170 468 1165 q 522 1186 511 1175 q 532 1214 532 1196 q 523 1238 532 1228 q 498 1254 514 1248 q 463 1263 483 1261 q 419 1266 442 1266 l 424 1338 q 512 1329 474 1338 q 577 1303 551 1320 q 616 1263 603 1286 q 629 1211 629 1240 q 597 1136 629 1160 q 525 1107 564 1113 l 524 1060 z "},"ở":{"ha":794,"x_min":62,"x_max":821,"o":"m 720 814 l 821 814 q 800 686 821 740 q 732 603 780 632 q 604 574 685 574 l 604 652 q 679 673 654 652 q 712 730 704 693 q 720 814 720 766 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 442 853 l 352 853 l 351 956 q 408 963 386 958 q 439 979 429 968 q 450 1007 450 989 q 441 1031 450 1021 q 416 1047 432 1041 q 380 1057 401 1054 q 337 1059 360 1059 l 342 1131 q 430 1122 392 1131 q 495 1097 469 1114 q 534 1056 521 1080 q 547 1004 547 1033 q 515 929 547 953 q 443 901 482 906 l 442 853 z "},"Ỡ":{"ha":954,"x_min":69,"x_max":975,"o":"m 861 1080 l 975 1080 q 946 930 975 992 q 860 837 918 869 q 717 804 803 804 l 717 896 q 802 918 770 896 q 847 981 833 939 q 861 1080 861 1022 m 863 525 l 863 463 q 836 263 863 351 q 755 113 808 175 q 630 19 703 52 q 467 -14 557 -14 q 336 7 397 -14 q 226 69 275 28 q 142 167 177 109 q 88 299 106 225 q 69 463 69 374 l 69 525 q 98 724 69 636 q 180 874 127 812 q 306 968 233 936 q 466 1001 378 1001 q 600 980 538 1001 q 710 919 661 959 q 793 820 758 878 q 845 688 827 762 q 863 525 863 614 m 734 463 l 734 526 q 722 654 734 597 q 688 755 711 711 q 633 829 666 800 q 559 874 601 859 q 466 890 517 890 q 356 866 406 890 q 272 796 307 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 211 334 199 391 q 247 232 223 276 q 303 157 270 187 q 377 112 336 127 q 467 97 419 97 q 581 121 531 97 q 664 191 630 144 q 716 306 699 237 q 734 463 734 374 m 633 1235 l 718 1227 q 698 1141 718 1178 q 645 1083 678 1103 q 571 1063 612 1063 q 514 1073 536 1063 q 474 1095 492 1082 q 437 1117 456 1107 q 389 1127 418 1127 q 341 1105 361 1127 q 322 1052 322 1084 l 237 1056 q 257 1143 237 1105 q 309 1202 276 1181 q 383 1223 342 1223 q 434 1214 412 1223 q 476 1191 456 1204 q 517 1169 496 1179 q 565 1159 538 1159 q 613 1181 593 1159 q 633 1235 633 1203 z "},"ỡ":{"ha":794,"x_min":62,"x_max":821,"o":"m 720 814 l 821 814 q 800 686 821 740 q 732 603 780 632 q 604 574 685 574 l 604 652 q 679 673 654 652 q 712 730 704 693 q 720 814 720 766 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 551 1028 l 635 1021 q 616 934 635 971 q 563 876 596 897 q 489 856 530 856 q 432 866 454 856 q 392 888 410 876 q 355 910 374 901 q 307 920 336 920 q 259 899 279 920 q 240 845 240 877 l 155 849 q 175 936 155 899 q 227 995 194 974 q 301 1017 260 1017 q 352 1007 330 1017 q 394 984 374 997 q 435 962 414 972 q 483 952 456 952 q 531 974 511 952 q 551 1028 551 996 z "},"Ợ":{"ha":954,"x_min":69,"x_max":975,"o":"m 861 1080 l 975 1080 q 946 930 975 992 q 860 837 918 869 q 717 804 803 804 l 717 896 q 802 918 770 896 q 847 981 833 939 q 861 1080 861 1022 m 863 525 l 863 463 q 836 263 863 351 q 755 113 808 175 q 630 19 703 52 q 467 -14 557 -14 q 336 7 397 -14 q 226 69 275 28 q 142 167 177 109 q 88 299 106 225 q 69 463 69 374 l 69 525 q 98 724 69 636 q 180 874 127 812 q 306 968 233 936 q 466 1001 378 1001 q 600 980 538 1001 q 710 919 661 959 q 793 820 758 878 q 845 688 827 762 q 863 525 863 614 m 734 463 l 734 526 q 722 654 734 597 q 688 755 711 711 q 633 829 666 800 q 559 874 601 859 q 466 890 517 890 q 356 866 406 890 q 272 796 307 842 q 218 682 237 750 q 199 526 199 614 l 199 463 q 211 334 199 391 q 247 232 223 276 q 303 157 270 187 q 377 112 336 127 q 467 97 419 97 q 581 121 531 97 q 664 191 630 144 q 716 306 699 237 q 734 463 734 374 m 391 -167 q 410 -115 391 -136 q 465 -94 429 -94 q 520 -115 501 -94 q 540 -167 540 -136 q 520 -217 540 -196 q 465 -237 501 -237 q 410 -217 429 -237 q 391 -167 391 -196 z "},"ợ":{"ha":794,"x_min":62,"x_max":821,"o":"m 720 814 l 821 814 q 800 686 821 740 q 732 603 780 632 q 604 574 685 574 l 604 652 q 679 673 654 652 q 712 730 704 693 q 720 814 720 766 m 62 359 l 62 374 q 85 522 62 454 q 152 641 109 590 q 257 719 195 691 q 395 747 319 747 q 535 719 473 747 q 640 641 597 691 q 707 522 684 590 q 730 374 730 454 l 730 359 q 707 212 730 279 q 640 93 684 144 q 535 15 597 43 q 397 -14 474 -14 q 258 15 319 -14 q 152 93 196 43 q 85 212 109 144 q 62 359 62 279 m 188 374 l 188 359 q 201 255 188 304 q 240 170 214 207 q 305 111 266 132 q 397 90 345 90 q 487 111 448 90 q 552 170 526 132 q 591 255 578 207 q 604 359 604 304 l 604 374 q 591 477 604 429 q 552 563 578 526 q 487 623 526 601 q 395 644 448 644 q 305 623 344 644 q 240 563 266 601 q 201 477 214 526 q 188 374 188 429 m 317 -174 q 335 -122 317 -143 q 391 -101 354 -101 q 446 -122 427 -101 q 465 -174 465 -143 q 446 -223 465 -203 q 391 -244 427 -244 q 335 -223 354 -244 q 317 -174 317 -203 z "},"Ụ":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 374 -167 q 392 -115 374 -136 q 448 -94 411 -94 q 503 -115 484 -94 q 522 -167 522 -136 q 503 -217 522 -196 q 448 -237 484 -237 q 392 -217 411 -237 q 374 -167 374 -196 z "},"ụ":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 267 -167 q 286 -115 267 -136 q 341 -94 304 -94 q 396 -115 377 -94 q 416 -167 416 -136 q 396 -217 416 -196 q 341 -237 377 -237 q 286 -217 304 -237 q 267 -167 267 -196 z "},"Ủ":{"ha":901,"x_min":95,"x_max":810,"o":"m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 500 1064 l 410 1064 l 409 1167 q 465 1174 444 1169 q 497 1190 487 1179 q 507 1218 507 1200 q 498 1242 507 1232 q 474 1258 490 1252 q 438 1267 458 1265 q 395 1270 418 1270 l 399 1342 q 488 1333 450 1342 q 552 1308 526 1324 q 592 1267 578 1291 q 605 1215 605 1244 q 572 1140 605 1164 q 500 1112 540 1117 l 500 1064 z "},"ủ":{"ha":766,"x_min":93,"x_max":671,"o":"m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 432 853 l 342 853 l 341 956 q 397 963 376 958 q 429 979 419 968 q 439 1007 439 989 q 431 1031 439 1021 q 406 1047 422 1041 q 370 1057 391 1054 q 327 1059 350 1059 l 332 1131 q 420 1122 382 1131 q 485 1097 458 1114 q 524 1056 511 1080 q 537 1004 537 1033 q 505 929 537 953 q 433 901 472 906 l 432 853 z "},"Ứ":{"ha":966,"x_min":95,"x_max":1061,"o":"m 954 1043 l 1061 1043 q 1033 882 1061 947 q 943 784 1005 817 q 779 751 881 751 l 779 842 q 886 865 848 842 q 939 932 924 888 q 954 1043 954 977 m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 401 1061 l 533 1260 l 684 1260 l 503 1061 l 401 1061 z "},"ứ":{"ha":859,"x_min":93,"x_max":879,"o":"m 783 793 l 879 793 q 860 669 879 719 q 792 593 840 618 q 656 568 744 568 l 656 646 q 744 661 718 646 q 777 709 770 676 q 783 793 783 741 m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 324 828 l 456 1027 l 607 1027 l 425 828 l 324 828 z "},"Ừ":{"ha":966,"x_min":95,"x_max":1061,"o":"m 954 1043 l 1061 1043 q 1033 882 1061 947 q 943 784 1005 817 q 779 751 881 751 l 779 842 q 886 865 848 842 q 939 932 924 888 q 954 1043 954 977 m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 411 1260 l 542 1061 l 434 1061 l 259 1260 l 411 1260 z "},"ừ":{"ha":859,"x_min":93,"x_max":879,"o":"m 783 793 l 879 793 q 860 669 879 719 q 792 593 840 618 q 656 568 744 568 l 656 646 q 744 661 718 646 q 777 709 770 676 q 783 793 783 741 m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 334 1027 l 465 828 l 357 828 l 182 1027 l 334 1027 z "},"Ử":{"ha":966,"x_min":95,"x_max":1061,"o":"m 954 1043 l 1061 1043 q 1033 882 1061 947 q 943 784 1005 817 q 779 751 881 751 l 779 842 q 886 865 848 842 q 939 932 924 888 q 954 1043 954 977 m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 518 1072 l 428 1072 l 427 1175 q 484 1182 462 1177 q 515 1197 505 1187 q 526 1225 526 1208 q 517 1250 526 1240 q 492 1266 508 1259 q 456 1275 477 1272 q 413 1278 436 1278 l 418 1350 q 506 1341 468 1350 q 571 1315 545 1332 q 610 1275 597 1298 q 623 1223 623 1251 q 591 1148 623 1171 q 519 1119 558 1124 l 518 1072 z "},"ử":{"ha":859,"x_min":93,"x_max":879,"o":"m 783 793 l 879 793 q 860 669 879 719 q 792 593 840 618 q 656 568 744 568 l 656 646 q 744 661 718 646 q 777 709 770 676 q 783 793 783 741 m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 441 839 l 351 839 l 350 942 q 406 949 385 944 q 438 965 428 954 q 448 993 448 975 q 439 1017 448 1007 q 415 1033 431 1027 q 379 1042 399 1040 q 336 1045 359 1045 l 340 1117 q 429 1108 391 1117 q 493 1082 467 1099 q 533 1042 519 1065 q 546 990 546 1019 q 513 915 546 939 q 441 886 481 892 l 441 839 z "},"Ữ":{"ha":966,"x_min":95,"x_max":1061,"o":"m 954 1043 l 1061 1043 q 1033 882 1061 947 q 943 784 1005 817 q 779 751 881 751 l 779 842 q 886 865 848 842 q 939 932 924 888 q 954 1043 954 977 m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 627 1246 l 711 1239 q 692 1152 711 1190 q 639 1095 672 1115 q 565 1074 606 1074 q 508 1084 530 1074 q 468 1106 486 1094 q 431 1129 450 1119 q 383 1139 412 1139 q 335 1117 355 1139 q 316 1063 316 1095 l 231 1067 q 251 1155 231 1117 q 303 1214 270 1192 q 377 1235 336 1235 q 428 1225 406 1235 q 470 1203 450 1215 q 511 1180 490 1190 q 559 1171 532 1171 q 607 1193 587 1171 q 627 1246 627 1215 z "},"ữ":{"ha":859,"x_min":93,"x_max":879,"o":"m 783 793 l 879 793 q 860 669 879 719 q 792 593 840 618 q 656 568 744 568 l 656 646 q 744 661 718 646 q 777 709 770 676 q 783 793 783 741 m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 549 1014 l 634 1006 q 614 920 634 957 q 562 862 595 882 q 488 842 529 842 q 431 851 453 842 q 391 874 408 861 q 354 896 373 886 q 306 906 334 906 q 258 884 277 906 q 239 831 239 863 l 154 835 q 173 922 154 884 q 226 981 193 960 q 300 1002 259 1002 q 351 992 329 1002 q 393 970 373 983 q 433 948 412 958 q 481 938 454 938 q 530 960 510 938 q 549 1014 549 982 z "},"Ự":{"ha":966,"x_min":95,"x_max":1061,"o":"m 954 1043 l 1061 1043 q 1033 882 1061 947 q 943 784 1005 817 q 779 751 881 751 l 779 842 q 886 865 848 842 q 939 932 924 888 q 954 1043 954 977 m 680 987 l 810 987 l 810 319 q 760 134 810 208 q 629 23 711 60 q 452 -14 547 -14 q 270 23 351 -14 q 142 134 189 60 q 95 319 95 208 l 95 987 l 224 987 l 224 319 q 253 192 224 242 q 333 117 281 142 q 452 93 384 93 q 571 117 520 93 q 651 192 623 142 q 680 319 680 242 l 680 987 m 391 -173 q 410 -121 391 -142 q 465 -100 429 -100 q 520 -121 501 -100 q 540 -173 540 -142 q 520 -223 540 -202 q 465 -243 501 -243 q 410 -223 429 -243 q 391 -173 391 -202 z "},"ự":{"ha":859,"x_min":93,"x_max":879,"o":"m 783 793 l 879 793 q 860 669 879 719 q 792 593 840 618 q 656 568 744 568 l 656 646 q 744 661 718 646 q 777 709 770 676 q 783 793 783 741 m 545 170 l 545 734 l 671 734 l 671 0 l 551 0 l 545 170 m 568 324 l 621 326 q 605 190 621 252 q 556 83 590 128 q 467 12 522 37 q 334 -14 412 -14 q 236 2 280 -14 q 159 50 191 18 q 110 135 127 83 q 93 260 93 187 l 93 734 l 218 734 l 218 259 q 230 177 218 210 q 260 126 241 145 q 303 100 279 108 q 353 93 328 93 q 480 124 433 93 q 548 207 527 155 q 568 324 568 260 m 304 -167 q 322 -115 304 -136 q 378 -94 341 -94 q 433 -115 414 -94 q 452 -167 452 -136 q 433 -217 452 -196 q 378 -237 414 -237 q 322 -217 341 -237 q 304 -167 304 -196 z "},"Ỵ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 339 -166 q 358 -115 339 -136 q 413 -94 376 -94 q 468 -115 449 -94 q 488 -166 488 -136 q 468 -216 488 -195 q 413 -237 449 -237 q 358 -216 376 -237 q 339 -166 339 -195 z "},"ỵ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 405 -274 q 424 -222 405 -243 q 479 -201 442 -201 q 534 -222 515 -201 q 553 -274 553 -243 q 534 -324 553 -303 q 479 -345 515 -345 q 424 -324 442 -345 q 405 -274 405 -303 z "},"Ỷ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 467 1063 l 376 1063 l 376 1166 q 432 1174 410 1168 q 464 1189 454 1179 q 474 1217 474 1200 q 465 1241 474 1232 q 441 1258 456 1251 q 405 1267 425 1264 q 361 1270 385 1270 l 366 1341 q 455 1333 416 1341 q 519 1307 493 1324 q 558 1266 545 1290 q 572 1215 572 1243 q 539 1140 572 1163 q 467 1111 507 1116 l 467 1063 z "},"ỷ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 392 853 l 302 853 l 301 956 q 357 963 336 958 q 389 979 379 968 q 399 1007 399 989 q 391 1031 399 1021 q 366 1047 382 1041 q 330 1057 351 1054 q 287 1059 310 1059 l 292 1131 q 380 1122 342 1131 q 445 1097 418 1114 q 484 1056 471 1080 q 497 1004 497 1033 q 465 929 497 953 q 393 901 432 906 l 392 853 z "},"Ỹ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 575 1238 l 660 1231 q 640 1144 660 1181 q 588 1086 621 1107 q 513 1066 555 1066 q 456 1076 479 1066 q 416 1098 434 1086 q 379 1121 399 1111 q 332 1131 360 1131 q 284 1109 303 1131 q 264 1055 264 1087 l 180 1059 q 199 1146 180 1109 q 252 1205 218 1184 q 326 1227 285 1227 q 377 1217 355 1227 q 418 1195 399 1207 q 459 1172 438 1182 q 507 1162 480 1162 q 555 1184 536 1162 q 575 1238 575 1206 z "},"ỹ":{"ha":657,"x_min":15,"x_max":640,"o":"m 302 76 l 506 734 l 640 734 l 346 -113 q 319 -172 336 -140 q 277 -232 302 -203 q 215 -278 251 -260 q 128 -296 178 -296 q 90 -292 113 -296 q 58 -286 67 -288 l 57 -184 q 74 -185 62 -184 q 91 -186 86 -186 q 163 -175 134 -186 q 214 -138 193 -164 q 250 -66 235 -112 l 302 76 m 152 734 l 342 164 l 375 32 l 285 -14 l 15 734 l 152 734 m 500 1028 l 585 1021 q 566 934 585 971 q 513 876 546 897 q 439 856 480 856 q 382 866 404 856 q 342 888 359 876 q 305 910 324 901 q 257 920 286 920 q 209 899 229 920 q 190 845 190 877 l 105 849 q 124 936 105 899 q 177 995 144 974 q 251 1017 210 1017 q 302 1007 280 1017 q 344 984 324 997 q 385 962 363 972 q 433 952 406 952 q 481 974 461 952 q 500 1028 500 996 z "},"₫":{"ha":804,"x_min":64,"x_max":812,"o":"m 558 142 l 558 1042 l 684 1042 l 684 0 l 569 0 l 558 142 m 64 359 l 64 373 q 85 526 64 457 q 144 644 106 595 q 236 721 182 694 q 355 747 289 747 q 476 723 424 747 q 564 653 528 699 q 621 543 600 608 q 650 397 642 479 l 650 335 q 622 190 643 254 q 564 80 600 125 q 475 11 528 35 q 353 -14 423 -14 q 236 14 289 -14 q 144 92 182 42 q 85 211 106 142 q 64 359 64 279 m 191 373 l 191 359 q 202 256 191 304 q 237 171 213 208 q 297 114 260 134 q 385 93 334 93 q 487 119 447 93 q 552 189 528 146 q 590 283 576 233 l 590 447 q 567 519 582 484 q 527 582 551 554 q 468 625 503 609 q 386 642 433 642 q 297 620 334 642 q 237 562 260 599 q 202 476 213 525 q 191 373 191 428 m 812 939 l 812 836 l 380 836 l 380 939 l 812 939 m 732 -106 l 732 -210 l 111 -210 l 111 -106 l 732 -106 z "},"Ҭ":{"ha":829,"x_min":34,"x_max":797,"o":"m 479 987 l 479 0 l 351 0 l 351 987 l 479 987 m 797 987 l 797 880 l 34 880 l 34 987 l 797 987 m 587 104 l 587 -243 l 461 -243 l 461 104 l 587 104 z "},"ҭ":{"ha":668,"x_min":27,"x_max":641,"o":"m 395 734 l 395 0 l 269 0 l 269 734 l 395 734 m 641 734 l 641 632 l 27 632 l 27 734 l 641 734 m 505 104 l 505 -243 l 379 -243 l 379 104 l 505 104 z "},"Ӌ":{"ha":951,"x_min":102,"x_max":831,"o":"m 102 987 l 233 987 l 233 679 q 256 559 233 602 q 323 498 278 515 q 437 480 369 480 q 516 484 477 480 q 591 493 554 487 q 663 508 627 499 q 733 527 699 517 l 733 420 q 667 401 700 410 q 599 386 634 392 q 525 376 564 380 q 437 373 485 373 q 257 403 332 373 q 142 500 182 433 q 102 679 102 568 l 102 987 m 700 987 l 831 987 l 831 0 l 700 0 l 700 987 m 715 104 l 715 -243 l 590 -243 l 590 104 l 715 104 z "},"ӌ":{"ha":755,"x_min":71,"x_max":649,"o":"m 649 734 l 649 0 l 524 0 l 524 734 l 649 734 m 606 397 l 606 294 q 529 268 568 279 q 447 251 490 257 q 354 244 404 244 q 203 274 267 244 q 105 366 140 304 q 71 521 71 427 l 71 735 l 196 735 l 196 521 q 214 422 196 460 q 268 366 233 384 q 354 348 303 348 q 446 354 403 348 q 529 372 489 361 q 606 397 568 382 m 536 104 l 536 -243 l 411 -243 l 411 104 l 536 104 z "},"Ӷ":{"ha":772,"x_min":121,"x_max":727,"o":"m 727 987 l 727 880 l 251 880 l 251 0 l 121 0 l 121 987 l 727 987 m 359 104 l 359 -243 l 233 -243 l 233 104 l 359 104 z "},"ӷ":{"ha":583,"x_min":105,"x_max":570,"o":"m 570 734 l 570 630 l 231 630 l 231 0 l 105 0 l 105 734 l 570 734 m 340 104 l 340 -243 l 215 -243 l 215 104 l 340 104 z "},"Ҿ":{"ha":1074,"x_min":43,"x_max":997,"o":"m 43 733 l 146 733 q 163 647 146 684 q 218 589 181 610 q 314 568 256 568 l 314 473 q 164 505 225 473 q 73 596 104 537 q 43 733 43 654 m 679 -16 q 500 16 578 -16 q 368 104 422 47 q 287 238 315 161 q 260 409 260 316 l 260 578 q 288 748 260 671 q 367 883 317 826 q 485 970 418 939 q 629 1000 551 1001 q 788 969 720 1000 q 904 878 857 937 q 974 736 950 819 q 997 549 997 652 l 997 473 l 339 473 l 339 567 l 866 567 l 866 589 q 853 707 866 652 q 813 804 841 762 q 740 868 785 845 q 629 892 694 892 q 527 867 572 892 q 452 800 483 843 q 406 700 422 756 q 390 578 390 643 l 390 409 q 406 286 390 343 q 457 185 422 229 q 547 117 492 142 q 679 92 602 92 q 819 111 763 92 q 913 149 876 130 l 945 52 q 895 25 929 41 q 808 -3 861 9 q 679 -16 754 -16 m 721 57 l 721 -291 l 595 -291 l 595 57 l 721 57 z "},"ҿ":{"ha":823,"x_min":-24,"x_max":762,"o":"m -24 581 l 77 581 q 111 475 77 515 q 218 435 144 435 l 218 343 q 85 372 139 343 q 4 454 31 401 q -24 581 -24 508 m 476 -14 q 337 13 399 -14 q 231 86 275 39 q 163 199 186 134 q 139 341 139 264 l 139 370 q 165 529 139 459 q 237 648 192 600 q 340 722 283 697 q 460 747 398 747 q 596 720 539 747 q 690 645 653 693 q 745 531 727 596 q 762 388 762 465 l 762 332 l 214 332 l 214 434 l 636 434 l 636 444 q 624 516 634 480 q 594 581 614 551 q 541 627 574 610 q 460 644 508 644 q 381 626 417 644 q 319 573 345 608 q 279 487 294 538 q 265 370 265 436 l 265 341 q 280 243 265 289 q 322 163 294 197 q 391 109 351 128 q 483 89 431 89 q 595 116 549 89 q 676 189 642 143 l 753 128 q 692 60 729 92 q 602 7 655 27 q 476 -14 549 -14 m 543 59 l 543 -289 l 418 -289 l 418 59 l 543 59 z "},"һ":{"ha":765,"x_min":96,"x_max":673,"o":"m 221 1042 l 221 0 l 96 0 l 96 1042 l 221 1042 m 191 395 l 139 397 q 161 536 140 472 q 222 648 183 600 q 316 721 262 695 q 437 747 371 747 q 535 733 492 747 q 609 686 578 718 q 656 604 640 654 q 673 481 673 553 l 673 0 l 547 0 l 547 482 q 530 575 547 540 q 480 626 513 610 q 400 642 448 642 q 315 622 353 642 q 249 568 277 602 q 207 489 222 533 q 191 395 191 444 z "},"Ҍ":{"ha":871,"x_min":-30,"x_max":814,"o":"m 210 585 l 479 585 q 663 549 588 585 q 776 448 737 513 q 814 295 814 382 q 793 176 814 230 q 728 82 771 122 q 623 21 686 43 q 479 0 561 0 l 111 0 l 111 987 l 241 987 l 241 106 l 479 106 q 597 133 552 106 q 663 203 642 160 q 684 296 684 247 q 663 387 684 346 q 597 453 642 429 q 479 478 552 478 l 210 478 l 210 585 m 402 851 l 402 748 l -30 748 l -30 851 l 402 851 z "},"Ѣ":{"ha":871,"x_min":-30,"x_max":814,"o":"m 210 585 l 479 585 q 663 549 588 585 q 776 448 737 513 q 814 295 814 382 q 793 176 814 230 q 728 82 771 122 q 623 21 686 43 q 479 0 561 0 l 111 0 l 111 987 l 241 987 l 241 106 l 479 106 q 597 133 552 106 q 663 203 642 160 q 684 296 684 247 q 663 387 684 346 q 597 453 642 429 q 479 478 552 478 l 210 478 l 210 585 m 402 851 l 402 748 l -30 748 l -30 851 l 402 851 z "},"Ғ":{"ha":772,"x_min":2,"x_max":727,"o":"m 727 987 l 727 880 l 251 880 l 251 0 l 121 0 l 121 987 l 727 987 m 434 566 l 434 463 l 2 463 l 2 566 l 434 566 z "},"ғ":{"ha":583,"x_min":-2,"x_max":570,"o":"m 570 734 l 570 630 l 231 630 l 231 0 l 105 0 l 105 734 l 570 734 m 430 427 l 430 324 l -2 324 l -2 427 l 430 427 z "},"Ҟ":{"ha":906,"x_min":7,"x_max":902,"o":"m 265 987 l 265 0 l 134 0 l 134 987 l 265 987 m 873 987 l 445 444 l 213 444 l 193 553 l 367 553 l 711 987 l 873 987 m 742 0 l 371 461 l 444 576 l 902 0 l 742 0 m 439 834 l 439 731 l 7 731 l 7 834 l 439 834 z "},"ҟ":{"ha":722,"x_min":-31,"x_max":722,"o":"m 239 1042 l 239 0 l 113 0 l 113 1042 l 239 1042 m 687 734 l 385 340 l 194 340 l 179 444 l 324 444 l 538 734 l 687 734 m 573 0 l 321 349 l 387 460 l 722 0 l 573 0 m 401 928 l 401 825 l -31 825 l -31 928 l 401 928 z "},"Ұ":{"ha":834,"x_min":10,"x_max":822,"o":"m 160 987 l 416 492 l 673 987 l 822 987 l 481 369 l 481 0 l 351 0 l 351 369 l 10 987 l 160 987 m 635 456 l 635 353 l 203 353 l 203 456 l 635 456 z "},"ұ":{"ha":696,"x_min":32,"x_max":673,"o":"m 415 90 l 415 -283 l 290 -283 l 290 90 l 415 90 m 349 170 l 544 734 l 673 734 l 401 0 l 317 0 l 349 170 m 160 734 l 361 170 l 389 0 l 305 0 l 32 734 l 160 734 m 572 95 l 572 -8 l 140 -8 l 140 95 l 572 95 z "},"Ӿ":{"ha":871,"x_min":39,"x_max":834,"o":"m 199 987 l 437 609 l 674 987 l 827 987 l 515 498 l 834 0 l 680 0 l 437 386 l 193 0 l 39 0 l 359 498 l 47 987 l 199 987 m 655 557 l 655 454 l 223 454 l 223 557 l 655 557 z "},"ӿ":{"ha":689,"x_min":28,"x_max":659,"o":"m 180 734 l 341 467 l 504 734 l 651 734 l 411 372 l 659 0 l 513 0 l 344 275 l 174 0 l 28 0 l 275 372 l 36 734 l 180 734 m 562 429 l 562 326 l 130 326 l 130 429 l 562 429 z "},"ԑ":{"ha":749,"x_min":68,"x_max":681,"o":"m 356 398 l 505 398 l 505 325 l 366 325 q 272 312 310 325 q 214 274 233 300 q 194 206 194 248 q 206 161 194 182 q 241 123 218 140 q 298 98 264 107 q 374 88 332 88 q 470 106 429 88 q 533 154 511 125 q 556 217 556 184 l 681 217 q 654 114 681 157 q 584 42 628 70 q 485 0 540 14 q 374 -14 431 -14 q 252 1 308 -14 q 155 45 196 16 q 91 114 113 73 q 68 207 68 155 q 87 289 68 253 q 143 349 106 324 q 234 386 180 373 q 356 398 288 398 m 505 351 l 356 351 q 243 365 294 351 q 156 405 192 379 q 100 463 119 430 q 81 534 81 496 q 101 626 81 586 q 161 692 122 665 q 254 733 199 719 q 374 747 308 747 q 488 732 435 747 q 582 688 541 717 q 646 620 623 660 q 669 530 669 580 l 544 530 q 521 588 544 562 q 460 630 498 614 q 374 645 422 645 q 279 629 317 645 q 224 588 242 613 q 206 534 206 562 q 215 490 206 510 q 243 455 224 470 q 293 433 262 441 q 366 425 323 425 l 505 425 l 505 351 z "},"₣":{"ha":768,"x_min":12,"x_max":726,"o":"m 245 987 l 245 0 l 115 0 l 115 987 l 245 987 m 659 543 l 659 436 l 217 436 l 217 543 l 659 543 m 726 987 l 726 880 l 217 880 l 217 987 l 726 987 m 444 282 l 444 179 l 12 179 l 12 282 l 444 282 z "},"―":{"ha":1084,"x_min":98,"x_max":1004,"o":"m 1004 545 l 1004 441 l 98 441 l 98 545 l 1004 545 z "},"Ὅ":{"ha":1003,"x_min":-266,"x_max":922,"o":"m 922 525 l 922 463 q 895 263 922 351 q 814 113 867 175 q 689 19 762 52 q 526 -14 616 -14 q 366 19 439 -14 q 240 113 293 52 q 157 263 186 175 q 128 463 128 351 l 128 525 q 157 724 128 636 q 239 874 186 812 q 365 968 292 936 q 525 1001 437 1001 q 688 968 615 1001 q 813 874 761 936 q 894 724 866 812 q 922 525 922 636 m 793 463 l 793 526 q 775 682 793 614 q 722 796 757 750 q 638 866 688 842 q 525 890 588 890 q 415 866 464 890 q 331 796 366 842 q 277 682 296 750 q 258 526 258 614 l 258 463 q 277 306 258 374 q 331 191 296 237 q 416 121 367 144 q 526 97 465 97 q 640 121 590 97 q 723 191 689 144 q 775 306 758 237 q 793 463 793 374 m -69 783 l -69 795 l 9 1013 l 142 1013 l 142 999 l -9 783 l -69 783 m -266 956 l -266 1013 l -153 1013 l -153 960 q -138 876 -153 911 q -96 810 -124 840 l -145 770 q -235 849 -203 801 q -266 956 -266 898 z "}}'),familyName:"Roboto",ascender:1289,descender:-339,underlinePosition:-102,underlineThickness:68,boundingBox:{yMin:-376,xMin:-1024,yMax:1467,xMax:1596},resolution:1e3,original_font_information:{format:0,copyright:"Copyright 2011 The Roboto Project Authors (https://github.com/googlefonts/roboto-classic)",fontFamily:"Roboto",fontSubfamily:"Regular",uniqueID:"3.009;GOOG;Roboto-Regular",fullName:"Roboto Regular",version:"Version 3.009; 2024",postScriptName:"Roboto-Regular",trademark:"Roboto is a trademark of Google.",manufacturer:"Google",designer:"Christian Robertson",manufacturerURL:"Google.com",designerURL:"Google.com",licence:"This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org",licenceURL:"https://openfontlicense.org",unknown1:"Roboto",unknown2:"Weight",unknown3:"Width",unknown4:"Italic",unknown5:"Thin",unknown6:"ExtraLight",unknown7:"Light",unknown8:"Regular",unknown9:"Medium",unknown10:"SemiBold",unknown11:"Bold",unknown12:"ExtraBold",unknown13:"Black",unknown14:"Condensed Thin",unknown15:"Condensed ExtraLight",unknown16:"Condensed Light",unknown17:"Condensed Regular",unknown18:"Condensed Medium",unknown19:"Condensed SemiBold",unknown20:"Condensed Bold",unknown21:"Condensed ExtraBold",unknown22:"Condensed Black",unknown23:"Condensed",unknown24:"Normal",unknown25:"Roman",unknown26:"Roboto-Thin",unknown27:"Roboto-ExtraLight",unknown28:"Roboto-Light",unknown29:"Roboto-Regular",unknown30:"Roboto-Medium",unknown31:"Roboto-SemiBold",unknown32:"Roboto-Bold",unknown33:"Roboto-ExtraBold",unknown34:"Roboto-Black",unknown35:"Roboto-CondensedThin",unknown36:"Roboto-CondensedExtraLight",unknown37:"Roboto-CondensedLight",unknown38:"Roboto-CondensedRegular",unknown39:"Roboto-CondensedMedium",unknown40:"Roboto-CondensedSemiBold",unknown41:"Roboto-CondensedBold",unknown42:"Roboto-CondensedExtraBold",unknown43:"Roboto-CondensedBlack"},cssFontWeight:"normal",cssFontStyle:"normal"};class _r extends V1{constructor(e,t=8){const n=qs.ELEMENT_TEXT;var s=new qg().parse(xg),o=new gg(e,{font:s,size:t,depth:.2,curveSegments:12}).center();super(o,new Si(n))}}const gt={ICON_SIZE_SMALL:10,ICON_SIZE_MEDIUM:18,ICON_PADDING:4},_g=nn;class yr extends jt{constructor(e){super(e),this.defaultDPI=90,this.defaultUnit="px"}load(e,t,n,i){const s=this,o=new Un(s.manager);o.setPath(s.path),o.setRequestHeader(s.requestHeader),o.setWithCredentials(s.withCredentials),o.load(e,function(a){try{t(s.parse(a))}catch(l){i?i(l):console.error(l),s.manager.itemError(e)}},n,i)}parse(e){const t=this;function n(F,D){if(F.nodeType!==1)return;const N=_(F);let A=!1,Q=null;switch(F.nodeName){case"svg":D=m(F,D);break;case"style":s(F);break;case"g":D=m(F,D);break;case"path":D=m(F,D),F.hasAttribute("d")&&(Q=i(F));break;case"rect":D=m(F,D),Q=l(F);break;case"polygon":D=m(F,D),Q=c(F);break;case"polyline":D=m(F,D),Q=h(F);break;case"circle":D=m(F,D),Q=u(F);break;case"ellipse":D=m(F,D),Q=d(F);break;case"line":D=m(F,D),Q=q(F);break;case"defs":A=!0;break;case"use":D=m(F,D);const pe=(F.getAttributeNS("http://www.w3.org/1999/xlink","href")||"").substring(1),Z=F.viewportElement.getElementById(pe);Z?n(Z,D):console.warn("SVGLoader: 'use node' references non-existent node id: "+pe);break}Q&&(D.fill!==void 0&&D.fill!=="none"&&Q.color.setStyle(D.fill,_g),E(Q,ve),O.push(Q),Q.userData={node:F,style:D});const he=F.childNodes;for(let j=0;j<he.length;j++){const pe=he[j];A&&pe.nodeName!=="style"&&pe.nodeName!=="defs"||n(pe,D)}N&&(B.pop(),B.length>0?ve.copy(B[B.length-1]):ve.identity())}function i(F){const D=new y1,N=new $,A=new $,Q=new $;let he=!0,j=!1;const pe=F.getAttribute("d");if(pe===""||pe==="none")return null;const Z=pe.match(/[a-df-z][^a-df-z]*/ig);for(let te=0,M=Z.length;te<M;te++){const re=Z[te],ee=re.charAt(0),ue=re.slice(1).trim();he===!0&&(j=!0,he=!1);let V;switch(ee){case"M":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=2)N.x=V[k+0],N.y=V[k+1],A.x=N.x,A.y=N.y,k===0?D.moveTo(N.x,N.y):D.lineTo(N.x,N.y),k===0&&Q.copy(N);break;case"H":V=p(ue);for(let k=0,ae=V.length;k<ae;k++)N.x=V[k],A.x=N.x,A.y=N.y,D.lineTo(N.x,N.y),k===0&&j===!0&&Q.copy(N);break;case"V":V=p(ue);for(let k=0,ae=V.length;k<ae;k++)N.y=V[k],A.x=N.x,A.y=N.y,D.lineTo(N.x,N.y),k===0&&j===!0&&Q.copy(N);break;case"L":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=2)N.x=V[k+0],N.y=V[k+1],A.x=N.x,A.y=N.y,D.lineTo(N.x,N.y),k===0&&j===!0&&Q.copy(N);break;case"C":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=6)D.bezierCurveTo(V[k+0],V[k+1],V[k+2],V[k+3],V[k+4],V[k+5]),A.x=V[k+2],A.y=V[k+3],N.x=V[k+4],N.y=V[k+5],k===0&&j===!0&&Q.copy(N);break;case"S":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=4)D.bezierCurveTo(g(N.x,A.x),g(N.y,A.y),V[k+0],V[k+1],V[k+2],V[k+3]),A.x=V[k+0],A.y=V[k+1],N.x=V[k+2],N.y=V[k+3],k===0&&j===!0&&Q.copy(N);break;case"Q":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=4)D.quadraticCurveTo(V[k+0],V[k+1],V[k+2],V[k+3]),A.x=V[k+0],A.y=V[k+1],N.x=V[k+2],N.y=V[k+3],k===0&&j===!0&&Q.copy(N);break;case"T":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=2){const z=g(N.x,A.x),b=g(N.y,A.y);D.quadraticCurveTo(z,b,V[k+0],V[k+1]),A.x=z,A.y=b,N.x=V[k+0],N.y=V[k+1],k===0&&j===!0&&Q.copy(N)}break;case"A":V=p(ue,[3,4],7);for(let k=0,ae=V.length;k<ae;k+=7){if(V[k+5]==N.x&&V[k+6]==N.y)continue;const z=N.clone();N.x=V[k+5],N.y=V[k+6],A.x=N.x,A.y=N.y,o(D,V[k],V[k+1],V[k+2],V[k+3],V[k+4],z,N),k===0&&j===!0&&Q.copy(N)}break;case"m":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=2)N.x+=V[k+0],N.y+=V[k+1],A.x=N.x,A.y=N.y,k===0?D.moveTo(N.x,N.y):D.lineTo(N.x,N.y),k===0&&Q.copy(N);break;case"h":V=p(ue);for(let k=0,ae=V.length;k<ae;k++)N.x+=V[k],A.x=N.x,A.y=N.y,D.lineTo(N.x,N.y),k===0&&j===!0&&Q.copy(N);break;case"v":V=p(ue);for(let k=0,ae=V.length;k<ae;k++)N.y+=V[k],A.x=N.x,A.y=N.y,D.lineTo(N.x,N.y),k===0&&j===!0&&Q.copy(N);break;case"l":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=2)N.x+=V[k+0],N.y+=V[k+1],A.x=N.x,A.y=N.y,D.lineTo(N.x,N.y),k===0&&j===!0&&Q.copy(N);break;case"c":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=6)D.bezierCurveTo(N.x+V[k+0],N.y+V[k+1],N.x+V[k+2],N.y+V[k+3],N.x+V[k+4],N.y+V[k+5]),A.x=N.x+V[k+2],A.y=N.y+V[k+3],N.x+=V[k+4],N.y+=V[k+5],k===0&&j===!0&&Q.copy(N);break;case"s":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=4)D.bezierCurveTo(g(N.x,A.x),g(N.y,A.y),N.x+V[k+0],N.y+V[k+1],N.x+V[k+2],N.y+V[k+3]),A.x=N.x+V[k+0],A.y=N.y+V[k+1],N.x+=V[k+2],N.y+=V[k+3],k===0&&j===!0&&Q.copy(N);break;case"q":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=4)D.quadraticCurveTo(N.x+V[k+0],N.y+V[k+1],N.x+V[k+2],N.y+V[k+3]),A.x=N.x+V[k+0],A.y=N.y+V[k+1],N.x+=V[k+2],N.y+=V[k+3],k===0&&j===!0&&Q.copy(N);break;case"t":V=p(ue);for(let k=0,ae=V.length;k<ae;k+=2){const z=g(N.x,A.x),b=g(N.y,A.y);D.quadraticCurveTo(z,b,N.x+V[k+0],N.y+V[k+1]),A.x=z,A.y=b,N.x=N.x+V[k+0],N.y=N.y+V[k+1],k===0&&j===!0&&Q.copy(N)}break;case"a":V=p(ue,[3,4],7);for(let k=0,ae=V.length;k<ae;k+=7){if(V[k+5]==0&&V[k+6]==0)continue;const z=N.clone();N.x+=V[k+5],N.y+=V[k+6],A.x=N.x,A.y=N.y,o(D,V[k],V[k+1],V[k+2],V[k+3],V[k+4],z,N),k===0&&j===!0&&Q.copy(N)}break;case"Z":case"z":D.currentPath.autoClose=!0,D.currentPath.curves.length>0&&(N.copy(Q),D.currentPath.currentPoint.copy(N),he=!0);break;default:console.warn(re)}j=!1}return D}function s(F){if(!(!F.sheet||!F.sheet.cssRules||!F.sheet.cssRules.length))for(let D=0;D<F.sheet.cssRules.length;D++){const N=F.sheet.cssRules[D];if(N.type!==1)continue;const A=N.selectorText.split(/,/gm).filter(Boolean).map(Q=>Q.trim());for(let Q=0;Q<A.length;Q++){const he=Object.fromEntries(Object.entries(N.style).filter(([,j])=>j!==""));U[A[Q]]=Object.assign(U[A[Q]]||{},he)}}}function o(F,D,N,A,Q,he,j,pe){if(D==0||N==0){F.lineTo(pe.x,pe.y);return}A=A*Math.PI/180,D=Math.abs(D),N=Math.abs(N);const Z=(j.x-pe.x)/2,te=(j.y-pe.y)/2,M=Math.cos(A)*Z+Math.sin(A)*te,re=-Math.sin(A)*Z+Math.cos(A)*te;let ee=D*D,ue=N*N;const V=M*M,k=re*re,ae=V/ee+k/ue;if(ae>1){const Qe=Math.sqrt(ae);D=Qe*D,N=Qe*N,ee=D*D,ue=N*N}const z=ee*k+ue*V,b=(ee*ue-z)/z;let J=Math.sqrt(Math.max(0,b));Q===he&&(J=-J);const oe=J*D*re/N,qe=-J*N*M/D,de=Math.cos(A)*oe-Math.sin(A)*qe+(j.x+pe.x)/2,Pe=Math.sin(A)*oe+Math.cos(A)*qe+(j.y+pe.y)/2,Me=a(1,0,(M-oe)/D,(re-qe)/N),Te=a((M-oe)/D,(re-qe)/N,(-M-oe)/D,(-re-qe)/N)%(Math.PI*2);F.currentPath.absellipse(de,Pe,D,N,Me,Me+Te,he===0,A)}function a(F,D,N,A){const Q=F*N+D*A,he=Math.sqrt(F*F+D*D)*Math.sqrt(N*N+A*A);let j=Math.acos(Math.max(-1,Math.min(1,Q/he)));return F*A-D*N<0&&(j=-j),j}function l(F){const D=y(F.getAttribute("x")||0),N=y(F.getAttribute("y")||0),A=y(F.getAttribute("rx")||F.getAttribute("ry")||0),Q=y(F.getAttribute("ry")||F.getAttribute("rx")||0),he=y(F.getAttribute("width")),j=y(F.getAttribute("height")),pe=1-.551915024494,Z=new y1;return Z.moveTo(D+A,N),Z.lineTo(D+he-A,N),(A!==0||Q!==0)&&Z.bezierCurveTo(D+he-A*pe,N,D+he,N+Q*pe,D+he,N+Q),Z.lineTo(D+he,N+j-Q),(A!==0||Q!==0)&&Z.bezierCurveTo(D+he,N+j-Q*pe,D+he-A*pe,N+j,D+he-A,N+j),Z.lineTo(D+A,N+j),(A!==0||Q!==0)&&Z.bezierCurveTo(D+A*pe,N+j,D,N+j-Q*pe,D,N+j-Q),Z.lineTo(D,N+Q),(A!==0||Q!==0)&&Z.bezierCurveTo(D,N+Q*pe,D+A*pe,N,D+A,N),Z}function c(F){function D(he,j,pe){const Z=y(j),te=y(pe);Q===0?A.moveTo(Z,te):A.lineTo(Z,te),Q++}const N=/([+-]?\d*\.?\d+(?:e[+-]?\d+)?)(?:,|\s)([+-]?\d*\.?\d+(?:e[+-]?\d+)?)/g,A=new y1;let Q=0;return F.getAttribute("points").replace(N,D),A.currentPath.autoClose=!0,A}function h(F){function D(he,j,pe){const Z=y(j),te=y(pe);Q===0?A.moveTo(Z,te):A.lineTo(Z,te),Q++}const N=/([+-]?\d*\.?\d+(?:e[+-]?\d+)?)(?:,|\s)([+-]?\d*\.?\d+(?:e[+-]?\d+)?)/g,A=new y1;let Q=0;return F.getAttribute("points").replace(N,D),A.currentPath.autoClose=!1,A}function u(F){const D=y(F.getAttribute("cx")||0),N=y(F.getAttribute("cy")||0),A=y(F.getAttribute("r")||0),Q=new Dn;Q.absarc(D,N,A,0,Math.PI*2);const he=new y1;return he.subPaths.push(Q),he}function d(F){const D=y(F.getAttribute("cx")||0),N=y(F.getAttribute("cy")||0),A=y(F.getAttribute("rx")||0),Q=y(F.getAttribute("ry")||0),he=new Dn;he.absellipse(D,N,A,Q,0,Math.PI*2);const j=new y1;return j.subPaths.push(he),j}function q(F){const D=y(F.getAttribute("x1")||0),N=y(F.getAttribute("y1")||0),A=y(F.getAttribute("x2")||0),Q=y(F.getAttribute("y2")||0),he=new y1;return he.moveTo(D,N),he.lineTo(A,Q),he.currentPath.autoClose=!1,he}function m(F,D){D=Object.assign({},D);let N={};if(F.hasAttribute("class")){const j=F.getAttribute("class").split(/\s/).filter(Boolean).map(pe=>pe.trim());for(let pe=0;pe<j.length;pe++)N=Object.assign(N,U["."+j[pe]])}F.hasAttribute("id")&&(N=Object.assign(N,U["#"+F.getAttribute("id")]));function A(j,pe,Z){Z===void 0&&(Z=function(M){return M.startsWith("url")&&console.warn("SVGLoader: url access in attributes is not implemented."),M}),F.hasAttribute(j)&&(D[pe]=Z(F.getAttribute(j))),N[j]&&(D[pe]=Z(N[j])),F.style&&F.style[j]!==""&&(D[pe]=Z(F.style[j]))}function Q(j){return Math.max(0,Math.min(1,y(j)))}function he(j){return Math.max(0,y(j))}return A("fill","fill"),A("fill-opacity","fillOpacity",Q),A("fill-rule","fillRule"),A("opacity","opacity",Q),A("stroke","stroke"),A("stroke-opacity","strokeOpacity",Q),A("stroke-width","strokeWidth",he),A("stroke-linejoin","strokeLineJoin"),A("stroke-linecap","strokeLineCap"),A("stroke-miterlimit","strokeMiterLimit",he),A("visibility","visibility"),D}function g(F,D){return F-(D-F)}function p(F,D,N){if(typeof F!="string")throw new TypeError("Invalid input: "+typeof F);const A={WHITESPACE:/[ \t\r\n]/,DIGIT:/[\d]/,SIGN:/[-+]/,POINT:/\./,COMMA:/,/,EXP:/e/i,FLAGS:/[01]/},Q=0,he=1,j=2,pe=3;let Z=Q,te=!0,M="",re="";const ee=[];function ue(z,b,J){const oe=new SyntaxError('Unexpected character "'+z+'" at index '+b+".");throw oe.partial=J,oe}function V(){M!==""&&(re===""?ee.push(Number(M)):ee.push(Number(M)*Math.pow(10,Number(re)))),M="",re=""}let k;const ae=F.length;for(let z=0;z<ae;z++){if(k=F[z],Array.isArray(D)&&D.includes(ee.length%N)&&A.FLAGS.test(k)){Z=he,M=k,V();continue}if(Z===Q){if(A.WHITESPACE.test(k))continue;if(A.DIGIT.test(k)||A.SIGN.test(k)){Z=he,M=k;continue}if(A.POINT.test(k)){Z=j,M=k;continue}A.COMMA.test(k)&&(te&&ue(k,z,ee),te=!0)}if(Z===he){if(A.DIGIT.test(k)){M+=k;continue}if(A.POINT.test(k)){M+=k,Z=j;continue}if(A.EXP.test(k)){Z=pe;continue}A.SIGN.test(k)&&M.length===1&&A.SIGN.test(M[0])&&ue(k,z,ee)}if(Z===j){if(A.DIGIT.test(k)){M+=k;continue}if(A.EXP.test(k)){Z=pe;continue}A.POINT.test(k)&&M[M.length-1]==="."&&ue(k,z,ee)}if(Z===pe){if(A.DIGIT.test(k)){re+=k;continue}if(A.SIGN.test(k)){if(re===""){re+=k;continue}re.length===1&&A.SIGN.test(re)&&ue(k,z,ee)}}A.WHITESPACE.test(k)?(V(),Z=Q,te=!1):A.COMMA.test(k)?(V(),Z=Q,te=!0):A.SIGN.test(k)?(V(),Z=he,M=k):A.POINT.test(k)?(V(),Z=j,M=k):ue(k,z,ee)}return V(),ee}const f=["mm","cm","in","pt","pc","px"],v={mm:{mm:1,cm:.1,in:1/25.4,pt:72/25.4,pc:6/25.4,px:-1},cm:{mm:10,cm:1,in:1/2.54,pt:72/2.54,pc:6/2.54,px:-1},in:{mm:25.4,cm:2.54,in:1,pt:72,pc:6,px:-1},pt:{mm:25.4/72,cm:2.54/72,in:1/72,pt:1,pc:6/72,px:-1},pc:{mm:25.4/6,cm:2.54/6,in:1/6,pt:72/6,pc:1,px:-1},px:{px:1}};function y(F){let D="px";if(typeof F=="string"||F instanceof String)for(let A=0,Q=f.length;A<Q;A++){const he=f[A];if(F.endsWith(he)){D=he,F=F.substring(0,F.length-he.length);break}}let N;return D==="px"&&t.defaultUnit!=="px"?N=v.in[t.defaultUnit]/t.defaultDPI:(N=v[D][t.defaultUnit],N<0&&(N=v[D].in*t.defaultDPI)),N*parseFloat(F)}function _(F){if(!(F.hasAttribute("transform")||F.nodeName==="use"&&(F.hasAttribute("x")||F.hasAttribute("y"))))return null;const D=T(F);return B.length>0&&D.premultiply(B[B.length-1]),ve.copy(D),B.push(D),D}function T(F){const D=new Ve,N=P;if(F.nodeName==="use"&&(F.hasAttribute("x")||F.hasAttribute("y"))){const A=y(F.getAttribute("x")),Q=y(F.getAttribute("y"));D.translate(A,Q)}if(F.hasAttribute("transform")){const A=F.getAttribute("transform").split(")");for(let Q=A.length-1;Q>=0;Q--){const he=A[Q].trim();if(he==="")continue;const j=he.indexOf("("),pe=he.length;if(j>0&&j<pe){const Z=he.slice(0,j),te=p(he.slice(j+1));switch(N.identity(),Z){case"translate":if(te.length>=1){const M=te[0];let re=0;te.length>=2&&(re=te[1]),N.translate(M,re)}break;case"rotate":if(te.length>=1){let M=0,re=0,ee=0;M=te[0]*Math.PI/180,te.length>=3&&(re=te[1],ee=te[2]),K.makeTranslation(-re,-ee),ie.makeRotation(M),H.multiplyMatrices(ie,K),K.makeTranslation(re,ee),N.multiplyMatrices(K,H)}break;case"scale":if(te.length>=1){const M=te[0];let re=M;te.length>=2&&(re=te[1]),N.scale(M,re)}break;case"skewX":te.length===1&&N.set(1,Math.tan(te[0]*Math.PI/180),0,0,1,0,0,0,1);break;case"skewY":te.length===1&&N.set(1,0,0,Math.tan(te[0]*Math.PI/180),1,0,0,0,1);break;case"matrix":te.length===6&&N.set(te[0],te[2],te[4],te[1],te[3],te[5],0,0,1);break}}D.premultiply(N)}}return D}function E(F,D){function N(j){ge.set(j.x,j.y,1).applyMatrix3(D),j.set(ge.x,ge.y)}function A(j){const pe=j.xRadius,Z=j.yRadius,te=Math.cos(j.aRotation),M=Math.sin(j.aRotation),re=new L(pe*te,pe*M,0),ee=new L(-Z*M,Z*te,0),ue=re.applyMatrix3(D),V=ee.applyMatrix3(D),k=P.set(ue.x,V.x,0,ue.y,V.y,0,0,0,1),ae=K.copy(k).invert(),J=ie.copy(ae).transpose().multiply(ae).elements,oe=C(J[0],J[1],J[4]),qe=Math.sqrt(oe.rt1),de=Math.sqrt(oe.rt2);if(j.xRadius=1/qe,j.yRadius=1/de,j.aRotation=Math.atan2(oe.sn,oe.cs),!((j.aEndAngle-j.aStartAngle)%(2*Math.PI)<Number.EPSILON)){const Me=K.set(qe,0,0,0,de,0,0,0,1),Te=ie.set(oe.cs,oe.sn,0,-oe.sn,oe.cs,0,0,0,1),Qe=Me.multiply(Te).multiply(k),xe=Re=>{const{x:Ue,y:He}=new L(Math.cos(Re),Math.sin(Re),0).applyMatrix3(Qe);return Math.atan2(He,Ue)};j.aStartAngle=xe(j.aStartAngle),j.aEndAngle=xe(j.aEndAngle),S(D)&&(j.aClockwise=!j.aClockwise)}}function Q(j){const pe=w(D),Z=x(D);j.xRadius*=pe,j.yRadius*=Z;const te=pe>Number.EPSILON?Math.atan2(D.elements[1],D.elements[0]):Math.atan2(-D.elements[3],D.elements[4]);j.aRotation+=te,S(D)&&(j.aStartAngle*=-1,j.aEndAngle*=-1,j.aClockwise=!j.aClockwise)}const he=F.subPaths;for(let j=0,pe=he.length;j<pe;j++){const te=he[j].curves;for(let M=0;M<te.length;M++){const re=te[M];re.isLineCurve?(N(re.v1),N(re.v2)):re.isCubicBezierCurve?(N(re.v0),N(re.v1),N(re.v2),N(re.v3)):re.isQuadraticBezierCurve?(N(re.v0),N(re.v1),N(re.v2)):re.isEllipseCurve&&(fe.set(re.aX,re.aY),N(fe),re.aX=fe.x,re.aY=fe.y,I(D)?A(re):Q(re))}}}function S(F){const D=F.elements;return D[0]*D[4]-D[1]*D[3]<0}function I(F){const D=F.elements,N=D[0]*D[3]+D[1]*D[4];if(N===0)return!1;const A=w(F),Q=x(F);return Math.abs(N/(A*Q))>Number.EPSILON}function w(F){const D=F.elements;return Math.sqrt(D[0]*D[0]+D[1]*D[1])}function x(F){const D=F.elements;return Math.sqrt(D[3]*D[3]+D[4]*D[4])}function C(F,D,N){let A,Q,he,j,pe;const Z=F+N,te=F-N,M=Math.sqrt(te*te+4*D*D);return Z>0?(A=.5*(Z+M),pe=1/A,Q=F*pe*N-D*pe*D):Z<0?Q=.5*(Z-M):(A=.5*M,Q=-.5*M),te>0?he=te+M:he=te-M,Math.abs(he)>2*Math.abs(D)?(pe=-2*D/he,j=1/Math.sqrt(1+pe*pe),he=pe*j):Math.abs(D)===0?(he=1,j=0):(pe=-.5*he/D,he=1/Math.sqrt(1+pe*pe),j=pe*he),te>0&&(pe=he,he=-j,j=pe),{rt1:A,rt2:Q,cs:he,sn:j}}const O=[],U={},B=[],P=new Ve,K=new Ve,ie=new Ve,H=new Ve,fe=new $,ge=new L,ve=new Ve,De=new DOMParser().parseFromString(e,"image/svg+xml");return n(De.documentElement,{fill:"#000",fillOpacity:1,strokeOpacity:1,strokeWidth:1,strokeLineJoin:"miter",strokeLineCap:"butt",strokeMiterLimit:4}),{paths:O,xml:De.documentElement}}static createShapes(e){const n={ORIGIN:0,DESTINATION:1,BETWEEN:2,LEFT:3,RIGHT:4,BEHIND:5,BEYOND:6},i={loc:n.ORIGIN,t:0};function s(g,p,f,v){const y=g.x,_=p.x,T=f.x,E=v.x,S=g.y,I=p.y,w=f.y,x=v.y,C=(E-T)*(S-w)-(x-w)*(y-T),O=(_-y)*(S-w)-(I-S)*(y-T),U=(x-w)*(_-y)-(E-T)*(I-S),B=C/U,P=O/U;if(U===0&&C!==0||B<=0||B>=1||P<0||P>1)return null;if(C===0&&U===0){for(let K=0;K<2;K++)if(o(K===0?f:v,g,p),i.loc==n.ORIGIN){const ie=K===0?f:v;return{x:ie.x,y:ie.y,t:i.t}}else if(i.loc==n.BETWEEN){const ie=+(y+i.t*(_-y)).toPrecision(10),H=+(S+i.t*(I-S)).toPrecision(10);return{x:ie,y:H,t:i.t}}return null}else{for(let H=0;H<2;H++)if(o(H===0?f:v,g,p),i.loc==n.ORIGIN){const fe=H===0?f:v;return{x:fe.x,y:fe.y,t:i.t}}const K=+(y+B*(_-y)).toPrecision(10),ie=+(S+B*(I-S)).toPrecision(10);return{x:K,y:ie,t:B}}}function o(g,p,f){const v=f.x-p.x,y=f.y-p.y,_=g.x-p.x,T=g.y-p.y,E=v*T-_*y;if(g.x===p.x&&g.y===p.y){i.loc=n.ORIGIN,i.t=0;return}if(g.x===f.x&&g.y===f.y){i.loc=n.DESTINATION,i.t=1;return}if(E<-Number.EPSILON){i.loc=n.LEFT;return}if(E>Number.EPSILON){i.loc=n.RIGHT;return}if(v*_<0||y*T<0){i.loc=n.BEHIND;return}if(Math.sqrt(v*v+y*y)<Math.sqrt(_*_+T*T)){i.loc=n.BEYOND;return}let S;v!==0?S=_/v:S=T/y,i.loc=n.BETWEEN,i.t=S}function a(g,p){const f=[],v=[];for(let y=1;y<g.length;y++){const _=g[y-1],T=g[y];for(let E=1;E<p.length;E++){const S=p[E-1],I=p[E],w=s(_,T,S,I);w!==null&&f.find(x=>x.t<=w.t+Number.EPSILON&&x.t>=w.t-Number.EPSILON)===void 0&&(f.push(w),v.push(new $(w.x,w.y)))}}return v}function l(g,p,f){const v=new $;p.getCenter(v);const y=[];return f.forEach(_=>{_.boundingBox.containsPoint(v)&&a(g,_.points).forEach(E=>{y.push({identifier:_.identifier,isCW:_.isCW,point:E})})}),y.sort((_,T)=>_.point.x-T.point.x),y}function c(g,p,f,v,y){(y==null||y==="")&&(y="nonzero");const _=new $;g.boundingBox.getCenter(_);const T=[new $(f,_.y),new $(v,_.y)],E=l(T,g.boundingBox,p);E.sort((O,U)=>O.point.x-U.point.x);const S=[],I=[];E.forEach(O=>{O.identifier===g.identifier?S.push(O):I.push(O)});const w=S[0].point.x,x=[];let C=0;for(;C<I.length&&I[C].point.x<w;)x.length>0&&x[x.length-1]===I[C].identifier?x.pop():x.push(I[C].identifier),C++;if(x.push(g.identifier),y==="evenodd"){const O=x.length%2===0,U=x[x.length-2];return{identifier:g.identifier,isHole:O,for:U}}else if(y==="nonzero"){let O=!0,U=null,B=null;for(let P=0;P<x.length;P++){const K=x[P];O?(B=p[K].isCW,O=!1,U=K):B!==p[K].isCW&&(B=p[K].isCW,O=!0)}return{identifier:g.identifier,isHole:O,for:U}}else console.warn('fill-rule: "'+y+'" is currently not implemented.')}let h=999999999,u=-999999999,d=e.subPaths.map(g=>{const p=g.getPoints();let f=-999999999,v=999999999,y=-999999999,_=999999999;for(let T=0;T<p.length;T++){const E=p[T];E.y>f&&(f=E.y),E.y<v&&(v=E.y),E.x>y&&(y=E.x),E.x<_&&(_=E.x)}return u<=y&&(u=y+1),h>=_&&(h=_-1),{curves:g.curves,points:p,isCW:kn.isClockWise(p),identifier:-1,boundingBox:new b5(new $(_,v),new $(y,f))}});d=d.filter(g=>g.points.length>1);for(let g=0;g<d.length;g++)d[g].identifier=g;const q=d.map(g=>c(g,d,h,u,e.userData?e.userData.style.fillRule:void 0)),m=[];return d.forEach(g=>{if(!q[g.identifier].isHole){const f=new yn;f.curves=g.curves,q.filter(y=>y.isHole&&y.for===g.identifier).forEach(y=>{const _=d[y.identifier],T=new Dn;T.curves=_.curves,f.holes.push(T)}),m.push(f)}}),m}static getStrokeStyle(e,t,n,i,s){return e=e!==void 0?e:1,t=t!==void 0?t:"#000",n=n!==void 0?n:"miter",i=i!==void 0?i:"butt",s=s!==void 0?s:4,{strokeColor:t,strokeWidth:e,strokeLineJoin:n,strokeLineCap:i,strokeMiterLimit:s}}static pointsToStroke(e,t,n,i){const s=[],o=[],a=[];if(yr.pointsToStrokeWithBuffers(e,t,n,i,s,o,a)===0)return null;const l=new Ze;return l.setAttribute("position",new ze(s,3)),l.setAttribute("normal",new ze(o,3)),l.setAttribute("uv",new ze(a,2)),l}static pointsToStrokeWithBuffers(e,t,n,i,s,o,a,l){const c=new $,h=new $,u=new $,d=new $,q=new $,m=new $,g=new $,p=new $,f=new $,v=new $,y=new $,_=new $,T=new $,E=new $,S=new $,I=new $,w=new $;n=n!==void 0?n:12,i=i!==void 0?i:.001,l=l!==void 0?l:0,e=te(e);const x=e.length;if(x<2)return 0;const C=e[0].equals(e[x-1]);let O,U=e[0],B;const P=t.strokeWidth/2,K=1/(x-1);let ie=0,H,fe,ge,ve,De=!1,ke=0,F=l*3,D=l*2;N(e[0],e[1],c).multiplyScalar(P),p.copy(e[0]).sub(c),f.copy(e[0]).add(c),v.copy(p),y.copy(f);for(let M=1;M<x;M++){O=e[M],M===x-1?C?B=e[1]:B=void 0:B=e[M+1];const re=c;if(N(U,O,re),u.copy(re).multiplyScalar(P),_.copy(O).sub(u),T.copy(O).add(u),H=ie+K,fe=!1,B!==void 0){N(O,B,h),u.copy(h).multiplyScalar(P),E.copy(O).sub(u),S.copy(O).add(u),ge=!0,u.subVectors(B,U),re.dot(u)<0&&(ge=!1),M===1&&(De=ge),u.subVectors(B,O),u.normalize();const ee=Math.abs(re.dot(u));if(ee>Number.EPSILON){const ue=P/ee;u.multiplyScalar(-ue),d.subVectors(O,U),q.copy(d).setLength(ue).add(u),I.copy(q).negate();const V=q.length(),k=d.length();d.divideScalar(k),m.subVectors(B,O);const ae=m.length();switch(m.divideScalar(ae),d.dot(I)<k&&m.dot(I)<ae&&(fe=!0),w.copy(q).add(O),I.add(O),ve=!1,fe?ge?(S.copy(I),T.copy(I)):(E.copy(I),_.copy(I)):he(),t.strokeLineJoin){case"bevel":j(ge,fe,H);break;case"round":pe(ge,fe),ge?Q(O,_,E,H,0):Q(O,S,T,H,1);break;case"miter":case"miter-clip":default:const z=P*t.strokeMiterLimit/V;if(z<1)if(t.strokeLineJoin!=="miter-clip"){j(ge,fe,H);break}else pe(ge,fe),ge?(m.subVectors(w,_).multiplyScalar(z).add(_),g.subVectors(w,E).multiplyScalar(z).add(E),A(_,H,0),A(m,H,0),A(O,H,.5),A(O,H,.5),A(m,H,0),A(g,H,0),A(O,H,.5),A(g,H,0),A(E,H,0)):(m.subVectors(w,T).multiplyScalar(z).add(T),g.subVectors(w,S).multiplyScalar(z).add(S),A(T,H,1),A(m,H,1),A(O,H,.5),A(O,H,.5),A(m,H,1),A(g,H,1),A(O,H,.5),A(g,H,1),A(S,H,1));else fe?(ge?(A(f,ie,1),A(p,ie,0),A(w,H,0),A(f,ie,1),A(w,H,0),A(I,H,1)):(A(f,ie,1),A(p,ie,0),A(w,H,1),A(p,ie,0),A(I,H,0),A(w,H,1)),ge?E.copy(w):S.copy(w)):ge?(A(_,H,0),A(w,H,0),A(O,H,.5),A(O,H,.5),A(w,H,0),A(E,H,0)):(A(T,H,1),A(w,H,1),A(O,H,.5),A(O,H,.5),A(w,H,1),A(S,H,1)),ve=!0;break}}else he()}else he();!C&&M===x-1&&Z(e[0],v,y,ge,!0,ie),ie=H,U=O,p.copy(E),f.copy(S)}if(!C)Z(O,_,T,ge,!1,H);else if(fe&&s){let M=w,re=I;De!==ge&&(M=I,re=w),ge?(ve||De)&&(re.toArray(s,0*3),re.toArray(s,3*3),ve&&M.toArray(s,1*3)):(ve||!De)&&(re.toArray(s,1*3),re.toArray(s,3*3),ve&&M.toArray(s,0*3))}return ke;function N(M,re,ee){return ee.subVectors(re,M),ee.set(-ee.y,ee.x).normalize()}function A(M,re,ee){s&&(s[F]=M.x,s[F+1]=M.y,s[F+2]=0,o&&(o[F]=0,o[F+1]=0,o[F+2]=1),F+=3,a&&(a[D]=re,a[D+1]=ee,D+=2)),ke+=3}function Q(M,re,ee,ue,V){c.copy(re).sub(M).normalize(),h.copy(ee).sub(M).normalize();let k=Math.PI;const ae=c.dot(h);Math.abs(ae)<1&&(k=Math.abs(Math.acos(ae))),k/=n,u.copy(re);for(let z=0,b=n-1;z<b;z++)d.copy(u).rotateAround(M,k),A(u,ue,V),A(d,ue,V),A(M,ue,.5),u.copy(d);A(d,ue,V),A(ee,ue,V),A(M,ue,.5)}function he(){A(f,ie,1),A(p,ie,0),A(_,H,0),A(f,ie,1),A(_,H,0),A(T,H,1)}function j(M,re,ee){re?M?(A(f,ie,1),A(p,ie,0),A(_,H,0),A(f,ie,1),A(_,H,0),A(I,H,1),A(_,ee,0),A(E,ee,0),A(I,ee,.5)):(A(f,ie,1),A(p,ie,0),A(T,H,1),A(p,ie,0),A(I,H,0),A(T,H,1),A(T,ee,1),A(I,ee,0),A(S,ee,1)):M?(A(_,ee,0),A(E,ee,0),A(O,ee,.5)):(A(T,ee,1),A(S,ee,0),A(O,ee,.5))}function pe(M,re){re&&(M?(A(f,ie,1),A(p,ie,0),A(_,H,0),A(f,ie,1),A(_,H,0),A(I,H,1),A(_,ie,0),A(O,H,.5),A(I,H,1),A(O,H,.5),A(E,ie,0),A(I,H,1)):(A(f,ie,1),A(p,ie,0),A(T,H,1),A(p,ie,0),A(I,H,0),A(T,H,1),A(T,ie,1),A(I,H,0),A(O,H,.5),A(O,H,.5),A(I,H,0),A(S,ie,1)))}function Z(M,re,ee,ue,V,k){switch(t.strokeLineCap){case"round":V?Q(M,ee,re,k,.5):Q(M,re,ee,k,.5);break;case"square":if(V)c.subVectors(re,M),h.set(c.y,-c.x),u.addVectors(c,h).add(M),d.subVectors(h,c).add(M),ue?(u.toArray(s,1*3),d.toArray(s,0*3),d.toArray(s,3*3)):(u.toArray(s,1*3),a[3*2+1]===1?d.toArray(s,3*3):u.toArray(s,3*3),d.toArray(s,0*3));else{c.subVectors(ee,M),h.set(c.y,-c.x),u.addVectors(c,h).add(M),d.subVectors(h,c).add(M);const ae=s.length;ue?(u.toArray(s,ae-1*3),d.toArray(s,ae-2*3),d.toArray(s,ae-4*3)):(d.toArray(s,ae-2*3),u.toArray(s,ae-1*3),d.toArray(s,ae-4*3))}break}}function te(M){let re=!1;for(let ue=1,V=M.length-1;ue<V;ue++)if(M[ue].distanceTo(M[ue+1])<i){re=!0;break}if(!re)return M;const ee=[];ee.push(M[0]);for(let ue=1,V=M.length-1;ue<V;ue++)M[ue].distanceTo(M[ue+1])>=i&&ee.push(M[ue]);return ee.push(M[M.length-1]),ee}}}function yg(r,e=!1){const t=r[0].index!==null,n=new Set(Object.keys(r[0].attributes)),i=new Set(Object.keys(r[0].morphAttributes)),s={},o={},a=r[0].morphTargetsRelative,l=new Ze;let c=0;for(let h=0;h<r.length;++h){const u=r[h];let d=0;if(t!==(u.index!==null))return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index "+h+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(const q in u.attributes){if(!n.has(q))return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index "+h+'. All geometries must have compatible attributes; make sure "'+q+'" attribute exists among all geometries, or in none of them.'),null;s[q]===void 0&&(s[q]=[]),s[q].push(u.attributes[q]),d++}if(d!==n.size)return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index "+h+". Make sure all geometries have the same number of attributes."),null;if(a!==u.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index "+h+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(const q in u.morphAttributes){if(!i.has(q))return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index "+h+".  .morphAttributes must be consistent throughout all geometries."),null;o[q]===void 0&&(o[q]=[]),o[q].push(u.morphAttributes[q])}if(e){let q;if(t)q=u.index.count;else if(u.attributes.position!==void 0)q=u.attributes.position.count;else return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index "+h+". The geometry must have either an index or a position attribute"),null;l.addGroup(c,q,h),c+=q}}if(t){let h=0;const u=[];for(let d=0;d<r.length;++d){const q=r[d].index;for(let m=0;m<q.count;++m)u.push(q.getX(m)+h);h+=r[d].attributes.position.count}l.setIndex(u)}for(const h in s){const u=n7(s[h]);if(!u)return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the "+h+" attribute."),null;l.setAttribute(h,u)}for(const h in o){const u=o[h][0].length;if(u===0)break;l.morphAttributes=l.morphAttributes||{},l.morphAttributes[h]=[];for(let d=0;d<u;++d){const q=[];for(let g=0;g<o[h].length;++g)q.push(o[h][g][d]);const m=n7(q);if(!m)return console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the "+h+" morphAttribute."),null;l.morphAttributes[h].push(m)}}return l}function n7(r){let e,t,n,i=-1,s=0;for(let c=0;c<r.length;++c){const h=r[c];if(e===void 0&&(e=h.array.constructor),e!==h.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(t===void 0&&(t=h.itemSize),t!==h.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(n===void 0&&(n=h.normalized),n!==h.normalized)return console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;if(i===-1&&(i=h.gpuType),i!==h.gpuType)return console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes."),null;s+=h.count*t}const o=new e(s),a=new qt(o,t,n);let l=0;for(let c=0;c<r.length;++c){const h=r[c];if(h.isInterleavedBufferAttribute){const u=l/t;for(let d=0,q=h.count;d<q;d++)for(let m=0;m<t;m++){const g=h.getComponent(d,m);a.setComponent(d+u,m,g)}}else o.set(h.array,l);l+=h.count*t}return i!==void 0&&(a.gpuType=i),a}class C0 extends V1{static getGeometries(e,t){let i=new yr().parse(e);console.log("SVG data:",i);let s=[];i.paths.forEach(u=>{const d=u.userData.style.fill;d!==void 0&&d!=="none"&&yr.createShapes(u).forEach(g=>{let p=new ir(g);p.index!==null&&(p=p.toNonIndexed()),s.push(p)});const q=u.userData.style.stroke;q!==void 0&&q!=="none"&&u.subPaths.forEach(m=>{let g=yr.pointsToStroke(m.getPoints(),u.userData.style);g&&(g.index!==null&&(g=g.toNonIndexed()),s.push(g))})});const o=yg(s,!1);o.applyMatrix4(new Ge().makeRotationX(Math.PI)),o.computeBoundingBox();const a=o.boundingBox,l=Math.max(a.max.x-a.min.x,a.max.y-a.min.y);console.log("Icon bounding box maxDimension:",l);const c=t/l;o.computeBoundingSphere();const h=o.boundingSphere;return console.log("Icon bounding sphere:",h),o.scale(c,c,1),o.center(),o}constructor(e,t=gt.ICON_SIZE_MEDIUM){const n=qs.ELEMENT_TEXT,i=C0.getGeometries(e,t);super(i,new Si(n)),console.log("IconShape size:",this.getSize())}}class vg extends p4{constructor(e){super({color:e,opacity:.5,transparent:!0,shininess:60,specular:6710886,emissive:4473924,emissiveIntensity:.6})}}const wg={steps:2,depth:5,bevelEnabled:!0,bevelThickness:.025,bevelSize:.075,bevelOffset:0,bevelSegments:1},i7=[new _e(16007990),new _e(15277667),new _e(10233776),new _e(6765239),new _e(4149685),new _e(2201331),new _e(240116),new _e(48340),new _e(38536),new _e(5025616),new _e(9159498),new _e(13491257),new _e(16771899),new _e(16761095),new _e(16750592),new _e(16733986),new _e(7951688),new _e(10395294),new _e(6323595)];class Mg extends V1{constructor(e,t,n){if(!(e instanceof yn))throw new TypeError("shape must be an instance of THREE.Shape");const i=n!==void 0?n:i7[Math.floor(Math.random()*i7.length)],s=t!==void 0?t:Math.floor(Math.random()*10)+1,o={...wg,depth:s};var a=new e1(e,o);super(a,new vg(i))}}const vr={CONNECTOR_LINE_WIDTH:1,CONNECTOR_OUTER_RADIUS:10,CONNECTOR_INNER_RADIUS:8.5,CONNECTOR_ARROWHEAD_WIDTH:6,CONNECTOR_ARROWHEAD_LENGTH:14};class R0 extends V1{constructor(e){const t=vr.CONNECTOR_OUTER_RADIUS,n=vr.CONNECTOR_INNER_RADIUS,i=vr.CONNECTOR_LINE_WIDTH,s=vr.CONNECTOR_ARROWHEAD_WIDTH,o=vr.CONNECTOR_ARROWHEAD_LENGTH,a=i/2,l=qs.ELEMENT_STROKE,c=jo;var h=new yn;e[0].y==e[1].y&&e[0].x<e[1].x&&(h.moveTo(e[0].x,e[0].y+a),h.lineTo(e[0].x,e[0].y-a)),e[0].y==e[1].y&&e[0].x>e[1].x&&(h.moveTo(e[0].x,e[0].y-a),h.lineTo(e[0].x,e[0].y+a)),e[0].x==e[1].x&&e[0].y<e[1].y&&(h.moveTo(e[0].x-a,e[0].y),h.lineTo(e[0].x+a,e[0].y)),e[0].x==e[1].x&&e[0].y>e[1].y&&(h.moveTo(e[0].x+a,e[0].y),h.lineTo(e[0].x-a,e[0].y));for(var u=1;u<e.length-1;u++)e[u-1].y==e[u].y&&(e[u-1].x<e[u].x?e[u].y<e[u+1].y?(h.lineTo(e[u].x+a-t,e[u].y-a),h.quadraticCurveTo(e[u].x+a,e[u].y-a,e[u].x+a,e[u].y-a+t)):(h.lineTo(e[u].x-a-n,e[u].y-a),h.quadraticCurveTo(e[u].x-a,e[u].y-a,e[u].x-a,e[u].y-a-n)):e[u].y<e[u+1].y?(h.lineTo(e[u].x+a+n,e[u].y+a),h.quadraticCurveTo(e[u].x+a,e[u].y+a,e[u].x+a,e[u].y+a+n)):(h.lineTo(e[u].x-a+t,e[u].y+a),h.quadraticCurveTo(e[u].x-a,e[u].y-a,e[u].x-a,e[u].y+a-t))),e[u-1].x==e[u].x&&(e[u-1].y<e[u].y?e[u].x<e[u+1].x?(h.lineTo(e[u].x+a,e[u].y-a-n),h.quadraticCurveTo(e[u].x+a,e[u].y-a,e[u].x+a+n,e[u].y-a)):(h.lineTo(e[u].x+a,e[u].y+a-t),h.quadraticCurveTo(e[u].x+a,e[u].y+a,e[u].x+a-t,e[u].y+a)):e[u].x<e[u+1].x?(h.lineTo(e[u].x-a,e[u].y-a+t),h.quadraticCurveTo(e[u].x-a,e[u].y-a,e[u].x-a+t,e[u].y-a)):(h.lineTo(e[u].x-a,e[u].y+a+n),h.quadraticCurveTo(e[u].x-a,e[u].y+a,e[u].x-a-n,e[u].y+a)));e[e.length-2].y==e[e.length-1].y&&e[e.length-2].x<e[e.length-1].x&&(h.lineTo(e[e.length-1].x-o,e[e.length-1].y-a),h.lineTo(e[e.length-1].x-o,e[e.length-1].y-s),h.lineTo(e[e.length-1].x,e[e.length-1].y),h.lineTo(e[e.length-1].x-o,e[e.length-1].y+s),h.lineTo(e[e.length-1].x-o,e[e.length-1].y+a)),e[e.length-2].y==e[e.length-1].y&&e[e.length-2].x>e[e.length-1].x&&(h.lineTo(e[e.length-1].x+o,e[e.length-1].y+a),h.lineTo(e[e.length-1].x+o,e[e.length-1].y+s),h.lineTo(e[e.length-1].x,e[e.length-1].y),h.lineTo(e[e.length-1].x+o,e[e.length-1].y-s),h.lineTo(e[e.length-1].x+o,e[e.length-1].y-a)),e[e.length-2].x==e[e.length-1].x&&e[e.length-2].y<e[e.length-1].y&&(h.lineTo(e[e.length-1].x+a,e[e.length-1].y-o),h.lineTo(e[e.length-1].x+s,e[e.length-1].y-o),h.lineTo(e[e.length-1].x,e[e.length-1].y),h.lineTo(e[e.length-1].x-s,e[e.length-1].y-o),h.lineTo(e[e.length-1].x-a,e[e.length-1].y-o)),e[e.length-2].x==e[e.length-1].x&&e[e.length-2].y>e[e.length-1].y&&(h.lineTo(e[e.length-1].x-a,e[e.length-1].y+o*32/35),h.lineTo(e[e.length-1].x-s,e[e.length-1].y+o*32/35),h.lineTo(e[e.length-1].x,e[e.length-1].y),h.lineTo(e[e.length-1].x+s,e[e.length-1].y+o*32/35),h.lineTo(e[e.length-1].x+a,e[e.length-1].y+o*32/35));for(var u=e.length-2;u>0;u--)e[u+1].y==e[u].y&&(e[u+1].x<e[u].x?e[u].y<e[u-1].y?(h.lineTo(e[u].x+a-n,e[u].y-a),h.quadraticCurveTo(e[u].x+a,e[u].y-a,e[u].x+a,e[u].y-a+n)):(h.lineTo(e[u].x-a-n,e[u].y-a),h.quadraticCurveTo(e[u].x-a,e[u].y-a,e[u].x-a,e[u].y-a-n)):e[u].y<e[u-1].y?(h.lineTo(e[u].x+a+n,e[u].y+a),h.quadraticCurveTo(e[u].x+a,e[u].y+a,e[u].x+a,e[u].y+a+n)):(h.lineTo(e[u].x-a+t,e[u].y+a),h.quadraticCurveTo(e[u].x-a,e[u].y+a,e[u].x-a,e[u].y+a-t))),e[u+1].x==e[u].x&&(e[u+1].y<e[u].y?e[u].x<e[u-1].x?(h.lineTo(e[u].x+a,e[u].y-a-n),h.quadraticCurveTo(e[u].x+a,e[u].y-a,e[u].x+a+n,e[u].y-a)):(h.lineTo(e[u].x+a,e[u].y+a-t),h.quadraticCurveTo(e[u].x+a,e[u].y+a,e[u].x+a-t,e[u].y+a)):e[u].x<e[u-1].x?(h.lineTo(e[u].x-a,e[u].y-a+t),h.quadraticCurveTo(e[u].x-a,e[u].y-a,e[u].x-a+t,e[u].y-a)):(h.lineTo(e[u].x-a,e[u].y+a+n),h.quadraticCurveTo(e[u].x-a,e[u].y+a,e[u].x-a-n,e[u].y+a)));e[0].y==e[1].y&&e[0].x<e[1].x&&h.lineTo(e[0].x,e[0].y+a),e[0].y==e[1].y&&e[0].x>e[1].x&&h.lineTo(e[0].x,e[0].y-a),e[0].x==e[1].x&&e[0].y<e[1].y&&h.lineTo(e[0].x-a,e[0].y),e[0].x==e[1].x&&e[0].y>e[1].y&&h.lineTo(e[0].x+a,e[0].y);var d=new e1(h,c);super(d,new Si(l))}}class I0 extends St{constructor(e,t=new R0,n=null,i=null,s={x:0,y:0},o={x:2,y:2},a=[{x:0,y:1},{x:2,y:1}],l={}){super(t.geometry,t.material),this.elementId=e,this.sourceElement=n,this.targetElement=i,this.shape=t,this.points=[s,...a,o],this.properties=l}setDiagram(e){this.diagram=e}static determinePoints(e,t,n,i){let s=[];return e.x!==t.x&&e.y!==t.y&&((n.startsWith("W")||n.startsWith("E"))&&s.push({x:t.x,y:e.y}),(n.startsWith("N")||n.startsWith("S"))&&s.push({x:e.x,y:t.y})),[e,...s,t]}}class Ye extends St{constructor(e,t=new dg,n={x:0,y:0}){super(t.geometry,t.material),this.elementId=e,this.type=t.constructor.name,this.parameters={},this.shape=t,this.position.set(n.x,n.y,0),this.width=this.getSize().x,this.height=this.getSize().y,this.texts=[],this.icons=[],this.valueBars=[]}setDiagram(e){this.diagram=e}getSize(){const e=new L;return this.shape.geometry.computeBoundingBox(),this.shape.geometry.boundingBox.getSize(e),e}positionAt(e){return e.z!==void 0?this.position.set(e.x,e.y,e.z):this.position.set(e.x,e.y,0),this.texts.forEach(t=>{const n=t.positionOffset;e.z!==void 0?t.element.position.set(e.x+n.x,e.y+n.y,e.z+n.z):t.element.position.set(e.x+n.x,e.y+n.y,n.z)}),this.icons.forEach(t=>{const n=t.positionOffset;e.z!==void 0?t.element.position.set(e.x+n.x,e.y+n.y,e.z+n.z):t.element.position.set(e.x+n.x,e.y+n.y,n.z)}),this.valueBars.forEach(t=>{const n=t.positionOffset;e.z!==void 0?t.element.position.set(e.x+n.x,e.y+n.y,e.z+n.z):t.element.position.set(e.x+n.x,e.y+n.y,n.z)}),this}setPosition(e,t,n){const i=new L(e,t,n);return this.positionAt(i),this}getPosition(){return this.position}positionRightOf(e){const t=this.diagram.getElementById(e),n=t.getSize().x,i=this.getSize().x;return this.setPosition(t.position.x+n/2+wn.DISTANCE_BETWEEN_ELEMENTS+i/2,t.position.y,0),this}positionLeftOf(e){const t=this.diagram.getElementById(e),n=t.getSize().x,i=this.getSize().x;return this.setPosition(t.position.x-n/2-wn.DISTANCE_BETWEEN_ELEMENTS-i/2,t.position.y,0),this}positionUpOf(e){const t=this.diagram.getElementById(e),n=t.getSize().y,i=this.getSize().y;return this.setPosition(t.position.x,t.position.y+n/2+wn.DISTANCE_BETWEEN_ELEMENTS+i/2,0),this}positionDownOf(e){const t=this.diagram.getElementById(e),n=t.getSize().y,i=this.getSize().y;return this.setPosition(t.position.x,t.position.y-n/2-wn.DISTANCE_BETWEEN_ELEMENTS-i/2,0),this}positionUpLeftOf(e){const t=this.diagram.getElementById(e),n=t.getSize().x,i=t.getSize().y,s=this.getSize().x,o=this.getSize().y;return this.setPosition(t.position.x-n/2-wn.DISTANCE_BETWEEN_ELEMENTS-s/2,t.position.y+i/2+wn.DISTANCE_BETWEEN_ELEMENTS+o/2,0),this}positionDownLeftOf(e){const t=this.diagram.getElementById(e),n=t.getSize().x,i=t.getSize().y,s=this.getSize().x,o=this.getSize().y;return this.setPosition(t.position.x-n/2-wn.DISTANCE_BETWEEN_ELEMENTS-s/2,t.position.y-i/2-wn.DISTANCE_BETWEEN_ELEMENTS-o/2,0),this}positionUpRightOf(e){const t=this.diagram.getElementById(e),n=t.getSize().x,i=t.getSize().y,s=this.getSize().x,o=this.getSize().y;return this.setPosition(t.position.x+n/2+wn.DISTANCE_BETWEEN_ELEMENTS+s/2,t.position.y+i/2+wn.DISTANCE_BETWEEN_ELEMENTS+o/2,0),this}positionDownRightOf(e){const t=this.diagram.getElementById(e),n=t.getSize().x,i=t.getSize().y,s=this.getSize().x,o=this.getSize().y;return this.setPosition(t.position.x+n/2+wn.DISTANCE_BETWEEN_ELEMENTS+s/2,t.position.y-i/2-wn.DISTANCE_BETWEEN_ELEMENTS-o/2,0),this}getNorthPoint(){return new $(this.position.x,this.position.y+this.getSize().y/2)}getSouthPoint(){return new $(this.position.x,this.position.y-this.getSize().y/2)}getEastPoint(){return new $(this.position.x+this.getSize().x/2,this.position.y)}getWestPoint(){return new $(this.position.x-this.getSize().x/2,this.position.y)}getNorthEastPoint(){return new $(this.position.x+this.getSize().x/2,this.position.y+this.getSize().y/2)}getNorthWestPoint(){return new $(this.position.x-this.getSize().x/2,this.position.y+this.getSize().y/2)}getSouthEastPoint(){return new $(this.position.x+this.getSize().x/2,this.position.y-this.getSize().y/2)}getSouthWestPoint(){return new $(this.position.x-this.getSize().x/2,this.position.y-this.getSize().y/2)}getNorthNorthEastPoint(){return new $(this.position.x+this.getSize().x/4,this.position.y+this.getSize().y/2)}getNorthNorthWestPoint(){return new $(this.position.x-this.getSize().x/4,this.position.y+this.getSize().y/2)}getNorthEastEastPoint(){return new $(this.position.x+this.getSize().x/2,this.position.y+this.getSize().y/4)}getNorthWestWestPoint(){return new $(this.position.x-this.getSize().x/2,this.position.y+this.getSize().y/4)}getSouthSouthEastPoint(){return new $(this.position.x+this.getSize().x/4,this.position.y-this.getSize().y/2)}getSouthSouthWestPoint(){return new $(this.position.x-this.getSize().x/4,this.position.y-this.getSize().y/2)}getSouthEastEastPoint(){return new $(this.position.x+this.getSize().x/2,this.position.y-this.getSize().y/4)}getSouthWestWestPoint(){return new $(this.position.x-this.getSize().x/2,this.position.y-this.getSize().y/4)}getPointPosition(e){switch(e){case"N":case"north":return this.getNorthPoint();case"S":case"south":return this.getSouthPoint();case"E":case"east":return this.getEastPoint();case"W":case"west":return this.getWestPoint();case"NE":case"northeast":return this.getNorthEastPoint();case"NW":case"northwest":return this.getNorthWestPoint();case"SE":case"southeast":return this.getSouthEastPoint();case"SW":case"southwest":return this.getSouthWestPoint();case"NNE":case"northnortheast":return this.getNorthNorthEastPoint();case"NNW":case"northnorthwest":return this.getNorthNorthWestPoint();case"NEE":case"northeast":return this.getNorthEastEastPoint();case"NWW":case"northwest":return this.getNorthWestWestPoint();case"SSE":case"southsoutheast":return this.getSouthSouthEastPoint();case"SSW":case"southsouthwest":return this.getSouthSouthWestPoint();case"SEE":case"southeast":return this.getSouthEastEastPoint();case"SWW":case"southwest":return this.getSouthWestWestPoint();default:throw new Error(`Unknown position: ${e}`)}}addText(e){const t=new Ye(this.elementId+"_text",new _r(e));return this.diagram.addElement(t).positionAt(this.position),this.texts.push({element:t,positionOffset:new L(0,0,0)}),this}addWrappedText(e){if(!e)return console.warn("addWrappedText: text is null or undefined"),this;let t=e.replace(/\s+/g,`
`),n=new Ye(this.elementId+"_text",new _r(t)),i;for(;;){let s=t.split(`
`),o=1/0,a=-1;for(let l=0;l<s.length-1;l++){let c=s[l].length+s[l+1].length;c<o&&(o=c,a=l)}if(a===-1)break;if(s[a]=s[a]+" "+s[a+1],s.splice(a+1,1),t=s.join(`
`),i=new Ye(this.elementId+"_text",new _r(t)),i.getSize().x<=this.getSize().x*.9)n=i;else break}return this.diagram.addElement(n).positionAt({x:this.position.x,y:this.position.y,z:3}),this.texts.push({element:n,positionOffset:new L(0,0,3)}),this}getTopIconPlaceholder(){return new $(this.position.x,this.position.y+this.getSize().y/2-gt.ICON_SIZE_SMALL/2-gt.ICON_PADDING)}getBottomIconPlaceholder(){return new $(this.position.x,this.position.y-this.getSize().y/2+gt.ICON_SIZE_SMALL/2+gt.ICON_PADDING)}getLeftIconPlaceholder(){return new $(this.position.x-this.getSize().x/2+gt.ICON_SIZE_SMALL/2+gt.ICON_PADDING,this.position.y)}getRightIconPlaceholder(){return new $(this.position.x+this.getSize().x/2-gt.ICON_SIZE_SMALL/2-gt.ICON_PADDING,this.position.y)}getTopLeftIconPlaceholder(){return new $(this.position.x-this.getSize().x/2+gt.ICON_SIZE_SMALL/2+gt.ICON_PADDING,this.position.y+this.getSize().y/2-gt.ICON_SIZE_SMALL/2-gt.ICON_PADDING)}getTopRightIconPlaceholder(){return new $(this.position.x+this.getSize().x/2-gt.ICON_SIZE_SMALL/2-gt.ICON_PADDING,this.position.y+this.getSize().y/2-gt.ICON_SIZE_SMALL/2-gt.ICON_PADDING)}getBottomLeftIconPlaceholder(){return new $(this.position.x-this.getSize().x/2+gt.ICON_SIZE_SMALL/2+gt.ICON_PADDING,this.position.y-this.getSize().y/2+gt.ICON_SIZE_SMALL/2+gt.ICON_PADDING)}getBottomRightIconPlaceholder(){return new $(this.position.x+this.getSize().x/2-gt.ICON_SIZE_SMALL/2-gt.ICON_PADDING,this.position.y-this.getSize().y/2+gt.ICON_SIZE_SMALL/2+gt.ICON_PADDING)}getCenterIconPlaceholder(){return new $(this.position.x,this.position.y)}getIconPlaceholder(e){switch(e){case"top":return this.getTopIconPlaceholder();case"bottom":return this.getBottomIconPlaceholder();case"left":return this.getLeftIconPlaceholder();case"right":return this.getRightIconPlaceholder();case"top-left":return this.getTopLeftIconPlaceholder();case"top-right":return this.getTopRightIconPlaceholder();case"bottom-left":return this.getBottomLeftIconPlaceholder();case"bottom-right":return this.getBottomRightIconPlaceholder();case"center":return this.getCenterIconPlaceholder();default:throw new Error(`Unknown icon position: ${e}`)}}addIcon(e,t="center",n=gt.ICON_SIZE_MEDIUM){let i;typeof t=="string"&&(i=this.getIconPlaceholder(t));const s=new Ye(this.elementId+"_icon_placeholder",new C0(e,n));return this.diagram.addElement(s).positionAt(i),this.icons.push({element:s,positionOffset:new L(i.x-this.position.x,i.y-this.position.y,0)}),this}addValueBar(e){if(e<0)return console.warn("valueBar: Value must be positive"),this;if(this.parameters.value=e,console.log("valueBar added:",this),this.diagram.mode!=="ANALYZE")return console.warn("valueBar: Diagram mode is not ANALYZE"),this;const t=new Ye(this.elementId+"_bar",new Mg(this.shape.getOuterShape(),e));return this.diagram.addElement(t).positionAt(this.position),this.valueBars.push({element:t,positionOffset:new L(0,0,0)}),this}connectFrom(e,t,n){if(!this.diagram)throw new Error("Diagram is not set for this element.");const i=this,s=this.diagram.getElementById(e);if(!s)throw new Error(`Element with ID ${e} not found.`);const o=s.getPointPosition(t),a=i.getPointPosition(n),l=I0.determinePoints(o,a,t,n);return this.diagram.addConnector(new I0(`connector-${s.elementId}-${i.elementId}`,new R0(l))),this}}const Jo={ACTIVITY_HORIZONTAL_SIZE:100,ACTIVITY_VERTICAL_SIZE:80,ACTIVITY_CORNER_RADIUS:10,ACTIVITY_LINE_WIDTH:1},s7={EVENT_RADIUS:18,START_EVENT_LINE_WIDTH:1},r7={GATEWAY_DIAGONAL:48,GATEWAY_LINE_WIDTH:1};class wt extends V1{constructor(e=s7.START_EVENT_LINE_WIDTH){const t=s7.EVENT_RADIUS,n=qs.ELEMENT_STROKE,i=jo;function s(h,u){var m=u*.552284749831;h.moveTo(0,0-u),h.bezierCurveTo(0+m,0-u,0+u,0-m,0+u,0),h.bezierCurveTo(0+u,0+m,0+m,0+u,0,0+u),h.bezierCurveTo(0-m,0+u,0-u,0+m,0-u,0),h.bezierCurveTo(0-u,0-m,0-m,0-u,0,0-u)}var o=new yn;s(o,t);const a=o.clone();var l=new Dn;s(l,t-e),o.holes.push(l);var c=new e1(o,i);super(c,new Si(n)),this.outerShape=a}getOuterShape(){return this.outerShape}}class H1 extends V1{constructor(){const e=Jo.ACTIVITY_HORIZONTAL_SIZE,t=Jo.ACTIVITY_VERTICAL_SIZE,n=Jo.ACTIVITY_LINE_WIDTH,i=Jo.ACTIVITY_CORNER_RADIUS,s=i,o=i-n,a=qs.ELEMENT_STROKE,l=jo;function c(m,g,p,f){var _=0-g/2,T=0-p/2;m.moveTo(_+f,T),m.lineTo(_+g-f,T),m.quadraticCurveTo(_+g,T,_+g,T+f),m.lineTo(_+g,T+p-f),m.quadraticCurveTo(_+g,T+p,_+g-f,T+p),m.lineTo(_+f,T+p),m.quadraticCurveTo(_,T+p,_,T+p-f),m.lineTo(_,T+f),m.quadraticCurveTo(_,T,_+f,T)}var h=new yn;c(h,e,t,s);const u=h.clone();var d=new Dn;c(d,e-2*n,t-2*n,o),h.holes.push(d);var q=new e1(h,l);super(q,new Si(a)),this.outerShape=u}getOuterShape(){return this.outerShape}}class wr extends V1{constructor(){const e=r7.GATEWAY_DIAGONAL,t=r7.GATEWAY_LINE_WIDTH,n=qs.ELEMENT_STROKE,i=jo;function s(h,u,d){h.moveTo(0-u/2,0),h.lineTo(0,0-u/2),h.lineTo(0+d/2,0),h.lineTo(0,0+u/2),h.lineTo(0-d/2,0)}var o=new yn;s(o,e,e);const a=o.clone();var l=new Dn;s(l,e-t*Math.sqrt(2)*2,e-t*Math.sqrt(2)*2),o.holes.push(l);var c=new e1(o,i);super(c,new Si(n)),this.outerShape=a}getOuterShape(){return this.outerShape}}const Sg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   version="1.1"
   id="svg2"
   viewBox="0 0 2000 2000"
   height="2000"
   width="2000">
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     transform="translate(0,947.63784)"
     id="layer1">
    <path
       id="path4135"
       transform="translate(0,-947.63784)"
       d="M 919.37891 382.98828 C 897.07985 382.99534 876.42602 391.24619 858.8125 402.60352 L 858.7832 402.62109 L 858.75586 402.64062 C 764.06211 463.96011 439.8885 688.93075 368.62891 737.8418 L 368.62695 737.84375 L 368.625 737.84375 C 304.25376 782.03986 260.89214 848.74751 235.96289 927.7793 L 235.95898 927.79492 L 235.95508 927.80859 C 210.0027 1010.3241 213.33304 1100.2119 213.58398 1175.4941 L 213.58594 1175.5137 L 213.58594 1175.5332 C 213.84074 1232.2188 215.19212 1281.6884 229.89453 1341.6816 C 229.89553 1341.6866 229.89744 1341.692 229.89844 1341.6973 C 251.2713 1429.4993 292.66639 1493.0333 351.12891 1531.9824 C 409.58875 1570.9297 481.74302 1584.75 562.70312 1585 C 854.98652 1586.0972 1147.4442 1586.4897 1439.8848 1585 L 1439.9102 1585 L 1439.9355 1585 C 1472.1442 1584.7888 1502.8949 1571.2476 1522.0703 1547.3223 C 1541.2443 1523.3988 1549.087 1492.4573 1549.5 1458.5117 C 1549.7909 1435.7437 1546.5893 1414.2247 1539.1934 1395 L 1571.5684 1395 C 1603.0995 1395 1632.0021 1386.016 1652.7207 1367.084 C 1673.4323 1348.1584 1684.0251 1322.4631 1689.5293 1295.4043 L 1689.5293 1295.3965 C 1697.2116 1257.7567 1693.5837 1220.59 1678.6133 1189.4004 C 1711.5589 1186.7389 1740.6465 1174.2976 1759.3535 1151.4941 C 1780.3767 1125.8673 1786.5009 1093.2887 1786.6094 1058.7734 C 1786.7238 1022.74 1777.9802 988.35302 1757.7969 961.00781 C 1737.6137 933.6626 1704.0255 915.05176 1666.2305 914.99805 L 1666.2207 914.99805 L 1666.209 914.99805 C 1652.4498 914.98657 1640.0493 915.00635 1624.4277 914.99805 C 1631.9444 896.25389 1635.2488 875.17154 1635.1797 852.99219 L 1635.1797 852.93555 L 1635.1797 852.87891 C 1634.9519 817.10655 1625.9288 782.92541 1605.6445 755.75195 C 1585.3606 728.57897 1551.8364 709.9987 1514.0586 709.99805 C 1289.6388 709.11253 1067.8072 712.155 879.15625 711.20117 C 888.98683 701.31624 898.53379 691.67619 909.02734 681.24023 C 941.50862 648.93721 972.72655 618.49752 988.85352 597.62891 C 1027.4086 548.00648 1033.1613 480.77723 1000.7031 431.32422 C 983.59029 405.18088 958.49595 387.49228 931.55273 383.81055 C 928.18377 383.35019 924.8448 383.0899 921.54102 383.01172 L 921.54102 383.01367 C 920.81831 382.99657 920.09823 382.98805 919.37891 382.98828 z M 919.92578 453.01562 C 920.69385 453.02416 921.41106 453.07733 922.07422 453.16797 C 927.37949 453.89292 933.05983 455.78817 942.14453 469.67383 L 942.16211 469.69922 L 942.17773 469.72461 C 954.86945 489.05096 954.30896 528.02989 933.55469 554.7168 L 933.51953 554.76172 L 933.48438 554.80664 C 925.93786 564.57639 892.03049 599.42252 859.66602 631.60938 C 827.30154 663.79624 796.53208 693.50491 781.30859 712.05078 C 766.75168 729.78466 772.09283 744.6981 776.04102 754.0332 C 779.9892 763.3683 784.5057 774.26988 804.63867 779.05273 C 810.66655 780.48469 810.99854 780.07253 812.92773 780.20508 C 814.85693 780.33763 816.85106 780.42902 819.19531 780.51367 C 823.88381 780.68297 829.88273 780.81106 837.28906 780.91992 C 1063.754 782.29908 1287.7116 779.67931 1513.998 780 L 1514.0293 780 L 1514.0605 780 C 1531.2724 780 1540.6175 785.65704 1549.5527 797.62695 C 1558.482 809.58885 1565.0212 829.44025 1565.1816 853.2793 C 1565.2476 878.00948 1559.325 893.09925 1552.125 901.41211 C 1544.925 909.72493 1535.2797 914.9327 1514.6504 915 L 1030 915 L 1030 985 L 1514.7422 985 L 1514.791 985 C 1581.2694 985.0062 1616.3318 984.95843 1666.1543 985 C 1683.4616 985.02951 1692.6831 990.66165 1701.4785 1002.5781 C 1710.2778 1014.4998 1716.688 1034.4049 1716.6113 1058.5527 L 1716.6113 1058.5547 C 1716.5303 1084.3774 1711.2652 1099.7505 1705.2363 1107.0996 C 1699.2075 1114.4487 1690.5982 1119.8316 1665.7539 1120.002 C 1657.3241 1120.0598 1596.946 1120.0156 1571.8906 1120.0449 C 1571.4936 1120.0399 1571.105 1120.0032 1570.707 1120.002 C 1390.4805 1119.1514 1210.2524 1120 1030.0254 1120 L 1030 1120 L 1029.9746 1190 L 1030 1190 C 1030.043 1190 1412.5167 1190.2386 1571.3301 1190.0469 C 1591.0301 1190.326 1602.841 1198.2575 1612.2637 1213.6484 C 1621.8272 1229.2694 1626.5869 1253.7579 1620.9434 1281.4043 L 1620.9434 1281.418 L 1620.9434 1281.4316 C 1617.207 1299.8121 1611.5308 1309.9046 1605.5078 1315.4082 C 1599.4848 1320.9118 1591.1733 1325 1571.5742 1325 C 1391.0507 1324.9139 1210.5297 1324.5478 1030.0059 1325 L 1029.9141 1325 L 1030.0059 1395 L 1030.0977 1395 L 1439.4043 1395 L 1439.4199 1395 C 1454.127 1395.0958 1460.6667 1399.0084 1467.3809 1407.9766 C 1474.0951 1416.9447 1479.8203 1433.619 1479.5117 1457.6289 L 1479.5117 1457.6426 L 1479.5117 1457.6543 C 1479.2276 1481.0659 1473.56 1495.9259 1467.4551 1503.543 C 1461.3503 1511.16 1455.0501 1514.8999 1439.4824 1515.002 C 1147.359 1516.4898 855.12644 1516.0987 562.97266 1515.002 L 562.95898 1515.002 L 562.94727 1515.002 C 489.89431 1514.7789 432.49137 1502.0704 389.94727 1473.7266 C 347.39676 1445.3826 316.33958 1400.8581 297.9082 1325.1289 L 297.90039 1325.0996 L 297.89453 1325.0703 C 285.02432 1272.5777 283.83532 1231.06 283.58398 1175.2598 L 283.58398 1175.2188 C 283.32833 1098.6482 281.8595 1015.1692 302.73047 948.81055 C 324.12233 881.00932 358.71817 829.5583 408.24219 795.55469 L 408.24609 795.55273 C 480.37064 746.04796 806.47508 519.89392 896.74609 461.43359 L 896.75 461.43164 C 905.22608 455.9669 912.24926 453.64295 917.46875 453.12891 C 918.3388 453.04322 919.15772 453.00709 919.92578 453.01562 z "
       style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:70;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" />
  </g>
</svg>
`,bg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   version="1.1"
   id="svg2"
   viewBox="0 0 2000 2000"
   height="2000"
   width="2000">
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     style="display:inline"
     id="layer9">
    <path
       id="path8979-3"
       d="M 991.75,365 C 814.47261,365 687.65259,501.28069 687.29688,656.51367 l 0,0.0449 0,0.043 c 0.0112,46.94485 12.71406,96.48986 32.56054,141.17774 14.33025,32.26709 32.14702,61.93151 53.85742,85.69531 C 644.68593,927.61788 493.52222,1000.2699 417.11719,1143.5293 L 413,1151.25 l 0,463.75 1157.5,0 0,-463.75 -4.1172,-7.7207 c -75.3061,-141.1989 -223.1988,-213.74978 -350.9805,-258.07618 62.3794,-63.43263 80.7808,-145.30578 80.8008,-228.85156 l 0,-0.043 0,-0.0449 C 1295.8474,501.2807 1169.0274,365 991.75,365 Z M 870.70898,530.29883 c 8.19443,0.0206 17.19117,0.29432 27.10938,0.8789 79.02308,4.65771 105.61894,18.88222 126.06254,32.37305 20.4435,13.49083 34.8553,26.33317 88.8828,27.9082 l 0.016,0 0.018,0 c 42.1017,-1.5748 62.3491,-9.0811 76.8691,-17.58398 5.8837,-3.44545 10.8241,-7.02722 15.8867,-10.44727 13.3814,28.68227 20.5671,60.38893 20.6485,93.20313 -0.028,93.43999 -16.0919,158.87652 -101.7676,212.42383 l 8.3809,63.16992 c 17.8327,5.41537 36.2658,11.35733 54.9746,17.87305 2.6128,10.90011 5.6316,25.19633 7.6621,40.39453 2.1271,15.92241 2.9637,32.48881 1.6523,44.92771 -1.3114,12.4389 -5.1734,19.1539 -5.8515,19.8321 -43.5469,43.5468 -120.8464,68.9433 -199.252,68.9433 -78.40557,0 -155.70507,-25.3965 -199.25195,-68.9433 -0.67811,-0.6782 -4.54017,-7.3932 -5.85157,-19.8321 -1.31139,-12.4389 -0.47481,-29.0053 1.65235,-44.92771 2.04162,-15.28211 5.08445,-29.66261 7.70703,-40.58399 18.52194,-6.44112 36.76978,-12.32071 54.42969,-17.68359 l 4.99609,-67.6875 c -4.068,-5.21708 -8.21297,-8.67324 -13.16016,-12.38477 -19.12128,-14.34532 -42.30994,-45.90379 -58.68945,-82.78515 -16.37367,-36.86821 -26.51791,-79.00946 -26.5332,-112.74414 0.10174,-40.44431 10.98577,-79.211 30.97656,-112.69727 3.57689,-1.33139 7.34871,-2.73853 11.58789,-4.13281 14.90781,-4.90324 35.33655,-9.58342 70.8457,-9.49414 z M 719.36133,979.85547 c -0.0629,0.45883 -0.13379,0.90664 -0.19531,1.36719 -2.58689,19.36354 -4.10696,40.44054 -1.88282,61.53714 2.22414,21.0966 7.79068,43.8102 25.96875,61.9882 62.04773,62.0478 155.95092,89.4473 248.74805,89.4473 92.7971,0 186.7003,-27.3995 248.748,-89.4473 18.1781,-18.178 23.7447,-40.8916 25.9688,-61.9882 2.2241,-21.0967 0.7041,-42.1736 -1.8828,-61.53714 -0.051,-0.38161 -0.1102,-0.75238 -0.1621,-1.13282 94.3337,41.36896 185.5148,100.61546 235.8281,189.07426 l 0,375.8359 -167.5,0 0,-265 -70,0 0,265 -544,0 0,-265 -70,0 0,265 -166,0 0,-375.8359 c 50.40811,-88.6256 141.83798,-147.9292 236.36133,-189.30863 z"
       style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:70;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:2.29999995;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" />
  </g>
</svg>
`,Eg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   version="1.1"
   id="svg2"
   viewBox="0 0 2000 2000"
   height="2000"
   width="2000">
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     style="display:inline"
     transform="translate(0,947.63784)"
     id="layer1" />
  <g
     style="display:inline"
     id="layer3">
    <path
       id="path7110"
       d="M 759.41016 378 L 751.14844 382.9043 L 748.44922 384.50781 C 631.65776 453.72038 551.2844 517.18548 498.22852 579.16016 C 445.09916 641.22062 419.412 703.70808 418.68164 763.94727 C 417.22817 883.82775 505.65392 973.66586 584.10742 1054.0137 C 662.50124 1134.3003 732.43001 1210.0155 739.01172 1272.6777 C 742.36637 1304.6164 734.81689 1336.6966 699.99219 1380.6211 C 665.314 1424.3609 602.37552 1476.7493 501.75195 1535.4062 L 353.19336 1622 L 1270.0469 1622 L 1280.8965 1615.6875 L 1280.9082 1615.6777 C 1387.5436 1553.5161 1459.3849 1496.0867 1505.1621 1438.3477 C 1551.0758 1380.4366 1569.7557 1319.8482 1563.7812 1262.9688 C 1551.9436 1150.2668 1460.136 1068.1422 1382.9531 989.0957 C 1305.7103 909.98783 1243.1007 835.37489 1243.9531 765.07227 C 1244.3835 729.58122 1258.0249 689.98786 1301.1719 639.58789 C 1344.245 589.27401 1416.8675 530.40674 1528.2031 464.42969 L 1528.2031 464.42773 L 1674.0449 378 L 759.41016 378 z M 785.25195 470.91797 L 1349.8945 470.91797 C 1300.1653 507.99629 1260.8461 543.81554 1230.5879 579.16016 C 1177.4586 641.22061 1151.7714 703.70807 1151.041 763.94727 C 1149.5876 883.82876 1238.0176 973.66632 1316.4707 1054.0137 C 1394.8641 1134.2998 1464.7873 1210.0143 1471.3691 1272.6777 C 1474.7238 1304.6165 1467.1762 1336.6966 1432.3516 1380.6211 C 1398.9553 1422.7439 1338.8961 1473.0068 1244.5625 1529.082 L 678.47266 1529.082 C 717.74278 1498.4553 748.94092 1468.4466 772.80273 1438.3496 C 818.71647 1380.4385 837.39619 1319.8501 831.42188 1262.9707 C 819.58425 1150.2687 727.77664 1068.1442 650.59375 989.09766 C 573.35098 909.9898 510.74334 835.37687 511.5957 765.07422 C 512.02602 729.58325 525.66558 689.98982 568.8125 639.58984 C 610.43918 590.96566 680.08673 534.2435 785.25195 470.91797 z M 653.13086 629.39258 L 653.13086 672.3125 L 1094.5293 672.3125 L 1094.5293 629.39258 L 653.13086 629.39258 z M 636.72852 860.56836 L 636.72852 903.48633 L 1093.1133 903.48633 L 1093.1133 860.56836 L 636.72852 860.56836 z M 843.52344 1091.7383 L 843.52344 1134.6562 L 1285.5117 1134.6562 L 1285.5117 1091.7383 L 843.52344 1091.7383 z M 906.7207 1322.9121 L 906.7207 1365.8301 L 1364.707 1365.8301 L 1364.707 1322.9121 L 906.7207 1322.9121 z "
       style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:70;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" />
  </g>
</svg>
`,Tg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="2000"
   height="2000"
   viewBox="0 0 2000 2000"
   id="svg2"
   version="1.1"
   inkscape:version="0.91 r"
   sodipodi:docname="business-rule.svg">
  <defs
     id="defs4" />
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.45254834"
     inkscape:cx="811.70031"
     inkscape:cy="1077.9584"
     inkscape:document-units="px"
     inkscape:current-layer="layer1"
     showgrid="true"
     units="px"
     showguides="false"
     inkscape:window-width="1920"
     inkscape:window-height="1028"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1">
    <inkscape:grid
       type="xygrid"
       id="grid4008"
       empspacing="20"
       dotted="false" />
  </sodipodi:namedview>
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label="Ebene 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(0,947.63784)">
    <path
       style="opacity:1;fill:#000000;fill-opacity:1;stroke:none;stroke-width:10;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none"
       id="path4135"
       d="m 212.27677,-529.63785 0,382.36913 1574.78513,0 0,-382.36913 z"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccc" />
    <path
       style="opacity:1;fill:none;fill-opacity:0.28037385;stroke:#000000;stroke-width:70;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none"
       d="m 213.10529,52.362159 0,-581.999999 1573.78941,0 0,581.999999 0,582.000001 -1186.8947,0 0,-790.394 0,790.394 -386.89471,0 0,-401.56446 1573.78941,0 -1573.78941,0 z"
       id="rect4139"
       inkscape:connector-curvature="0"
       sodipodi:nodetypes="ccccccccccscc" />
  </g>
</svg>
`,Ag=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="2000"
   height="2000"
   viewBox="0 0 2000 2000"
   id="svg2"
   version="1.1">
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     id="layer6"
     style="display:inline">
    <path
       id="path4170"
       d="M 825.74609 438.17383 C 825.69979 475.1723 825.7563 512.17163 825.85156 549.16992 C 794.29829 558.09661 765.46524 570.55412 738.23633 585.81445 L 658.6543 507.18945 L 509.84766 656.85742 L 589.42383 735.46875 C 574.05216 763.02029 562.04871 792.29945 553.67188 822.71094 L 440.94727 822.91602 L 440.94727 1033.7051 L 554.84961 1033.2949 C 565.26551 1074.5933 587.93422 1111.7201 610.51172 1144.918 L 610.51172 963.09375 L 510.94727 963.45117 L 510.94727 892.78906 L 610.01562 892.60938 L 615.57617 864.4375 C 623.68569 823.35291 639.74603 784.18805 662.82031 749.14453 L 678.60547 725.17188 L 609.00195 656.41016 L 659.0957 606.02539 L 728.82617 674.91797 L 752.55664 659.08203 C 788.8205 635.15649 828.48451 619.11851 868.03711 610.76562 L 895.99609 604.96094 L 895.74609 508.17578 L 967.71289 508.17578 L 967.15625 604.45703 L 995.58398 604.45703 L 1155.9902 604.45703 C 1138.2768 583.31338 1064.8698 555.79938 1037.4824 548.13281 L 1038.1172 438.17578 C 959.71716 438.17378 898.25174 438.18016 825.74609 438.17383 z M 1024.9043 639.83203 L 1025.1914 750.82422 C 993.63698 759.75091 964.80383 772.20673 937.57422 787.46875 L 857.99023 708.84375 L 709.18359 858.51172 L 788.76172 937.12305 C 773.38937 964.67608 761.38462 993.9543 753.00781 1024.3672 L 640.28516 1024.5703 L 640.28516 1235.3594 L 754.18555 1234.9512 C 763.15098 1266.2082 775.57969 1294.751 790.81055 1321.6973 L 709.31641 1402.873 L 859.78125 1550.752 L 940.98242 1469.9277 C 968.79672 1485.3724 998.3629 1497.3637 1029.0156 1505.709 L 1029.0684 1620.4219 C 1101.4601 1621.0557 1178.5354 1620.7292 1240.4043 1620.7227 L 1240.4043 1504.6523 C 1271.9821 1495.7485 1300.9053 1483.2014 1328.1406 1467.9473 L 1409.2754 1547.9434 L 1558.1797 1398.4629 L 1476.875 1318.3398 C 1492.282 1290.7142 1504.2874 1261.3861 1512.6738 1230.9414 L 1623.0527 1230.2598 L 1623.0527 1019.6738 L 1511.4355 1020.3535 C 1502.4631 989.06652 1490.2142 960.71674 1474.7812 933.5918 L 1551.9023 856.27344 L 1401.5215 708.14258 L 1324.5 785.42773 C 1296.7997 770.10877 1267.3537 758.14537 1236.8203 749.78906 L 1237.4531 639.83203 L 1024.9043 639.83203 z M 1095.084 709.83203 L 1167.0508 709.83203 L 1166.4961 806.11523 L 1194.9219 811.69336 C 1236.1943 819.79239 1275.7525 835.83275 1310.9375 858.76562 L 1334.7617 874.29492 L 1401.9785 806.84961 L 1452.5957 856.71094 L 1385.2852 924.19336 L 1401.4805 948.09961 C 1425.2452 983.9725 1441.0088 1022.7495 1449.9082 1062.6797 L 1455.7637 1090.6914 L 1553.0449 1090.0996 L 1553.0449 1160.6895 L 1456.3066 1161.2852 L 1450.75 1189.2969 C 1442.5902 1230.4276 1426.5649 1269.591 1403.4512 1304.6953 L 1387.6484 1328.7012 L 1458.9062 1398.9238 L 1408.8203 1449.2031 L 1337.5547 1378.9375 L 1313.8652 1394.6758 C 1277.59 1418.3823 1238.2406 1434.7985 1198.541 1442.8867 L 1170.3965 1448.5078 L 1170.3965 1550.7227 C 1151.1555 1550.7694 1130.1656 1550.7393 1099.0273 1550.6953 L 1098.9824 1449.2461 L 1070.7109 1443.7246 C 1029.3808 1435.6538 989.8877 1419.6871 954.76367 1396.6582 L 931.00977 1381.084 L 859.46875 1452.2949 L 808.84375 1402.5371 L 880.48438 1331.1758 L 864.13672 1307.1719 C 840.34989 1271.3777 824.61382 1232.5596 815.69922 1192.6758 L 809.84961 1164.75 L 710.28516 1165.1055 L 710.28516 1094.4453 L 809.35352 1094.2637 L 814.91406 1066.0957 C 823.02364 1025.0108 839.08423 985.84383 862.1582 950.80078 L 877.94336 926.82617 L 808.33789 858.06445 L 858.43164 807.67969 L 928.16406 876.57227 L 951.89453 860.73828 C 988.20439 836.96856 1026.7354 821.19689 1067.375 812.42383 L 1095.3359 806.61914 L 1095.084 709.83203 z M 1132.25 967.03516 C 1045.6031 967.03516 974.61133 1038.0288 974.61133 1124.6758 C 974.61133 1211.3228 1045.6031 1282.3125 1132.25 1282.3125 C 1218.8969 1282.3125 1289.8887 1211.3228 1289.8887 1124.6758 C 1289.8887 1038.0288 1218.8969 967.03516 1132.25 967.03516 z M 1132.25 1037.0352 C 1181.0662 1037.0352 1219.8887 1075.8597 1219.8887 1124.6758 C 1219.8887 1173.4919 1181.0662 1212.3125 1132.25 1212.3125 C 1083.4338 1212.3125 1044.6133 1173.4919 1044.6133 1124.6758 C 1044.6133 1075.8597 1083.4338 1037.0352 1132.25 1037.0352 z "
       style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:70;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" />
  </g>
  <g
     id="layer1"
     transform="translate(0,949.63784)"
     style="display:inline">
    <g
       id="g4137"
       transform="matrix(1.1161206,0,0,1.1161228,91.593841,25.188891)" />
  </g>
</svg>
`,Cg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="2000"
   height="2000"
   viewBox="0 0 2000 2000"
   id="svg2"
   version="1.1"
   inkscape:version="0.91 r"
   sodipodi:docname="send.svg">
  <defs
     id="defs4" />
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.22627417"
     inkscape:cx="1062.5989"
     inkscape:cy="892.16496"
     inkscape:document-units="px"
     inkscape:current-layer="layer4"
     showgrid="true"
     units="px"
     showguides="false"
     inkscape:window-width="1920"
     inkscape:window-height="1028"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:snap-grids="true"
     inkscape:snap-object-midpoints="false">
    <inkscape:grid
       type="xygrid"
       id="grid4008"
       empspacing="20"
       dotted="false" />
  </sodipodi:namedview>
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:groupmode="layer"
     id="layer4"
     inkscape:label="Ebene 1"
     style="display:inline">
    <path
       style="color:#000000;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"
       d="M 198 484 L 1000 938 L 1802 484 L 198 484 z M 200 652 L 200 1548 L 1804 1548 L 1804 652 L 1000 1100 L 200 652 z "
       id="path6822" />
  </g>
</svg>
`,Rg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   version="1.1"
   id="svg2"
   viewBox="0 0 2000 2000"
   height="2000"
   width="2000"
   inkscape:version="0.91 r"
   sodipodi:docname="receive.svg">
  <sodipodi:namedview
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1"
     objecttolerance="10"
     gridtolerance="10"
     guidetolerance="10"
     inkscape:pageopacity="0"
     inkscape:pageshadow="2"
     inkscape:window-width="1630"
     inkscape:window-height="947"
     id="namedview8"
     showgrid="false"
     inkscape:zoom="0.472"
     inkscape:cx="864.05386"
     inkscape:cy="948.4855"
     inkscape:window-x="50"
     inkscape:window-y="50"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer2" />
  <defs
     id="defs4" />
  <metadata
     id="metadata7">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title></dc:title>
        <cc:license
           rdf:resource="https://github.com/bpmn-io/bpmn-font/blob/master/LICENSE" />
        <dc:creator>
          <cc:Agent>
            <dc:title>Jörg Dotzki</dc:title>
          </cc:Agent>
        </dc:creator>
        <dc:subject>
          <rdf:Bag>
            <rdf:li>BPMN</rdf:li>
            <rdf:li>bpmn-io</rdf:li>
            <rdf:li>bpmn.io</rdf:li>
            <rdf:li>Font</rdf:li>
          </rdf:Bag>
        </dc:subject>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     style="display:inline"
     id="layer2">
    <g
       id="g4251">
      <path
         id="path6159"
         style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-width:70;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate"
         d="m 189,465 0,1070 1622,0 0,-1070 -1622,0 z M 356.88086,535 1643.1191,535 1000,958.10547 356.88086,535 Z M 259,554.39648 1000,1041.8945 1741,554.39648 1741,1465 l -1482,0 0,-910.60352 z" />
    </g>
  </g>
</svg>
`,Ig=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="13.758311mm"
   height="13.758311mm"
   viewBox="0 0 13.758311 13.758311"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (e7c3feb1, 2024-10-09)"
   sodipodi:docname="inclusive.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="8.8470394"
     inkscape:cx="30.349136"
     inkscape:cy="27.636364"
     inkscape:window-width="1104"
     inkscape:window-height="784"
     inkscape:window-x="0"
     inkscape:window-y="38"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-101.73231,-141.68439)">
    <path
       style="display:inline;fill:#22242a;stroke-linecap:round;stroke-linejoin:round;stroke-width:0;stroke-dasharray:none;stroke:none"
       d="m 25,10.75 c -7.855252,0 -14.25,6.394748 -14.25,14.25 0,7.855252 6.394748,14.25 14.25,14.25 7.855252,0 14.25,-6.394748 14.25,-14.25 0,-7.855252 -6.394748,-14.25 -14.25,-14.25 z m 0,2.5 c 6.504152,0 11.75,5.245848 11.75,11.75 0,6.504152 -5.245848,11.75 -11.75,11.75 -6.504152,0 -11.75,-5.245848 -11.75,-11.75 0,-6.504152 5.245848,-11.75 11.75,-11.75 z"
       id="path2"
       transform="matrix(0.26458333,0,0,0.26458333,101.99688,141.94896)" />
    <rect
       x="102.52605"
       y="142.47813"
       rx="1.0583333"
       width="12.170834"
       height="12.170834"
       class="djs-outline"
       style="fill:none;stroke-width:0.264583"
       id="rect105" />
  </g>
</svg>
`,zg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="13.758311mm"
   height="13.758311mm"
   viewBox="0 0 13.758311 13.758311"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (e7c3feb1, 2024-10-09)"
   sodipodi:docname="exclusive.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="4.1672912"
     inkscape:cx="41.63376"
     inkscape:cy="36.714497"
     inkscape:window-width="1104"
     inkscape:window-height="719"
     inkscape:window-x="0"
     inkscape:window-y="38"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-101.7323,-141.68439)">
    <path
       style="display:inline;fill:#22242a;stroke-linecap:round;stroke-linejoin:round"
       d="M 16,15 23.428571,24.714286 16,34.428571 h 3.428571 l 5.714286,-7.464228 5.714286,7.464228 h 3.428571 L 26.857143,24.714286 34.285714,15 H 30.857143 L 25.142857,22.464229 19.428571,15 Z"
       id="path1"
       transform="matrix(0.26458333,0,0,0.26458333,101.99687,141.94896)" />
    <rect
       x="102.52604"
       y="142.47813"
       rx="1.0583333"
       width="12.170834"
       height="12.170834"
       class="djs-outline"
       style="fill:none;stroke-width:0.264583"
       id="rect108" />
  </g>
</svg>
`,Ng=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="13.758311mm"
   height="13.758311mm"
   viewBox="0 0 13.758311 13.758311"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (e7c3feb1, 2024-10-09)"
   sodipodi:docname="parallel.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="2.5054948"
     inkscape:cx="-2.1951752"
     inkscape:cy="20.155699"
     inkscape:window-width="1104"
     inkscape:window-height="788"
     inkscape:window-x="0"
     inkscape:window-y="38"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-101.7323,-141.68439)">
    <path
       d="m 108.08229,144.59479 v 3.30729 h -3.3073 v 1.32292 h 3.3073 v 3.30729 h 1.32291 V 149.225 h 3.30729 v -1.32292 h -3.30729 v -3.30729 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path109" />
    <rect
       x="102.52604"
       y="142.47813"
       rx="1.0583333"
       width="12.170834"
       height="12.170834"
       class="djs-outline"
       style="fill:none;stroke-width:0.264583"
       id="rect111" />
  </g>
</svg>
`,Lg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="13.758311mm"
   height="13.758311mm"
   viewBox="0 0 13.758311 13.758311"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (e7c3feb1, 2024-10-09)"
   sodipodi:docname="event-based.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="4.3759929"
     inkscape:cx="21.36658"
     inkscape:cy="26.16549"
     inkscape:window-width="1104"
     inkscape:window-height="786"
     inkscape:window-x="0"
     inkscape:window-y="38"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-1969.426,-2186.3844)">
    <circle
       cx="1976.3052"
       cy="2193.2637"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="circle112" />
    <circle
       cx="1976.3052"
       cy="2193.2637"
       r="3.175"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="circle113" />
    <path
       d="m 1974.4531,2192.4698 1.9483,-1.2988 1.9483,1.2988 -0.6494,2.5978 h -2.5978 z"
       style="fill:none;stroke:#22242a;stroke-width:0.529167px;stroke-linecap:round;stroke-linejoin:round"
       id="path113" />
    <rect
       x="1970.2197"
       y="2187.1782"
       rx="1.0583333"
       width="12.170834"
       height="12.170834"
       class="djs-outline"
       style="fill:none;stroke-width:0.264583"
       id="rect114" />
  </g>
</svg>
`,Pg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="13.758311mm"
   height="13.758311mm"
   viewBox="0 0 13.758311 13.758311"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (e7c3feb1, 2024-10-09)"
   sodipodi:docname="complex.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#ffffff"
     bordercolor="#000000"
     borderopacity="0.25"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0.0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     inkscape:zoom="4.8390424"
     inkscape:cx="39.987251"
     inkscape:cy="19.218679"
     inkscape:window-width="1104"
     inkscape:window-height="827"
     inkscape:window-x="0"
     inkscape:window-y="38"
     inkscape:window-maximized="0"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-101.73231,-141.68439)">
    <g
       id="path115"
       style="fill:#22242a;fill-opacity:1;stroke:none;stroke-width:0;stroke-dasharray:none"
       transform="matrix(0.26458333,0,0,0.26458333,-13.62604,-21.563537)">
      <path
         style="fill:#22242a;fill-opacity:1;stroke:none;stroke-width:0;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none"
         d="m 460,631 v 7.11679 l -5.01825,-5.01825 -3.10219,3.10219 5.01825,5.01825 h -7.11679 v 4.37956 h 7.11679 l -5.01825,5.01825 3.10219,3.10219 L 460,648.70073 v 7.11679 h 4.37956 v -7.11679 l 5.01825,5.01825 3.10219,-3.10219 -5.01825,-5.01825 h 7.11679 v -4.37956 h -7.11679 l 5.01825,-5.01825 -3.10219,-3.10219 -5.01825,5.01825 V 631 Z"
         id="path211" />
    </g>
    <rect
       x="102.52604"
       y="142.47813"
       rx="1.0583333"
       width="12.170834"
       height="12.170834"
       class="djs-outline"
       style="fill:none;stroke-width:0.264583"
       id="rect117" />
  </g>
</svg>
`,Dg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="5.0270739mm"
   height="3.7041385mm"
   viewBox="0 0 5.027074 3.7041386"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="compensation.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="8.1336326"
     inkscape:cx="34.547909"
     inkscape:cy="4.3645935"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-29.347596,-154.91356)">
    <path
       d="m 29.479878,156.76563 2.38125,-1.71979 v 3.43958 z m 2.460625,-0.10583 2.301875,-1.61396 v 3.43958 l -2.301875,-1.61396 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path37" />
  </g>
</svg>
`,kg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="4.1010432mm"
   height="5.0270829mm"
   viewBox="0 0 4.1010433 5.0270831"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="conditional.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="8.1336326"
     inkscape:cx="2.3359796"
     inkscape:cy="13.216727"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-156.23646,-112.58021)">
    <path
       d="m 156.36875,112.7125 h 3.83646 v 4.7625 h -3.83646 z m 0.52917,0.79375 h 2.77813 M 156.89792,114.3 h 2.77813 m -2.77813,0.79375 h 2.77813 m -2.77813,0.79375 h 2.77813 m -2.77813,0.79375 h 2.77813 m -2.77813,0.79375 h 2.77813"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path22" />
  </g>
</svg>
`,Fg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="5.5032949mm"
   height="5.2628441mm"
   viewBox="0 0 5.5032951 5.2628442"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="error.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="40.859995"
     inkscape:cy="8.737084"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(24.288738,-155.33712)">
    <path
       d="m -24.156455,160.46768 0.02474,-0.007 1.941829,-2.54284 2.028561,2.37229 1.243621,-4.82082 -1.553289,3.08242 -1.931353,-2.53613 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path34" />
  </g>
</svg>
`,Ug=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="4.4978838mm"
   height="5.5561948mm"
   viewBox="0 0 4.4978839 5.5561949"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="escalation.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="11.040892"
     inkscape:cy="10.910488"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-152.92918,-91.334188)">
    <path
       d="m 155.17812,91.466457 2.11667,5.291667 -2.11667,-1.852084 -2.11667,1.852084 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path31" />
  </g>
</svg>
`,Og=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="16.267265"
     inkscape:cx="12.663468"
     inkscape:cy="14.35398"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(207.23489,-211.8651)">
    <circle
       cx="-203.0677"
       cy="216.03229"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle50" />
  </g>
</svg>
`,Bg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-compensation.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="55.46527"
     inkscape:cy="20.212657"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(69.65157,-208.95468)">
    <circle
       cx="-65.484383"
       cy="213.12187"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle87" />
    <path
       d="m -68.151379,213.12187 2.38125,-1.71979 v 3.43958 z m 2.460625,-0.10583 2.301875,-1.61396 v 3.43958 l -2.301875,-1.61396 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path87" />
  </g>
</svg>
`,Vg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-conditional.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="17.561104"
     inkscape:cy="19.864912"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-91.215099,-208.95468)">
    <circle
       cx="95.382286"
       cy="213.12187"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle78" />
    <path
       d="m 93.397914,210.60833 h 3.836458 v 4.7625 h -3.836458 z m 0.529167,0.79375 h 2.778125 m -2.778125,0.79375 h 2.778125 m -2.778125,0.79375 h 2.778125 m -2.778125,0.79375 h 2.778125 m -2.778125,0.79375 h 2.778125 m -2.778125,0.79375 h 2.778125"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path78" />
  </g>
</svg>
`,Hg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-escalation.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="-12.779615"
     inkscape:cy="20.386529"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-371.14427,-181.43802)">
    <circle
       cx="375.31146"
       cy="185.60521"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle75" />
    <path
       d="m 375.31146,182.74771 2.11667,5.29167 -2.11667,-1.85209 -2.11667,1.85209 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path75" />
  </g>
</svg>
`,Gg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-link-catch.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="-16.343997"
     inkscape:cy="17.778444"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-235.14843,-194.93177)">
    <circle
       cx="239.31561"
       cy="199.09895"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle81" />
    <path
       d="m 239.98237,196.84153 v 1.17409 h -3.57188 v 1.78594 h 3.57188 v 1.17409 l 2.60449,-2.06706 z"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path81" />
  </g>
</svg>
`,Wg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-link-throw.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="32.687996"
     inkscape:cy="14.127126"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(119.65781,-208.95468)">
    <circle
       cx="-115.49062"
       cy="213.12187"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle84" />
    <path
       d="m -114.82387,210.86444 v 1.17409 h -3.57188 v 1.78594 h 3.57188 v 1.17409 l 2.60449,-2.06706 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path84" />
  </g>
</svg>
`,Xg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-receive.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="21.386294"
     inkscape:cy="10.301934"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-75.075519,-224.82968)">
    <circle
       cx="79.242706"
       cy="228.99687"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle53" />
    <path
       d="m 76.718582,227.23474 v 3.33375 h 5.000625 v -3.33375 z m 0,0 2.500312,1.42875 2.500313,-1.42875"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path53" />
  </g>
</svg>
`,Yg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-send.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="16"
     inkscape:cx="-5.25"
     inkscape:cy="14.84375"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="path56" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-232.76718,-160.00678)">
    <circle
       cx="236.93437"
       cy="164.17397"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle56" />
    <g
       id="path56">
      <path
         style="fill:none;stroke-linecap:round;stroke-linejoin:round;stroke:none"
         d="m 234.41024,162.41183 v 3.33375 h 5.00063 v -3.33375 z m 0,0 2.50032,1.42875"
         id="path1"
         sodipodi:nodetypes="ccccccc" />
      <g
         id="g4"
         transform="translate(201.87036,-55.570754)">
        <path
           d="m 32.666222,218.20322 v 2.97242 h 4.736145 v -2.97242 l -2.302701,1.31413 a 0.13230472,0.13230472 0 0 1 -0.130742,0 z"
           style="baseline-shift:baseline;display:inline;overflow:visible;vector-effect:none;fill:#22242a;fill-opacity:1;stroke-linecap:round;stroke-linejoin:round;enable-background:accumulate;stop-color:#000000;stop-opacity:1"
           id="path4" />
        <path
           d="m 33.033125,218.10761 1.999878,1.14257 2.001945,-1.14257 z"
           style="baseline-shift:baseline;display:inline;overflow:visible;vector-effect:none;fill:#22242a;fill-opacity:1;stroke-linecap:round;stroke-linejoin:round;enable-background:accumulate;stop-color:#000000;stop-opacity:1"
           id="path3" />
      </g>
    </g>
  </g>
</svg>
`,$g=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-signal-catch.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="40.164504"
     inkscape:cy="13.083891"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-0.19843645,-215.30468)">
    <circle
       cx="4.365624"
       cy="219.47186"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle90" />
    <path
       d="m 4.3656239,216.61437 2.38125,4.28625 h -4.7625 z"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path90" />
  </g>
</svg>
`,Zg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-signal-throw.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="8.1336326"
     inkscape:cx="32.334876"
     inkscape:cy="-6.7005731"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-53.115108,-210.80677)">
    <circle
       cx="57.282295"
       cy="214.97395"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle93" />
    <path
       d="m 57.282297,212.11646 2.38125,4.28625 h -4.7625 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path93" />
  </g>
</svg>
`,jg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="8.3343754mm"
   height="8.3343754mm"
   viewBox="0 0 8.3343756 8.3343756"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="intermediate-timer.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="25.298421"
     inkscape:cy="14.561806"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(28.111983,-209.21927)">
    <circle
       cx="-23.944796"
       cy="213.38646"
       r="3.96875"
       style="fill:none;stroke:#22242a;stroke-width:0.396875px;stroke-linecap:round;stroke-linejoin:round"
       id="circle59" />
    <circle
       cx="-23.944796"
       cy="213.38646"
       r="2.9104166"
       style="fill:none;stroke:#22242a;stroke-width:0.529167px;stroke-linecap:round;stroke-linejoin:round"
       id="circle60" />
    <path
       d="m -23.944795,213.38646 0.595312,-1.98438 m -0.595312,1.98438 1.389062,0.39687"
       style="fill:none;stroke:#22242a;stroke-width:0.529167px;stroke-linecap:round;stroke-linejoin:round"
       id="path60" />
    <path
       d="m -23.944795,213.38646 m 0,1.98437 v 0.59532"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path61" />
    <path
       d="m -23.944795,213.38646 m -0.992187,1.71852 -0.297657,0.51555"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path62" />
    <path
       d="m -23.944795,213.38646 m -1.718519,0.99218 -0.515556,0.29766"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path63" />
    <path
       d="m -23.944795,213.38646 m -1.984375,0 h -0.595312"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path64" />
    <path
       d="m -23.944795,213.38646 m -1.718519,-0.99219 -0.515556,-0.29766"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path65" />
    <path
       d="m -23.944795,213.38646 m -0.992187,-1.71852 -0.297657,-0.51555"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path66" />
    <path
       d="m -23.944795,213.38646 m 0,-1.98437 v -0.59532"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path67" />
    <path
       d="m -23.944795,213.38646 m 0.992187,-1.71852 0.297657,-0.51555"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path68" />
    <path
       d="m -23.944795,213.38646 m 1.718519,-0.99218 0.515556,-0.29766"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path69" />
    <path
       d="m -23.944795,213.38646 m 1.984375,0 h 0.595312"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path70" />
    <path
       d="m -23.944795,213.38646 m 1.718519,0.99219 0.515556,0.29766"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path71" />
    <path
       d="m -23.944795,213.38646 m 0.992187,1.71852 0.297657,0.51555"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path72" />
  </g>
</svg>
`,Jg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="13.49375mm"
   height="13.49375mm"
   viewBox="0 0 13.49375 13.49375"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="message-end.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="32.53453"
     inkscape:cx="25.972405"
     inkscape:cy="22.453067"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-28.310416,-212.98958)">
    <g
       id="g4">
      <path
         d="m 32.666222,218.20322 v 2.97242 h 4.736145 v -2.97242 l -2.302701,1.31413 a 0.13230472,0.13230472 0 0 1 -0.130742,0 z"
         style="baseline-shift:baseline;display:inline;overflow:visible;vector-effect:none;fill:#22242a;stroke-linecap:round;stroke-linejoin:round;enable-background:accumulate;stop-color:#000000;stop-opacity:1;fill-opacity:1"
         id="path4" />
      <path
         d="m 33.033125,218.10761 1.999878,1.14257 2.001945,-1.14257 z"
         style="baseline-shift:baseline;display:inline;overflow:visible;vector-effect:none;fill:#22242a;stroke-linecap:round;stroke-linejoin:round;enable-background:accumulate;stop-color:#000000;stop-opacity:1;fill-opacity:1"
         id="path3" />
    </g>
  </g>
</svg>
`,Kg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="5.2652082mm"
   height="3.5983334mm"
   viewBox="0 0 5.2652084 3.5983335"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="message-start.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="23.559698"
     inkscape:cy="12.21453"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="svg1" />
  <defs
     id="defs1" />
  <path
     d="M 0.13229166,0.13229167 V 3.4660416 H 5.1329166 V 0.13229166 Z m 0,0 L 2.6326041,1.5610416 5.1329166,0.13229167"
     style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
     id="path4" />
</svg>
`,Qg=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="5.0270643mm"
   height="4.5508189mm"
   viewBox="0 0 5.0270645 4.550819"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="signal-end.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="11.562509"
     inkscape:cy="10.128063"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-93.92709,-150.86543)">
    <path
       d="m 96.440622,150.99771 2.38125,4.28625 h -4.7625 z"
       style="fill:#22242a;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path43" />
  </g>
</svg>
`,ex=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="5.0270643mm"
   height="4.5508189mm"
   viewBox="0 0 5.0270645 4.550819"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="signal-start.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="8.1336326"
     inkscape:cx="3.31955"
     inkscape:cy="27.72439"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-122.5021,-95.038348)">
    <path
       d="m 125.01563,95.170625 2.38125,4.28625 h -4.7625 z"
       style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
       id="path40" />
  </g>
</svg>
`,tx=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="6.3499966mm"
   height="6.3499966mm"
   viewBox="0 0 6.3499967 6.3499967"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="terminate.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="16.267265"
     inkscape:cx="0.67620462"
     inkscape:cy="9.6820208"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-148.82811,-151.73855)">
    <circle
       cx="152.00311"
       cy="154.91354"
       r="2.6458333"
       style="fill:#22242a;stroke:#22242a;stroke-width:1.05833px;stroke-linecap:round;stroke-linejoin:round"
       id="circle47" />
  </g>
</svg>
`,nx=`<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="6.3499999mm"
   height="6.3499999mm"
   viewBox="0 0 6.3500001 6.3500001"
   version="1.1"
   id="svg1"
   inkscape:version="1.4 (86a8ad7, 2024-10-11)"
   sodipodi:docname="timer.svg"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview1"
     pagecolor="#505050"
     bordercolor="#eeeeee"
     borderopacity="1"
     inkscape:showpageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="0"
     inkscape:deskcolor="#505050"
     inkscape:document-units="mm"
     inkscape:zoom="11.502694"
     inkscape:cx="-3.2166378"
     inkscape:cy="17.169891"
     inkscape:window-width="2560"
     inkscape:window-height="1009"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1" />
  <defs
     id="defs1" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-129.24896,-55.430208)">
    <g
       id="g1">
      <circle
         cx="132.42397"
         cy="58.605209"
         r="2.9104166"
         style="fill:none;stroke:#22242a;stroke-width:0.529167px;stroke-linecap:round;stroke-linejoin:round"
         id="circle8" />
      <path
         d="m 132.42396,58.605208 0.59531,-1.984375 m -0.59531,1.984375 1.38906,0.396875"
         style="fill:none;stroke:#22242a;stroke-width:0.529167px;stroke-linecap:round;stroke-linejoin:round"
         id="path8" />
      <path
         d="m 132.42396,58.605208 m 0,1.984375 v 0.595312"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path9" />
      <path
         d="m 132.42396,58.605208 m -0.99219,1.718519 -0.29766,0.515556"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path10" />
      <path
         d="m 132.42396,58.605208 m -1.71852,0.992188 -0.51555,0.297656"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path11" />
      <path
         d="m 132.42396,58.605208 m -1.98437,0 h -0.59532"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path12" />
      <path
         d="m 132.42396,58.605208 m -1.71852,-0.992187 -0.51555,-0.297657"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path13" />
      <path
         d="m 132.42396,58.605208 m -0.99218,-1.718519 -0.29766,-0.515556"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path14" />
      <path
         d="m 132.42396,58.605208 m 0,-1.984375 v -0.595312"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path15" />
      <path
         d="m 132.42396,58.605208 m 0.99219,-1.718519 0.29766,-0.515556"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path16" />
      <path
         d="m 132.42396,58.605208 m 1.71852,-0.992187 0.51555,-0.297657"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path17" />
      <path
         d="m 132.42396,58.605208 m 1.98437,0 h 0.59532"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path18" />
      <path
         d="m 132.42396,58.605208 m 1.71852,0.992188 0.51555,0.297656"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path19" />
      <path
         d="m 132.42396,58.605208 m 0.99218,1.718519 0.29766,0.515556"
         style="fill:none;stroke:#22242a;stroke-width:0.264583px;stroke-linecap:round;stroke-linejoin:round"
         id="path20" />
    </g>
  </g>
</svg>
`;var z0={exports:{}},o7;function ix(){return o7||(o7=1,function(r,e){var t=t||function(){var n=[];return{getAll:function(){return n},removeAll:function(){n=[]},add:function(i){n.push(i)},remove:function(i){var s=n.indexOf(i);s!==-1&&n.splice(s,1)},update:function(i,s){if(n.length===0)return!1;var o=0;for(i=i!==void 0?i:t.now();o<n.length;)n[o].update(i)||s?o++:n.splice(o,1);return!0}}}();typeof window>"u"&&typeof process<"u"?t.now=function(){var n=process.hrtime();return n[0]*1e3+n[1]/1e6}:typeof window<"u"&&window.performance!==void 0&&window.performance.now!==void 0?t.now=window.performance.now.bind(window.performance):Date.now!==void 0?t.now=Date.now:t.now=function(){return new Date().getTime()},t.Tween=function(n){var i=n,s={},o={},a={},l=1e3,c=0,h,u=!1,d=!1,q=0,m=null,g=t.Easing.Linear.None,p=t.Interpolation.Linear,f=[],v=null,y=!1,_=null,T=null,E=null;this.to=function(S,I){return o=S,I!==void 0&&(l=I),this},this.start=function(S){t.add(this),d=!0,y=!1,m=S!==void 0?S:t.now(),m+=q;for(var I in o){if(o[I]instanceof Array){if(o[I].length===0)continue;o[I]=[i[I]].concat(o[I])}i[I]!==void 0&&(s[I]=i[I],s[I]instanceof Array||(s[I]*=1),a[I]=s[I]||0)}return this},this.stop=function(){return d?(t.remove(this),d=!1,E!==null&&E.call(i,i),this.stopChainedTweens(),this):this},this.end=function(){return this.update(m+l),this},this.stopChainedTweens=function(){for(var S=0,I=f.length;S<I;S++)f[S].stop()},this.delay=function(S){return q=S,this},this.repeat=function(S){return c=S,this},this.repeatDelay=function(S){return h=S,this},this.yoyo=function(S){return u=S,this},this.easing=function(S){return g=S,this},this.interpolation=function(S){return p=S,this},this.chain=function(){return f=arguments,this},this.onStart=function(S){return v=S,this},this.onUpdate=function(S){return _=S,this},this.onComplete=function(S){return T=S,this},this.onStop=function(S){return E=S,this},this.update=function(S){var I,w,x;if(S<m)return!0;y===!1&&(v!==null&&v.call(i,i),y=!0),w=(S-m)/l,w=w>1?1:w,x=g(w);for(I in o)if(s[I]!==void 0){var C=s[I]||0,O=o[I];O instanceof Array?i[I]=p(O,x):(typeof O=="string"&&(O.charAt(0)==="+"||O.charAt(0)==="-"?O=C+parseFloat(O):O=parseFloat(O)),typeof O=="number"&&(i[I]=C+(O-C)*x))}if(_!==null&&_.call(i,x),w===1)if(c>0){isFinite(c)&&c--;for(I in a){if(typeof o[I]=="string"&&(a[I]=a[I]+parseFloat(o[I])),u){var U=a[I];a[I]=o[I],o[I]=U}s[I]=a[I]}return h!==void 0?m=S+h:m=S+q,!0}else{T!==null&&T.call(i,i);for(var B=0,P=f.length;B<P;B++)f[B].start(m+l);return!1}return!0}},t.Easing={Linear:{None:function(n){return n}},Quadratic:{In:function(n){return n*n},Out:function(n){return n*(2-n)},InOut:function(n){return(n*=2)<1?.5*n*n:-.5*(--n*(n-2)-1)}},Cubic:{In:function(n){return n*n*n},Out:function(n){return--n*n*n+1},InOut:function(n){return(n*=2)<1?.5*n*n*n:.5*((n-=2)*n*n+2)}},Quartic:{In:function(n){return n*n*n*n},Out:function(n){return 1- --n*n*n*n},InOut:function(n){return(n*=2)<1?.5*n*n*n*n:-.5*((n-=2)*n*n*n-2)}},Quintic:{In:function(n){return n*n*n*n*n},Out:function(n){return--n*n*n*n*n+1},InOut:function(n){return(n*=2)<1?.5*n*n*n*n*n:.5*((n-=2)*n*n*n*n+2)}},Sinusoidal:{In:function(n){return 1-Math.cos(n*Math.PI/2)},Out:function(n){return Math.sin(n*Math.PI/2)},InOut:function(n){return .5*(1-Math.cos(Math.PI*n))}},Exponential:{In:function(n){return n===0?0:Math.pow(1024,n-1)},Out:function(n){return n===1?1:1-Math.pow(2,-10*n)},InOut:function(n){return n===0?0:n===1?1:(n*=2)<1?.5*Math.pow(1024,n-1):.5*(-Math.pow(2,-10*(n-1))+2)}},Circular:{In:function(n){return 1-Math.sqrt(1-n*n)},Out:function(n){return Math.sqrt(1- --n*n)},InOut:function(n){return(n*=2)<1?-.5*(Math.sqrt(1-n*n)-1):.5*(Math.sqrt(1-(n-=2)*n)+1)}},Elastic:{In:function(n){return n===0?0:n===1?1:-Math.pow(2,10*(n-1))*Math.sin((n-1.1)*5*Math.PI)},Out:function(n){return n===0?0:n===1?1:Math.pow(2,-10*n)*Math.sin((n-.1)*5*Math.PI)+1},InOut:function(n){return n===0?0:n===1?1:(n*=2,n<1?-.5*Math.pow(2,10*(n-1))*Math.sin((n-1.1)*5*Math.PI):.5*Math.pow(2,-10*(n-1))*Math.sin((n-1.1)*5*Math.PI)+1)}},Back:{In:function(n){var i=1.70158;return n*n*((i+1)*n-i)},Out:function(n){var i=1.70158;return--n*n*((i+1)*n+i)+1},InOut:function(n){var i=2.5949095;return(n*=2)<1?.5*(n*n*((i+1)*n-i)):.5*((n-=2)*n*((i+1)*n+i)+2)}},Bounce:{In:function(n){return 1-t.Easing.Bounce.Out(1-n)},Out:function(n){return n<1/2.75?7.5625*n*n:n<2/2.75?7.5625*(n-=1.5/2.75)*n+.75:n<2.5/2.75?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375},InOut:function(n){return n<.5?t.Easing.Bounce.In(n*2)*.5:t.Easing.Bounce.Out(n*2-1)*.5+.5}}},t.Interpolation={Linear:function(n,i){var s=n.length-1,o=s*i,a=Math.floor(o),l=t.Interpolation.Utils.Linear;return i<0?l(n[0],n[1],o):i>1?l(n[s],n[s-1],s-o):l(n[a],n[a+1>s?s:a+1],o-a)},Bezier:function(n,i){for(var s=0,o=n.length-1,a=Math.pow,l=t.Interpolation.Utils.Bernstein,c=0;c<=o;c++)s+=a(1-i,o-c)*a(i,c)*n[c]*l(o,c);return s},CatmullRom:function(n,i){var s=n.length-1,o=s*i,a=Math.floor(o),l=t.Interpolation.Utils.CatmullRom;return n[0]===n[s]?(i<0&&(a=Math.floor(o=s*(1+i))),l(n[(a-1+s)%s],n[a],n[(a+1)%s],n[(a+2)%s],o-a)):i<0?n[0]-(l(n[0],n[0],n[1],n[1],-o)-n[0]):i>1?n[s]-(l(n[s],n[s],n[s-1],n[s-1],o-s)-n[s]):l(n[a?a-1:0],n[a],n[s<a+1?s:a+1],n[s<a+2?s:a+2],o-a)},Utils:{Linear:function(n,i,s){return(i-n)*s+n},Bernstein:function(n,i){var s=t.Interpolation.Utils.Factorial;return s(n)/s(i)/s(n-i)},Factorial:function(){var n=[1];return function(i){var s=1;if(n[i])return n[i];for(var o=i;o>1;o--)s*=o;return n[i]=s,s}}(),CatmullRom:function(n,i,s,o,a){var l=(s-n)*.5,c=(o-i)*.5,h=a*a,u=a*h;return(2*i-2*s+l+c)*u+(-3*i+3*s-2*l-c)*h+l*a+i}}},function(n){r.exports=t}()}(z0)),z0.exports}ix();class Je extends ug{constructor(e){super(e)}static get Dimensions(){return{DISTANCE_BETWEEN_ELEMENTS:wn.DISTANCE_BETWEEN_ELEMENTS,START_EVENT_LINE_WIDTH:1,END_EVENT_LINE_WIDTH:2.4,ICON_SIZE_SMALL:10,ICON_SIZE_MEDIUM:18,ICON_SIZE_LARGE:30}}addStartEvent(e){return this.addElement(new Ye(e,new wt))}addMessageStartEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Kg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addTimerStartEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(nx,"center",Je.Dimensions.ICON_SIZE_LARGE)}addConditionalStartEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(kg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addSignalStartEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(ex,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addIntermediateEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Og,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateMessageCatchEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Xg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateMessageThrowEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Yg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateTimerEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(jg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateEscalationEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Hg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateConditionalEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Vg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateLinkCatchEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Gg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateLinkThrowEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Wg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateCompensationEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Bg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateSignalCatchEvent(e){return this.addElement(new Ye(e,new wt)).addIcon($g,"center",Je.Dimensions.ICON_SIZE_LARGE)}addIntermediateSignalThrowEvent(e){return this.addElement(new Ye(e,new wt)).addIcon(Zg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH)))}addMessageEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH))).addIcon(Jg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addEscalationEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH))).addIcon(Ug,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addErrorEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH))).addIcon(Fg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addCompensateEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH))).addIcon(Dg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addSignalEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH))).addIcon(Qg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addTerminateEndEvent(e){return this.addElement(new Ye(e,new wt(Je.Dimensions.END_EVENT_LINE_WIDTH))).addIcon(tx,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addTask(e){return this.addElement(new Ye(e,new H1))}addManualTask(e){return this.addElement(new Ye(e,new H1)).addIcon(Sg,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addUserTask(e){return this.addElement(new Ye(e,new H1)).addIcon(bg,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addScriptTask(e){return this.addElement(new Ye(e,new H1)).addIcon(Eg,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addBusinessRuleTask(e){return this.addElement(new Ye(e,new H1)).addIcon(Tg,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addServiceTask(e){return this.addElement(new Ye(e,new H1)).addIcon(Ag,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addSendTask(e){return this.addElement(new Ye(e,new H1)).addIcon(Cg,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addReceiveTask(e){return this.addElement(new Ye(e,new H1)).addIcon(Rg,"top-left",Je.Dimensions.ICON_SIZE_SMALL)}addGateway(e){return this.addExclusiveGateway(e)}addInclusiveGateway(e){return this.addElement(new Ye(e,new wr)).addIcon(Ig,"center",Je.Dimensions.ICON_SIZE_LARGE)}addExclusiveGateway(e){return this.addElement(new Ye(e,new wr)).addIcon(zg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addParallelGateway(e){return this.addElement(new Ye(e,new wr)).addIcon(Ng,"center",Je.Dimensions.ICON_SIZE_LARGE)}addEventBasedGateway(e){return this.addElement(new Ye(e,new wr)).addIcon(Lg,"center",Je.Dimensions.ICON_SIZE_LARGE)}addComplexGateway(e){return this.addElement(new Ye(e,new wr)).addIcon(Pg,"center",Je.Dimensions.ICON_SIZE_MEDIUM)}addFlowConnector(e,t){return this.addConnector(new I0(e,new R0(t)))}import(e){if(!e){console.error("No file provided for import.");return}const t=new FileReader;t.onload=n=>{if(e.name.endsWith(".bpmn")){const s=new DOMParser().parseFromString(n.target.result,"text/xml");console.log(s),this.buildDiagram(s)}else console.warn("File format not supported.")},t.readAsText(e)}buildDiagram(e){const t="http://www.omg.org/spec/BPMN/20100524/MODEL",n="http://www.omg.org/spec/BPMN/20100524/DI",i="http://www.omg.org/spec/DD/20100524/DC",s="http://www.omg.org/spec/DD/20100524/DI",o=e.getElementsByTagNameNS(t,"startEvent");for(let x=0;x<o.length;x++){const C=o[x].getAttribute("id");console.log("startEventId:",C);const O=o[x].getElementsByTagNameNS(t,"name");console.log("name:",O);const U=o[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=o[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);o[x].getElementsByTagNameNS(t,"messageEventDefinition").length>0?this.addMessageStartEvent(C):o[x].getElementsByTagNameNS(t,"timerEventDefinition").length>0?this.addTimerStartEvent(C):o[x].getElementsByTagNameNS(t,"conditionalEventDefinition").length>0?this.addConditionalStartEvent(C):o[x].getElementsByTagNameNS(t,"signalEventDefinition").length>0?this.addSignalStartEvent(C):this.addStartEvent(C)}const a=e.getElementsByTagNameNS(t,"endEvent");for(let x=0;x<a.length;x++){const C=a[x].getAttribute("id");console.log("endEventId:",C);const O=a[x].getElementsByTagNameNS(t,"name");console.log("name:",O);const U=a[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=a[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);a[x].getElementsByTagNameNS(t,"messageEventDefinition").length>0?this.addMessageEndEvent(C):a[x].getElementsByTagNameNS(t,"escalationEventDefinition").length>0?this.addEscalationEndEvent(C):a[x].getElementsByTagNameNS(t,"errorEventDefinition").length>0?this.addErrorEndEvent(C):a[x].getElementsByTagNameNS(t,"compensateEventDefinition").length>0?this.addCompensateEndEvent(C):a[x].getElementsByTagNameNS(t,"signalEventDefinition").length>0?this.addSignalEndEvent(C):a[x].getElementsByTagNameNS(t,"terminateEventDefinition").length>0?this.addTerminateEndEvent(C):this.addEndEvent(C)}const l=e.getElementsByTagNameNS(t,"intermediateCatchEvent");for(let x=0;x<l.length;x++){const C=l[x].getAttribute("id");console.log("intermediateCatchEventId:",C);const O=l[x].getElementsByTagNameNS(t,"name");console.log("name:",O);const U=l[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=l[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);l[x].getElementsByTagNameNS(t,"messageEventDefinition").length>0?this.addIntermediateMessageCatchEvent(C):l[x].getElementsByTagNameNS(t,"timerEventDefinition").length>0?this.addIntermediateTimerEvent(C):l[x].getElementsByTagNameNS(t,"conditionalEventDefinition").length>0?this.addIntermediateConditionalEvent(C):l[x].getElementsByTagNameNS(t,"linkEventDefinition").length>0?this.addIntermediateLinkCatchEvent(C):l[x].getElementsByTagNameNS(t,"signalEventDefinition").length>0?this.addIntermediateSignalCatchEvent(C):this.addIntermediateEvent(C)}const c=e.getElementsByTagNameNS(t,"intermediateThrowEvent");for(let x=0;x<c.length;x++){const C=c[x].getAttribute("id");console.log("intermediateThrowEventId:",C);const O=c[x].getElementsByTagNameNS(t,"name");console.log("name:",O);const U=c[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=c[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);c[x].getElementsByTagNameNS(t,"messageEventDefinition").length>0?this.addIntermediateMessageThrowEvent(C):c[x].getElementsByTagNameNS(t,"escalationEventDefinition").length>0?this.addIntermediateEscalationEvent(C):c[x].getElementsByTagNameNS(t,"linkEventDefinition").length>0?this.addIntermediateLinkThrowEvent(C):c[x].getElementsByTagNameNS(t,"compensateEventDefinition").length>0?this.addIntermediateCompensationEvent(C):c[x].getElementsByTagNameNS(t,"signalEventDefinition").length>0?this.addIntermediateSignalThrowEvent(C):this.addIntermediateEvent(C)}const h=e.getElementsByTagNameNS(t,"task");for(let x=0;x<h.length;x++){const C=h[x].getAttribute("id");console.log("taskId:",C);const O=h[x].getAttribute("name");console.log("name:",O);const U=h[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=h[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addTask(C).addWrappedText(O)}const u=e.getElementsByTagNameNS(t,"manualTask");for(let x=0;x<u.length;x++){const C=u[x].getAttribute("id");console.log("manualTaskId:",C);const O=u[x].getAttribute("name");console.log("name:",O);const U=u[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=u[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addManualTask(C).addWrappedText(O)}const d=e.getElementsByTagNameNS(t,"userTask");for(let x=0;x<d.length;x++){const C=d[x].getAttribute("id");console.log("userTaskId:",C);const O=d[x].getAttribute("name");console.log("name:",O);const U=d[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=d[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addUserTask(C).addWrappedText(O)}const q=e.getElementsByTagNameNS(t,"scriptTask");for(let x=0;x<q.length;x++){const C=q[x].getAttribute("id");console.log("scriptTaskId:",C);const O=q[x].getAttribute("name");console.log("name:",O);const U=q[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=q[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addScriptTask(C).addWrappedText(O)}const m=e.getElementsByTagNameNS(t,"businessRuleTask");for(let x=0;x<m.length;x++){const C=m[x].getAttribute("id");console.log("businessRuleTaskId:",C);const O=m[x].getAttribute("name");console.log("name:",O);const U=m[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=m[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addBusinessRuleTask(C).addWrappedText(O)}const g=e.getElementsByTagNameNS(t,"serviceTask");for(let x=0;x<g.length;x++){const C=g[x].getAttribute("id");console.log("serviceTaskId:",C);const O=g[x].getAttribute("name");console.log("name:",O);const U=g[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=g[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addServiceTask(C).addWrappedText(O)}const p=e.getElementsByTagNameNS(t,"sendTask");for(let x=0;x<p.length;x++){const C=p[x].getAttribute("id");console.log("sendTaskId:",C);const O=p[x].getAttribute("name");console.log("name:",O);const U=p[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=p[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addSendTask(C).addWrappedText(O)}const f=e.getElementsByTagNameNS(t,"receiveTask");for(let x=0;x<f.length;x++){const C=f[x].getAttribute("id");console.log("receiveTaskId:",C);const O=f[x].getAttribute("name");console.log("name:",O);const U=f[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=f[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addReceiveTask(C).addWrappedText(O)}const v=e.getElementsByTagNameNS(t,"inclusiveGateway");for(let x=0;x<v.length;x++){const C=v[x].getAttribute("id");console.log("gatewayId:",C);const O=v[x].getAttribute("name");console.log("name:",O);const U=v[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=v[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addInclusiveGateway(C)}const y=e.getElementsByTagNameNS(t,"exclusiveGateway");for(let x=0;x<y.length;x++){const C=y[x].getAttribute("id");console.log("gatewayId:",C);const O=y[x].getAttribute("name");console.log("name:",O);const U=y[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=y[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addExclusiveGateway(C)}const _=e.getElementsByTagNameNS(t,"parallelGateway");for(let x=0;x<_.length;x++){const C=_[x].getAttribute("id");console.log("gatewayId:",C);const O=_[x].getAttribute("name");console.log("name:",O);const U=_[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=_[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addParallelGateway(C)}const T=e.getElementsByTagNameNS(t,"eventBasedGateway");for(let x=0;x<T.length;x++){const C=T[x].getAttribute("id");console.log("gatewayId:",C);const O=T[x].getAttribute("name");console.log("name:",O);const U=T[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=T[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addEventBasedGateway(C)}const E=e.getElementsByTagNameNS(t,"complexGateway");for(let x=0;x<E.length;x++){const C=E[x].getAttribute("id");console.log("gatewayId:",C);const O=E[x].getAttribute("name");console.log("name:",O);const U=E[x].getElementsByTagNameNS(t,"incoming");console.log("incoming:",U);for(let P=0;P<U.length;P++)console.log("incoming:",U[P].textContent);const B=E[x].getElementsByTagNameNS(t,"outgoing");console.log("outgoing:",B);for(let P=0;P<B.length;P++)console.log("outgoing:",B[P].textContent);this.addComplexGateway(C)}const S=e.getElementsByTagNameNS(t,"sequenceFlow");for(let x=0;x<S.length;x++){const C=S[x].getAttribute("id");console.log("sequenceFlowId:",C);const O=S[x].getAttribute("name");console.log("name:",O);const U=S[x].getAttribute("sourceRef");console.log("sourceRef:",U);const B=S[x].getAttribute("targetRef");console.log("targetRef:",B)}const I=e.getElementsByTagNameNS(n,"BPMNShape");for(let x=0;x<I.length;x++){const C=I[x],O=C.getAttribute("id"),U=C.getAttribute("bpmnElement"),B=C.getElementsByTagNameNS(i,"Bounds")[0];if(B){const P=parseFloat(B.getAttribute("x")),K=parseFloat(B.getAttribute("y"))*-1,ie=parseFloat(B.getAttribute("width")),H=parseFloat(B.getAttribute("height"));console.log(`BPMNShape: ${O}, ${U}, x: ${P}, y: ${K}, width: ${ie}, height: ${H}`);const fe=new L(P+ie/2,K-H/2,0),ge=this.getElementById(U);ge?ge.positionAt(fe):console.warn(`Element with id ${U} not found.`);let ve,De,ke,F;const D=C.getElementsByTagNameNS(n,"BPMNLabel");if(D.length>0){const N=D[0].getElementsByTagNameNS(i,"Bounds")[0];if(N){ve=parseFloat(N.getAttribute("x")),De=parseFloat(N.getAttribute("y"))*-1,ke=parseFloat(N.getAttribute("width")),F=parseFloat(N.getAttribute("height")),console.log(`Label position (Shape): x: ${ve}, y: ${De}, width: ${ke}, height: ${F}`);const Q=e.getElementById(U).getAttribute("name");if(console.log(`bpmnElementName: ${Q}`),Q){const he=new L(ve+ke/2,De-F/2,0);this.addElement(new Ye("t1",new _r(Q))).positionAt(he)}}}}}const w=e.getElementsByTagNameNS(n,"BPMNEdge");for(let x=0;x<w.length;x++){const C=w[x],O=C.getAttribute("id"),U=C.getAttribute("bpmnElement"),B=Array.from(S).find(ke=>ke.getAttribute("id")===U),P=B?B.getAttribute("name"):null,K=C.getElementsByTagNameNS(s,"waypoint"),ie=[];for(let ke=0;ke<K.length;ke++){const F=K[ke],D=parseFloat(F.getAttribute("x")),N=parseFloat(F.getAttribute("y"))*-1;ie.push(new $(D,N)),console.log(`BPMNEdge: ${U}, x: ${D}, y: ${N}`)}console.log("connectorPoints:",ie),this.addConnector(this.addFlowConnector(O,ie));let H,fe,ge,ve;const De=C.getElementsByTagNameNS(n,"BPMNLabel");if(De.length>0){const ke=De[0].getElementsByTagNameNS(i,"Bounds")[0];ke&&(H=parseFloat(ke.getAttribute("x")),fe=parseFloat(ke.getAttribute("y"))*-1,ge=parseFloat(ke.getAttribute("width")),ve=parseFloat(ke.getAttribute("height")),console.log(`Label position: x: ${H}, y: ${fe}, width: ${ge}, height: ${ve}`))}if(P){const ke=new L(H+ge/2,fe-ve/2,0);this.addElement(new Ye("t1",new _r(P))).positionAt(ke)}}this.arrange()}}Ti.BpmnDiagram=Je,Object.defineProperty(Ti,Symbol.toStringTag,{value:"Module"})});
